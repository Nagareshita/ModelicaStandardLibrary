{"fqn": "Modelica.Math.Matrices.integralExpT", "kind": "function", "name": "integralExpT", "package_path": ["Modelica", "Math", "Matrices"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [{"name": "na", "type": "Integer", "default": "size(A, 1)", "description": null}, {"name": "nb", "type": "Integer", "default": "size(B, 2)", "description": null}], "equations": [{"equations": ["algorithm\r\n    F := [A, B, zeros(na, nb)", "zeros(2*nb, na), zeros(2*nb, nb), [identity(nb)", "zeros(nb, nb)]]", "F := exp(F, T)", "phi := F[1:na, 1:na]", "gamma := F[1:na, na + 1:na + nb]", "gamma1 := F[1:na, na + nb + 1:na + 2*nb]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3404, "end_line": 3410, "start_col": 3, "end_col": 46}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3404, "end_line": 3404, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Real×7, Integer×1, Boolean×1 | params: na, nb | units: size(A, 1), size(A, 1), size(A, 1), size(B, 2) | eq: algori", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3385, "end_line": 3463, "start_col": 3, "end_col": 19}, "code_text": "function integralExpT\r\n    \"Return the exponential, the integral of the exponential, and time-weighted integral of the exponential of a matrix\"\r\n\r\n    extends Modelica.Icons.Function;\r\n    input Real A[:, size(A, 1)];\r\n    input Real B[size(A, 1), :];\r\n    input Real T=1;\r\n    output Real phi[size(A, 1), size(A, 1)] \"= exp(A*T)\";\r\n    output Real gamma[size(A, 1), size(B, 2)] \"= integral(phi)*B\";\r\n    output Real gamma1[size(A, 1), size(B, 2)] \"= integral((T-t)*exp(A*t))*B\";\r\n  protected\r\n    Integer nmax=200;\r\n    /*max number of iterations*/\r\n    parameter Integer na=size(A, 1);\r\n    parameter Integer nb=size(B, 2);\r\n    Integer j=1;\r\n    Boolean done=false;\r\n    Real F[na + 2*nb, na + 2*nb];\r\n\r\n  algorithm\r\n    F := [A, B, zeros(na, nb); zeros(2*nb, na), zeros(2*nb, nb), [identity(nb);\r\n      zeros(nb, nb)]];\r\n    F := exp(F, T);\r\n    phi := F[1:na, 1:na];\r\n    gamma := F[1:na, na + 1:na + nb];\r\n    gamma1 := F[1:na, na + nb + 1:na + 2*nb];\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<blockquote><pre>\r\n(phi,gamma,gamma1) = Matrices.<strong>integralExpT</strong>(A,B);\r\n(phi,gamma,gamma1) = Matrices.<strong>integralExpT</strong>(A,B,T=1);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the exponential phi = e^(<strong>A</strong>T) of matrix <strong>A</strong>\r\nand the integral gamma = integral(phi*dt)*B and the integral\r\nintegral((T-t)*exp(A*t)*dt)*B, where A is a square (n,n) matrix and\r\nB, gamma, and gamma1 are (n,m) matrices.\r\n</p>\r\n\r\n<p>\r\nThe function calculates the matrices phi,gamma,gamma1 through the equation:\r\n</p>\r\n<blockquote><pre>\r\n                                 [ A B 0 ]\r\n[phi gamma gamma1] = [I 0 0]*exp([ 0 0 I ]*T)\r\n                                 [ 0 0 0 ]\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe matrices define the discretized first-order-hold equivalent of\r\na state-space system:\r\n</p>\r\n<blockquote><pre>\r\nx(k+1) = phi*x(k) + gamma*u(k) + gamma1/T*(u(k+1) - u(k))\r\n</pre></blockquote>\r\n<p>\r\nThe first-order-hold sampling, also known as ramp-invariant method, gives\r\nmore smooth control signals as the ZOH equivalent. First-order-hold sampling\r\nis, e.g., described in\r\n</p>\r\n\r\n<dl>\r\n<dt>K. J. &Aring;str&ouml;m, B. Wittenmark:</dt>\r\n<dd><strong>Computer Controlled Systems - Theory and Design</strong><br>\r\n    Third Edition, p. 256</dd>\r\n</dl>\r\n\r\n</html>\", revisions=\"<html>\r\n<p><strong>Release Notes:</strong></p>\r\n<ul>\r\n<li><em>July 31, 2002</em>\r\n       by Nico Walther<br>\r\n       Realized.\r\n</li>\r\n</ul>\r\n</html>\"));\r\n  end integralExpT", "checksum": "3ad46ffdb6584d99a2941c00230982ea4e84186e", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo:3385-3463", "component_count": 9, "connection_count": 0, "variable_count": 10, "physical_quantity_count": 2, "parameter_count": 2, "equation_count": 2, "dependency_count": 2, "has_physical_interface": true, "interface_component_count": 6, "has_connections": false, "is_composite_model": false, "complexity_score": 21.0, "model_type": "computational", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm F := [A, B, zeros(na, nb)", "search_keywords": ["Boolean", "Integer", "Real", "computational", "electrical", "size(A, 1), size(A, 1)", "size(A, 1), size(B, 2)"]}, "components": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, size(A, 1)]", "comment": null}, {"name": "B", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), :]", "comment": null}, {"name": "T", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "phi", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "= exp(A*T)"}, {"name": "gamma", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(B, 2)]", "comment": "= integral(phi)*B"}, {"name": "gamma1", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(B, 2)]", "comment": "= integral((T-t)*exp(A*t))*B"}, {"name": "j", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "done", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na + 2*nb, na + 2*nb]", "comment": null}], "connections": [], "variables": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "B", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "T", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "phi", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= exp(A*T)\""}, {"name": "gamma", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= integral(phi)*B\""}, {"name": "gamma1", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= integral((T-t)*exp(A*t))*B\""}, {"name": "nmax", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "200", "comment": null}, {"name": "j", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "done", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "F", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "matrix", "unit": "size(A, 1), size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "B", "unit": "size(A, 1), size(B, 2)", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "e"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Math.Matrices.integralExp", "kind": "function", "name": "integralExp", "package_path": ["Modelica", "Math", "Matrices"], "extends": ["Modelica.Icons.Function"], "imports": ["Modelica"], "parameters": [{"name": "nmax", "type": "Integer", "default": "21", "description": null}, {"name": "na", "type": "Integer", "default": "size(A, 1)", "description": null}], "equations": [{"equations": ["algorithm\r\n    // balancing of A\r\n    (Diag,Atransf) := balance(A)", "// scaling of T until norm(A)*/(2^k) < 0.5\r\n    Tscaled := T", "/*Anorm: column-norm of matrix A*/\r\n    // Anorm := norm(Atransf, 1)", "Anorm := columnNorm(Atransf)", "Anorm := Anorm*T", "while Anorm >= 0.5 loop\r\n      Anorm := Anorm/2", "Tscaled := Tscaled/2", "k := k + 1", "end while", "// Computation of psi by Taylor-series approximation\r\n    M := identity(na)*Tscaled", "Psi := M", "while j < nmax and not done loop\r\n      M := Atransf*M*Tscaled/j", "//stop if the new element of the series is small\r\n      // if norm((Psi + M) - Psi, 1) == 0 then\r\n      if columnNorm((Psi + M) - Psi) == 0 then\r\n        done := true", "else\r\n        Psi := M + Psi", "j := j + 1", "end if", "end while", "// re-scaling\r\n    for j in 1:k loop\r\n      Psi := Atransf*Psi*Psi + 2*Psi", "end for", "// re-balancing: psi := diagonal(Diag)*D*inv(diagonal(Diag))", "for j in 1:na loop\r\n      for k in 1:na loop\r\n        Psi[j, k] := Psi[j, k]*Diag[j]/Diag[k]", "end for", "end for", "gamma := Psi*B", "phi := A*Psi + identity(na)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3243, "end_line": 3286, "start_col": 3, "end_col": 33}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3243, "end_line": 3243, "start_col": 3, "end_col": 12}}, {"equations": ["algorithm\r\n      for i in 1:size(A, 2) loop\r\n        result := max(result, sum(abs(A[:, i])))", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3238, "end_line": 3241, "start_col": 5, "end_col": 15}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3238, "end_line": 3238, "start_col": 5, "end_col": 14}}], "docstring": "extends Modelica.Icons.Function | components: Real×12, Integer×2, Boolean×1 | params: nmax, na | units: size(A, 1), size(A, 1), na, k | eq: algorithm // balanci", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3207, "end_line": 3383, "start_col": 3, "end_col": 18}, "code_text": "function integralExp\r\n    \"Return the exponential and the integral of the exponential of a matrix\"\r\n\r\n    extends Modelica.Icons.Function;\r\n    input Real A[:, size(A, 1)];\r\n    input Real B[size(A, 1), :];\r\n    input Real T=1;\r\n    output Real phi[size(A, 1), size(A, 1)] \"= exp(A*T)\";\r\n    output Real gamma[size(A, 1), size(B, 2)] \"= integral(phi)*B\";\r\n  protected\r\n    parameter Integer nmax=21;\r\n    /*max number of iterations*/\r\n    parameter Integer na=size(A, 1);\r\n    Integer j=2;\r\n    Integer k=0;\r\n    Boolean done=false;\r\n    Real Anorm;\r\n    Real Tscaled=1;\r\n    Real Atransf[na, na];\r\n    Real Psi[na, na];\r\n    /*Psi: dummy variable for psi*/\r\n    Real M[na, na];\r\n    /*M: dummy matrix*/\r\n    Real Diag[na];\r\n    /*diagonal transformation matrix for balancing*/\r\n\r\n    encapsulated function columnNorm \"Returns the column norm of a matrix\"\r\n      import Modelica;\r\n      extends Modelica.Icons.Function;\r\n      input Real A[:, :] \"Input matrix\";\r\n      output Real result=0.0 \"1-norm of matrix A\";\r\n    algorithm\r\n      for i in 1:size(A, 2) loop\r\n        result := max(result, sum(abs(A[:, i])));\r\n      end for;\r\n    end columnNorm;\r\n  algorithm\r\n    // balancing of A\r\n    (Diag,Atransf) := balance(A);\r\n\r\n    // scaling of T until norm(A)*/(2^k) < 0.5\r\n    Tscaled := T;\r\n    /*Anorm: column-norm of matrix A*/\r\n    // Anorm := norm(Atransf, 1);\r\n    Anorm := columnNorm(Atransf);\r\n    Anorm := Anorm*T;\r\n    while Anorm >= 0.5 loop\r\n      Anorm := Anorm/2;\r\n      Tscaled := Tscaled/2;\r\n      k := k + 1;\r\n    end while;\r\n\r\n    // Computation of psi by Taylor-series approximation\r\n    M := identity(na)*Tscaled;\r\n    Psi := M;\r\n    while j < nmax and not done loop\r\n      M := Atransf*M*Tscaled/j;\r\n      //stop if the new element of the series is small\r\n      // if norm((Psi + M) - Psi, 1) == 0 then\r\n      if columnNorm((Psi + M) - Psi) == 0 then\r\n        done := true;\r\n      else\r\n        Psi := M + Psi;\r\n        j := j + 1;\r\n      end if;\r\n    end while;\r\n\r\n    // re-scaling\r\n    for j in 1:k loop\r\n      Psi := Atransf*Psi*Psi + 2*Psi;\r\n    end for;\r\n\r\n    // re-balancing: psi := diagonal(Diag)*D*inv(diagonal(Diag));\r\n    for j in 1:na loop\r\n      for k in 1:na loop\r\n        Psi[j, k] := Psi[j, k]*Diag[j]/Diag[k];\r\n      end for;\r\n    end for;\r\n    gamma := Psi*B;\r\n    phi := A*Psi + identity(na);\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\n(phi,gamma) = Matrices.<strong>integralExp</strong>(A,B);\r\n(phi,gamma) = Matrices.<strong>integralExp</strong>(A,B,T=1);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the exponential phi = e^(<strong>A</strong>T) of matrix <strong>A</strong>\r\nand the integral gamma = integral(phi*dt)*B.\r\n</p>\r\n\r\n<p>\r\nThe function uses a Taylor series expansion with Balancing and\r\nscaling/squaring to approximate the integral <strong>&Psi;</strong> of the matrix\r\nexponential <strong>&Phi;</strong>=e^(AT):\r\n</p>\r\n<blockquote><pre>\r\n                         AT^2   A^2 * T^3          A^k * T^(k+1)\r\n<strong>&Psi;</strong> = int(e^(As))ds = IT + ---- + --------- + ... + --------------\r\n                          2!        3!                (k+1)!\r\n</pre></blockquote>\r\n<p>\r\n<strong>&Phi;</strong> is calculated through <strong>&Phi;</strong> = I + A*<strong>&Psi;</strong>, so A may be singular. <strong>&Gamma;</strong> is\r\nsimply <strong>&Psi;</strong>*B.\r\n</p>\r\n<p>The algorithm runs in the following steps:</p>\r\n<ol>\r\n  <li>Balancing</li>\r\n  <li>Scaling</li>\r\n  <li>Taylor series expansion</li>\r\n  <li>Re-scaling</li>\r\n  <li>Re-Balancing</li>\r\n</ol>\r\n<p>Balancing put the bad condition of a square matrix <em>A</em> into a diagonal\r\ntransformation matrix <em>D</em>. This reduce the effort of following calculations.\r\nAfterwards the result have to be re-balanced by transformation D*A<small>transf</small>\r\n*inv(D).<br>\r\nScaling halfen T&nbsp; k-times, until the norm of A*T is less than 0.5. This\r\nguarantees minimum rounding errors in the following series\r\nexpansion. The re-scaling based on the equation&nbsp; exp(A*2T) = exp(AT)^2.\r\nThe needed re-scaling formula for psi thus becomes:\r\n</p>\r\n<blockquote><pre>\r\n      <strong>&Phi;</strong> = <strong>&Phi;</strong>'*<strong>&Phi;</strong>'\r\nI + A*<strong>&Psi;</strong> = I + 2A*<strong>&Psi;</strong>' + A^2*<strong>&Psi;</strong>'^2\r\n      <strong>&Psi;</strong> = A*<strong>&Psi;</strong>'^2 + 2*<strong>&Psi;</strong>'\r\n</pre></blockquote>\r\n<p>\r\nwhere psi' is the scaled result from the series expansion while psi is the\r\nre-scaled matrix.\r\n</p>\r\n<p>\r\nThe function is normally used to discretize a state-space system as the\r\nzero-order-hold equivalent:\r\n</p>\r\n<blockquote><pre>\r\nx(k+1) = <strong>&Phi;</strong>*x(k) + <strong>&Gamma;</strong>*u(k)\r\n  y(k) = C*x(k) + D*u(k)\r\n</pre></blockquote>\r\n<p>\r\nThe zero-order-hold sampling, also known as step-invariant method, gives\r\nexact values of the state variables, under the assumption that the control\r\nsignal u is constant between the sampling instants. Zero-order-hold sampling\r\nis described in\r\n</p>\r\n<dl>\r\n<dt>K. J. &Aring;str&ouml;m, B. Wittenmark:</dt>\r\n<dd><strong>Computer Controlled Systems - Theory and Design</strong><br>\r\n    Third Edition, p. 32</dd>\r\n</dl>\r\n<blockquote><pre><strong>Syntax:</strong>\r\n      (phi,gamma) = Matrices.expIntegral(A,B,T)\r\n                       A,phi: [n,n] square matrices\r\n                     B,gamma: [n,m] input matrix\r\n                           T: scalar, e.g., sampling time\r\n</pre></blockquote>\r\n<p>\r\nThe Algorithm to calculate psi is taken from\r\n</p>\r\n<dl>\r\n<dt>H. D. Joos, G. Gr&uuml;bel:</dt>\r\n<dd><strong>RASP'91 Regulator Analysis and Synthesis Programs</strong><br>\r\n    DLR - Control Systems Group 1991</dd>\r\n</dl>\r\n</html>\", revisions=\"<html>\r\n<p><strong>Release Notes:</strong></p>\r\n<ul>\r\n<li><em>July 5, 2002</em>\r\n       by H. D. Joos and Nico Walther<br>\r\n       Implemented.\r\n</li>\r\n</ul>\r\n</html>\"));\r\n  end integralExp", "checksum": "a67207d7b835841040a059d835905ba26527ad33", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo:3207-3383", "component_count": 15, "connection_count": 0, "variable_count": 20, "physical_quantity_count": 3, "parameter_count": 2, "equation_count": 4, "dependency_count": 4, "has_physical_interface": true, "interface_component_count": 6, "has_connections": false, "is_composite_model": false, "complexity_score": 35.0, "model_type": "computational", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm // balancing of A (Diag,Atransf) := balance(A)", "search_keywords": ["Boolean", "Integer", "Real", "computational", "electrical", "na", "size(A, 1), size(A, 1)"]}, "components": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Input matrix"}, {"name": "B", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), :]", "comment": null}, {"name": "T", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "phi", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "= exp(A*T)"}, {"name": "gamma", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(B, 2)]", "comment": "= integral(phi)*B"}, {"name": "j", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "k", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "done", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Anorm", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Tscaled", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Atransf", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na, na]", "comment": null}, {"name": "Psi", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na, na]", "comment": null}, {"name": "M", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na, na]", "comment": null}, {"name": "Diag", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na]", "comment": null}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input matrix\""}, {"name": "B", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "T", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "phi", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= exp(A*T)\""}, {"name": "gamma", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= integral(phi)*B\""}, {"name": "j", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "2", "comment": null}, {"name": "k", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "0", "comment": null}, {"name": "done", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "Anorm", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Tscaled", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "Atransf", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Psi", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "M", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Diag", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Modelica", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "0.0 \"1-norm of matrix A\"", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "columnNorm", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "matrix", "unit": "size(A, 1), size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "B", "unit": "na", "display_unit": null, "quantity": null, "nominal": null}, {"name": "A", "unit": "k", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Matrices", "Modelica", "Modelica.Icons", "e"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Math.Matrices.exp", "kind": "function", "name": "exp", "package_path": ["Modelica", "Math", "Matrices"], "extends": ["Modelica.Icons.Function"], "imports": ["Modelica"], "parameters": [{"name": "nmax", "type": "Integer", "default": "21", "description": null}, {"name": "na", "type": "Integer", "default": "size(A, 1)", "description": null}], "equations": [{"equations": ["algorithm\r\n    // balancing of A\r\n    (Diag,Atransf) := balance(A)", "// scaling of T until norm(A)*/(2^k) < 1\r\n    Tscaled := T", "/*Anorm: column-norm of matrix A*/\r\n    Anorm := columnNorm(Atransf)", "Anorm := Anorm*T", "while Anorm >= 0.5 loop\r\n      Anorm := Anorm/2", "Tscaled := Tscaled/2", "k := k + 1", "end while", "// Computation of psi by Taylor-series approximation\r\n    M := identity(na)", "D := M", "while j < nmax and not done loop\r\n      M := Atransf*M*Tscaled/j", "//stop if the new element of the series is small\r\n      if columnNorm((D + M) - D) == 0 then\r\n        done := true", "else\r\n        D := M + D", "j := j + 1", "end if", "end while", "// re-scaling\r\n    for i in 1:k loop\r\n      D := D*D", "end for", "// re-balancing: psi := diagonal(Diag)*D*inv(diagonal(Diag))", "for j in 1:na loop\r\n      for k in 1:na loop\r\n        phi[j, k] := D[j, k]*Diag[j]/Diag[k]", "end for", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3098, "end_line": 3137, "start_col": 3, "end_col": 13}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3098, "end_line": 3098, "start_col": 3, "end_col": 12}}, {"equations": ["algorithm\r\n      for i in 1:size(A, 2) loop\r\n        result := max(result, sum(abs(A[:, i])))", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3092, "end_line": 3095, "start_col": 5, "end_col": 15}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3092, "end_line": 3092, "start_col": 5, "end_col": 14}}], "docstring": "extends Modelica.Icons.Function | components: Real×10, Integer×2, Boolean×1 | params: nmax, na | units: size(A, 1), size(A, 1), :, :, k | eq: algorithm // balan", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 3062, "end_line": 3205, "start_col": 3, "end_col": 10}, "code_text": "function exp\r\n    \"Return the exponential of a matrix by adaptive Taylor series expansion with scaling and balancing\"\r\n\r\n    extends Modelica.Icons.Function;\r\n    input Real A[:, size(A, 1)];\r\n    input Real T=1;\r\n    output Real phi[size(A, 1), size(A, 1)] \"= exp(A*T)\";\r\n\r\n  protected\r\n    parameter Integer nmax=21;\r\n    /*max number of iterations*/\r\n    parameter Integer na=size(A, 1);\r\n    Integer j=1;\r\n    Integer k=0;\r\n    Boolean done=false;\r\n    Real Anorm;\r\n    Real Tscaled=1;\r\n    Real Atransf[na, na];\r\n    Real D[na, na];\r\n    /*D: dummy variable for psi*/\r\n    Real M[na, na];\r\n    /*M: dummy matrix*/\r\n    Real Diag[na];\r\n    /*diagonal transformation matrix for balancing*/\r\n\r\n    encapsulated function columnNorm \"Returns the column norm of a matrix\"\r\n      import Modelica;\r\n      extends Modelica.Icons.Function;\r\n      input Real A[:, :] \"Input matrix\";\r\n      output Real result=0.0 \"1-norm of matrix A\";\r\n    algorithm\r\n      for i in 1:size(A, 2) loop\r\n        result := max(result, sum(abs(A[:, i])));\r\n      end for;\r\n    end columnNorm;\r\n\r\n  algorithm\r\n    // balancing of A\r\n    (Diag,Atransf) := balance(A);\r\n\r\n    // scaling of T until norm(A)*/(2^k) < 1\r\n    Tscaled := T;\r\n    /*Anorm: column-norm of matrix A*/\r\n    Anorm := columnNorm(Atransf);\r\n    Anorm := Anorm*T;\r\n    while Anorm >= 0.5 loop\r\n      Anorm := Anorm/2;\r\n      Tscaled := Tscaled/2;\r\n      k := k + 1;\r\n    end while;\r\n\r\n    // Computation of psi by Taylor-series approximation\r\n    M := identity(na);\r\n    D := M;\r\n    while j < nmax and not done loop\r\n      M := Atransf*M*Tscaled/j;\r\n      //stop if the new element of the series is small\r\n      if columnNorm((D + M) - D) == 0 then\r\n        done := true;\r\n      else\r\n        D := M + D;\r\n        j := j + 1;\r\n      end if;\r\n    end while;\r\n\r\n    // re-scaling\r\n    for i in 1:k loop\r\n      D := D*D;\r\n    end for;\r\n\r\n    // re-balancing: psi := diagonal(Diag)*D*inv(diagonal(Diag));\r\n    for j in 1:na loop\r\n      for k in 1:na loop\r\n        phi[j, k] := D[j, k]*Diag[j]/Diag[k];\r\n      end for;\r\n    end for;\r\n    annotation (Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nphi = Matrices.<strong>exp</strong>(A);\r\nphi = Matrices.<strong>exp</strong>(A,T=1);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the exponential e<sup><strong>A</strong>T</sup> of matrix <strong>A</strong>, i.e.\r\n</p>\r\n<blockquote><pre>\r\n                       (<strong>A</strong>T)^2   (<strong>A</strong>T)^3\r\n<font size=\\\"4\\\"> <strong>&Phi;</strong></font> = e^(<strong>A</strong>T) = <strong>I</strong> + <strong>A</strong>T + ------ + ------ + ....\r\n                         2!       3!\r\n</pre></blockquote>\r\n\r\n<p>where e=2.71828..., <strong>A</strong> is an n x n matrix with real elements and T is a real number,\r\ne.g., the sampling time.\r\n<strong>A</strong> may be singular. With the exponential of a matrix it is, e.g., possible\r\nto compute the solution of a linear system of differential equations</p>\r\n<blockquote><pre>\r\nder(<strong>x</strong>) = <strong>A</strong>*<strong>x</strong>   ->   <strong>x</strong>(t0 + T) = e^(<strong>A</strong>T)*x(t0)\r\n</pre></blockquote>\r\n\r\n<h4>Algorithmic details</h4>\r\n\r\n<p>The algorithm is taken from</p>\r\n<dl>\r\n<dt>H. D. Joos, G. Gr&uuml;bel:</dt>\r\n<dd><strong>RASP'91 Regulator Analysis and Synthesis Programs</strong><br>\r\n    DLR - Control Systems Group 1991</dd>\r\n</dl>\r\n<p>The following steps are performed to calculate the exponential of A:</p>\r\n<ol>\r\n  <li>Matrix <strong>A</strong> is balanced<br>\r\n  (= is transformed with a diagonal matrix <strong>D</strong>, such that inv(<strong>D</strong>)*<strong>A</strong>*<strong>D</strong>\r\n  has a smaller condition as <strong>A</strong>).</li>\r\n  <li>The scalar T is divided by a multiple of 2 such that norm(\r\n       inv(<strong>D</strong>)*<strong>A</strong>*<strong>D</strong>*T/2^k ) &lt; 0.5. Note, that (1) and (2) are implemented such that no round-off errors\r\n  are introduced.</li>\r\n  <li>The matrix from (2) is approximated by explicitly performing the Taylor\r\n  series expansion with a variable number of terms.\r\n  Truncation occurs if a new term does no longer contribute to the value of <strong>&Phi;</strong>\r\n  from the previous iteration.</li>\r\n  <li>The resulting matrix is transformed back, by reverting the steps of (2)\r\n  and (1).</li>\r\n</ol>\r\n<p>In several sources it is not recommended to use Taylor series expansion to\r\ncalculate the exponential of a matrix, such as in 'C.B. Moler and C.F. Van Loan:\r\nNineteen dubious ways to compute the exponential of a matrix. SIAM Review 20,\r\npp. 801-836, 1979' or in the documentation of m-file expm2 in MATLAB version 6\r\n(<a href=\\\"http://www.mathworks.com\\\">http://www.mathworks.com</a>) where it is\r\nstated that 'As a practical numerical method, this is often slow and inaccurate'.\r\nThese statements are valid for a direct implementation of the Taylor series\r\nexpansion, but <em>not</em> for the implementation variant used in this function.\r\n</p>\r\n\r\n</html>\", revisions=\"<html>\r\n<p><strong>Release Notes:</strong></p>\r\n<ul>\r\n<li><em>July 5, 2002</em>\r\n       by H. D. Joos and Nico Walther<br>\r\n       Implemented.\r\n</li>\r\n</ul>\r\n</html>\"));\r\n  end exp", "checksum": "0c21a37a0f1ccb103465a6228cbeb19e9ca7c7ce", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo:3062-3205", "component_count": 13, "connection_count": 0, "variable_count": 18, "physical_quantity_count": 3, "parameter_count": 2, "equation_count": 4, "dependency_count": 6, "has_physical_interface": true, "interface_component_count": 4, "has_connections": false, "is_composite_model": false, "complexity_score": 31.0, "model_type": "computational", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm // balancing of A (Diag,Atransf) := balance(A)", "search_keywords": [":, :", "Boolean", "Integer", "Real", "computational", "electrical", "size(A, 1), size(A, 1)"]}, "components": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Input matrix"}, {"name": "T", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "phi", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "= exp(A*T)"}, {"name": "j", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "k", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "done", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Anorm", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Tscaled", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Atransf", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na, na]", "comment": null}, {"name": "D", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na, na]", "comment": null}, {"name": "M", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na, na]", "comment": null}, {"name": "Diag", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na]", "comment": null}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input matrix\""}, {"name": "T", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "phi", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= exp(A*T)\""}, {"name": "j", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "k", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "0", "comment": null}, {"name": "done", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "Anorm", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Tscaled", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "Atransf", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "D", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "M", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Diag", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Modelica", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "0.0 \"1-norm of matrix A\"", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "columnNorm", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "balancing", "unit": "size(A, 1), size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "matrix", "unit": ":, :", "display_unit": null, "quantity": null, "nominal": null}, {"name": "A", "unit": "k", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["C", "Modelica", "Modelica.Icons", "e", "i", "www.mathworks"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.IdealGases.Common.Functions.dynamicViscosityLowPressure", "kind": "function", "name": "dynamicViscosityLowPressure", "package_path": ["Modelica", "Media", "IdealGases", "Common", "Functions"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [{"name": "Const1_SI", "type": "Real", "default": "40.785*10^(-9.5) \"Constant in formula for eta converted to SI units\"", "description": null}, {"name": "Const2_SI", "type": "Real", "default": "131.3/1000.0 \"Constant in formula for mur converted to SI units\"", "description": null}], "equations": [{"equations": ["algorithm\r\n    Tstar := 1.2593*T/Tc", "Ov := 1.16145*Tstar^(-0.14874) + 0.52487*Modelica.Math.exp(-0.7732*Tstar) + 2.16178*Modelica.Math.exp(-2.43787\r\n      *Tstar)", "eta := Const1_SI*Fc*sqrt(M*T)/(Vc^(2/3)*Ov)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\Functions.mo", "start_line": 217, "end_line": 221, "start_col": 3, "end_col": 49}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\Functions.mo", "start_line": 217, "end_line": 217, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Real×4, SI.Temperature×2, SI.MolarMass×1 | params: Const1_SI, Const2_SI | units: K, K | eq: algorithm Tstar := 1.2", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\Functions.mo", "start_line": 193, "end_line": 248, "start_col": 3, "end_col": 34}, "code_text": "function dynamicViscosityLowPressure\r\n    \"Dynamic viscosity of low pressure gases\"\r\n    extends Modelica.Icons.Function;\r\n    input SI.Temperature T \"Gas temperature\";\r\n    input SI.Temperature Tc \"Critical temperature of gas\";\r\n    input SI.MolarMass M \"Molar mass of gas\";\r\n    input SI.MolarVolume Vc \"Critical molar volume of gas\";\r\n    input Real w \"Acentric factor of gas\";\r\n    input Modelica.Media.Interfaces.Types.DipoleMoment mu\r\n      \"Dipole moment of gas molecule\";\r\n    input Real k =  0.0 \"Special correction for highly polar substances\";\r\n    output SI.DynamicViscosity eta \"Dynamic viscosity of gas\";\r\n  protected\r\n    parameter Real Const1_SI=40.785*10^(-9.5)\r\n      \"Constant in formula for eta converted to SI units\";\r\n    parameter Real Const2_SI=131.3/1000.0\r\n      \"Constant in formula for mur converted to SI units\";\r\n    Real mur=Const2_SI*mu/sqrt(Vc*Tc)\r\n      \"Dimensionless dipole moment of gas molecule\";\r\n    Real Fc=1 - 0.2756*w + 0.059035*mur^4 + k\r\n      \"Factor to account for molecular shape and polarities of gas\";\r\n    Real Tstar \"Dimensionless temperature defined by equation below\";\r\n    Real Ov \"Viscosity collision integral for the gas\";\r\n\r\n  algorithm\r\n    Tstar := 1.2593*T/Tc;\r\n    Ov := 1.16145*Tstar^(-0.14874) + 0.52487*Modelica.Math.exp(-0.7732*Tstar) + 2.16178*Modelica.Math.exp(-2.43787\r\n      *Tstar);\r\n    eta := Const1_SI*Fc*sqrt(M*T)/(Vc^(2/3)*Ov);\r\n    annotation (smoothOrder=2,\r\n                Documentation(info=\"<html>\r\n<p>\r\nThe used formula are based on the method of Chung et al (1984, 1988) referred to in ref [1] chapter 9.\r\nThe formula 9-4.10 is the one being used. The Formula is given in non-SI units, the following conversion constants were used to\r\ntransform the formula to SI units:\r\n</p>\r\n\r\n<ul>\r\n<li> <strong>Const1_SI:</strong> The factor 10^(-9.5) =10^(-2.5)*1e-7 where the\r\n     factor 10^(-2.5) originates from the conversion of g/mol->kg/mol + cm^3/mol->m^3/mol\r\n      and the factor 1e-7 is due to conversion from microPoise->Pa.s.</li>\r\n<li>  <strong>Const2_SI:</strong> The factor 1/3.335641e-27 = 1e-3/3.335641e-30\r\n      where the factor 3.335641e-30 comes from debye->C.m and\r\n      1e-3 is due to conversion from cm^3/mol->m^3/mol</li>\r\n</ul>\r\n\r\n<h4>References</h4>\r\n<p>\r\n[1] Bruce E. Poling, John E. Prausnitz, John P. O'Connell, \\\"The Properties of Gases and Liquids\\\" 5th Ed. Mc Graw Hill.\r\n</p>\r\n\r\n<h4>Author</h4>\r\n<p>T. Skoglund, Lund, Sweden, 2004-08-31</p>\r\n\r\n</html>\"));\r\n  end dynamicViscosityLowPressure", "checksum": "fef5ca8f2de4bede538d22c03c2e72c1cfefdcb9", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\Functions.mo:193-248", "component_count": 9, "connection_count": 0, "variable_count": 12, "physical_quantity_count": 2, "parameter_count": 2, "equation_count": 2, "dependency_count": 5, "has_physical_interface": true, "interface_component_count": 7, "has_connections": false, "is_composite_model": false, "complexity_score": 21.0, "model_type": "computational", "physical_domains": ["thermal", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "function", "equation_summary": "algorithm Tstar := 1.2593*T/Tc", "search_keywords": ["Real", "SI.DynamicViscosity", "SI.MolarMass", "SI.MolarVolume", "SI.Temperature", "ThermodynamicTemperature", "computational", "mechanical", "thermal"]}, "components": [{"name": "T", "type_name": "SI.Temperature", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Gas temperature"}, {"name": "Tc", "type_name": "SI.Temperature", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical temperature of gas"}, {"name": "M", "type_name": "SI.MolarMass", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Molar mass of gas"}, {"name": "Vc", "type_name": "SI.MolarVolume", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical molar volume of gas"}, {"name": "w", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Acentric factor of gas"}, {"name": "k", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "eta", "type_name": "SI.DynamicViscosity", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Dynamic viscosity of gas"}, {"name": "Tstar", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Dimensionless temperature defined by equation below"}, {"name": "Ov", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Viscosity collision integral for the gas"}], "connections": [], "variables": [{"name": "T", "type_name": "SI.Temperature", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Gas temperature\""}, {"name": "Tc", "type_name": "SI.Temperature", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Critical temperature of gas\""}, {"name": "M", "type_name": "SI.MolarMass", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Molar mass of gas\""}, {"name": "Vc", "type_name": "SI.MolarVolume", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Critical molar volume of gas\""}, {"name": "w", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Acentric factor of gas\""}, {"name": "mu", "type_name": "Modelica.Media.Interfaces.Types.DipoleMoment", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Dipole moment of gas molecule\""}, {"name": "k", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "0.0 \"Special correction for highly polar substances\"", "comment": null}, {"name": "eta", "type_name": "SI.DynamicViscosity", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Dynamic viscosity of gas\""}, {"name": "mur", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "Const2_SI*mu/sqrt(Vc*Tc)\r\n      \"Dimensionless dipole moment of gas molecule\"", "comment": null}, {"name": "Fc", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "1 - 0.2756*w + 0.059035*mur^4 + k\r\n      \"Factor to account for molecular shape and polarities of gas\"", "comment": null}, {"name": "Tstar", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Dimensionless temperature defined by equation below\""}, {"name": "Ov", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Viscosity collision integral for the gas\""}], "physical_quantities": [{"name": "T", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}, {"name": "Tc", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}], "dependencies": ["C", "Modelica.Icons", "Modelica.Media.Interfaces.Types", "Pa", "SI"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure", "kind": "function", "name": "dynamicViscosityLowPressure", "package_path": ["Modelica", "Media", "IdealGases", "Common", "SingleGasNasa"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [{"name": "Const1_SI", "type": "Real", "default": "40.785*10^(-9.5) \"Constant in formula for eta converted to SI units\"", "description": null}, {"name": "Const2_SI", "type": "Real", "default": "131.3/1000.0 \"Constant in formula for mur converted to SI units\"", "description": null}], "equations": [{"equations": ["algorithm\r\n    eta := Functions.dynamicViscosityLowPressure(T,Tc,M,Vc,w,mu,k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 418, "end_line": 419, "start_col": 3, "end_col": 68}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 418, "end_line": 418, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Real×4, SI.Temperature×2, SI.MolarMass×1 | params: Const1_SI, Const2_SI | units: K, K | eq: algorithm eta := Funct", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 393, "end_line": 446, "start_col": 3, "end_col": 34}, "code_text": "function dynamicViscosityLowPressure\r\n    \"Dynamic viscosity of low pressure gases\"\r\n    extends Modelica.Icons.Function;\r\n    input SI.Temperature T \"Gas temperature\";\r\n    input SI.Temperature Tc \"Critical temperature of gas\";\r\n    input SI.MolarMass M \"Molar mass of gas\";\r\n    input SI.MolarVolume Vc \"Critical molar volume of gas\";\r\n    input Real w \"Acentric factor of gas\";\r\n    input Modelica.Media.Interfaces.Types.DipoleMoment mu\r\n      \"Dipole moment of gas molecule\";\r\n    input Real k =  0.0 \"Special correction for highly polar substances\";\r\n    output Modelica.Media.Interfaces.Types.DynamicViscosity eta\r\n      \"Dynamic viscosity of gas\";\r\n  protected\r\n    parameter Real Const1_SI=40.785*10^(-9.5)\r\n      \"Constant in formula for eta converted to SI units\";\r\n    parameter Real Const2_SI=131.3/1000.0\r\n      \"Constant in formula for mur converted to SI units\";\r\n    Real mur=Const2_SI*mu/sqrt(Vc*Tc)\r\n      \"Dimensionless dipole moment of gas molecule\";\r\n    Real Fc=1 - 0.2756*w + 0.059035*mur^4 + k\r\n      \"Factor to account for molecular shape and polarities of gas\";\r\n    Real Tstar \"Dimensionless temperature defined by equation below\";\r\n    Real Ov \"Viscosity collision integral for the gas\";\r\n\r\n  algorithm\r\n    eta := Functions.dynamicViscosityLowPressure(T,Tc,M,Vc,w,mu,k);\r\n    annotation (smoothOrder=2,\r\n                Documentation(info=\"<html>\r\n<p>\r\nThe used formula are based on the method of Chung et al (1984, 1988) referred to in ref [1] chapter 9.\r\nThe formula 9-4.10 is the one being used. The formula is given in non-SI units, the following conversion constants were used to\r\ntransform the formula to SI units:\r\n</p>\r\n\r\n<ul>\r\n<li> <strong>Const1_SI:</strong> The factor 10^(-9.5) =10^(-2.5)*1e-7 where the\r\n     factor 10^(-2.5) originates from the conversion of g/mol->kg/mol + cm^3/mol->m^3/mol\r\n      and the factor 1e-7 is due to conversion from microPoise->Pa.s.</li>\r\n<li>  <strong>Const2_SI:</strong> The factor 1/3.335641e-27 = 1e-3/3.335641e-30\r\n      where the factor 3.335641e-30 comes from debye->C.m and\r\n      1e-3 is due to conversion from cm^3/mol->m^3/mol</li>\r\n</ul>\r\n\r\n<h4>References</h4>\r\n<p>\r\n[1] Bruce E. Poling, John E. Prausnitz, John P. O'Connell, \\\"The Properties of Gases and Liquids\\\" 5th Ed. Mc Graw Hill.\r\n</p>\r\n\r\n<h4>Author</h4>\r\n<p>T. Skoglund, Lund, Sweden, 2004-08-31</p>\r\n\r\n</html>\"));\r\n  end dynamicViscosityLowPressure", "checksum": "9c0b27a6c5a25e365533576476a6986730b57319", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo:393-446", "component_count": 8, "connection_count": 0, "variable_count": 12, "physical_quantity_count": 2, "parameter_count": 2, "equation_count": 2, "dependency_count": 6, "has_physical_interface": true, "interface_component_count": 6, "has_connections": false, "is_composite_model": false, "complexity_score": 19.0, "model_type": "computational", "physical_domains": ["thermal", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "function", "equation_summary": "algorithm eta := Functions.dynamicViscosityLowPressure(T,Tc,M,Vc,w,mu,k)", "search_keywords": ["Real", "SI.MolarMass", "SI.MolarVolume", "SI.Temperature", "ThermodynamicTemperature", "computational", "mechanical", "thermal"]}, "components": [{"name": "T", "type_name": "SI.Temperature", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Gas temperature"}, {"name": "Tc", "type_name": "SI.Temperature", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical temperature of gas"}, {"name": "M", "type_name": "SI.MolarMass", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Molar mass of gas"}, {"name": "Vc", "type_name": "SI.MolarVolume", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical molar volume of gas"}, {"name": "w", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Acentric factor of gas"}, {"name": "k", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Tstar", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Dimensionless temperature defined by equation below"}, {"name": "Ov", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Viscosity collision integral for the gas"}], "connections": [], "variables": [{"name": "T", "type_name": "SI.Temperature", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Gas temperature\""}, {"name": "Tc", "type_name": "SI.Temperature", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Critical temperature of gas\""}, {"name": "M", "type_name": "SI.MolarMass", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Molar mass of gas\""}, {"name": "Vc", "type_name": "SI.MolarVolume", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Critical molar volume of gas\""}, {"name": "w", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Acentric factor of gas\""}, {"name": "mu", "type_name": "Modelica.Media.Interfaces.Types.DipoleMoment", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Dipole moment of gas molecule\""}, {"name": "k", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "0.0 \"Special correction for highly polar substances\"", "comment": null}, {"name": "eta", "type_name": "Modelica.Media.Interfaces.Types.DynamicViscosity", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Dynamic viscosity of gas\""}, {"name": "mur", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "Const2_SI*mu/sqrt(Vc*Tc)\r\n      \"Dimensionless dipole moment of gas molecule\"", "comment": null}, {"name": "Fc", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "1 - 0.2756*w + 0.059035*mur^4 + k\r\n      \"Factor to account for molecular shape and polarities of gas\"", "comment": null}, {"name": "Tstar", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Dimensionless temperature defined by equation below\""}, {"name": "Ov", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Viscosity collision integral for the gas\""}], "physical_quantities": [{"name": "T", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}, {"name": "Tc", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}], "dependencies": ["C", "Functions", "Modelica.Icons", "Modelica.Media.Interfaces.Types", "Pa", "SI"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.Water.IF97_Utilities.BaseIF97.Inverses.tofps5", "kind": "function", "name": "tofps5", "package_path": ["Modelica", "Media", "Water", "IF97_Utilities", "BaseIF97", "Inverses"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [{"name": "Tguess", "type": "SI.Temperature", "default": "1500 \"Initial temperature\"", "description": null}], "equations": [{"equations": ["algorithm\r\n        i := 0", "error := 0", "T := Tguess", "found := false", "while ((i < IterationData.IMAX) and not found) loop\r\n          g := Basic.g5(p, T)", "pros := data.RH2O*(g.tau*g.gtau - g.g)", "ds := pros - s", "relerr := ds/s", "if (abs(relerr) < relds) then\r\n            found := true", "end if", "dT := ds*T/(-data.RH2O*g.tau*g.tau*g.gtautau)", "T := T - dT", "i := i + 1", "end while", "if not found then\r\n          error := 1", "end if", "assert(error <> 1, \"Error in inverse function tofps5: iteration failed\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 5551, "end_line": 5571, "start_col": 7, "end_col": 82}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 5551, "end_line": 5551, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Icons.Function | components: Real×3, SI.SpecificEntropy×2, Integer×2 | params: Tguess | units: Pa, K | eq: algorithm i := 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 5532, "end_line": 5572, "start_col": 7, "end_col": 17}, "code_text": "function tofps5 \"Inverse iteration in region 5: (p,T) = f(p,s)\"\r\n\r\n        extends Modelica.Icons.Function;\r\n        input SI.Pressure p \"Pressure\";\r\n        input SI.SpecificEntropy s \"Specific entropy\";\r\n        input SI.SpecificEnthalpy relds \"Iteration accuracy\";\r\n        output SI.Temperature T \"Temperature (K)\";\r\n        output Integer error \"Error flag: iteration failed if different from 0\";\r\n\r\n      protected\r\n        Modelica.Media.Common.GibbsDerivs g\r\n          \"Dimensionless Gibbs function and derivatives w.r.t. pi and tau\";\r\n        SI.SpecificEntropy pros \"S for current guess in T\";\r\n        parameter SI.Temperature Tguess=1500 \"Initial temperature\";\r\n        Integer i \"Iteration counter\";\r\n        Real relerr \"Relative error in s\";\r\n        Real ds \"Newton-error in s-direction\";\r\n        Real dT \"Newton-step in T-direction\";\r\n        Boolean found \"Flag for iteration success\";\r\n      algorithm\r\n        i := 0;\r\n        error := 0;\r\n        T := Tguess;\r\n        found := false;\r\n        while ((i < IterationData.IMAX) and not found) loop\r\n          g := Basic.g5(p, T);\r\n          pros := data.RH2O*(g.tau*g.gtau - g.g);\r\n          ds := pros - s;\r\n          relerr := ds/s;\r\n          if (abs(relerr) < relds) then\r\n            found := true;\r\n          end if;\r\n          dT := ds*T/(-data.RH2O*g.tau*g.tau*g.gtautau);\r\n          T := T - dT;\r\n          i := i + 1;\r\n        end while;\r\n        if not found then\r\n          error := 1;\r\n        end if;\r\n        assert(error <> 1, \"Error in inverse function tofps5: iteration failed\");\r\n      end tofps5", "checksum": "d1feeca98715816c07f98091a3b5b6c23e1c7032", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo:5532-5572", "component_count": 11, "connection_count": 0, "variable_count": 14, "physical_quantity_count": 2, "parameter_count": 1, "equation_count": 2, "dependency_count": 8, "has_physical_interface": true, "interface_component_count": 5, "has_connections": false, "is_composite_model": false, "complexity_score": 24.5, "model_type": "computational", "physical_domains": ["hydraulic", "thermal"], "is_multidomain": true, "aliases": [], "node_group": "function", "equation_summary": "algorithm i := 0", "search_keywords": ["Boolean", "Integer", "Pa", "Pressure", "Real", "SI.Pressure", "SI.SpecificEnthalpy", "SI.SpecificEntropy", "SI.Temperature", "ThermodynamicTemperature", "computational", "hydraulic", "thermal"]}, "components": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pressure"}, {"name": "s", "type_name": "SI.SpecificEntropy", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Specific entropy"}, {"name": "relds", "type_name": "SI.SpecificEnthalpy", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Iteration accuracy"}, {"name": "T", "type_name": "SI.Temperature", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Temperature (K)"}, {"name": "error", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Error flag: iteration failed if different from 0"}, {"name": "pros", "type_name": "SI.SpecificEntropy", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "S for current guess in T"}, {"name": "i", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Iteration counter"}, {"name": "relerr", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Relative error in s"}, {"name": "ds", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Newton-error in s-direction"}, {"name": "dT", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Newton-step in T-direction"}, {"name": "found", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Flag for iteration success"}], "connections": [], "variables": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "s", "type_name": "SI.SpecificEntropy", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Specific entropy\""}, {"name": "relds", "type_name": "SI.SpecificEnthalpy", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Iteration accuracy\""}, {"name": "T", "type_name": "SI.Temperature", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Temperature (K)\""}, {"name": "error", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Error flag: iteration failed if different from 0\""}, {"name": "g", "type_name": "Modelica.Media.Common.GibbsDerivs", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Dimensionless Gibbs function and derivatives w.r.t. pi and tau\""}, {"name": "pros", "type_name": "SI.SpecificEntropy", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"S for current guess in T\""}, {"name": "i", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Iteration counter\""}, {"name": "relerr", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Relative error in s\""}, {"name": "ds", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Newton-error in s-direction\""}, {"name": "dT", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Newton-step in T-direction\""}, {"name": "found", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Flag for iteration success\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "p", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": null}, {"name": "T", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}], "dependencies": ["Basic", "IterationData", "Modelica.Icons", "Modelica.Media.Common", "SI", "data", "g", "w.r"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "ObsoleteModelica4.Math.tempInterpol2", "kind": "function", "name": "tempInterpol2", "package_path": ["ObsoleteModelica4", "Math"], "extends": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n      n := size(table, 1)", "if n <= 1 then\r\n        y := transpose([table[1, icol]])", "else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1", "else\r\n          i := 2", "// Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1", "end while", "i := i - 1", "end if", "// Get interpolation data\r\n        u1 := table[i, 1]", "u2 := table[i + 1, 1]", "y1 := transpose([table[i, icol]])", "y2 := transpose([table[i + 1, icol]])", "assert(u2 > u1, \"Table index must be increasing\")", "// Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2581, "end_line": 2618, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2581, "end_line": 2581, "start_col": 5, "end_col": 14}}], "docstring": "extends Modelica.Icons.Function | components: Real×6, Integer×2 | units: :, i + 1, icol | eq: algorithm n := size(table, 1)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2564, "end_line": 2624, "start_col": 5, "end_col": 22}, "code_text": "function tempInterpol2\r\n      \"Obsolete function for vectorized linear interpolation\"\r\n      extends Modelica.Icons.Function;\r\n      extends Modelica.Icons.ObsoleteModel;\r\n\r\n      input Real u \"Input value (first column of table)\";\r\n      input Real table[:, :] \"Table to be interpolated\";\r\n      input Integer icol[:] \"Column(s) of table to be interpolated\";\r\n      output Real y[1, size(icol, 1)]\r\n        \"Interpolated input value(s) (column(s) icol of table)\";\r\n    protected\r\n      Integer i;\r\n      Integer n \"Number of rows of table\";\r\n      Real u1;\r\n      Real u2;\r\n      Real y1[1, size(icol, 1)];\r\n      Real y2[1, size(icol, 1)];\r\n    algorithm\r\n      n := size(table, 1);\r\n\r\n      if n <= 1 then\r\n        y := transpose([table[1, icol]]);\r\n\r\n      else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1;\r\n\r\n        else\r\n          i := 2;\r\n          // Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1;\r\n\r\n          end while;\r\n          i := i - 1;\r\n\r\n        end if;\r\n\r\n        // Get interpolation data\r\n        u1 := table[i, 1];\r\n        u2 := table[i + 1, 1];\r\n        y1 := transpose([table[i, icol]]);\r\n        y2 := transpose([table[i + 1, icol]]);\r\n\r\n        assert(u2 > u1, \"Table index must be increasing\");\r\n        // Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1);\r\n\r\n      end if;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n\r\n    </html>\"),\r\n      obsolete = \"Obsolete function\");\r\n    end tempInterpol2", "checksum": "cb86d2915bd47adae5cc77b54de0a7a2775981c9", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2564-2624", "component_count": 8, "connection_count": 0, "variable_count": 12, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 18.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm n := size(table, 1)", "search_keywords": ["Integer", "Real", "computational", "i + 1, icol"]}, "components": [{"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Input value (first column of table)"}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Table to be interpolated"}, {"name": "icol", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Column(s) of table to be interpolated"}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Number of rows of table"}, {"name": "u1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[1, size(icol, 1)]", "comment": null}, {"name": "y2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[1, size(icol, 1)]", "comment": null}], "connections": [], "variables": [{"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input value (first column of table)\""}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Table to be interpolated\""}, {"name": "icol", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Column(s) of table to be interpolated\""}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Interpolated input value(s) (column(s) icol of table)\""}, {"name": "i", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Number of rows of table\""}, {"name": "u1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "interpolated", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "table", "unit": "i + 1, icol", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"]}
{"fqn": "ObsoleteModelica4.Math.tempInterpol1", "kind": "function", "name": "tempInterpol1", "package_path": ["ObsoleteModelica4", "Math"], "extends": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n      n := size(table, 1)", "if n <= 1 then\r\n        y := table[1, icol]", "else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1", "else\r\n          i := 2", "// Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1", "end while", "i := i - 1", "end if", "// Get interpolation data\r\n        u1 := table[i, 1]", "u2 := table[i + 1, 1]", "y1 := table[i, icol]", "y2 := table[i + 1, icol]", "assert(u2 > u1, \"Table index must be increasing\")", "// Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2519, "end_line": 2556, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2519, "end_line": 2519, "start_col": 5, "end_col": 14}}], "docstring": "extends Modelica.Icons.Function | components: Real×7, Integer×2 | units: i + 1, icol | eq: algorithm n := size(table, 1)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2503, "end_line": 2562, "start_col": 5, "end_col": 22}, "code_text": "function tempInterpol1\r\n      \"Obsolete function for linear interpolation\"\r\n      extends Modelica.Icons.Function;\r\n      extends Modelica.Icons.ObsoleteModel;\r\n\r\n      input Real u \"Input value (first column of table)\";\r\n      input Real table[:, :] \"Table to be interpolated\";\r\n      input Integer icol \"Column of table to be interpolated\";\r\n      output Real y \"Interpolated input value (icol column of table)\";\r\n    protected\r\n      Integer i;\r\n      Integer n \"Number of rows of table\";\r\n      Real u1;\r\n      Real u2;\r\n      Real y1;\r\n      Real y2;\r\n    algorithm\r\n      n := size(table, 1);\r\n\r\n      if n <= 1 then\r\n        y := table[1, icol];\r\n\r\n      else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1;\r\n\r\n        else\r\n          i := 2;\r\n          // Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1;\r\n\r\n          end while;\r\n          i := i - 1;\r\n\r\n        end if;\r\n\r\n        // Get interpolation data\r\n        u1 := table[i, 1];\r\n        u2 := table[i + 1, 1];\r\n        y1 := table[i, icol];\r\n        y2 := table[i + 1, icol];\r\n\r\n        assert(u2 > u1, \"Table index must be increasing\");\r\n        // Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1);\r\n\r\n      end if;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n\r\n    </html>\"),\r\n      obsolete = \"Obsolete function\");\r\n    end tempInterpol1", "checksum": "77cde0ef87e6742a70aa895d30cd2604a8276493", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2503-2562", "component_count": 9, "connection_count": 0, "variable_count": 12, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": true, "interface_component_count": 4, "has_connections": false, "is_composite_model": false, "complexity_score": 20.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm n := size(table, 1)", "search_keywords": ["Integer", "Real", "computational", "i + 1, icol"]}, "components": [{"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Input value (first column of table)"}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Table to be interpolated"}, {"name": "icol", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Column of table to be interpolated"}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Interpolated input value (icol column of table)"}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Number of rows of table"}, {"name": "u1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input value (first column of table)\""}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Table to be interpolated\""}, {"name": "icol", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Column of table to be interpolated\""}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Interpolated input value (icol column of table)\""}, {"name": "i", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Number of rows of table\""}, {"name": "u1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "table", "unit": "i + 1, icol", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"]}
{"fqn": "ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation", "kind": "function", "name": "householderSimilarityTransformation", "package_path": ["ObsoleteModelica4", "Math", "Matrices", "Utilities"], "extends": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"], "imports": ["Modelica.Math.Vectors", "ObsoleteModelica4.Math.Vectors.Utilities"], "parameters": [], "equations": [{"equations": ["algorithm\r\n          if na > 0 then\r\n            S := -2*matrix(u)*transpose(matrix(u))/(Vectors.length(u)*\r\n              Vectors.length(u))", "for i in 1:na loop\r\n              S[i, i] := 1.0 + S[i, i]", "end for", "SAS := S*A*S", "else\r\n            SAS := fill(\r\n                    0.0,\r\n                    0,\r\n                    0)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2429, "end_line": 2442, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2429, "end_line": 2429, "start_col": 9, "end_col": 18}}], "docstring": "extends Modelica.Icons.Function | components: Real×4, Integer×1 | units: size(A, 1), size(A, 1), size(A, 1), i, i | eq: algorithm if(条件なら)(条件なら) na > 0 then S :", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2415, "end_line": 2499, "start_col": 9, "end_col": 48}, "code_text": "function householderSimilarityTransformation\r\n          \"Perform the similarity transformation S*A*S of matrix A with symmetric householder matrix S = I - 2u*u'\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors;\r\n\r\n          input Real A[:, size(A, 1)] \"Square matrix A\";\r\n          input Real u[size(A, 1)] \"Householder vector\";\r\n          output Real SAS[size(A, 1), size(A, 1)] \"Transformation of matrix A\";\r\n\r\n        protected\r\n          Integer na=size(A, 1);\r\n          Real S[size(A, 1), size(A, 1)] \"Symmetric matrix\";\r\n          Integer i;\r\n        algorithm\r\n          if na > 0 then\r\n            S := -2*matrix(u)*transpose(matrix(u))/(Vectors.length(u)*\r\n              Vectors.length(u));\r\n            for i in 1:na loop\r\n              S[i, i] := 1.0 + S[i, i];\r\n            end for;\r\n            SAS := S*A*S;\r\n          else\r\n            SAS := fill(\r\n                    0.0,\r\n                    0,\r\n                    0);\r\n          end if;\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Matrices.householderSimilarityTransformation instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\n  As = Matrices.<strong>householderSimilarityTransformation</strong>(A,u);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the Householder similarity transformation\r\n</p>\r\n<blockquote>\r\n <strong>As</strong> = <strong>S</strong>*<strong>A</strong>*<strong>S</strong>\r\n</blockquote>\r\nwith\r\n<blockquote>\r\n <strong>S</strong> = <strong>I</strong> -2*<strong>u</strong>*<strong>u</strong>'/(<strong>u</strong>'*<strong>u</strong>).\r\n</blockquote>\r\n<p>\r\nThis transformation is widely used for transforming non-symmetric matrices to a Hessenberg form.\r\n</p>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n// First step of Hessenberg decomposition\r\n  import   ObsoleteModelica4.Math.Vectors.Utilities;\r\n\r\n  Real A[4,4] = [1,2,3,4;\r\n                 3,4,5,6;\r\n                 9,8,7,6;\r\n                 1,2,0,0];\r\n  Real Ar[4,4];\r\n  Real u[4]={0,0,0,0};\r\n\r\n  u[2:4]=Utilities.householderVector(A[2:4,1],{1,0,0});\r\n  // u= = {0, 0.8107, 0.5819, 0.0647}\r\n\r\n  Ar=householderSimilarityTransformation(A,u);\r\n //  Ar = [1.0,     -3.8787,    -1.2193,    3.531;\r\n          -9.5394, 11.3407,      6.4336,   -5.9243;\r\n           0.0,     3.1307,      0.7525,   -3.3670;\r\n           0.0,     0.8021,     -1.1656,   -1.0932]\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderReflection\\\">Matrices.Utilities.householderReflection</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderReflection\\\">Vectors.Utilities.householderReflection</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderVector\\\">Vectors.Utilities.householderVector</a>\r\n</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n</html>\"));\r\n        end householderSimilarityTransformation", "checksum": "33cb7bd281339f7fab73703489f440a2f41d1720", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2415-2499", "component_count": 5, "connection_count": 0, "variable_count": 8, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 11, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 12.0, "model_type": "computational", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm if(条件なら) na > 0 then S := -2*matrix(u)*transpose(matrix(u))/(Vectors.length(u)* Vectors.length(u))", "search_keywords": ["Integer", "Real", "computational", "electrical", "i, i", "size(A, 1)", "size(A, 1), size(A, 1)"]}, "components": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, size(A, 1)]", "comment": "Square matrix A"}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1)]", "comment": "Householder vector"}, {"name": "SAS", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "Transformation of matrix A"}, {"name": "S", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "Symmetric matrix"}, {"name": "i", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Square matrix A\""}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Householder vector\""}, {"name": "SAS", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Transformation of matrix A\""}, {"name": "na", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(A, 1)", "comment": null}, {"name": "S", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Symmetric matrix\""}, {"name": "i", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "A", "unit": "size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "vector", "unit": "size(A, 1), size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "matrix", "unit": "i, i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Matrices.Utilities", "Modelica.Icons", "Modelica.Math", "Modelica.Math.Vectors", "Modelica_LinearSystems2.Math.Matrices", "ObsoleteModelica4.Math.Matrices.Utilities", "ObsoleteModelica4.Math.Vectors", "ObsoleteModelica4.Math.Vectors.Utilities", "Utilities", "Vectors", "Vectors.Utilities"], "inheritance_chain": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"]}
{"fqn": "ObsoleteModelica4.Math.Matrices.Utilities.householderReflection", "kind": "function", "name": "householderReflection", "package_path": ["ObsoleteModelica4", "Math", "Matrices", "Utilities"], "extends": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"], "imports": ["Modelica.Math.Vectors", "ObsoleteModelica4.Math.Vectors.Utilities"], "parameters": [], "equations": [{"equations": ["algorithm\r\n          for i in 1:n loop\r\n            h := scalar(2*transpose(matrix(u))*A[:, i]/lu)", "RA[:, i] := A[:, i] - h*u", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2350, "end_line": 2354, "start_col": 9, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2350, "end_line": 2350, "start_col": 9, "end_col": 18}}], "docstring": "extends Modelica.Icons.Function | components: Real×5 | units: a_1, a_2, ..., a_n, :, :, size(A, 1) | eq: algorithm for i in 1:n loop h := scalar(2*transpose(mat", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2334, "end_line": 2413, "start_col": 9, "end_col": 34}, "code_text": "function householderReflection\r\n          \"Reflect each of the vectors a_i of matrix  A=[a_1, a_2, ..., a_n] on a plane with orthogonal vector u\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors;\r\n\r\n          input Real A[:, :] \"Rectangular matrix\";\r\n          input Real u[size(A, 1)] \"Householder vector\";\r\n\r\n          output Real RA[size(A, 1), size(A, 2)] \"Reflection of A\";\r\n\r\n        protected\r\n          Integer n=size(A, 2);\r\n          Real h;\r\n          Real lu=(Vectors.length(u))^2;\r\n\r\n        algorithm\r\n          for i in 1:n loop\r\n            h := scalar(2*transpose(matrix(u))*A[:, i]/lu);\r\n            RA[:, i] := A[:, i] - h*u;\r\n          end for;\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Matrices.householderReflexion instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nMatrices.<strong>householderReflection</strong>(A,u);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the Householder reflection (transformation)\r\n</p>\r\n<blockquote>\r\n <strong>Ar</strong> = <strong>Q</strong>*<strong>A</strong>\r\n</blockquote>\r\nwith\r\n<blockquote>\r\n <strong>Q</strong> = <strong>I</strong> -2*<strong>u</strong>*<strong>u</strong>'/(<strong>u</strong>'*<strong>u</strong>)\r\n</blockquote>\r\n<p>\r\nwhere <strong>u</strong> is Householder vector, i.e., the normal vector of the reflection plane.\r\n</p>\r\n<p>\r\nHouseholder reflection is widely used in numerical linear algebra, e.g., to perform QR decompositions.\r\n</p>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n// First step of QR decomposition\r\n  import   ObsoleteModelica4.Math.Vectors.Utilities;\r\n\r\n  Real A[3,3] = [1,2,3;\r\n                 3,4,5;\r\n                 2,1,4];\r\n  Real Ar[3,3];\r\n  Real u[:];\r\n\r\n  u=Utilities.householderVector(A[:,1],{1,0,0});\r\n  // u= {0.763, 0.646, 0}\r\n\r\n  Ar=householderReflection(A,u);\r\n // Ar = [-6.0828,   -5.2608,   -4.4388;\r\n //        0.0,      -1.1508,   -2.3016;\r\n //        0.0,       2.0,       0.0]\r\n\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation\\\">Matrices.Utilities.housholderSimilarityTransformation</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderReflection\\\">Vectors.Utilities.householderReflection</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderVector\\\">Vectors.Utilities.householderVector</a>\r\n</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n</html>\"));\r\n        end householderReflection", "checksum": "7e80bc9a47d19be8909f903f963a5b7f15f62b2b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2334-2413", "component_count": 5, "connection_count": 0, "variable_count": 7, "physical_quantity_count": 5, "parameter_count": 0, "equation_count": 2, "dependency_count": 13, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 12.0, "model_type": "computational", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm for i in 1:n loop h := scalar(2*transpose(matrix(u))*A[:, i]/lu)", "search_keywords": [":, :", ":, i", "Real", "a_1, a_2, ..., a_n", "computational", "electrical", "size(A, 1)", "size(A, 1), size(A, 2)"]}, "components": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Rectangular matrix"}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1)]", "comment": "Householder vector"}, {"name": "RA", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 2)]", "comment": "Reflection of A"}, {"name": "h", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "lu", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "A", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Rectangular matrix\""}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Householder vector\""}, {"name": "RA", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Reflection of A\""}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(A, 2)", "comment": null}, {"name": "h", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "lu", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "(Vectors.length(u))^2", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "householderReflection", "unit": "a_1, a_2, ..., a_n", "display_unit": null, "quantity": null, "nominal": null}, {"name": "u", "unit": ":, :", "display_unit": null, "quantity": null, "nominal": null}, {"name": "matrix", "unit": "size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "vector", "unit": "size(A, 1), size(A, 2)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "A", "unit": ":, i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Matrices.Utilities", "Modelica.Icons", "Modelica.Math", "Modelica.Math.Vectors", "Modelica_LinearSystems2.Math.Matrices", "ObsoleteModelica4.Math.Matrices.Utilities", "ObsoleteModelica4.Math.Vectors", "ObsoleteModelica4.Math.Vectors.Utilities", "Utilities", "Vectors", "Vectors.Utilities", "e", "i"], "inheritance_chain": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"]}
{"fqn": "ObsoleteModelica4.Math.Vectors.Utilities.householderReflection", "kind": "function", "name": "householderReflection", "package_path": ["ObsoleteModelica4", "Math", "Vectors", "Utilities"], "extends": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"], "imports": ["Modelica.Math.Vectors"], "parameters": [], "equations": [{"equations": ["algorithm\r\n          ra := a - h*u", "// Values close to zero are set to zero.\r\n          for i in 1:size(ra, 1) loop\r\n            ra[i] := if abs(ra[i]) >= norm_a*1e-12 then ra[i] else 0", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1660, "end_line": 1666, "start_col": 9, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1660, "end_line": 1660, "start_col": 9, "end_col": 18}}], "docstring": "extends Modelica.Icons.Function | components: Real×4 | units: :, size(a, 1), size(u, 1) | eq: algorithm ra := a - h*u", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1647, "end_line": 1716, "start_col": 9, "end_col": 34}, "code_text": "function householderReflection \"Reflect a vector a on a plane with orthogonal vector u\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors;\r\n\r\n          input Real a[:] \"Real vector a to be reflected\";\r\n          input Real u[size(a, 1)] \"Householder vector\";\r\n          output Real ra[size(u, 1)] \"Reflection of a\";\r\n\r\n        protected\r\n          Real norm_a=Vectors.length(a);\r\n          Real h=2*u*a;\r\n\r\n        algorithm\r\n          ra := a - h*u;\r\n\r\n          // Values close to zero are set to zero.\r\n          for i in 1:size(ra, 1) loop\r\n            ra[i] := if abs(ra[i]) >= norm_a*1e-12 then ra[i] else 0;\r\n          end for;\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Vectors.householderReflexion instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.Utilities.<strong>householderReflection</strong>(a,u);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nFunction \\\"<code>householderReflection(a, u)</code>\\\" performs the reflection of vector\r\n<strong>a</strong> about a plane orthogonal to vector <strong>u</strong> (Householder vector).\r\nAlgebraically the operation is defined by\r\n</p>\r\n<blockquote>\r\n<p>\r\n<strong>b</strong>=<strong>Q</strong>*<strong>a</strong>\r\n</p>\r\n</blockquote>\r\nwith\r\n<blockquote>\r\n<p>\r\n   <strong>Q</strong> = <strong>I</strong> - 2*<strong>u</strong>*<strong>u</strong>',\r\n</p>\r\n</blockquote>\r\nwhere <strong>Q</strong> is an orthogonal matrix, i.e.\r\n<blockquote>\r\n<p>\r\n    <strong>Q</strong> = inv(<strong>Q</strong>) = <strong>Q</strong>'\r\n</p>\r\n</blockquote>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\na = {2, -4, -2, -1};\r\nu = {0.837, -0.478, -0.239, -0.119};\r\n\r\n<strong>householderReflection</strong>(a,u);    //  = {-5.0, -0.001, -0.0005, -0.0044}\r\n</pre></blockquote>\r\n<h4>See also</h4>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderVector\\\">Utilities.householderVector</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderReflection\\\">Matrices.Utilities.householderReflection</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation\\\">Matrices.Utilities.householderSimilarityTransformation</a>\r\n\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n</html>\"));\r\n        end householderReflection", "checksum": "0dd009715bebe27e7cf298c37336dc038060ca84", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:1647-1716", "component_count": 4, "connection_count": 0, "variable_count": 6, "physical_quantity_count": 4, "parameter_count": 0, "equation_count": 2, "dependency_count": 10, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm ra := a - h*u", "search_keywords": ["Real", "computational", "size(a, 1)", "size(u, 1)"]}, "components": [{"name": "a", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Real vector a to be reflected"}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(a, 1)]", "comment": "Householder vector"}, {"name": "ra", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(u, 1)]", "comment": "Reflection of a"}, {"name": "h", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "a", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Real vector a to be reflected\""}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Householder vector\""}, {"name": "ra", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Reflection of a\""}, {"name": "norm_a", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "Vectors.length(a)", "comment": null}, {"name": "h", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "2*u*a", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "u", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "reflected", "unit": "size(a, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "vector", "unit": "size(u, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "a", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Matrices.Utilities", "Modelica.Icons", "Modelica.Math", "Modelica.Math.Vectors", "Modelica_LinearSystems2.Math.Vectors", "ObsoleteModelica4.Math.Matrices.Utilities", "ObsoleteModelica4.Math.Vectors.Utilities", "Utilities", "Vectors", "i"], "inheritance_chain": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"]}
{"fqn": "ObsoleteModelica4.Math.Vectors.Utilities.householderVector", "kind": "function", "name": "householderVector", "package_path": ["ObsoleteModelica4", "Math", "Vectors", "Utilities"], "extends": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"], "imports": ["Modelica.Math.Vectors.length", "Modelica.Math.Vectors.norm"], "parameters": [], "equations": [{"equations": ["algorithm\r\n          assert(norm_b > 0,\r\n            \"Vector b in function householderVector is zero vector, but at least one element should be different from zero\")", "assert(norm_a > 0,\r\n            \"Vector a in function householderVector is zero vector, but at least one element should be different from zero\")", "alpha := if norm(a + norm_a/norm_b*b, 2) > norm(a - norm_a/norm_b*b, 2)\r\n             then norm_a/norm_b else -norm_a/norm_b", "u := (a + alpha*b)/length(a + alpha*b)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1585, "end_line": 1592, "start_col": 9, "end_col": 50}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1585, "end_line": 1585, "start_col": 9, "end_col": 18}}], "docstring": "extends Modelica.Icons.Function | components: Real×5 | units: :, size(a, 1), size(a, 1) | eq: algorithm assert(norm_b > 0, \"Vector b in function householderVect", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1571, "end_line": 1645, "start_col": 9, "end_col": 30}, "code_text": "function householderVector \"Calculate a normalized householder vector to reflect vector a onto vector b\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors.length;\r\n          import Modelica.Math.Vectors.norm;\r\n\r\n          input Real a[:] \"Real vector to be reflected\";\r\n          input Real b[size(a, 1)] \"Real vector b vector a is mapped onto\";\r\n          output Real u[size(a, 1)] \"Householder vector to map a onto b\";\r\n        protected\r\n          Real norm_a=norm(a, 2);\r\n          Real norm_b=norm(b, 2);\r\n          Real alpha;\r\n\r\n        algorithm\r\n          assert(norm_b > 0,\r\n            \"Vector b in function householderVector is zero vector, but at least one element should be different from zero\");\r\n          assert(norm_a > 0,\r\n            \"Vector a in function householderVector is zero vector, but at least one element should be different from zero\");\r\n          alpha := if norm(a + norm_a/norm_b*b, 2) > norm(a - norm_a/norm_b*b, 2)\r\n             then norm_a/norm_b else -norm_a/norm_b;\r\n          u := (a + alpha*b)/length(a + alpha*b);\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Vectors.householderVector instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.Utilities.<strong>householderVector</strong>(a,b);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThe function call \\\"<code>householderVector(a, b)</code>\\\" returns the normalized Householder vector\r\n<strong>u</strong> for Householder reflection of input vector <strong>a</strong> onto vector <strong>b</strong>, i.e., Householder vector <strong>u</strong> is the normal\r\nvector of the reflection plane. Algebraically, the reflection is performed by transformation matrix <strong>Q</strong>\r\n</p>\r\n<blockquote>\r\n<p>\r\n<strong>Q</strong> = <strong>I</strong> - 2*<strong>u</strong>*<strong>u</strong>',\r\n</p>\r\n</blockquote>\r\ni.e., vector <strong>a</strong> is mapped to\r\n<blockquote>\r\n<p>\r\n<strong>a</strong> -> <strong>Q</strong>*<strong>a</strong>=c*<strong>b</strong>\r\n</p>\r\n</blockquote>\r\nwith scalar c, |c| = ||<strong>a</strong>|| / ||<strong>b</strong>||. <strong>Q</strong>*<strong>a</strong> is the reflection of <strong>a</strong> about the hyperplane orthogonal to <strong>u</strong>.\r\n<strong>Q</strong> is an orthogonal matrix, i.e.\r\n<blockquote>\r\n<p>\r\n    <strong>Q</strong> = inv(<strong>Q</strong>) = <strong>Q</strong>'\r\n</p>\r\n</blockquote>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n  a = {2, -4, -2, -1};\r\n  b = {1, 0, 0, 0};\r\n\r\n  u = <strong>householderVector</strong>(a,b);    // {0.837, -0.478, -0.239, -0.119}\r\n                               // Computation (identity(4) - 2*matrix(u)*transpose(matrix(u)))*a results in\r\n                               // {-5, 0, 0, 0} = -5*b\r\n</pre></blockquote>\r\n<h4>See also</h4>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderReflection\\\">Vectors.Utilities.householderReflection</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderReflection\\\">Matrices.Utilities.householderReflection</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation\\\">Matrices.Utilities.householderSimilarityTransformation</a>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n\r\n</html>\"));\r\n        end householderVector", "checksum": "76941ba2e95981f7196c161b1f304a483f568c4e", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:1571-1645", "component_count": 5, "connection_count": 0, "variable_count": 7, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 11, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 12.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm assert(norm_b > 0, \"Vector b in function householderVector is zero vector, but at least one element should be different from zero\")", "search_keywords": ["Real", "computational", "size(a, 1)"]}, "components": [{"name": "a", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Real vector to be reflected"}, {"name": "b", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(a, 1)]", "comment": "Real vector b vector a is mapped onto"}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(a, 1)]", "comment": "Householder vector to map a onto b"}, {"name": "norm_b", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "a", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Real vector to be reflected\""}, {"name": "b", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Real vector b vector a is mapped onto\""}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Householder vector to map a onto b\""}, {"name": "norm_a", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "norm(a, 2)", "comment": null}, {"name": "norm_b", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "norm(b, 2)", "comment": null}, {"name": "alpha", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "algorithm", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "b", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "reflected", "unit": "size(a, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "onto", "unit": "size(a, 1)", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Matrices.Utilities", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Math.Vectors.length", "Modelica.Math.Vectors.norm", "Modelica_LinearSystems2.Math.Vectors", "ObsoleteModelica4.Math.Matrices.Utilities", "ObsoleteModelica4.Math.Vectors.Utilities", "Vectors", "Vectors.Utilities", "i"], "inheritance_chain": ["Modelica.Icons.Function", "Modelica.Icons.ObsoleteModel"]}
{"fqn": "Modelica.ComplexMath.product", "kind": "function", "name": "product", "package_path": ["Modelica", "ComplexMath"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    result:=Complex(1)", "for i in 1:size(v,1) loop\r\n      result:=result * v[i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 642, "end_line": 646, "start_col": 3, "end_col": 13}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 642, "end_line": 642, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Complex×2 | units: :, i | eq: algorithm result:=Complex(1)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 638, "end_line": 650, "start_col": 3, "end_col": 14}, "code_text": "function product \"Return product of complex vector\"\r\n    extends Modelica.Icons.Function;\r\n    input Complex v[:] \"Vector\";\r\n    output Complex result \"Complex product of vector elements\";\r\n  algorithm\r\n    result:=Complex(1);\r\n    for i in 1:size(v,1) loop\r\n      result:=result * v[i];\r\n    end for;\r\n    annotation(Documentation(info=\"<html>\r\n<p>This function returns the Complex product of the Complex input vector</p>\r\n</html>\"));\r\n  end product", "checksum": "1b4342d94f75f70356183ab089847ade91d3b9c4", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:638-650", "component_count": 2, "connection_count": 0, "variable_count": 3, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm result:=Complex(1)", "search_keywords": ["Complex", "computational"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Complex product of vector elements"}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Complex product of vector elements\""}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "elements", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.sum", "kind": "function", "name": "sum", "package_path": ["Modelica", "ComplexMath"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    result:=Complex(.sum(v[:].re), .sum(v[:].im))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 631, "end_line": 632, "start_col": 3, "end_col": 51}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 631, "end_line": 631, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Complex×2 | units: :, : | eq: algorithm result:=Complex(.sum(v[:].re), .sum(v[:].im))", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 627, "end_line": 636, "start_col": 3, "end_col": 10}, "code_text": "function sum \"Return sum of complex vector\"\r\n    extends Modelica.Icons.Function;\r\n    input Complex v[:] \"Vector\";\r\n    output Complex result \"Complex sum of vector elements\";\r\n  algorithm\r\n    result:=Complex(.sum(v[:].re), .sum(v[:].im));\r\n    annotation(Inline=true, Documentation(info=\"<html>\r\n<p>This function returns the Complex sum of the Complex input vector</p>\r\n</html>\"));\r\n  end sum", "checksum": "e632207434e0067073cae82f6b2c1eabcc01518c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:627-636", "component_count": 2, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm result:=Complex(.sum(v[:].re), .sum(v[:].im))", "search_keywords": ["Complex", "computational"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Complex sum of vector elements"}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Complex sum of vector elements\""}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "elements", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.min", "kind": "function", "name": "min", "package_path": ["Modelica", "ComplexMath"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    if size(v,1) > 0 then\r\n      absres := abs(v[1])", "index  := 1", "for i in 2:size(v,1) loop\r\n        absv_i := abs(v[i])", "if absv_i < absres then\r\n          absres := absv_i", "index := i", "end if", "end for", "result :=v[index]", "else\r\n      result := Complex(0)", "index  := 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 606, "end_line": 621, "start_col": 3, "end_col": 12}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 606, "end_line": 606, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Complex×2, Integer×1, Real×1 | units: :, index, index | eq: algorithm if(条件なら)(条件なら) size(v,1) > 0 then absres := ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 598, "end_line": 625, "start_col": 3, "end_col": 10}, "code_text": "function min \"Return minimum element of complex vector\"\r\n    extends Modelica.Icons.Function;\r\n    input Complex v[:] \"Vector\";\r\n    output Complex result \"Element of v with smallest absolute value\";\r\n    output Integer index \"v[index] has the smallest absolute value\";\r\n  protected\r\n    Real absv_i;\r\n    Real absres;\r\n  algorithm\r\n    if size(v,1) > 0 then\r\n      absres := abs(v[1]);\r\n      index  := 1;\r\n      for i in 2:size(v,1) loop\r\n        absv_i := abs(v[i]);\r\n        if absv_i < absres then\r\n          absres := absv_i;\r\n          index := i;\r\n        end if;\r\n      end for;\r\n      result :=v[index];\r\n    else\r\n      result := Complex(0);\r\n      index  := 0;\r\n    end if;\r\n    annotation(Documentation(info=\"<html>\r\n<p>This function returns the smallest element of the Complex input vector, defined by the Complex absolute.</p>\r\n</html>\"));\r\n  end min", "checksum": "7ae5efdf11e882f3598ea6b5f0622936c8b9b8c2", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:598-625", "component_count": 4, "connection_count": 0, "variable_count": 7, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm if(条件なら) size(v,1) > 0 then absres := abs(v[1])", "search_keywords": ["Complex", "Integer", "Real", "computational", "index"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Element of v with smallest absolute value"}, {"name": "index", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "v[index] has the smallest absolute value"}, {"name": "absres", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Element of v with smallest absolute value\""}, {"name": "index", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"v[index] has the smallest absolute value\""}, {"name": "absv_i", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "absres", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "index", "unit": "index", "display_unit": null, "quantity": null, "nominal": null}, {"name": "value", "unit": "index", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.max", "kind": "function", "name": "max", "package_path": ["Modelica", "ComplexMath"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    if size(v,1) > 0 then\r\n      absres := abs(v[1])", "index  := 1", "for i in 2:size(v,1) loop\r\n        absv_i := abs(v[i])", "if absv_i > absres then\r\n          absres := absv_i", "index := i", "end if", "end for", "result :=v[index]", "else\r\n      result := Complex(0)", "index  := 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 577, "end_line": 592, "start_col": 3, "end_col": 12}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 577, "end_line": 577, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Complex×2, Integer×1, Real×1 | units: :, index, index | eq: algorithm if(条件なら)(条件なら) size(v,1) > 0 then absres := ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 569, "end_line": 596, "start_col": 3, "end_col": 10}, "code_text": "function max \"Return maximum element of complex vector\"\r\n    extends Modelica.Icons.Function;\r\n    input Complex v[:] \"Vector\";\r\n    output Complex result \"Element of v with largest absolute value\";\r\n    output Integer index \"v[index] has the largest absolute value\";\r\n  protected\r\n    Real absv_i;\r\n    Real absres;\r\n  algorithm\r\n    if size(v,1) > 0 then\r\n      absres := abs(v[1]);\r\n      index  := 1;\r\n      for i in 2:size(v,1) loop\r\n        absv_i := abs(v[i]);\r\n        if absv_i > absres then\r\n          absres := absv_i;\r\n          index := i;\r\n        end if;\r\n      end for;\r\n      result :=v[index];\r\n    else\r\n      result := Complex(0);\r\n      index  := 0;\r\n    end if;\r\n    annotation(Documentation(info=\"<html>\r\n<p>This function returns the largest element of the Complex input vector, defined by the Complex absolute.</p>\r\n</html>\"));\r\n  end max", "checksum": "d74b05e83672e8bc98df6da3190fb9e1355c9dd8", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:569-596", "component_count": 4, "connection_count": 0, "variable_count": 7, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm if(条件なら) size(v,1) > 0 then absres := abs(v[1])", "search_keywords": ["Complex", "Integer", "Real", "computational", "index"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Element of v with largest absolute value"}, {"name": "index", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "v[index] has the largest absolute value"}, {"name": "absres", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Element of v with largest absolute value\""}, {"name": "index", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"v[index] has the largest absolute value\""}, {"name": "absv_i", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "absres", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "index", "unit": "index", "display_unit": null, "quantity": null, "nominal": null}, {"name": "value", "unit": "index", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.Vectors.sort", "kind": "function", "name": "sort", "package_path": ["Modelica", "ComplexMath", "Vectors"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n  gap := div(nv,2)", "while gap > 0 loop\r\n     i := gap", "while i < nv loop\r\n        j := i-gap", "if j>=0 then\r\n           k1 := j+1", "k2 := j + gap + 1", "if sortFrequency then\r\n              if ascending then\r\n                 swap := .abs(sorted_v[k1].im) >  .abs(sorted_v[k2].im) or\r\n                         .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                         (sorted_v[k1].re  > sorted_v[k2].re or\r\n                          sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im)", "else\r\n                 swap := .abs(sorted_v[k1].im) <  .abs(sorted_v[k2].im) or\r\n                         .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                         (sorted_v[k1].re  < sorted_v[k2].re or\r\n                          sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im)", "end if", "else\r\n              if ascending then\r\n                 swap := ComplexMath.abs(sorted_v[k1]) > ComplexMath.abs(sorted_v[k2])", "else\r\n                 swap := ComplexMath.abs(sorted_v[k1]) < ComplexMath.abs(sorted_v[k2])", "end if", "end if", "else\r\n           swap := false", "end if", "while swap loop\r\n           wv := sorted_v[j+1]", "wi := indices[j+1]", "sorted_v[j+1] := sorted_v[j+gap+1]", "sorted_v[j+gap+1] := wv", "indices[j+1] := indices[j+gap+1]", "indices[j+gap+1] := wi", "j := j - gap", "if j >= 0 then\r\n              k1 := j+1", "k2 := j + gap + 1", "if sortFrequency then\r\n                 if ascending then\r\n                    swap := .abs(sorted_v[k1].im) >  .abs(sorted_v[k2].im) or\r\n                            .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                            (sorted_v[k1].re  > sorted_v[k2].re or\r\n                             sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im)", "else\r\n                    swap := .abs(sorted_v[k1].im) <  .abs(sorted_v[k2].im) or\r\n                            .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                            (sorted_v[k1].re  < sorted_v[k2].re or\r\n                             sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im)", "end if", "else\r\n                 if ascending then\r\n                    swap := ComplexMath.abs(sorted_v[k1]) > ComplexMath.abs(sorted_v[k2])", "else\r\n                    swap := ComplexMath.abs(sorted_v[k1]) < ComplexMath.abs(sorted_v[k2])", "end if", "end if", "else\r\n              swap := false", "end if", "end while", "i := i + 1", "end while", "gap := div(gap,2)", "end while"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 225, "end_line": 295, "start_col": 1, "end_col": 13}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 225, "end_line": 225, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | components: Integer×7, Complex×3, Boolean×1 | units: :, size(v,1), k2 | eq: algorithm gap := div(nv,2)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 204, "end_line": 322, "start_col": 1, "end_col": 9}, "code_text": "function sort \"Sort elements of complex vector\"\r\n  extends Modelica.Icons.Function;\r\n  input Complex v[:] \"Vector to be sorted\";\r\n  input Boolean ascending = true\r\n        \"= true if ascending order, otherwise descending order\";\r\n  input Boolean sortFrequency=true\r\n        \"= true, if sorting is first for imaginary then for real value; = false, if sorting is for absolute value\";\r\n  output Complex sorted_v[size(v,1)] = v \"Sorted vector\";\r\n  output Integer indices[size(v,1)] = 1:size(v,1) \"sorted_v = v[indices]\";\r\n\r\n  /* shellsort algorithm; should be improved later */\r\n    protected\r\n  Integer gap;\r\n  Integer i;\r\n  Integer j;\r\n  Complex wv;\r\n  Integer wi;\r\n  Integer nv = size(v,1);\r\n  Boolean swap;\r\n  Integer k1;\r\n  Integer k2;\r\nalgorithm\r\n  gap := div(nv,2);\r\n\r\n  while gap > 0 loop\r\n     i := gap;\r\n     while i < nv loop\r\n        j := i-gap;\r\n        if j>=0 then\r\n           k1 := j+1;\r\n           k2 := j + gap + 1;\r\n           if sortFrequency then\r\n              if ascending then\r\n                 swap := .abs(sorted_v[k1].im) >  .abs(sorted_v[k2].im) or\r\n                         .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                         (sorted_v[k1].re  > sorted_v[k2].re or\r\n                          sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im);\r\n              else\r\n                 swap := .abs(sorted_v[k1].im) <  .abs(sorted_v[k2].im) or\r\n                         .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                         (sorted_v[k1].re  < sorted_v[k2].re or\r\n                          sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im);\r\n              end if;\r\n           else\r\n              if ascending then\r\n                 swap := ComplexMath.abs(sorted_v[k1]) > ComplexMath.abs(sorted_v[k2]);\r\n              else\r\n                 swap := ComplexMath.abs(sorted_v[k1]) < ComplexMath.abs(sorted_v[k2]);\r\n              end if;\r\n           end if;\r\n        else\r\n           swap := false;\r\n        end if;\r\n\r\n        while swap loop\r\n           wv := sorted_v[j+1];\r\n           wi := indices[j+1];\r\n           sorted_v[j+1] := sorted_v[j+gap+1];\r\n           sorted_v[j+gap+1] := wv;\r\n           indices[j+1] := indices[j+gap+1];\r\n           indices[j+gap+1] := wi;\r\n           j := j - gap;\r\n           if j >= 0 then\r\n              k1 := j+1;\r\n              k2 := j + gap + 1;\r\n              if sortFrequency then\r\n                 if ascending then\r\n                    swap := .abs(sorted_v[k1].im) >  .abs(sorted_v[k2].im) or\r\n                            .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                            (sorted_v[k1].re  > sorted_v[k2].re or\r\n                             sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im);\r\n                 else\r\n                    swap := .abs(sorted_v[k1].im) <  .abs(sorted_v[k2].im) or\r\n                            .abs(sorted_v[k1].im) == .abs(sorted_v[k2].im) and\r\n                            (sorted_v[k1].re  < sorted_v[k2].re or\r\n                             sorted_v[k1].re  == sorted_v[k2].re and sorted_v[k1].im < sorted_v[k2].im);\r\n                 end if;\r\n              else\r\n                 if ascending then\r\n                    swap := ComplexMath.abs(sorted_v[k1]) > ComplexMath.abs(sorted_v[k2]);\r\n                 else\r\n                    swap := ComplexMath.abs(sorted_v[k1]) < ComplexMath.abs(sorted_v[k2]);\r\n                 end if;\r\n              end if;\r\n           else\r\n              swap := false;\r\n           end if;\r\n        end while;\r\n        i := i + 1;\r\n     end while;\r\n     gap := div(gap,2);\r\n  end while;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\n           sorted_v = Vectors.<strong>sort</strong>(v);\r\n(sorted_v, indices) = Vectors.<strong>sort</strong>(v, ascending=true);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nFunction <strong>sort</strong>(..) sorts a Real vector v\r\nin ascending order and returns the result in sorted_v.\r\nIf the optional argument \\\"ascending\\\" is <strong>false</strong>, the vector\r\nis sorted in descending order. In the optional second\r\noutput argument the indices of the sorted vector with respect\r\nto the original vector are given, such that sorted_v = v[indices].\r\n</p>\r\n\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n(v2, i2) := Vectors.sort({-1, 8, 3, 6, 2});\r\n    -> v2 = {-1, 2, 3, 6, 8}\r\n       i2 = {1, 5, 3, 4, 2}\r\n</pre></blockquote>\r\n\r\n</html>\"));\r\nend sort", "checksum": "34d4d374036223293cf4969f45bbf50d8efb5b97", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:204-322", "component_count": 11, "connection_count": 0, "variable_count": 16, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 2, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 24.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm gap := div(nv,2)", "search_keywords": ["Boolean", "Complex", "Integer", "computational", "k2", "size(v,1)"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector to be sorted"}, {"name": "sorted_v", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(v,1)]", "comment": null}, {"name": "indices", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(v,1)]", "comment": null}, {"name": "i", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "j", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "wv", "type_name": "Complex", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "wi", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "nv", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "swap", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "k1", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "k2", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector to be sorted\""}, {"name": "ascending", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "true\r\n        \"= true if ascending order, otherwise descending order\"", "comment": null}, {"name": "sortFrequency", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "true\r\n        \"= true, if sorting is first for imaginary then for real value", "comment": null}, {"name": "sorted_v", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": "v \"Sorted vector\"", "comment": null}, {"name": "indices", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": "1:size(v,1) \"sorted_v = v[indices]\"", "comment": null}, {"name": "gap", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "i", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "j", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "wv", "type_name": "Complex", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "wi", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "nv", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(v,1)", "comment": null}, {"name": "swap", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "k1", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "k2", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "value", "unit": "size(v,1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "v", "unit": "k2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "Vectors"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.Vectors.reverse", "kind": "function", "name": "reverse", "package_path": ["Modelica", "ComplexMath", "Vectors"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n  result := {v[end-i+1] for i in 1:size(v,1)}"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 187, "end_line": 188, "start_col": 1, "end_col": 47}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 187, "end_line": 187, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | components: Complex×2 | units: 1, size(v, 1), end-i+1 | eq: algorithm result := {v[end-i+1] for i in 1:size(v,1)}", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 181, "end_line": 202, "start_col": 1, "end_col": 12}, "code_text": "function reverse \"Reverse vector elements (e.g., v[1] becomes last element)\"\r\nextends Modelica.Icons.Function;\r\n\r\n  input Complex v[:] \"Vector\";\r\n  output Complex result[size(v, 1)] \"Elements of vector v in reversed order\";\r\n\r\nalgorithm\r\n  result := {v[end-i+1] for i in 1:size(v,1)};\r\nannotation (Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.<strong>reverse</strong>(v);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\nThe function call &quot;<code>Vectors.<strong>reverse</strong>(v)</code>&quot; returns the complex vector elements in reverse order.\r\n\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n<strong>reverse</strong>({1,2,3,4});  // = {4,3,2,1}\r\n</pre></blockquote>\r\n</html>\"));\r\nend reverse", "checksum": "056d742138c5346fb608f7d8412254512d0c2527", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:181-202", "component_count": 2, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 2, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm result := {v[end-i+1] for i in 1:size(v,1)}", "search_keywords": ["Complex", "computational", "end-i+1", "size(v, 1)"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(v, 1)]", "comment": "Elements of vector v in reversed order"}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Elements of vector v in reversed order\""}], "physical_quantities": [{"name": "reverse", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Vector", "unit": "size(v, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "order", "unit": "end-i+1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "e"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.Vectors.normalize", "kind": "function", "name": "normalize", "package_path": ["Modelica", "ComplexMath", "Vectors"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n  if length_v >= eps then\r\n     for i in 1:size(v,1) loop\r\n         result[i] :=v[i].re/length_v + (v[i].im/length_v)*j", "end for", "else\r\n     result :=v", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 134, "end_line": 141, "start_col": 1, "end_col": 10}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 134, "end_line": 134, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | components: Complex×2, Real×1 | units: :, size(v, 1) | eq: algorithm if(条件なら)(条件なら) length_v >= eps then for i in 1:size(v,1) ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 125, "end_line": 179, "start_col": 1, "end_col": 14}, "code_text": "function normalize\r\n      \"Return normalized complex vector such that length = 1 and prevent zero-division for zero vector\"\r\n  extends Modelica.Icons.Function;\r\n  input Complex v[:] \"Vector\";\r\n  input Real eps = 100*Modelica.Constants.eps \"if |v| < eps then result = v\";\r\n  output Complex result[size(v, 1)] \"Input vector v normalized to length=1\";\r\n\r\n    protected\r\n  Real length_v = length(v);\r\nalgorithm\r\n  if length_v >= eps then\r\n     for i in 1:size(v,1) loop\r\n         result[i] :=v[i].re/length_v + (v[i].im/length_v)*j;\r\n     end for;\r\n  else\r\n     result :=v;\r\n  end if;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.<strong>normalize</strong>(v);\r\nVectors.<strong>normalize</strong>(v,eps=100*Modelica.Constants.eps);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThe function call \\\"<code>Vectors.<strong>normalize</strong>(v)</code>\\\" returns the\r\n<strong>unit vector</strong> \\\"<code>v/length(v)</code>\\\" of vector v.\r\nIf length(v) is close to zero (more precisely, if length(v) &lt; eps),\r\nv is returned in order to avoid\r\na division by zero. For many applications this is useful, because\r\noften the unit vector <strong>e</strong> = <strong>v</strong>/length(<strong>v</strong>) is used to compute\r\na vector x*<strong>e</strong>, where the scalar x is in the order of length(<strong>v</strong>),\r\ni.e., x*<strong>e</strong> is small, when length(<strong>v</strong>) is small and then\r\nit is fine to replace <strong>e</strong> by <strong>v</strong> to avoid a division by zero.\r\n</p>\r\n<p>\r\nSince the function is implemented in one statement,\r\nit is usually inlined and therefore symbolic processing is\r\npossible.\r\n</p>\r\n\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n<strong>normalize</strong>({1,2,3});  // = {0.267, 0.534, 0.802}\r\n<strong>normalize</strong>({0,0,0});  // = {0,0,0}\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Math.Vectors.length\\\">Vectors.length</a>\r\n</p>\r\n</html>\"));\r\nend normalize", "checksum": "98fe2d027765631fd5750d84be3f17748abd65ba", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:125-179", "component_count": 3, "connection_count": 0, "variable_count": 6, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 5, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 8.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm if(条件なら) length_v >= eps then for i in 1:size(v,1) loop result[i] :=v[i].re/length_v + (v[i].im/length_v)*j", "search_keywords": ["Complex", "Real", "computational", "size(v, 1)"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "eps", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(v, 1)]", "comment": "Input vector v normalized to length=1"}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "eps", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "100*Modelica.Constants.eps \"if |v| < eps then result = v\"", "comment": null}, {"name": "result", "type_name": "Complex", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Input vector v normalized to length=1\""}, {"name": "length_v", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "length(v)", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "v", "unit": "size(v, 1)", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Constants", "Modelica.Icons", "Modelica.Math.Vectors", "Vectors", "i"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.Vectors.length", "kind": "function", "name": "length", "package_path": ["Modelica", "ComplexMath", "Vectors"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n  result := .sqrt(.sum({v[i].re^2 + v[i].im^2 for i in 1:size(v,1)}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 92, "end_line": 93, "start_col": 1, "end_col": 71}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 92, "end_line": 92, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | components: Complex×1, Real×1 | units: :, i | eq: algorithm result := .sqrt(.sum({v[i].re^2 + v[i].im^2 for i in 1:size(v,1)})", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 87, "end_line": 123, "start_col": 1, "end_col": 11}, "code_text": "function length \"Return length of a complex vector\"\r\n  extends Modelica.Icons.Function;\r\n  input Complex v[:] \"Vector\";\r\n  output Real result \"Length of vector v\";\r\n\r\nalgorithm\r\n  result := .sqrt(.sum({v[i].re^2 + v[i].im^2 for i in 1:size(v,1)}));\r\n  annotation (Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.<strong>length</strong>(v);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n\r\n<p>\r\nThe function call \\\"<code>Vectors.<strong>length</strong>(v)</code>\\\" returns the\r\n<strong>Euclidean length</strong> \\\"<code>sqrt(v*v)</code>\\\" of vector v.\r\nThe function call is equivalent to Vectors.norm(v). The advantage of\r\nlength(v) over norm(v)\\\"is that function length(..) is implemented\r\nin one statement and therefore the function is usually automatically\r\ninlined. Further symbolic processing is therefore possible, which is\r\nnot the case with function norm(..).\r\n</p>\r\n\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\nv = {2, -4, -2, -1};\r\n<strong>length</strong>(v);  // = 5\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Math.Vectors.norm\\\">Vectors.norm</a>\r\n</p>\r\n</html>\"));\r\nend length", "checksum": "5bf13ad3dce159514f43a8ccb2df085b9894c694", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:87-123", "component_count": 2, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 3, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm result := .sqrt(.sum({v[i].re^2 + v[i].im^2 for i in 1:size(v,1)}))", "search_keywords": ["Complex", "Real", "computational"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Length of vector v"}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Length of vector v\""}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "v", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "Modelica.Math.Vectors", "Vectors"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.ComplexMath.Vectors.norm", "kind": "function", "name": "norm", "package_path": ["Modelica", "ComplexMath", "Vectors"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n  if p == 2 then\r\n    result:= .sqrt(.sum(v[i].re^2 + v[i].im^2 for i in 1:size(v,1)))", "elseif p == Modelica.Constants.inf then\r\n    result:= ComplexMath.abs(ComplexMath.max(v))", "elseif p == 1 then\r\n    result:= .sum(ComplexMath.abs(v[i]) for i in 1:size(v,1))", "else\r\n    result:=(.sum(ComplexMath.abs(v[i])^p for i in 1:size(v, 1)))^(1/p)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 17, "end_line": 26, "start_col": 1, "end_col": 10}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 17, "end_line": 17, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | components: Complex×1, Real×1 | units: :, i | eq: algorithm if(条件なら)(条件なら) p == 2 then result:= .sqrt(.sum(v[i].re^2 + v[i].im", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo", "start_line": 10, "end_line": 85, "start_col": 1, "end_col": 9}, "code_text": "function norm \"Returns the p-norm of a complex vector\"\r\n  extends Modelica.Icons.Function;\r\n  input Complex v[:] \"Vector\";\r\n  input Real p(min=1) = 2\r\n        \"Type of p-norm (often used: 1, 2, or Modelica.Constants.inf)\";\r\n  output Real result \"p-norm of vector v\";\r\n\r\nalgorithm\r\n  if p == 2 then\r\n    result:= .sqrt(.sum(v[i].re^2 + v[i].im^2 for i in 1:size(v,1)));\r\n  elseif p == Modelica.Constants.inf then\r\n    result:= ComplexMath.abs(ComplexMath.max(v));\r\n  elseif p == 1 then\r\n    result:= .sum(ComplexMath.abs(v[i]) for i in 1:size(v,1));\r\n  else\r\n    result:=(.sum(ComplexMath.abs(v[i])^p for i in 1:size(v, 1)))^(1/p);\r\n  end if;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.<strong>norm</strong>(v);\r\nVectors.<strong>norm</strong>(v,p=2);   // 1 &le; p &le; &#8734;\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThe function call \\\"<code>Vectors.<strong>norm</strong>(v)</code>\\\" returns the\r\n<strong>Euclidean norm</strong> \\\"<code>sqrt(v*v)</code>\\\" of vector v.\r\nWith the optional\r\nsecond argument \\\"p\\\", any other p-norm can be computed:\r\n</p>\r\n<center>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Math/Vectors/vectorNorm.png\\\" alt=\\\"function Vectors.norm\\\">\r\n</center>\r\n<p>\r\nBesides the Euclidean norm (p=2), also the 1-norm and the\r\ninfinity-norm are sometimes used:\r\n</p>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>1-norm</strong></td>\r\n      <td>= sum(abs(v))</td>\r\n      <td><strong>norm</strong>(v,1)</td>\r\n  </tr>\r\n  <tr><td><strong>2-norm</strong></td>\r\n      <td>= sqrt(v*v)</td>\r\n      <td><strong>norm</strong>(v) or <strong>norm</strong>(v,2)</td>\r\n  </tr>\r\n  <tr><td><strong>infinity-norm</strong></td>\r\n      <td>= max(abs(v))</td>\r\n      <td><strong>norm</strong>(v,Modelica.Constants.<strong>inf</strong>)</td>\r\n  </tr>\r\n</table>\r\n<p>\r\nNote, for any vector norm the following inequality holds:\r\n</p>\r\n<blockquote><pre>\r\n<strong>norm</strong>(v1+v2,p) &le; <strong>norm</strong>(v1,p) + <strong>norm</strong>(v2,p)\r\n</pre></blockquote>\r\n\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\nv = {2, -4, -2, -1};\r\n<strong>norm</strong>(v,1);    // = 9\r\n<strong>norm</strong>(v,2);    // = 5\r\n<strong>norm</strong>(v);      // = 5\r\n<strong>norm</strong>(v,10.5); // = 4.00052597412635\r\n<strong>norm</strong>(v,Modelica.Constants.inf);  // = 4\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Math.Matrices.norm\\\">Matrices.norm</a>\r\n</p>\r\n</html>\"));\r\nend norm", "checksum": "b71b95d1978b087e97bd16a3cf92e3800e7edab6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexMath.mo:10-85", "component_count": 2, "connection_count": 0, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 7, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm if(条件なら) p == 2 then result:= .sqrt(.sum(v[i].re^2 + v[i].im^2 for i in 1:size(v,1)))", "search_keywords": ["Complex", "Real", "computational"]}, "components": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector"}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "p-norm of vector v"}], "connections": [], "variables": [{"name": "v", "type_name": "Complex", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Vector\""}, {"name": "p", "type_name": "elseif", "prefixes": ["input"], "attributes": {"min": "1"}, "binding_equation": "1 then\r\n    result:= .sum(ComplexMath.abs(v[i]) for i in 1:size(v,1))", "comment": null}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"p-norm of vector v\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "v", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Matrices", "Modelica", "Modelica.Constants", "Modelica.Icons", "Modelica.Math.Matrices", "Vectors", "vectorNorm"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Blocks.Continuous.Internal.Filter.Utilities.normalizationFactor", "kind": "function", "name": "normalizationFactor", "package_path": ["Modelica", "Blocks", "Continuous", "Internal", "Filter", "Utilities"], "extends": ["Modelica.Icons.Function"], "imports": ["Modelica.Utilities.Streams", "Modelica.Utilities.Streams.error"], "parameters": [], "equations": [{"equations": ["algorithm\r\n           // Find interval for alpha\r\n           (alpha_min, alpha_max) :=findInterval(c1, c2)", "// Compute alpha, so that abs(G(p)) = -3db\r\n           alpha :=solveOneNonlinearEquation(\r\n            c1,\r\n            c2,\r\n            alpha_min,\r\n            alpha_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4179, "end_line": 4188, "start_col": 9, "end_col": 24}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4179, "end_line": 4179, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          // Check that f(u_min) and f(u_max) have different sign\r\n          fa := normalizationResidue(c1,c2,u_min)", "fb := normalizationResidue(c1,c2,u_max)", "fc := fb", "if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments u_min and u_max to solveOneNonlinearEquation(..)\\n\" +\r\n              \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  u_min  = \" + String(u_min) + \"\\n\" + \"  u_max  = \" + String(u_max)\r\n               + \"\\n\" + \"  fa = f(u_min) = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(u_max) = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\")", "end if", "// Initialize variables\r\n          c := a", "fc := fa", "e := b - a", "d := e", "// Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b", "b := c", "c := a", "fa := fb", "fb := fc", "fc := fa", "end if", "tol := 2*eps*abs(b) + tolerance", "m := (c - b)/2", "if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true", "u := b", "else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m", "d := e", "else\r\n                s := fb/fa", "if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "q := 1 - s", "else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc", "r := fb/fc", "p := s*(2*m*q*(q - r) - (b - a)*(r - 1))", "q := (q - 1)*(r - 1)*(s - 1)", "end if", "if p > 0 then\r\n                  q := -q", "else\r\n                  p := -p", "end if", "s := e", "e := d", "if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q", "else\r\n                  // use bi-section\r\n                  e := m", "d := e", "end if", "end if", "// Best guess value is defined as \"a\"\r\n              a := b", "fa := fb", "b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol)", "fb := normalizationResidue(c1,c2,b)", "if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a", "fc := fa", "e := b - a", "d := e", "end if", "end if", "end while"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4059, "end_line": 4149, "start_col": 9, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4059, "end_line": 4059, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n            alpha_min :=0", "residue := normalizationResidue(c1, c2, alpha)", "if residue < 0 then\r\n               alpha_max :=alpha", "else\r\n               while residue >= 0 loop\r\n                  alpha := 1.1*alpha", "residue := normalizationResidue(c1, c2, alpha)", "end while", "alpha_max :=alpha", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4013, "end_line": 4024, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4013, "end_line": 4013, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm\r\n            assert(size(c1,1) <= 1, \"Internal error 2 (should not occur)\")", "if size(c1, 1) == 1 then\r\n              cc1 := c1[1]*c1[1]", "p := 1 + cc1*alpha2", "A2 := A2*p", "end if", "for i in 1:size(c2, 1) loop\r\n              cc1 := c2[i, 2]*c2[i, 2] - 2*c2[i, 1]", "cc2 := c2[i, 1]*c2[i, 1]", "p := 1 + cc1*alpha2 + cc2*alpha4", "A2 := A2*p", "end for", "residue := 1/sqrt(A2) - beta"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3986, "end_line": 3999, "start_col": 11, "end_col": 42}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3986, "end_line": 3986, "start_col": 11, "end_col": 20}}], "docstring": "extends Modelica.Icons.Function | components: Real×26, Boolean×1 | units: i}*p + 1)\"; input Real c2[:,2, :, i,2 | eq: algorithm // Find interval for alpha (alph", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3953, "end_line": 4189, "start_col": 9, "end_col": 32}, "code_text": "function normalizationFactor\r\n          \"Compute correction factor of low pass filter such that amplitude at cut-off frequency is -3db (=10^(-3/20) = 0.70794...)\"\r\n          extends Modelica.Icons.Function;\r\n\r\n          import Modelica.Utilities.Streams;\r\n\r\n          input Real c1[:]\r\n            \"[p] coefficients of denominator polynomials (c1[i}*p + 1)\";\r\n          input Real c2[:,2]\r\n            \"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\";\r\n          output Real alpha \"Correction factor (replace p by alpha*p)\";\r\n        protected\r\n          Real alpha_min;\r\n          Real alpha_max;\r\n\r\n          function normalizationResidue\r\n            \"Residue of correction factor computation\"\r\n            extends Modelica.Icons.Function;\r\n            input Real c1[:]\r\n              \"[p] coefficients of denominator polynomials (c1[i]*p + 1)\";\r\n            input Real c2[:,2]\r\n              \"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\";\r\n            input Real alpha;\r\n            output Real residue;\r\n          protected\r\n            constant Real beta= 10^(-3/20)\r\n              \"Amplitude of -3db required, i.e., -3db = 20*log(beta)\";\r\n            Real cc1;\r\n            Real cc2;\r\n            Real p;\r\n            Real alpha2=alpha*alpha;\r\n            Real alpha4=alpha2*alpha2;\r\n            Real A2=1.0;\r\n          algorithm\r\n            assert(size(c1,1) <= 1, \"Internal error 2 (should not occur)\");\r\n            if size(c1, 1) == 1 then\r\n              cc1 := c1[1]*c1[1];\r\n              p := 1 + cc1*alpha2;\r\n              A2 := A2*p;\r\n            end if;\r\n            for i in 1:size(c2, 1) loop\r\n              cc1 := c2[i, 2]*c2[i, 2] - 2*c2[i, 1];\r\n              cc2 := c2[i, 1]*c2[i, 1];\r\n              p := 1 + cc1*alpha2 + cc2*alpha4;\r\n              A2 := A2*p;\r\n            end for;\r\n            residue := 1/sqrt(A2) - beta;\r\n          end normalizationResidue;\r\n\r\n          function findInterval \"Find interval for the root\"\r\n            extends Modelica.Icons.Function;\r\n            input Real c1[:]\r\n              \"[p] coefficients of denominator polynomials (a*p + 1)\";\r\n            input Real c2[:,2]\r\n              \"[p^2, p] coefficients of denominator polynomials (b*p^2 + a*p + 1)\";\r\n            output Real alpha_min;\r\n            output Real alpha_max;\r\n          protected\r\n            Real alpha = 1.0;\r\n            Real residue;\r\n          algorithm\r\n            alpha_min :=0;\r\n            residue := normalizationResidue(c1, c2, alpha);\r\n            if residue < 0 then\r\n               alpha_max :=alpha;\r\n            else\r\n               while residue >= 0 loop\r\n                  alpha := 1.1*alpha;\r\n                  residue := normalizationResidue(c1, c2, alpha);\r\n               end while;\r\n               alpha_max :=alpha;\r\n            end if;\r\n          end findInterval;\r\n\r\n        function solveOneNonlinearEquation\r\n            \"Solve f(u) = 0; f(u_min) and f(u_max) must have different signs\"\r\n            extends Modelica.Icons.Function;\r\n            import Modelica.Utilities.Streams.error;\r\n\r\n          input Real c1[:]\r\n              \"[p] coefficients of denominator polynomials (c1[i]*p + 1)\";\r\n          input Real c2[:,2]\r\n              \"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\";\r\n          input Real u_min \"Lower bound of search interval\";\r\n          input Real u_max \"Upper bound of search interval\";\r\n          input Real tolerance=100*Modelica.Constants.eps\r\n              \"Relative tolerance of solution u\";\r\n          output Real u \"Value of independent variable so that f(u) = 0\";\r\n\r\n          protected\r\n          constant Real eps=Modelica.Constants.eps \"Machine epsilon\";\r\n          Real a=u_min \"Current best minimum interval value\";\r\n          Real b=u_max \"Current best maximum interval value\";\r\n          Real c \"Intermediate point a <= c <= b\";\r\n          Real d;\r\n          Real e \"b - a\";\r\n          Real m;\r\n          Real s;\r\n          Real p;\r\n          Real q;\r\n          Real r;\r\n          Real tol;\r\n          Real fa \"= f(a)\";\r\n          Real fb \"= f(b)\";\r\n          Real fc;\r\n          Boolean found=false;\r\n        algorithm\r\n          // Check that f(u_min) and f(u_max) have different sign\r\n          fa := normalizationResidue(c1,c2,u_min);\r\n          fb := normalizationResidue(c1,c2,u_max);\r\n          fc := fb;\r\n          if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments u_min and u_max to solveOneNonlinearEquation(..)\\n\" +\r\n              \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  u_min  = \" + String(u_min) + \"\\n\" + \"  u_max  = \" + String(u_max)\r\n               + \"\\n\" + \"  fa = f(u_min) = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(u_max) = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\");\r\n          end if;\r\n\r\n          // Initialize variables\r\n          c := a;\r\n          fc := fa;\r\n          e := b - a;\r\n          d := e;\r\n\r\n          // Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b;\r\n              b := c;\r\n              c := a;\r\n              fa := fb;\r\n              fb := fc;\r\n              fc := fa;\r\n            end if;\r\n\r\n            tol := 2*eps*abs(b) + tolerance;\r\n            m := (c - b)/2;\r\n\r\n            if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true;\r\n              u := b;\r\n            else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m;\r\n                d := e;\r\n              else\r\n                s := fb/fa;\r\n                if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s;\r\n                  q := 1 - s;\r\n                else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc;\r\n                  r := fb/fc;\r\n                  p := s*(2*m*q*(q - r) - (b - a)*(r - 1));\r\n                  q := (q - 1)*(r - 1)*(s - 1);\r\n                end if;\r\n\r\n                if p > 0 then\r\n                  q := -q;\r\n                else\r\n                  p := -p;\r\n                end if;\r\n\r\n                s := e;\r\n                e := d;\r\n                if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q;\r\n                else\r\n                  // use bi-section\r\n                  e := m;\r\n                  d := e;\r\n                end if;\r\n              end if;\r\n\r\n              // Best guess value is defined as \"a\"\r\n              a := b;\r\n              fa := fb;\r\n              b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol);\r\n              fb := normalizationResidue(c1,c2,b);\r\n\r\n              if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a;\r\n                fc := fa;\r\n                e := b - a;\r\n                d := e;\r\n              end if;\r\n            end if;\r\n          end while;\r\n\r\n          annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThis function determines the solution of <strong>one non-linear algebraic equation</strong> \\\"y=f(u)\\\"\r\nin <strong>one unknown</strong> \\\"u\\\" in a reliable way. It is one of the best numerical\r\nalgorithms for this purpose. As input, the nonlinear function f(u)\r\nhas to be given, as well as an interval u_min, u_max that\r\ncontains the solution, i.e., \\\"f(u_min)\\\" and \\\"f(u_max)\\\" must\r\nhave a different sign. If possible, a smaller interval is computed by\r\ninverse quadratic interpolation (interpolating with a quadratic polynomial\r\nthrough the last 3 points and computing the zero). If this fails,\r\nbisection is used, which always reduces the interval by a factor of 2.\r\nThe inverse quadratic interpolation method has superlinear convergence.\r\nThis is roughly the same convergence rate as a globally convergent Newton\r\nmethod, but without the need to compute derivatives of the non-linear\r\nfunction. The solver function is a direct mapping of the Algol 60 procedure\r\n\\\"zero\\\" to Modelica, from:\r\n</p>\r\n\r\n<dl>\r\n<dt> Brent R.P.:</dt>\r\n<dd> <strong>Algorithms for Minimization without derivatives</strong>.\r\n     Prentice Hall, 1973, pp. 58-59.</dd>\r\n</dl>\r\n\r\n</html>\"));\r\n        end solveOneNonlinearEquation;\r\n\r\n        algorithm\r\n           // Find interval for alpha\r\n           (alpha_min, alpha_max) :=findInterval(c1, c2);\r\n\r\n           // Compute alpha, so that abs(G(p)) = -3db\r\n           alpha :=solveOneNonlinearEquation(\r\n            c1,\r\n            c2,\r\n            alpha_min,\r\n            alpha_max);\r\n        end normalizationFactor", "checksum": "5da60843ed60370e7bb3c317b3477b26b0c5348c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo:3953-4189", "component_count": 27, "connection_count": 0, "variable_count": 37, "physical_quantity_count": 5, "parameter_count": 0, "equation_count": 8, "dependency_count": 7, "has_physical_interface": true, "interface_component_count": 6, "has_connections": false, "is_composite_model": false, "complexity_score": 62.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm // Find interval for alpha (alpha_min, alpha_max) :=findInterval(c1, c2)", "search_keywords": ["Boolean", "Real", "computational", "i,2", "i}*p + 1)\";\r\n          input Real c2[:,2"]}, "components": [{"name": "alpha", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Correction factor (replace p by alpha*p)"}, {"name": "alpha_max", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "cc1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "cc2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "p", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha4", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "A2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha_min", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u_min", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Lower bound of search interval"}, {"name": "u_max", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Upper bound of search interval"}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Value of independent variable so that f(u) = 0"}, {"name": "a", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "b", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "c", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Intermediate point a <= c <= b"}, {"name": "d", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "e", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "b - a"}, {"name": "m", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "s", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "q", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "tol", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "fa", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f(a)"}, {"name": "fb", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f(b)"}, {"name": "fc", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "found", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "c1", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"[p] coefficients of denominator polynomials (c1[i]*p + 1)\""}, {"name": "c2", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\""}, {"name": "alpha", "type_name": "Real", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": "1.0", "comment": "\"Correction factor (replace p by alpha*p)\""}, {"name": "alpha_min", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alpha_max", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cc1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cc2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "p", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alpha2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "alpha*alpha", "comment": null}, {"name": "alpha4", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "alpha2*alpha2", "comment": null}, {"name": "A2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "1.0", "comment": null}, {"name": "size", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "1 then\r\n              cc1 := c1[1]*c1[1]", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "normalizationResidue", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "findInterval", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u_min", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Lower bound of search interval\""}, {"name": "u_max", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Upper bound of search interval\""}, {"name": "tolerance", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "100*Modelica.Constants.eps\r\n              \"Relative tolerance of solution u\"", "comment": null}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Value of independent variable so that f(u) = 0\""}, {"name": "a", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "comment": null}, {"name": "b", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "u_max \"Current best maximum interval value\"", "comment": null}, {"name": "c", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Intermediate point a <= c <= b\""}, {"name": "d", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "e", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"b - a\""}, {"name": "m", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "q", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tol", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "fa", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= f(a)\""}, {"name": "fb", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= f(b)\""}, {"name": "fc", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "found", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "solveOneNonlinearEquation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "c1", "unit": "i}*p + 1)\";\r\n          input Real c2[:,2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "computation", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "c2", "unit": "i,2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "root", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signs", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Constants", "Modelica.Icons", "Modelica.Utilities", "Modelica.Utilities.Streams", "Modelica.Utilities.Streams.error", "R", "i"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.IdealGases.Common.MixtureGasNasa.extends", "kind": "function", "name": "extends", "package_path": ["Modelica", "Media", "IdealGases", "Common", "MixtureGasNasa"], "extends": ["specificEnthalpy", "Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    h := h_TX(state.T,state.X)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 718, "end_line": 719, "start_col": 3, "end_col": 32}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 718, "end_line": 718, "start_col": 3, "end_col": 12}}], "docstring": "extends specificEnthalpy | eq: algorithm h := h_TX(state.T,state.X)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 716, "end_line": 721, "start_col": 13, "end_col": 23}, "code_text": "function extends specificEnthalpy \"Return specific enthalpy\"\r\n    extends Modelica.Icons.Function;\r\n  algorithm\r\n    h := h_TX(state.T,state.X);\r\n    annotation(Inline=true,smoothOrder=2);\r\n  end specificEnthalpy", "checksum": "6c380ade12d27d11499eda25dc24bb2cd7f94ca8", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo:716-721", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm h := h_TX(state.T,state.X)", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Icons", "state"], "inheritance_chain": ["specificEnthalpy", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Electrical.Spice3.Internal.Mos.mos2CalcNoBypassCodeRevised", "kind": "function", "name": "mos2CalcNoBypassCodeRevised", "package_path": ["Modelica", "Electrical", "Spice3", "Internal", "Mos"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n        int_c := in_c", "int_c.m_vgs := in_m_type * (in_m_pVoltageValues[1] - in_m_pVoltageValues[4])", "// ( G , SP)\r\n        int_c.m_vbs := in_m_type * (in_m_pVoltageValues[2] - in_m_pVoltageValues[4])", "// ( B , SP)\r\n        int_c.m_vds := in_m_type * (in_m_pVoltageValues[3] - in_m_pVoltageValues[4])", "// ( DP, SP)\r\n\r\n        if (in_m.m_uic and in_m.m_dICVBSIsGiven > 0.5) then\r\n          int_c.m_vbs := in_m_type * in_m.m_dICVBS", "elseif (Spice3.Internal.SpiceRoot.initJunctionVoltagesRevised()) then\r\n          int_c.m_vbs := if (in_m.m_off == 1)  then 0. else int_c.m_VBScrit", "end if", "if (in_m.m_uic and in_m.m_dICVDSIsGiven > 0.5) then\r\n          int_c.m_vds := in_m_type * in_m.m_dICVDS", "elseif (Spice3.Internal.SpiceRoot.initJunctionVoltagesRevised()) then\r\n          int_c.m_vds := if (in_m.m_off == 1)  then 0. else (int_c.m_VBDcrit - int_c.m_VBScrit)", "end if", "if (in_m.m_uic and in_m.m_dICVGSIsGiven > 0.5) then\r\n          int_c.m_vgs := in_m_type * in_m.m_dICVGS", "elseif (Spice3.Internal.SpiceRoot.initJunctionVoltagesRevised()) then\r\n          if ( in_m.m_off == 1) then\r\n            int_c.m_vgs := 0.", "end if", "end if", "if (int_c.m_vds == 0 and int_c.m_vgs == 0 and int_c.m_vbs == 0 and not (\r\n            in_m.m_uic) and (in_m.m_off == 0)) then\r\n          int_c.m_vbs := -1", "int_c.m_vgs := in_m_type * int_c.m_tVto", "int_c.m_vds := 0", "end if", "vbd := int_c.m_vbs - int_c.m_vds", "vgd := int_c.m_vgs - int_c.m_vds", "if ( int_c.m_vds >= 0) then\r\n          int_c.m_vbs := Spice3.Internal.SpiceRoot.limitJunctionVoltageRevised(int_c.m_vbs)", "vbd         := int_c.m_vbs - int_c.m_vds", "else\r\n          vbd := Spice3.Internal.SpiceRoot.limitJunctionVoltageRevised(vbd)", "int_c.m_vbs := vbd + int_c.m_vds", "end if", "vgb := int_c.m_vgs - int_c.m_vbs", "(int_c.m_cbd,int_c.m_gbd) := Spice3.Internal.Functions.junction2SPICE3MOSFETRevised(\r\n          vbd,\r\n          in_m.m_dTemp,\r\n          1.0,\r\n          int_c.m_tDrainSatCur)", "out_cc.iBD                := in_m_type * int_c.m_cbd", "(int_c.m_cbs,int_c.m_gbs) := Spice3.Internal.Functions.junction2SPICE3MOSFETRevised(\r\n          int_c.m_vbs,\r\n          in_m.m_dTemp,\r\n          1.0,\r\n          int_c.m_tSourceSatCur)", "out_cc.iBS                := in_m_type * int_c.m_cbs", "int_c.m_mode := if (int_c.m_vds >= 0) then 1 else -1", "// 1: normal mode, -1: inverse mode\r\n\r\n        if (int_c.m_mode == 1) then\r\n          int_c := Spice3.Internal.Mos2.drainCurRevised(\r\n            int_c.m_vbs,\r\n            int_c.m_vgs,\r\n            int_c.m_vds,\r\n            in_m,\r\n            int_c,\r\n            in_p,\r\n            in_m_type)", "else\r\n          int_c := Spice3.Internal.Mos2.drainCurRevised(\r\n            vbd,\r\n            vgd,\r\n            -int_c.m_vds,\r\n            in_m,\r\n            int_c,\r\n            in_p,\r\n            in_m_type)", "end if", "out_cc.idrain := in_m_type * int_c.m_cdrain * int_c.m_mode", "int_c.m_capbss    := 0.0", "int_c.m_chargebss := 0.0", "int_c.m_capbds    := 0.0", "int_c.m_chargebds := 0.0", "(int_c.m_capbsb,int_c.m_chargebsb) := Spice3.Internal.Functions.junctionCapRevised(\r\n          int_c.m_tCBSb,\r\n          int_c.m_vbs,\r\n          int_c.m_tDepCap,\r\n          in_p.m_bulkJctBotGradingCoeff,\r\n          int_c.m_tBulkPot,\r\n          int_c.m_f1b,\r\n          int_c.m_f2b,\r\n          int_c.m_f3b)", "(int_c.m_capbdb,int_c.m_chargebdb) := Spice3.Internal.Functions.junctionCapRevised(\r\n          int_c.m_tCBDb,\r\n          vbd,\r\n          int_c.m_tDepCap,\r\n          in_p.m_bulkJctBotGradingCoeff,\r\n          int_c.m_tBulkPot,\r\n          int_c.m_f1b,\r\n          int_c.m_f2b,\r\n          int_c.m_f3b)", "if ( not (in_p.m_capBSIsGiven > 0.5)) then\r\n          (int_c.m_capbss,int_c.m_chargebss) := Spice3.Internal.Functions.junctionCapRevised(\r\n            int_c.m_tCBSs,\r\n            int_c.m_vbs,\r\n            int_c.m_tDepCap,\r\n            in_p.m_bulkJctSideGradingCoeff,\r\n            int_c.m_tBulkPot,\r\n            int_c.m_f1s,\r\n            int_c.m_f2s,\r\n            int_c.m_f3s)", "end if", "if (not (in_p.m_capBDIsGiven > 0.5)) then\r\n          (int_c.m_capbds,int_c.m_chargebds) := Spice3.Internal.Functions.junctionCapRevised(\r\n            int_c.m_tCBDs,\r\n            vbd,\r\n            int_c.m_tDepCap,\r\n            in_p.m_bulkJctSideGradingCoeff,\r\n            int_c.m_tBulkPot,\r\n            int_c.m_f1s,\r\n            int_c.m_f2s,\r\n            int_c.m_f3s)", "end if", "out_cc.cBS := if (in_m_bInit) then 1e-15 else (int_c.m_capbsb + int_c.m_capbss)", "out_cc.cBD := if (in_m_bInit) then 1e-15 else (int_c.m_capbdb + int_c.m_capbds)", "if (int_c.m_mode > 0) then\r\n          qm := Modelica.Electrical.Spice3.Internal.Mos.mosCalcDEVqmeyer(\r\n                  int_c.m_vgs,\r\n                  vgd,\r\n                  vgb,\r\n                  int_c)", "else\r\n          qm := Modelica.Electrical.Spice3.Internal.Mos.mosCalcDEVqmeyer(\r\n                  vgd,\r\n                  int_c.m_vgs,\r\n                  vgb,\r\n                  int_c)", "// Inverser Betrieb -> Drain und Source vertauschen\r\n          // Tausch der Spannungen bei Aufruf von DEVqmeyer\r\n          // Tausch der Kapazitaeten GD und GS\r\n          hlp         := qm.qm_capgd", "qm.qm_capgd := qm.qm_capgs", "qm.qm_capgs := hlp", "end if", "int_c.m_capgd := 2 * qm.qm_capgd + int_c.m_capGDovl", "int_c.m_capgs := 2 * qm.qm_capgs + int_c.m_capGSovl", "int_c.m_capgb := 2 * qm.qm_capgb + int_c.m_capGBovl", "out_cc.cGB := if (in_m_bInit) then -1e40 else int_c.m_capgb", "out_cc.cGD := if (in_m_bInit) then -1e40 else int_c.m_capgd", "out_cc.cGS := if (in_m_bInit) then -1e40 else int_c.m_capgs"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 7334, "end_line": 7492, "start_col": 7, "end_col": 69}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 7334, "end_line": 7334, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Icons.Function | components: Spice3.Internal.Mos2.Mos2Calc×2, SI.Voltage×2, Integer×1 | units: V, V, V | eq: algorithm int_c := in_c", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 7310, "end_line": 7497, "start_col": 7, "end_col": 38}, "code_text": "function mos2CalcNoBypassCodeRevised\r\n        \"Calculation of currents and capacities (level 2)\"\r\n        extends Modelica.Icons.Function;\r\n        input Spice3.Internal.Mosfet.Mosfet in_m\r\n          \"Input record MOSFET parameters\";\r\n        input Integer in_m_type \"Type of MOS transistor\";\r\n        input Spice3.Internal.Mos2.Mos2Calc in_c \"Input record Mos2Calc\";\r\n        input Spice3.Internal.Mos2.Mos2ModelLineParams in_p\r\n          \"Input record model line parameters\";\r\n        input Boolean in_m_bInit;\r\n        input SI.Voltage[4] in_m_pVoltageValues; // gate bulk drain source\r\n\r\n        output Modelica.Electrical.Spice3.Internal.Mos.CurrrentsCapacitances out_cc\r\n          \"Calculated currents and capacitances\";\r\n\r\n      protected\r\n        SI.Voltage vbd \"Voltage\";\r\n        SI.Voltage vgd \"Voltage\";\r\n        SI.Voltage vgb \"Voltage\";\r\n        Modelica.Electrical.Spice3.Internal.Mos.DEVqmeyer qm\r\n          \"Qmeyer capacitances\";\r\n        Spice3.Internal.Mos2.Mos2Calc int_c \"Record Mos2Calc\";\r\n        Real hlp;\r\n\r\n      algorithm\r\n        int_c := in_c;\r\n\r\n        int_c.m_vgs := in_m_type * (in_m_pVoltageValues[1] - in_m_pVoltageValues[4]); // ( G , SP)\r\n        int_c.m_vbs := in_m_type * (in_m_pVoltageValues[2] - in_m_pVoltageValues[4]); // ( B , SP)\r\n        int_c.m_vds := in_m_type * (in_m_pVoltageValues[3] - in_m_pVoltageValues[4]); // ( DP, SP)\r\n\r\n        if (in_m.m_uic and in_m.m_dICVBSIsGiven > 0.5) then\r\n          int_c.m_vbs := in_m_type * in_m.m_dICVBS;\r\n        elseif (Spice3.Internal.SpiceRoot.initJunctionVoltagesRevised()) then\r\n          int_c.m_vbs := if (in_m.m_off == 1)  then 0. else int_c.m_VBScrit;\r\n        end if;\r\n        if (in_m.m_uic and in_m.m_dICVDSIsGiven > 0.5) then\r\n          int_c.m_vds := in_m_type * in_m.m_dICVDS;\r\n        elseif (Spice3.Internal.SpiceRoot.initJunctionVoltagesRevised()) then\r\n          int_c.m_vds := if (in_m.m_off == 1)  then 0. else (int_c.m_VBDcrit - int_c.m_VBScrit);\r\n        end if;\r\n        if (in_m.m_uic and in_m.m_dICVGSIsGiven > 0.5) then\r\n          int_c.m_vgs := in_m_type * in_m.m_dICVGS;\r\n        elseif (Spice3.Internal.SpiceRoot.initJunctionVoltagesRevised()) then\r\n          if ( in_m.m_off == 1) then\r\n            int_c.m_vgs := 0.;\r\n          end if;\r\n        end if;\r\n\r\n        if (int_c.m_vds == 0 and int_c.m_vgs == 0 and int_c.m_vbs == 0 and not (\r\n            in_m.m_uic) and (in_m.m_off == 0)) then\r\n          int_c.m_vbs := -1;\r\n          int_c.m_vgs := in_m_type * int_c.m_tVto;\r\n          int_c.m_vds := 0;\r\n        end if;\r\n\r\n        vbd := int_c.m_vbs - int_c.m_vds;\r\n        vgd := int_c.m_vgs - int_c.m_vds;\r\n\r\n        if ( int_c.m_vds >= 0) then\r\n          int_c.m_vbs := Spice3.Internal.SpiceRoot.limitJunctionVoltageRevised(int_c.m_vbs);\r\n          vbd         := int_c.m_vbs - int_c.m_vds;\r\n        else\r\n          vbd := Spice3.Internal.SpiceRoot.limitJunctionVoltageRevised(vbd);\r\n          int_c.m_vbs := vbd + int_c.m_vds;\r\n        end if;\r\n\r\n        vgb := int_c.m_vgs - int_c.m_vbs;\r\n\r\n        (int_c.m_cbd,int_c.m_gbd) := Spice3.Internal.Functions.junction2SPICE3MOSFETRevised(\r\n          vbd,\r\n          in_m.m_dTemp,\r\n          1.0,\r\n          int_c.m_tDrainSatCur);\r\n        out_cc.iBD                := in_m_type * int_c.m_cbd;\r\n        (int_c.m_cbs,int_c.m_gbs) := Spice3.Internal.Functions.junction2SPICE3MOSFETRevised(\r\n          int_c.m_vbs,\r\n          in_m.m_dTemp,\r\n          1.0,\r\n          int_c.m_tSourceSatCur);\r\n        out_cc.iBS                := in_m_type * int_c.m_cbs;\r\n\r\n        int_c.m_mode := if (int_c.m_vds >= 0) then 1 else -1; // 1: normal mode, -1: inverse mode\r\n\r\n        if (int_c.m_mode == 1) then\r\n          int_c := Spice3.Internal.Mos2.drainCurRevised(\r\n            int_c.m_vbs,\r\n            int_c.m_vgs,\r\n            int_c.m_vds,\r\n            in_m,\r\n            int_c,\r\n            in_p,\r\n            in_m_type);\r\n        else\r\n          int_c := Spice3.Internal.Mos2.drainCurRevised(\r\n            vbd,\r\n            vgd,\r\n            -int_c.m_vds,\r\n            in_m,\r\n            int_c,\r\n            in_p,\r\n            in_m_type);\r\n        end if;\r\n        out_cc.idrain := in_m_type * int_c.m_cdrain * int_c.m_mode;\r\n\r\n        int_c.m_capbss    := 0.0;\r\n        int_c.m_chargebss := 0.0;\r\n        int_c.m_capbds    := 0.0;\r\n        int_c.m_chargebds := 0.0;\r\n        (int_c.m_capbsb,int_c.m_chargebsb) := Spice3.Internal.Functions.junctionCapRevised(\r\n          int_c.m_tCBSb,\r\n          int_c.m_vbs,\r\n          int_c.m_tDepCap,\r\n          in_p.m_bulkJctBotGradingCoeff,\r\n          int_c.m_tBulkPot,\r\n          int_c.m_f1b,\r\n          int_c.m_f2b,\r\n          int_c.m_f3b);\r\n\r\n        (int_c.m_capbdb,int_c.m_chargebdb) := Spice3.Internal.Functions.junctionCapRevised(\r\n          int_c.m_tCBDb,\r\n          vbd,\r\n          int_c.m_tDepCap,\r\n          in_p.m_bulkJctBotGradingCoeff,\r\n          int_c.m_tBulkPot,\r\n          int_c.m_f1b,\r\n          int_c.m_f2b,\r\n          int_c.m_f3b);\r\n\r\n        if ( not (in_p.m_capBSIsGiven > 0.5)) then\r\n          (int_c.m_capbss,int_c.m_chargebss) := Spice3.Internal.Functions.junctionCapRevised(\r\n            int_c.m_tCBSs,\r\n            int_c.m_vbs,\r\n            int_c.m_tDepCap,\r\n            in_p.m_bulkJctSideGradingCoeff,\r\n            int_c.m_tBulkPot,\r\n            int_c.m_f1s,\r\n            int_c.m_f2s,\r\n            int_c.m_f3s);\r\n        end if;\r\n\r\n        if (not (in_p.m_capBDIsGiven > 0.5)) then\r\n          (int_c.m_capbds,int_c.m_chargebds) := Spice3.Internal.Functions.junctionCapRevised(\r\n            int_c.m_tCBDs,\r\n            vbd,\r\n            int_c.m_tDepCap,\r\n            in_p.m_bulkJctSideGradingCoeff,\r\n            int_c.m_tBulkPot,\r\n            int_c.m_f1s,\r\n            int_c.m_f2s,\r\n            int_c.m_f3s);\r\n        end if;\r\n\r\n        out_cc.cBS := if (in_m_bInit) then 1e-15 else (int_c.m_capbsb + int_c.m_capbss);\r\n        out_cc.cBD := if (in_m_bInit) then 1e-15 else (int_c.m_capbdb + int_c.m_capbds);\r\n\r\n        if (int_c.m_mode > 0) then\r\n          qm := Modelica.Electrical.Spice3.Internal.Mos.mosCalcDEVqmeyer(\r\n                  int_c.m_vgs,\r\n                  vgd,\r\n                  vgb,\r\n                  int_c);\r\n        else\r\n          qm := Modelica.Electrical.Spice3.Internal.Mos.mosCalcDEVqmeyer(\r\n                  vgd,\r\n                  int_c.m_vgs,\r\n                  vgb,\r\n                  int_c);\r\n          // Inverser Betrieb -> Drain und Source vertauschen\r\n          // Tausch der Spannungen bei Aufruf von DEVqmeyer\r\n          // Tausch der Kapazitaeten GD und GS\r\n          hlp         := qm.qm_capgd;\r\n          qm.qm_capgd := qm.qm_capgs;\r\n          qm.qm_capgs := hlp;\r\n        end if;\r\n\r\n        int_c.m_capgd := 2 * qm.qm_capgd + int_c.m_capGDovl;\r\n        int_c.m_capgs := 2 * qm.qm_capgs + int_c.m_capGSovl;\r\n        int_c.m_capgb := 2 * qm.qm_capgb + int_c.m_capGBovl;\r\n\r\n        out_cc.cGB := if (in_m_bInit) then -1e40 else int_c.m_capgb;\r\n        out_cc.cGD := if (in_m_bInit) then -1e40 else int_c.m_capgd;\r\n        out_cc.cGS := if (in_m_bInit) then -1e40 else int_c.m_capgs;\r\n\r\n        annotation (Documentation(info=\"<html>\r\n<p>This function mos2CalcNoBypassCodeRevised calculates the currents (and the capacitances) that are necessary for the currents sum in the toplevelmodel (level 2).</p>\r\n</html>\"));\r\n      end mos2CalcNoBypassCodeRevised", "checksum": "7d160f4602b02638e994cc5f822625b7e2be5e20", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo:7310-7497", "component_count": 7, "connection_count": 0, "variable_count": 13, "physical_quantity_count": 5, "parameter_count": 0, "equation_count": 2, "dependency_count": 12, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 16.0, "model_type": "computational", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm int_c := in_c", "search_keywords": ["Boolean", "ElectricPotential", "Integer", "Real", "SI.Voltage", "Spice3.Internal.Mos2.Mos2Calc", "computational", "electrical"]}, "components": [{"name": "in_m_type", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Type of MOS transistor"}, {"name": "in_c", "type_name": "Spice3.Internal.Mos2.Mos2Calc", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Input record Mos2Calc"}, {"name": "in_m_bInit", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "vgd", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Voltage"}, {"name": "vgb", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Voltage"}, {"name": "int_c", "type_name": "Spice3.Internal.Mos2.Mos2Calc", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Record Mos2Calc"}, {"name": "hlp", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "in_m", "type_name": "Spice3.Internal.Mosfet.Mosfet", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input record MOSFET parameters\""}, {"name": "in_m_type", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Type of MOS transistor\""}, {"name": "in_c", "type_name": "Spice3.Internal.Mos2.Mos2Calc", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input record Mos2Calc\""}, {"name": "in_p", "type_name": "Spice3.Internal.Mos2.Mos2ModelLineParams", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Input record model line parameters\""}, {"name": "in_m_bInit", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "out_cc", "type_name": "Modelica.Electrical.Spice3.Internal.Mos.CurrrentsCapacitances", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Calculated currents and capacitances\""}, {"name": "vbd", "type_name": "SI.Voltage", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Voltage\""}, {"name": "vgd", "type_name": "SI.Voltage", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Voltage\""}, {"name": "vgb", "type_name": "SI.Voltage", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Voltage\""}, {"name": "qm", "type_name": "Modelica.Electrical.Spice3.Internal.Mos.DEVqmeyer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Qmeyer capacitances\""}, {"name": "int_c", "type_name": "Spice3.Internal.Mos2.Mos2Calc", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Record Mos2Calc\""}, {"name": "hlp", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vbd", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "vgd", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "vgb", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "parameters", "unit": "4", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Mos2Calc", "unit": "4", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Electrical.Spice3.Internal.Mos", "Modelica.Icons", "SI", "Spice3.Internal.Functions", "Spice3.Internal.Mos2", "Spice3.Internal.Mosfet", "Spice3.Internal.SpiceRoot", "in_m", "in_p", "int_c", "out_cc", "qm"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Mechanics.MultiBody.Visualizers.Rectangle.surfaceCharacteristic", "kind": "function", "name": "surfaceCharacteristic", "package_path": ["Modelica", "Mechanics", "MultiBody", "Visualizers", "Rectangle"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\Rectangle.mo", "start_line": 41, "end_line": 42, "start_col": 15, "end_col": 32}, "code_text": "function surfaceCharacteristic = Advanced.SurfaceCharacteristics.rectangle (\r\n      lu=length_u, lv=length_v)", "checksum": "f2aa6c493ad0a715faf713b936a772c0d0b6c64c", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\Rectangle.mo:41-42", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Advanced.SurfaceCharacteristics"], "inheritance_chain": []}
{"fqn": "Modelica.Media.Air.MoistAir.saturationTemperature.f_nonlinear", "kind": "function", "name": "f_nonlinear", "package_path": ["Modelica", "Media", "Air", "MoistAir", "saturationTemperature"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\MoistAir.mo", "start_line": 502, "end_line": 502, "start_col": 7, "end_col": 46}, "code_text": "function f_nonlinear(p=p), T_min, T_max", "checksum": "bffbd211c06fb4d475733e351f1c3fb67c28a449", "meta": {"node_type": "function_arguments", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\MoistAir.mo:502-502", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": ["Modelica.Media.Air.MoistAir.saturationTemperature.f_nonlinear.f_nonlinear"], "node_group": "function", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Math.tanh", "kind": "function", "name": "tanh", "package_path": ["Modelica", "Math"], "extends": ["Modelica.Math.Icons.AxisCenter"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n  y := .tanh(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 11435, "end_line": 11436, "start_col": 1, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 11435, "end_line": 11435, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Math.Icons.AxisCenter | components: Real×2 | eq: algorithm y := .tanh(u)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 11431, "end_line": 11464, "start_col": 1, "end_col": 9}, "code_text": "function tanh \"Hyperbolic tangent\"\r\n  extends Modelica.Math.Icons.AxisCenter;\r\n  input Real u \"Independent variable\";\r\n  output Real y \"Dependent variable y=tanh(u)\";\r\nalgorithm\r\n  y := .tanh(u);\r\n  annotation (Inline=true,\r\n    Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={\r\n        Line(points={{-90,0},{68,0}}, color={192,192,192}),\r\n        Polygon(\r\n          points={{90,0},{68,8},{68,-8},{90,0}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-80,-80},{-47.8,-78.7},{-35.8,-75.7},{-27.7,-70.6},{-22.1,\r\n              -64.2},{-17.3,-55.9},{-12.5,-44.3},{-7.64,-29.2},{-1.21,-4.82},{\r\n              6.83,26.3},{11.7,42},{16.5,54.2},{21.3,63.1},{26.9,69.9},{34.2,75},\r\n              {45.4,78.4},{72,79.9},{80,80}}),\r\n        Text(\r\n          extent={{-88,72},{-16,24}},\r\n          textColor={192,192,192},\r\n          textString=\"tanh\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis function returns y = tanh(u), with -&infin; &lt; u &lt; &infin;:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Math/tanh.png\\\">\r\n</div>\r\n</html>\"));\r\nend tanh", "checksum": "0f0d965d4f8f58648ab9259ef1893b511b9fe591", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo:11431-11464", "component_count": 2, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 3, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm y := .tanh(u)", "search_keywords": ["Real", "computational"]}, "components": [{"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Independent variable"}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Dependent variable y=tanh(u)"}], "connections": [], "variables": [{"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Independent variable\""}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Dependent variable y=tanh(u)\""}], "physical_quantities": [], "dependencies": ["FillPattern", "Modelica.Math.Icons", "tanh"], "inheritance_chain": ["Modelica.Math.Icons.AxisCenter"]}
{"fqn": "Modelica.Math.Nonlinear.Examples.UtilityFunctions.fun1", "kind": "function", "name": "fun1", "package_path": ["Modelica", "Math", "Nonlinear", "Examples", "UtilityFunctions"], "extends": ["Modelica.Math.Nonlinear.Interfaces.partialScalarFunction"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n        y := u^2 - 1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\Nonlinear.mo", "start_line": 356, "end_line": 357, "start_col": 7, "end_col": 22}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\Nonlinear.mo", "start_line": 356, "end_line": 356, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction | eq: algorithm y := u^2 - 1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\Nonlinear.mo", "start_line": 354, "end_line": 358, "start_col": 7, "end_col": 15}, "code_text": "function fun1 \"y = u^2 - 1\"\r\n        extends Modelica.Math.Nonlinear.Interfaces.partialScalarFunction;\r\n      algorithm\r\n        y := u^2 - 1;\r\n      end fun1", "checksum": "9bc2e89197e073eb49cdb61690a98725ecc406ea", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\Nonlinear.mo:354-358", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm y := u^2 - 1", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Math.Nonlinear.Interfaces"], "inheritance_chain": ["Modelica.Math.Nonlinear.Interfaces.partialScalarFunction"]}
{"fqn": "Modelica.Media.Air.ReferenceAir.Air_Utilities.ddph", "kind": "function", "name": "ddph", "package_path": ["Modelica", "Media", "Air", "ReferenceAir", "Air_Utilities"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n        ddph := ddph_props(\r\n                p,\r\n                h,\r\n                Air_Utilities.airBaseProp_ph(p, h))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceAir.mo", "start_line": 1423, "end_line": 1427, "start_col": 7, "end_col": 53}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceAir.mo", "start_line": 1423, "end_line": 1423, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Icons.Function | components: SI.Pressure×1, SI.SpecificEnthalpy×1 | units: Pa | eq: algorithm ddph := ddph_props( p, h, Air_Utilities.airBasePr", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceAir.mo", "start_line": 1417, "end_line": 1428, "start_col": 7, "end_col": 15}, "code_text": "function ddph \"Density derivative by pressure\"\r\n        extends Modelica.Icons.Function;\r\n        input SI.Pressure p \"Pressure\";\r\n        input SI.SpecificEnthalpy h \"Specific enthalpy\";\r\n        output SI.DerDensityByPressure ddph\r\n          \"Density derivative by pressure\";\r\n      algorithm\r\n        ddph := ddph_props(\r\n                p,\r\n                h,\r\n                Air_Utilities.airBaseProp_ph(p, h));\r\n      end ddph", "checksum": "2401e3f9923c00d554269048dfc206f6843a178b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceAir.mo:1417-1428", "component_count": 2, "connection_count": 0, "variable_count": 3, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 2, "dependency_count": 3, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": ["hydraulic"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm ddph := ddph_props( p, h, Air_Utilities.airBaseProp_ph(p, h))", "search_keywords": ["Pa", "Pressure", "SI.Pressure", "SI.SpecificEnthalpy", "computational", "hydraulic"]}, "components": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pressure"}, {"name": "h", "type_name": "SI.SpecificEnthalpy", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Specific enthalpy"}], "connections": [], "variables": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "h", "type_name": "SI.SpecificEnthalpy", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Specific enthalpy\""}, {"name": "ddph", "type_name": "SI.DerDensityByPressure", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Density derivative by pressure\""}], "physical_quantities": [{"name": "p", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": null}], "dependencies": ["Air_Utilities", "Modelica.Icons", "SI"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.Water.IF97_Utilities.BaseIF97.Inverses.dofp23", "kind": "function", "name": "dofp23", "package_path": ["Modelica", "Media", "Water", "IF97_Utilities", "BaseIF97", "Inverses"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n        pi := p/data.PSTAR2", "T := 572.54459862746 + 31.3220101646784*(-13.91883977887 + pi)^0.5", "o[1] := (-13.91883977887 + pi)^0.5", "taug := -0.5 + 540.0/(572.54459862746 + 31.3220101646784*o[1])", "o[2] := taug*taug", "o[3] := o[2]*taug", "o[4] := o[2]*o[2]", "o[5] := o[4]*o[4]", "o[6] := o[5]*o[5]", "o[7] := o[4]*o[5]*o[6]*taug", "o[8] := o[4]*o[5]*taug", "o[9] := o[2]*o[4]*o[5]", "o[10] := pi*pi", "o[11] := o[10]*o[10]", "o[12] := o[4]*o[6]*taug", "o[13] := o[6]*o[6]", "gpi23 := (1.0 + pi*(-0.0017731742473213 + taug*(-0.017834862292358 +\r\n          taug*(-0.045996013696365 + (-0.057581259083432 - 0.05032527872793*o[3])\r\n          *taug)) + pi*(taug*(-0.000066065283340406 + (-0.0003789797503263 + o[\r\n          2]*(-0.007878555448671 + o[3]*(-0.087594591301146 -\r\n          0.000053349095828174*o[7])))*taug) + pi*(6.1445213076927e-8 + (\r\n          1.31612001853305e-6 + o[2]*(-0.00009683303171571 + o[3]*(-0.0045101773626444\r\n           - 0.122004760687947*o[7])))*taug + pi*(taug*(-3.15389238237468e-9 +\r\n          (5.116287140914e-8 + 1.92901490874028e-6*taug)*taug) + pi*(\r\n          0.0000114610381688305*o[2]*o[4]*taug + pi*(o[3]*(-1.00288598706366e-10\r\n           + o[8]*(-0.012702883392813 - 143.374451604624*o[2]*o[6]*taug)) + pi*\r\n          (-4.1341695026989e-17 + o[2]*o[5]*(-8.8352662293707e-6 -\r\n          0.272627897050173*o[9])*taug + pi*(o[5]*(9.0049690883672e-11 -\r\n          65.8490727183984*o[4]*o[5]*o[6]) + pi*(1.78287415218792e-7*o[8] + pi*\r\n          (o[4]*(1.0406965210174e-18 + o[2]*(-1.0234747095929e-12 -\r\n          1.0018179379511e-8*o[4])*o[4]) + o[10]*o[11]*((-1.29412653835176e-9\r\n           + 1.71088510070544*o[12])*o[7] + o[10]*(-6.05920510335078*o[13]*o[5]\r\n          *o[6]*taug + o[10]*(o[4]*o[6]*(1.78371690710842e-23 + o[2]*o[4]*o[5]*\r\n          (6.1258633752464e-12 - 0.000084004935396416*o[8])*taug) + pi*(-1.24017662339842e-24\r\n          *o[12] + pi*(0.0000832192847496054*o[13]*o[4]*o[6]*taug + pi*(o[2]*o[\r\n          5]*o[6]*(1.75410265428146e-27 + (1.32995316841867e-15 -\r\n          0.0000226487297378904*o[2]*o[6])*o[9])*pi - 2.93678005497663e-14*o[13]\r\n          *o[2]*o[4]*taug)))))))))))))))))/pi", "d := p/(data.RH2O*T*pi*gpi23)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 5101, "end_line": 5141, "start_col": 7, "end_col": 39}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 5101, "end_line": 5101, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Icons.Function | components: Real×2, SI.Pressure×1, SI.Density×1 | units: Pa, kg/m3, K | eq: algorithm pi := p/data.PSTAR2", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 5090, "end_line": 5142, "start_col": 7, "end_col": 17}, "code_text": "function dofp23 \"Density at the boundary between regions 2 and 3\"\r\n        extends Modelica.Icons.Function;\r\n        input SI.Pressure p \"Pressure\";\r\n        output SI.Density d \"Density\";\r\n      protected\r\n        SI.Temperature T;\r\n        Real[13] o \"Vector of auxiliary variables\";\r\n        Real taug \"Auxiliary variable\";\r\n        Real pi \"Dimensionless pressure\";\r\n        Real gpi23\r\n          \"Derivative of g w.r.t. pi on the boundary between regions 2 and 3\";\r\n      algorithm\r\n        pi := p/data.PSTAR2;\r\n        T := 572.54459862746 + 31.3220101646784*(-13.91883977887 + pi)^0.5;\r\n        o[1] := (-13.91883977887 + pi)^0.5;\r\n        taug := -0.5 + 540.0/(572.54459862746 + 31.3220101646784*o[1]);\r\n        o[2] := taug*taug;\r\n        o[3] := o[2]*taug;\r\n        o[4] := o[2]*o[2];\r\n        o[5] := o[4]*o[4];\r\n        o[6] := o[5]*o[5];\r\n        o[7] := o[4]*o[5]*o[6]*taug;\r\n        o[8] := o[4]*o[5]*taug;\r\n        o[9] := o[2]*o[4]*o[5];\r\n        o[10] := pi*pi;\r\n        o[11] := o[10]*o[10];\r\n        o[12] := o[4]*o[6]*taug;\r\n        o[13] := o[6]*o[6];\r\n\r\n        gpi23 := (1.0 + pi*(-0.0017731742473213 + taug*(-0.017834862292358 +\r\n          taug*(-0.045996013696365 + (-0.057581259083432 - 0.05032527872793*o[3])\r\n          *taug)) + pi*(taug*(-0.000066065283340406 + (-0.0003789797503263 + o[\r\n          2]*(-0.007878555448671 + o[3]*(-0.087594591301146 -\r\n          0.000053349095828174*o[7])))*taug) + pi*(6.1445213076927e-8 + (\r\n          1.31612001853305e-6 + o[2]*(-0.00009683303171571 + o[3]*(-0.0045101773626444\r\n           - 0.122004760687947*o[7])))*taug + pi*(taug*(-3.15389238237468e-9 +\r\n          (5.116287140914e-8 + 1.92901490874028e-6*taug)*taug) + pi*(\r\n          0.0000114610381688305*o[2]*o[4]*taug + pi*(o[3]*(-1.00288598706366e-10\r\n           + o[8]*(-0.012702883392813 - 143.374451604624*o[2]*o[6]*taug)) + pi*\r\n          (-4.1341695026989e-17 + o[2]*o[5]*(-8.8352662293707e-6 -\r\n          0.272627897050173*o[9])*taug + pi*(o[5]*(9.0049690883672e-11 -\r\n          65.8490727183984*o[4]*o[5]*o[6]) + pi*(1.78287415218792e-7*o[8] + pi*\r\n          (o[4]*(1.0406965210174e-18 + o[2]*(-1.0234747095929e-12 -\r\n          1.0018179379511e-8*o[4])*o[4]) + o[10]*o[11]*((-1.29412653835176e-9\r\n           + 1.71088510070544*o[12])*o[7] + o[10]*(-6.05920510335078*o[13]*o[5]\r\n          *o[6]*taug + o[10]*(o[4]*o[6]*(1.78371690710842e-23 + o[2]*o[4]*o[5]*\r\n          (6.1258633752464e-12 - 0.000084004935396416*o[8])*taug) + pi*(-1.24017662339842e-24\r\n          *o[12] + pi*(0.0000832192847496054*o[13]*o[4]*o[6]*taug + pi*(o[2]*o[\r\n          5]*o[6]*(1.75410265428146e-27 + (1.32995316841867e-15 -\r\n          0.0000226487297378904*o[2]*o[6])*o[9])*pi - 2.93678005497663e-14*o[13]\r\n          *o[2]*o[4]*taug)))))))))))))))))/pi;\r\n        d := p/(data.RH2O*T*pi*gpi23);\r\n      end dofp23", "checksum": "b3844ef9153a47f1788404b8c29d0a1829ffb418", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo:5090-5142", "component_count": 4, "connection_count": 0, "variable_count": 6, "physical_quantity_count": 4, "parameter_count": 0, "equation_count": 2, "dependency_count": 4, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "computational", "physical_domains": ["hydraulic", "thermal", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "function", "equation_summary": "algorithm pi := p/data.PSTAR2", "search_keywords": ["13", "Density", "Pa", "Pressure", "Real", "SI.Density", "SI.Pressure", "ThermodynamicTemperature", "computational", "hydraulic", "kg/m3", "mechanical", "thermal"]}, "components": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pressure"}, {"name": "d", "type_name": "SI.Density", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Density"}, {"name": "taug", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Auxiliary variable"}, {"name": "pi", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Dimensionless pressure"}], "connections": [], "variables": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "d", "type_name": "SI.Density", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Density\""}, {"name": "T", "type_name": "SI.Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "taug", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Auxiliary variable\""}, {"name": "pi", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Dimensionless pressure\""}, {"name": "gpi23", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of g w.r.t. pi on the boundary between regions 2 and 3\""}], "physical_quantities": [{"name": "p", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": null}, {"name": "d", "unit": "kg/m3", "display_unit": null, "quantity": "Density", "nominal": null}, {"name": "T", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}, {"name": "Density", "unit": "13", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "SI", "data", "w.r"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "ModelicaTest.Tables.CombiTable2Ds.Test17.surfaceCharacteristic", "kind": "function", "name": "surfaceCharacteristic", "package_path": ["ModelicaTest", "Tables", "CombiTable2Ds", "Test17"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo", "start_line": 475, "end_line": 475, "start_col": 17, "end_col": 80}, "code_text": "function surfaceCharacteristic = tableSurface (tableID=tableID)", "checksum": "a09c30ffadf8fbde68a298025c0cc4b18819cea3", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo:475-475", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Media.Air.ReferenceMoistAir.Utilities.VirialCoefficients.Caaa_dT", "kind": "function", "name": "Caaa_dT", "package_path": ["Modelica", "Media", "Air", "ReferenceMoistAir", "Utilities", "VirialCoefficients"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n        caaa := 0", "for k in 1:10 loop\r\n          caaa := if (i[k] == 2) then caaa + 2*N[k]*tau^j[k] else caaa", "end for", "for k in 11:19 loop\r\n          caaa := if (i[k] == 2) then caaa + 2*N[k]*tau^j[k] elseif ((i[k] == 1)\r\n             and (l[k] == 1)) then caaa - 2*N[k]*tau^j[k] else caaa", "end for", "caaa := 1/ReferenceAir.Air_Utilities.Basic.Constants.rhored^2*caaa"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceMoistAir.mo", "start_line": 1207, "end_line": 1216, "start_col": 7, "end_col": 76}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceMoistAir.mo", "start_line": 1207, "end_line": 1207, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Icons.Function | components: SI.Density×1, SI.Temperature×1, SI.MolarVolume×1 | units: kg/m3, K, k | eq: algorithm caaa := 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceMoistAir.mo", "start_line": 1187, "end_line": 1217, "start_col": 7, "end_col": 18}, "code_text": "function Caaa_dT \"Third molar virial coefficient of dry air\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input SI.Density d \"Density\";\r\n        input SI.Temperature T \"Temperature\";\r\n        output SI.MolarVolume caaa \"Third virial coefficient\";\r\n\r\n      protected\r\n        final constant Real[19] N={0.118160747229,0.713116392079,-0.161824192067E+001,\r\n            0.714140178971E-001,-0.865421396646E-001,0.134211176704,\r\n            0.112626704218E-001,-0.420533228842E-001,0.349008431982E-001,\r\n            0.164957183186E-003,-0.101365037912,-0.173813690970,-0.472103183731E-001,\r\n            -0.122523554253E-001,-0.146629609713,-0.316055879821E-001,\r\n            0.233594806142E-003,0.148287891978E-001,-0.938782884667E-002};\r\n        final constant Integer[19] i={1,1,1,2,3,3,4,4,4,6,1,3,5,6,1,3,11,1,3};\r\n        final constant Real[19] j={0,0.33,1.01,0,0,0.15,0,0.2,0.35,1.35,1.6,0.8,\r\n            0.95,1.25,3.6,6,3.25,3.5,15};\r\n        final constant Integer[19] l={0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3};\r\n        Real tau=ReferenceAir.Air_Utilities.Basic.Constants.Tred/T;\r\n\r\n      algorithm\r\n        caaa := 0;\r\n        for k in 1:10 loop\r\n          caaa := if (i[k] == 2) then caaa + 2*N[k]*tau^j[k] else caaa;\r\n        end for;\r\n        for k in 11:19 loop\r\n          caaa := if (i[k] == 2) then caaa + 2*N[k]*tau^j[k] elseif ((i[k] == 1)\r\n             and (l[k] == 1)) then caaa - 2*N[k]*tau^j[k] else caaa;\r\n        end for;\r\n        caaa := 1/ReferenceAir.Air_Utilities.Basic.Constants.rhored^2*caaa;\r\n      end Caaa_dT", "checksum": "0b2253b317398ab1ae6ab6c2f779dcf700f5a232", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Air\\ReferenceMoistAir.mo:1187-1217", "component_count": 4, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 3, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "computational", "physical_domains": ["thermal", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "function", "equation_summary": "algorithm caaa := 0", "search_keywords": ["Density", "Real", "SI.Density", "SI.MolarVolume", "SI.Temperature", "ThermodynamicTemperature", "computational", "kg/m3", "mechanical", "thermal"]}, "components": [{"name": "d", "type_name": "SI.Density", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Density"}, {"name": "T", "type_name": "SI.Temperature", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Temperature"}, {"name": "caaa", "type_name": "SI.MolarVolume", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Third virial coefficient"}, {"name": "tau", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "d", "type_name": "SI.Density", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Density\""}, {"name": "T", "type_name": "SI.Temperature", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Temperature\""}, {"name": "caaa", "type_name": "SI.MolarVolume", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Third virial coefficient\""}, {"name": "tau", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "ReferenceAir.Air_Utilities.Basic.Constants.Tred/T", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "d", "unit": "kg/m3", "display_unit": null, "quantity": "Density", "nominal": null}, {"name": "T", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}, {"name": "coefficient", "unit": "k", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "ReferenceAir.Air_Utilities.Basic.Constants", "SI"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.R134a.R134a_ph.dtofpsOnePhase", "kind": "function", "name": "dtofpsOnePhase", "package_path": ["Modelica", "Media", "R134a", "R134a_ph"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n      i := 0", "error := 0", "found := false", "pred := p/R134aData.data.FPCRIT", "(int,error) := Common.FindInterval(pred, p_breaks)", "localx := pred - p_breaks[int]", "// set decent initial guesses for d and T\r\n      supercritical := p > R134aData.data.FPCRIT", "if supercritical then\r\n        d := R134aData.data.FDCRIT + 500.0", "T := R134aData.data.FTCRIT + 10.0", "else\r\n        sl := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sl_coef[int,\r\n          1:4])", "sv := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sv_coef[int,\r\n          1:4])", "liquid := s < sl", "if liquid then\r\n          d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dl_coef[int,\r\n            1:4])*1.1", "//1.05\r\n          T := Common.CubicSplineEval(localx, T_coef[int, 1:4])*0.9", "//0.95\r\n        else\r\n          d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dv_coef[int,\r\n            1:4])*0.8", "//0.9\r\n          T := Common.CubicSplineEval(localx, T_coef[int, 1:4])*1.1 + 0.5*(s -\r\n            sv)", "end if", "end if", "while ((i < 100) and not found) loop\r\n        f := f_R134a(d=d, T=T)", "nDerivs := Modelica.Media.Common.Helmholtz_ps(f)", "ds := nDerivs.s - s", "dp := nDerivs.p - p", "if ((abs(ds/s) <= dels) and (abs(dp/p) <= delp)) then\r\n          found := true", "end if", "det := nDerivs.st*nDerivs.pd - nDerivs.pt*nDerivs.sd", "delt := (nDerivs.pd*ds - nDerivs.sd*dp)/det", "deld := (nDerivs.st*dp - nDerivs.pt*ds)/det", "T := T - delt", "d := d - deld", "i := i + 1", "end while", "if not found then\r\n        error := 1", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\R134a.mo", "start_line": 2037, "end_line": 2087, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\R134a.mo", "start_line": 2037, "end_line": 2037, "start_col": 5, "end_col": 14}}], "docstring": "extends Modelica.Icons.Function | components: Real×9, Integer×3, Boolean×3 | units: :, 4, int, 1:4 | eq: algorithm i := 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\R134a.mo", "start_line": 1996, "end_line": 2095, "start_col": 5, "end_col": 23}, "code_text": "function dtofpsOnePhase\r\n      \"Inverse iteration in one phase region (d,T) = f(p,s)\"\r\n      extends Modelica.Icons.Function;\r\n      input AbsolutePressure p \"Pressure\";\r\n      input SpecificEntropy s \"Specific entropy\";\r\n      input AbsolutePressure delp \"Absolute iteration accuracy\";\r\n      input SpecificEntropy dels \"Absolute iteration accuracy\";\r\n      output Density d \"Density\";\r\n      output Temperature T \"Temperature\";\r\n      output Integer error \"Error flag: trouble if different from 0\";\r\n\r\n    protected\r\n      constant Real p_breaks[:]=R134aData.pbreaks\r\n        \"Grid points of reduced pressure\";\r\n      constant Real dl_coef[:, 4]=R134aData.dlcoef\r\n        \"Coefficients of cubic spline for rho_liq(p)\";\r\n      constant Real dv_coef[:, 4]=R134aData.dvcoef\r\n        \"Coefficients of cubic spline for rho_vap(p)\";\r\n      constant Real sl_coef[:, 4]=R134aData.slcoef\r\n        \"Coefficients of cubic spline for s_liq(p)\";\r\n      constant Real sv_coef[:, 4]=R134aData.svcoef\r\n        \"Coefficients of cubic spline for s_vap(p)\";\r\n      constant Real T_coef[:, 4]=R134aData.Tcoef\r\n        \"Coefficients of cubic spline for Tsat(p)\";\r\n      Integer i \"Newton iteration number\";\r\n      Real ds \"Difference in s\";\r\n      Real dp \"Difference in p\";\r\n      Real det \"Determinant\";\r\n      Real deld \"Density change\";\r\n      Real delt \"Temperature change\";\r\n      Modelica.Media.Common.HelmholtzDerivs f\r\n        \"Dimensionless Helmholtz function and derivatives w.r.t. dimensionless d and T\";\r\n      Modelica.Media.Common.NewtonDerivatives_ps nDerivs \"Newton derivatives\";\r\n      Boolean liquid \"Is liquid\";\r\n      Boolean supercritical \"Is supercritical\";\r\n      Boolean found \"Iteration converged\";\r\n      Integer int \"Interval number\";\r\n      Real pred \"Reduced pressure\";\r\n      Real localx \"Abscissa of local spline\";\r\n      Real sl \"Liquid entropy\";\r\n      Real sv \"Vapor entropy\";\r\n    algorithm\r\n      i := 0;\r\n      error := 0;\r\n      found := false;\r\n      pred := p/R134aData.data.FPCRIT;\r\n      (int,error) := Common.FindInterval(pred, p_breaks);\r\n      localx := pred - p_breaks[int];\r\n      // set decent initial guesses for d and T\r\n      supercritical := p > R134aData.data.FPCRIT;\r\n      if supercritical then\r\n        d := R134aData.data.FDCRIT + 500.0;\r\n        T := R134aData.data.FTCRIT + 10.0;\r\n      else\r\n        sl := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sl_coef[int,\r\n          1:4]);\r\n        sv := R134aData.data.SCRIT*Common.CubicSplineEval(localx, sv_coef[int,\r\n          1:4]);\r\n        liquid := s < sl;\r\n        if liquid then\r\n          d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dl_coef[int,\r\n            1:4])*1.1;\r\n          //1.05\r\n          T := Common.CubicSplineEval(localx, T_coef[int, 1:4])*0.9;\r\n          //0.95\r\n        else\r\n          d := R134aData.data.FDCRIT*Common.CubicSplineEval(localx, dv_coef[int,\r\n            1:4])*0.8;\r\n          //0.9\r\n          T := Common.CubicSplineEval(localx, T_coef[int, 1:4])*1.1 + 0.5*(s -\r\n            sv);\r\n        end if;\r\n      end if;\r\n\r\n      while ((i < 100) and not found) loop\r\n        f := f_R134a(d=d, T=T);\r\n        nDerivs := Modelica.Media.Common.Helmholtz_ps(f);\r\n        ds := nDerivs.s - s;\r\n        dp := nDerivs.p - p;\r\n        if ((abs(ds/s) <= dels) and (abs(dp/p) <= delp)) then\r\n          found := true;\r\n        end if;\r\n        det := nDerivs.st*nDerivs.pd - nDerivs.pt*nDerivs.sd;\r\n        delt := (nDerivs.pd*ds - nDerivs.sd*dp)/det;\r\n        deld := (nDerivs.st*dp - nDerivs.pt*ds)/det;\r\n        T := T - delt;\r\n        d := d - deld;\r\n        i := i + 1;\r\n      end while;\r\n      if not found then\r\n        error := 1;\r\n      end if;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n<p>This function calculates the density and temperature of R134a from absolute pressure and specific entropy in one-phase region. The function calls the fundamental helmholtz equation of Tillner-Roth (1994) which is requiring density and temperature for input. Thus, a newton iteration is performed to determine density and temperature. The newton iteration stops if the inputs for pressure difference delp and specific entropy difference dels are larger than the actual differences derived from the newton iteration.\r\n</p>\r\n<h4>Restrictions</h4>\r\nThe function shall only be used for one-phase inputs since the fundamental equation is not valid for two-phase states. The iteration could fail for liquid states with high pressures.\r\n</html>\"));\r\n    end dtofpsOnePhase", "checksum": "e6119f7642a773baaaeacc9d186ba36792513ffd", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\R134a.mo:1996-2095", "component_count": 22, "connection_count": 0, "variable_count": 25, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 7, "has_physical_interface": true, "interface_component_count": 7, "has_connections": false, "is_composite_model": false, "complexity_score": 46.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm i := 0", "search_keywords": [":, 4", "AbsolutePressure", "Boolean", "Density", "Integer", "Modelica.Media.Common.NewtonDerivatives_ps", "Real", "SpecificEntropy", "Temperature", "computational", "int, 1:4"]}, "components": [{"name": "p", "type_name": "AbsolutePressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pressure"}, {"name": "s", "type_name": "SpecificEntropy", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Specific entropy"}, {"name": "delp", "type_name": "AbsolutePressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Absolute iteration accuracy"}, {"name": "dels", "type_name": "SpecificEntropy", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Absolute iteration accuracy"}, {"name": "d", "type_name": "Density", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Density"}, {"name": "T", "type_name": "Temperature", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Temperature"}, {"name": "error", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Error flag: trouble if different from 0"}, {"name": "i", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Newton iteration number"}, {"name": "ds", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Difference in s"}, {"name": "dp", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Difference in p"}, {"name": "det", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Determinant"}, {"name": "deld", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Density change"}, {"name": "delt", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Temperature change"}, {"name": "nDerivs", "type_name": "Modelica.Media.Common.NewtonDerivatives_ps", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Newton derivatives"}, {"name": "liquid", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Is liquid"}, {"name": "supercritical", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Is supercritical"}, {"name": "found", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Iteration converged"}, {"name": "int", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Interval number"}, {"name": "pred", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Reduced pressure"}, {"name": "localx", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Abscissa of local spline"}, {"name": "sl", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Liquid entropy"}, {"name": "sv", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Vapor entropy"}], "connections": [], "variables": [{"name": "p", "type_name": "AbsolutePressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "s", "type_name": "SpecificEntropy", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Specific entropy\""}, {"name": "delp", "type_name": "AbsolutePressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Absolute iteration accuracy\""}, {"name": "dels", "type_name": "SpecificEntropy", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Absolute iteration accuracy\""}, {"name": "d", "type_name": "Density", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Density\""}, {"name": "T", "type_name": "Temperature", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Temperature\""}, {"name": "error", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Error flag: trouble if different from 0\""}, {"name": "i", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Newton iteration number\""}, {"name": "ds", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Difference in s\""}, {"name": "dp", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Difference in p\""}, {"name": "det", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Determinant\""}, {"name": "deld", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Density change\""}, {"name": "delt", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Temperature change\""}, {"name": "f", "type_name": "Modelica.Media.Common.HelmholtzDerivs", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Dimensionless Helmholtz function and derivatives w.r.t. dimensionless d and T\""}, {"name": "nDerivs", "type_name": "Modelica.Media.Common.NewtonDerivatives_ps", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Newton derivatives\""}, {"name": "liquid", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Is liquid\""}, {"name": "supercritical", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Is supercritical\""}, {"name": "found", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Iteration converged\""}, {"name": "int", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Interval number\""}, {"name": "pred", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Reduced pressure\""}, {"name": "localx", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Abscissa of local spline\""}, {"name": "sl", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Liquid entropy\""}, {"name": "sv", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Vapor entropy\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "pressure", "unit": ":, 4", "display_unit": null, "quantity": null, "nominal": null}, {"name": "entropy", "unit": "int, 1:4", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Common", "Modelica.Icons", "Modelica.Media.Common", "R134aData", "R134aData.data", "nDerivs", "w.r"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "ModelicaTest.Utilities.WriteFile", "kind": "function", "name": "WriteFile", "package_path": ["ModelicaTest", "Utilities"], "extends": ["Modelica.Icons.Function"], "imports": ["Modelica.Utilities.Streams", "Modelica.Utilities.Files"], "parameters": [], "equations": [{"equations": ["algorithm\r\n    Streams.print(\"... Test of Modelica.Utilities.Streams for writing of a file\")", "Streams.print(\"... Test of Modelica.Utilities.Streams for writing of a file\", logFile)", "Files.removeFile(file1)", "Streams.print(line1, file1)", "Streams.print(line2, file1)", "Streams.print(line3, file1)", "Streams.close(file1)", "Files.removeFile(file2)", "Streams.print(line4, file2)", "Streams.print(line5, file2)", "Streams.close(file2)", "ok := true"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Utilities.mo", "start_line": 315, "end_line": 330, "start_col": 3, "end_col": 16}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Utilities.mo", "start_line": 315, "end_line": 315, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: String×6, Boolean×1 | eq: algorithm Streams.print(\"... Test of Modelica.Utilities.Streams for writing of a file\")", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Utilities.mo", "start_line": 300, "end_line": 331, "start_col": 3, "end_col": 16}, "code_text": "function WriteFile \"Test functions of Modelica.Utilities.Streams\"\r\n    extends Modelica.Icons.Function;\r\n    import Modelica.Utilities.Streams;\r\n    import Modelica.Utilities.Files;\r\n    input String logFile=\"ModelicaTestLog.txt\"\r\n      \"Filename where the log is stored\";\r\n    output Boolean ok;\r\n  protected\r\n    String file1=\"testStreams1.txt\";\r\n    String file2=\"testStreams2.txt\";\r\n    String line1=\"this is line 1\";\r\n    String line2=\"this is line 2\";\r\n    String line3=\"this is line 3\";\r\n    String line4=\"this is line 4\";\r\n    String line5=\"this is line 5\";\r\n  algorithm\r\n    Streams.print(\"... Test of Modelica.Utilities.Streams for writing of a file\");\r\n    Streams.print(\"... Test of Modelica.Utilities.Streams for writing of a file\", logFile);\r\n\r\n    Files.removeFile(file1);\r\n    Streams.print(line1, file1);\r\n    Streams.print(line2, file1);\r\n    Streams.print(line3, file1);\r\n    Streams.close(file1);\r\n\r\n    Files.removeFile(file2);\r\n    Streams.print(line4, file2);\r\n    Streams.print(line5, file2);\r\n    Streams.close(file2);\r\n\r\n    ok := true;\r\n  end WriteFile", "checksum": "47b7ddec062f08ef454c2accb36706a218e2293b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Utilities.mo:300-331", "component_count": 7, "connection_count": 0, "variable_count": 9, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 9, "has_physical_interface": true, "interface_component_count": 1, "has_connections": false, "is_composite_model": false, "complexity_score": 16.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm Streams.print(\"... Test of Modelica.Utilities.Streams for writing of a file\")", "search_keywords": ["Boolean", "String", "computational"]}, "components": [{"name": "ok", "type_name": "Boolean", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "file2", "type_name": "String", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "line1", "type_name": "String", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "line2", "type_name": "String", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "line3", "type_name": "String", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "line4", "type_name": "String", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "line5", "type_name": "String", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "logFile", "type_name": "String", "prefixes": ["input"], "attributes": {}, "binding_equation": "\"ModelicaTestLog.txt\"\r\n      \"Filename where the log is stored\"", "comment": null}, {"name": "ok", "type_name": "Boolean", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "file1", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"testStreams1.txt\"", "comment": null}, {"name": "file2", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"testStreams2.txt\"", "comment": null}, {"name": "line1", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"this is line 1\"", "comment": null}, {"name": "line2", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"this is line 2\"", "comment": null}, {"name": "line3", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"this is line 3\"", "comment": null}, {"name": "line4", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"this is line 4\"", "comment": null}, {"name": "line5", "type_name": "String", "prefixes": [], "attributes": {}, "binding_equation": "\"this is line 5\"", "comment": null}], "physical_quantities": [], "dependencies": ["Files", "Modelica.Icons", "Modelica.Utilities", "Modelica.Utilities.Files", "Modelica.Utilities.Streams", "ModelicaTestLog", "Streams", "testStreams1", "testStreams2"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Mechanics.MultiBody.Visualizers.PipeWithScalarField.colorMap", "kind": "function", "name": "colorMap", "package_path": ["Modelica", "Mechanics", "MultiBody", "Visualizers", "PipeWithScalarField"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\PipeWithScalarField.mo", "start_line": 39, "end_line": 39, "start_col": 47, "end_col": 75}, "code_text": "function colorMap = colorMap", "checksum": "b3df1055ccc44afd3be2b07bc93077d5bd4c4543", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\PipeWithScalarField.mo:39-39", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Math.Vectors.normalize", "kind": "function", "name": "normalize", "package_path": ["Modelica", "Math", "Vectors"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    /* This function has the inline annotation. If the function is inlined:\r\n     - \"smooth(..)\" defines how often the expression can be differentiated\r\n       (if symbolic processing is performed).\r\n  */\r\n    result := smooth(0, if length(v) >= eps then v/length(v) else v/eps)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 260, "end_line": 265, "start_col": 3, "end_col": 74}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 260, "end_line": 260, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Real×2 | units: 1, :, size(v, 1) | eq: algorithm /* This function has the inline annotation. If the function is in", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo", "start_line": 252, "end_line": 299, "start_col": 3, "end_col": 16}, "code_text": "function normalize\r\n    \"Return normalized vector such that length = 1 and prevent zero-division for zero vector\"\r\n    extends Modelica.Icons.Function;\r\n    input Real v[:] \"Real vector\";\r\n    input Real eps(min=0.0)=100*Modelica.Constants.eps\r\n      \"if |v| < eps then result = v/eps\";\r\n    output Real result[size(v, 1)](each final unit=\"1\") \"Input vector v normalized to length=1\";\r\n\r\n  algorithm\r\n    /* This function has the inline annotation. If the function is inlined:\r\n     - \"smooth(..)\" defines how often the expression can be differentiated\r\n       (if symbolic processing is performed).\r\n  */\r\n    result := smooth(0, if length(v) >= eps then v/length(v) else v/eps);\r\n    annotation (Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.<strong>normalize</strong>(v);\r\nVectors.<strong>normalize</strong>(v,eps=100*Modelica.Constants.eps);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThe function call \\\"<code>Vectors.<strong>normalize</strong>(v)</code>\\\" returns the\r\n<strong>unit vector</strong> \\\"<code>v/length(v)</code>\\\" of vector v.\r\nIf length(v) is close to zero (more precisely, if length(v) &lt; eps),\r\nv/eps is returned in order to avoid\r\na division by zero. For many applications this is useful, because\r\noften the unit vector <strong>e</strong> = <strong>v</strong>/length(<strong>v</strong>) is used to compute\r\na vector x*<strong>e</strong>, where the scalar x is in the order of length(<strong>v</strong>),\r\ni.e., x*<strong>e</strong> is small, when length(<strong>v</strong>) is small and then\r\nit is fine to replace <strong>e</strong> by <strong>v</strong> to avoid a division by zero.\r\n</p>\r\n<p>\r\nSince the function has the \\\"Inline\\\" annotation, it\r\nis usually inlined and symbolic processing is applied.\r\n</p>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n<strong>normalize</strong>({1,2,3});  // = {0.267, 0.534, 0.802}\r\n<strong>normalize</strong>({0,0,0});  // = {0,0,0}\r\n</pre></blockquote>\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Math.Vectors.length\\\">Vectors.length</a>,\r\n<a href=\\\"modelica://Modelica.Math.Vectors.normalize\\\">Vectors.normalizeWithAssert</a>\r\n</p>\r\n</html>\"));\r\n  end normalize", "checksum": "0a8183b0360cef5f3bec3195192ca76528a3ed48", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Math\\package.mo:252-299", "component_count": 2, "connection_count": 0, "variable_count": 3, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 5, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm /* This function has the inline annotation. If the function is inlined: - \"smooth(..)\" defines how often the expression can be differentiated (if(条件なら", "search_keywords": ["Real", "computational", "size(v, 1)"]}, "components": [{"name": "v", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Real vector"}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "modifications": {"unit": "\"1\""}, "condition": null, "array_dims": "[size(v, 1)]", "comment": "Input vector v normalized to length=1"}], "connections": [], "variables": [{"name": "v", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Real vector\""}, {"name": "eps", "type_name": "Real", "prefixes": ["input"], "attributes": {"min": "0.0"}, "binding_equation": "100*Modelica.Constants.eps\r\n      \"if |v| < eps then result = v/eps\"", "comment": null}, {"name": "result", "type_name": "Real", "prefixes": ["output"], "attributes": {"unit": "1"}, "binding_equation": null, "comment": "\"Input vector v normalized to length=1\""}], "physical_quantities": [{"name": "result", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "vector", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "eps", "unit": "size(v, 1)", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Constants", "Modelica.Icons", "Modelica.Math.Vectors", "Vectors", "i"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "ModelicaTest.Math.Polynomials", "kind": "function", "name": "Polynomials", "package_path": ["ModelicaTest", "Math"], "extends": ["Modelica.Icons.Function"], "imports": ["Modelica.Utilities.Streams"], "parameters": [], "equations": [{"equations": ["algorithm\r\n    Streams.print(\"... Test of Modelica.Math.Polynomials\")", "Streams.print(\"... Test of Modelica.Math.Polynomials\", logFile)", "r := Modelica.Math.Polynomials.evaluate(p1,-3)", "assert(r == 38, \"Polynomials.evaluate failed\")", "p2 := Modelica.Math.Polynomials.integral(p1)", "assert( p2[1] == -0.5 and p2[2] == -1 and p2[3] == -2 and\r\n            p2[4] == -1 and p2[5] == 0, \"Polynomials.integral failed\")", "p3 := Modelica.Math.Polynomials.derivative(p2)", "assert( p3[1] == p1[1] and p3[2] == p1[2] and p3[3] == p1[3] and p3[4] == p1[4],\r\n           \"Polynomials.derivative failed\")", "r1 := Modelica.Math.Polynomials.derivativeValue(p2,-3)", "r2 := Modelica.Math.Polynomials.evaluate(p3, -3)", "assert(r1 == r2, \"Polynomials.derivativeValue failed\")", "r := Modelica.Math.Polynomials.integralValue(p1,2,1)", "assert(r == -21.5, \"Polynomials.integralValue failed\")", "for i in 1:size(u,1) loop\r\n       y[i] := Modelica.Math.Polynomials.evaluate(p1,u[i]) + 0.01*i", "end for", "p4 := Modelica.Math.Polynomials.fitting(u,y,3)", "assert( abs(p4[1] - p1[1]) <= 1.e-8 and\r\n            abs(p4[2] - p1[2]) <= 1.e-8 and\r\n            abs(p4[3] - p1[3]) <= 0.1 and\r\n            abs(p4[4] - p1[4]) <= 0.1, \"Polynomials.fitting failed\")", "ok := true"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Math.mo", "start_line": 137, "end_line": 168, "start_col": 3, "end_col": 16}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Math.mo", "start_line": 137, "end_line": 137, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: Real×8, Boolean×1 | units: 7, 5 | eq: algorithm Streams.print(\"... Test of Modelica.Math.Polynomials\")", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Math.mo", "start_line": 120, "end_line": 169, "start_col": 3, "end_col": 18}, "code_text": "function Polynomials\r\n    \"Test functions of Modelica.Math.Polynomials\"\r\n    extends Modelica.Icons.Function;\r\n    import Modelica.Utilities.Streams;\r\n    input String logFile = \"ModelicaTestLog.txt\"\r\n      \"Filename where the log is stored\";\r\n    output Boolean ok;\r\n  protected\r\n    Real p1[4] = {-2, -3, -4, -1};\r\n    Real p2[5];\r\n    Real p3[4];\r\n    Real p4[4];\r\n    Real r;\r\n    Real r1;\r\n    Real r2;\r\n    Real u[7] = {0,1,2,3,4,5,6};\r\n    Real y[7];\r\n  algorithm\r\n    Streams.print(\"... Test of Modelica.Math.Polynomials\");\r\n    Streams.print(\"... Test of Modelica.Math.Polynomials\", logFile);\r\n\r\n    r := Modelica.Math.Polynomials.evaluate(p1,-3);\r\n    assert(r == 38, \"Polynomials.evaluate failed\");\r\n\r\n    p2 := Modelica.Math.Polynomials.integral(p1);\r\n    assert( p2[1] == -0.5 and p2[2] == -1 and p2[3] == -2 and\r\n            p2[4] == -1 and p2[5] == 0, \"Polynomials.integral failed\");\r\n\r\n    p3 := Modelica.Math.Polynomials.derivative(p2);\r\n    assert( p3[1] == p1[1] and p3[2] == p1[2] and p3[3] == p1[3] and p3[4] == p1[4],\r\n           \"Polynomials.derivative failed\");\r\n\r\n    r1 := Modelica.Math.Polynomials.derivativeValue(p2,-3);\r\n    r2 := Modelica.Math.Polynomials.evaluate(p3, -3);\r\n    assert(r1 == r2, \"Polynomials.derivativeValue failed\");\r\n\r\n    r := Modelica.Math.Polynomials.integralValue(p1,2,1);\r\n    assert(r == -21.5, \"Polynomials.integralValue failed\");\r\n\r\n    for i in 1:size(u,1) loop\r\n       y[i] := Modelica.Math.Polynomials.evaluate(p1,u[i]) + 0.01*i;\r\n    end for;\r\n    p4 := Modelica.Math.Polynomials.fitting(u,y,3);\r\n    assert( abs(p4[1] - p1[1]) <= 1.e-8 and\r\n            abs(p4[2] - p1[2]) <= 1.e-8 and\r\n            abs(p4[3] - p1[3]) <= 0.1 and\r\n            abs(p4[4] - p1[4]) <= 0.1, \"Polynomials.fitting failed\");\r\n\r\n    ok := true;\r\n  end Polynomials", "checksum": "65ca80f5c577d6cad65d03220c60d18f82a29a76", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Math.mo:120-169", "component_count": 9, "connection_count": 0, "variable_count": 12, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 8, "has_physical_interface": true, "interface_component_count": 1, "has_connections": false, "is_composite_model": false, "complexity_score": 20.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm Streams.print(\"... Test of Modelica.Math.Polynomials\")", "search_keywords": ["Boolean", "Real", "computational"]}, "components": [{"name": "ok", "type_name": "Boolean", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "p2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[5]", "comment": null}, {"name": "p3", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[4]", "comment": null}, {"name": "p4", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[4]", "comment": null}, {"name": "r", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "r1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "r2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[7]", "comment": null}, {"name": "y", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[7]", "comment": null}], "connections": [], "variables": [{"name": "logFile", "type_name": "String", "prefixes": ["input"], "attributes": {}, "binding_equation": "\"ModelicaTestLog.txt\"\r\n      \"Filename where the log is stored\"", "comment": null}, {"name": "ok", "type_name": "Boolean", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "p1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "{-2, -3, -4, -1}", "comment": null}, {"name": "p2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "p3", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "p4", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "r1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "r2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "{0,1,2,3,4,5,6}", "comment": null}, {"name": "y", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "stored", "unit": "7", "display_unit": null, "quantity": null, "nominal": null}, {"name": "failed", "unit": "5", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Icons", "Modelica.Math", "Modelica.Math.Polynomials", "Modelica.Utilities", "Modelica.Utilities.Streams", "ModelicaTestLog", "Polynomials", "Streams"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Mechanics.MultiBody.Frames.Quaternions.planarRotation", "kind": "function", "name": "planarRotation", "package_path": ["Modelica", "Mechanics", "MultiBody", "Frames", "Quaternions"], "extends": ["Modelica.Icons.Function"], "imports": ["Modelica.Math"], "parameters": [], "equations": [{"equations": ["algorithm\r\n  Q := vector([e*Math.sin(angle/2)", "Math.cos(angle/2)])"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\planarRotation.mo", "start_line": 12, "end_line": 13, "start_col": 1, "end_col": 57}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\planarRotation.mo", "start_line": 12, "end_line": 12, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | units: 1, 3 | eq: algorithm Q := vector([e*Math.sin(angle/2)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\planarRotation.mo", "start_line": 2, "end_line": 36, "start_col": 1, "end_col": 19}, "code_text": "function planarRotation\r\n  \"Return quaternion orientation object of a planar rotation\"\r\n  import Modelica.Math;\r\n  extends Modelica.Icons.Function;\r\n  input Real e[3](each final unit=\"1\")\r\n    \"Normalized axis of rotation (must have length=1)\";\r\n  input SI.Angle angle\r\n    \"Rotation angle to rotate frame 1 into frame 2 along axis e\";\r\n  output Quaternions.Orientation Q\r\n    \"Quaternions orientation object to rotate frame 1 into frame 2 along axis e\";\r\nalgorithm\r\n  Q := vector([e*Math.sin(angle/2); Math.cos(angle/2)]);\r\n  annotation(Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nQ = Quaternions.<strong>planarRotation</strong>(e, angle);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function returns\r\n<a href=\\\"modelica://Modelica.Mechanics.MultiBody.Frames.Quaternions.Orientation\\\">quaternions orientation</a>&nbsp;Q\r\nthat describes the orientation to rotate in the plane along unit\r\naxis <strong>e</strong> from frame 1 into frame 2 with angle <strong>angle</strong>.\r\nNote, \\\"e\\\" must be a unit vector. However, this is not checked in this function and the function will\r\nreturn a wrong result, if length(e) is not one.\r\n</p>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Mechanics.MultiBody.Frames.planarRotation\\\">Frames.planarRotation</a>,\r\n<a href=\\\"modelica://Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation\\\">TransformationMatrices.planarRotation</a>.\r\n</p>\r\n</html>\"));\r\nend planarRotation", "checksum": "c28e19df257d4d36867cb043921e470bdc8cb3a9", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\planarRotation.mo:2-36", "component_count": 0, "connection_count": 0, "variable_count": 3, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 10, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm Q := vector([e*Math.sin(angle/2)", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [{"name": "e", "type_name": "Real", "prefixes": ["input"], "attributes": {"unit": "1"}, "binding_equation": null, "comment": "\"Normalized axis of rotation (must have length=1)\""}, {"name": "angle", "type_name": "SI.Angle", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Rotation angle to rotate frame 1 into frame 2 along axis e\""}, {"name": "Q", "type_name": "Quaternions.Orientation", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Quaternions orientation object to rotate frame 1 into frame 2 along axis e\""}], "physical_quantities": [{"name": "e", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "rotation", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Frames", "Modelica", "Modelica.Icons", "Modelica.Math", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Frames.Quaternions", "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices", "Quaternions", "SI", "TransformationMatrices"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Machines.TestWaterPumpStorage.flowCharacteristic", "kind": "function", "name": "flowCharacteristic", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Machines", "TestWaterPumpStorage"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Machines\\TestWaterPumpStorage.mo", "start_line": 18, "end_line": 20, "start_col": 15, "end_col": 68}, "code_text": "function flowCharacteristic =\r\n        Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics.quadraticFlow (\r\n          V_flow_nominal={0,0.001,0.0015}, head_nominal={100,50,0})", "checksum": "7ca1cd3735261ee3536230d0fcf91d2a793c38b3", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Machines\\TestWaterPumpStorage.mo:18-20", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Fluid.Machines.BaseClasses.PumpCharacteristics"], "inheritance_chain": []}
{"fqn": "Modelica.Media.Interfaces.PartialSimpleIdealGasMedium.extends", "kind": "function", "name": "extends", "package_path": ["Modelica", "Media", "Interfaces", "PartialSimpleIdealGasMedium"], "extends": ["specificGibbsEnergy", "Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n      g := cp_const*(state.T - T0) - state.T*specificEntropy(state)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 6349, "end_line": 6350, "start_col": 5, "end_col": 69}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 6349, "end_line": 6349, "start_col": 5, "end_col": 14}}], "docstring": "extends specificGibbsEnergy | eq: algorithm g := cp_const*(state.T - T0) - state.T*specificEntropy(state)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 6346, "end_line": 6351, "start_col": 15, "end_col": 28}, "code_text": "function extends specificGibbsEnergy\r\n      \"Return specific Gibbs energy\"\r\n      extends Modelica.Icons.Function;\r\n    algorithm\r\n      g := cp_const*(state.T - T0) - state.T*specificEntropy(state);\r\n    end specificGibbsEnergy", "checksum": "5f241d0a9ef7dacd0902a65fdef7c8b972dab09d", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo:6346-6351", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm g := cp_const*(state.T - T0) - state.T*specificEntropy(state)", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Icons", "state"], "inheritance_chain": ["specificGibbsEnergy", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.Water.IF97_Utilities.isentropicExponent_ph", "kind": "function", "name": "isentropicExponent_ph", "package_path": ["Modelica", "Media", "Water", "IF97_Utilities"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    gamma := isentropicExponent_props_ph(\r\n        p,\r\n        h,\r\n        waterBaseProp_ph(\r\n          p,\r\n          h,\r\n          phase,\r\n          region))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 7344, "end_line": 7352, "start_col": 3, "end_col": 20}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 7344, "end_line": 7344, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Function | components: SI.Pressure×1, SI.SpecificEnthalpy×1, Integer×1 | units: Pa | eq: algorithm gamma := isentropicExponent_props_ph( ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 7335, "end_line": 7354, "start_col": 3, "end_col": 28}, "code_text": "function isentropicExponent_ph\r\n    \"Isentropic exponent as function of pressure and specific enthalpy\"\r\n    extends Modelica.Icons.Function;\r\n    input SI.Pressure p \"Pressure\";\r\n    input SI.SpecificEnthalpy h \"Specific enthalpy\";\r\n    input Integer phase=0 \"2 for two-phase, 1 for one-phase, 0 if not known\";\r\n    input Integer region=0\r\n      \"If 0, region is unknown, otherwise known and this input\";\r\n    output Real gamma \"Isentropic exponent\";\r\n  algorithm\r\n    gamma := isentropicExponent_props_ph(\r\n        p,\r\n        h,\r\n        waterBaseProp_ph(\r\n          p,\r\n          h,\r\n          phase,\r\n          region));\r\n    annotation (Inline=false, LateInline=true);\r\n  end isentropicExponent_ph", "checksum": "ae6691bc8572f113374f71687480a6e42784f505", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo:7335-7354", "component_count": 4, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 2, "dependency_count": 2, "has_physical_interface": true, "interface_component_count": 4, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "computational", "physical_domains": ["hydraulic"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm gamma := isentropicExponent_props_ph( p, h, waterBaseProp_ph( p, h, phase, region))", "search_keywords": ["Integer", "Pa", "Pressure", "Real", "SI.Pressure", "SI.SpecificEnthalpy", "computational", "hydraulic"]}, "components": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pressure"}, {"name": "h", "type_name": "SI.SpecificEnthalpy", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Specific enthalpy"}, {"name": "phase", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "gamma", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Isentropic exponent"}], "connections": [], "variables": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "h", "type_name": "SI.SpecificEnthalpy", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Specific enthalpy\""}, {"name": "phase", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": "0 \"2 for two-phase, 1 for one-phase, 0 if not known\"", "comment": null}, {"name": "region", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": "0\r\n      \"If 0, region is unknown, otherwise known and this input\"", "comment": null}, {"name": "gamma", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Isentropic exponent\""}], "physical_quantities": [{"name": "p", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": null}], "dependencies": ["Modelica.Icons", "SI"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Media.IdealGases.Common.SingleGasNasa.extends", "kind": "function", "name": "extends", "package_path": ["Modelica", "Media", "IdealGases", "Common", "SingleGasNasa"], "extends": ["density_derT_p"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    ddTp := -state.p/(state.T*state.T*data.R_s)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 303, "end_line": 304, "start_col": 3, "end_col": 49}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 303, "end_line": 303, "start_col": 3, "end_col": 12}}], "docstring": "extends density_derT_p | eq: algorithm ddTp := -state.p/(state.T*state.T*data.R_s)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo", "start_line": 301, "end_line": 306, "start_col": 13, "end_col": 21}, "code_text": "function extends density_derT_p\r\n    \"Returns the partial derivative of density with respect to temperature at constant pressure\"\r\n  algorithm\r\n    ddTp := -state.p/(state.T*state.T*data.R_s);\r\n    annotation(Inline=true,smoothOrder=2);\r\n  end density_derT_p", "checksum": "1e936a5dd6add1deba5bd8e5e52871798fc8d941", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\IdealGases\\Common\\package.mo:301-306", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm ddTp := -state.p/(state.T*state.T*data.R_s)", "search_keywords": ["computational"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["data", "state"], "inheritance_chain": ["density_derT_p"]}
{"fqn": "Modelica.Media.Water.IF97_Utilities.BaseIF97.Regions.dhl_dp", "kind": "function", "name": "dhl_dp", "package_path": ["Modelica", "Media", "Water", "IF97_Utilities", "BaseIF97", "Regions"], "extends": ["Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n        dh_dp := hvl_dp(p, boilingcurve_p(p))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 1487, "end_line": 1488, "start_col": 7, "end_col": 47}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 1487, "end_line": 1487, "start_col": 7, "end_col": 16}}], "docstring": "extends Modelica.Icons.Function | components: SI.Pressure×1 | units: Pa | eq: algorithm dh_dp := hvl_dp(p, boilingcurve_p(p))", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo", "start_line": 1480, "end_line": 1490, "start_col": 7, "end_col": 17}, "code_text": "function dhl_dp\r\n        \"Derivative of liquid specific enthalpy on the boundary between regions 4 and 3 or 1 w.r.t. pressure\"\r\n\r\n        extends Modelica.Icons.Function;\r\n        input SI.Pressure p \"Pressure\";\r\n        output SI.DerEnthalpyByPressure dh_dp\r\n          \"Specific enthalpy derivative w.r.t. pressure\";\r\n      algorithm\r\n        dh_dp := hvl_dp(p, boilingcurve_p(p));\r\n        annotation (Inline=true);\r\n      end dhl_dp", "checksum": "252e1636fa61f6887bbb33b692cc0fff3f469ec1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\Water\\IF97_Utilities.mo:1480-1490", "component_count": 1, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 2, "dependency_count": 3, "has_physical_interface": true, "interface_component_count": 1, "has_connections": false, "is_composite_model": false, "complexity_score": 4.0, "model_type": "computational", "physical_domains": ["hydraulic"], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm dh_dp := hvl_dp(p, boilingcurve_p(p))", "search_keywords": ["Pa", "Pressure", "SI.Pressure", "computational", "hydraulic"]}, "components": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pressure"}], "connections": [], "variables": [{"name": "p", "type_name": "SI.Pressure", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "dh_dp", "type_name": "SI.DerEnthalpyByPressure", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Specific enthalpy derivative w.r.t. pressure\""}], "physical_quantities": [{"name": "p", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": null}], "dependencies": ["Modelica.Icons", "SI", "w.r"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Mechanics.MultiBody.Frames.axesRotations", "kind": "function", "name": "axesRotations", "package_path": ["Modelica", "Mechanics", "MultiBody", "Frames"], "extends": ["Modelica.Icons.Function"], "imports": ["TM"], "parameters": [], "equations": [{"equations": ["algorithm\r\n  /*\r\n  R := absoluteRotation(absoluteRotation(axisRotation(sequence[1], angles[1],\r\n    der_angles[1]), axisRotation(sequence[2], angles[2], der_angles[2])),\r\n    axisRotation(sequence[3], angles[3], der_angles[3]))", "*/\r\n  R := Orientation(T=TM.axisRotation(sequence[3], angles[3])*TM.axisRotation(sequence[2], angles[2])*TM.axisRotation(sequence[1], angles[1]), w=Frames.axis(sequence[3])*der_angles[3] + TM.resolve2(TM.axisRotation(sequence[3], angles[3]), Frames.axis(sequence[2])*der_angles[2]) + TM.resolve2(TM.axisRotation(sequence[3], angles[3])*TM.axisRotation(sequence[2], angles[2]), Frames.axis(sequence[1])*der_angles[1]))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\axesRotations.mo", "start_line": 15, "end_line": 21, "start_col": 1, "end_col": 415}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\axesRotations.mo", "start_line": 15, "end_line": 15, "start_col": 1, "end_col": 10}}], "docstring": "extends Modelica.Icons.Function | components: SI.AngularVelocity×1, Orientation×1 | units: rad/s, 3, 3 | eq: algorithm /* R := absoluteRotation(absoluteRotation", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\axesRotations.mo", "start_line": 2, "end_line": 43, "start_col": 1, "end_col": 18}, "code_text": "function axesRotations\r\n  \"Return fixed rotation object to rotate in sequence around fixed angles along 3 axes\"\r\n\r\n  import TM = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices;\r\n  extends Modelica.Icons.Function;\r\n  input Integer sequence[3](\r\n    min={1,1,1},\r\n    max={3,3,3}) = {1,2,3}\r\n    \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";\r\n  input SI.Angle angles[3]\r\n    \"Rotation angles around the axes defined in 'sequence'\";\r\n  input SI.AngularVelocity der_angles[3] \"= der(angles)\";\r\n  output Orientation R \"Orientation object to rotate frame 1 into frame 2\";\r\nalgorithm\r\n  /*\r\n  R := absoluteRotation(absoluteRotation(axisRotation(sequence[1], angles[1],\r\n    der_angles[1]), axisRotation(sequence[2], angles[2], der_angles[2])),\r\n    axisRotation(sequence[3], angles[3], der_angles[3]));\r\n*/\r\n  R := Orientation(T=TM.axisRotation(sequence[3], angles[3])*TM.axisRotation(sequence[2], angles[2])*TM.axisRotation(sequence[1], angles[1]), w=Frames.axis(sequence[3])*der_angles[3] + TM.resolve2(TM.axisRotation(sequence[3], angles[3]), Frames.axis(sequence[2])*der_angles[2]) + TM.resolve2(TM.axisRotation(sequence[3], angles[3])*TM.axisRotation(sequence[2], angles[2]), Frames.axis(sequence[1])*der_angles[1]));\r\n  annotation(Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nR = Frames.<strong>axesRotations</strong>(sequence, angles, der_angles);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function returns\r\n<a href=\\\"modelica://Modelica.Mechanics.MultiBody.Frames.Orientation\\\">orientation object</a>&nbsp;R\r\nthat describes the orientation defined by three elementary rotations in\r\na given <strong>sequence</strong>, each rotated by <strong>angles</strong>.\r\nThe angular velocity vector R.w is calculated from the angle derivatives\r\n<strong>der_angles</strong>.\r\n</p>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axesRotations\\\">TransformationMatrices.axesRotations</a>.\r\n</p>\r\n</html>\"));\r\nend axesRotations", "checksum": "43eeabe5ef0e42a9e82950dd0ced71c78ab3d396", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\axesRotations.mo:2-43", "component_count": 2, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 2, "dependency_count": 8, "has_physical_interface": true, "interface_component_count": 2, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "computational", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "function", "equation_summary": "algorithm /* R := absoluteRotation(absoluteRotation(axisRotation(sequence[1], angles[1], der_angles[1]), axisRotation(sequence[2], angles[2], der_angles[2])), a", "search_keywords": ["AngularVelocity", "Orientation", "SI.AngularVelocity", "computational", "rad/s"]}, "components": [{"name": "der_angles", "type_name": "SI.AngularVelocity", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": "= der(angles)"}, {"name": "R", "type_name": "Orientation", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Orientation object to rotate frame 1 into frame 2"}], "connections": [], "variables": [{"name": "TM", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices", "comment": null}, {"name": "sequence", "type_name": "Integer", "prefixes": ["input"], "attributes": {"min": "{1", "max": "{3"}, "binding_equation": "{1,2,3}\r\n    \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\"", "comment": null}, {"name": "angles", "type_name": "SI.Angle", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Rotation angles around the axes defined in 'sequence'\""}, {"name": "der_angles", "type_name": "SI.AngularVelocity", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"= der(angles)\""}, {"name": "R", "type_name": "Orientation", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Orientation object to rotate frame 1 into frame 2\""}], "physical_quantities": [{"name": "der_angles", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "axes", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "sequence", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Frames", "Modelica.Icons", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices", "R", "SI", "TM", "TransformationMatrices"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "ConsistentInitialization", "kind": "package", "name": "ConsistentInitialization", "package_path": [], "extends": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "DynamicPipesSeriesSteadyStateInitial", "BaseClasses.TwoVolumesEquations", "BaseClasses.TwoVolumes", "Modelica.Icons.BasesPackage", "BaseClasses.TwoMassesEquations", "BaseClasses.TwoMasses", "ConsistentInitialization.Fluid.BaseClasses.TwoVolumesEquations", "ConsistentInitialization.Fluid.BaseClasses.TwoVolumes", "ConsistentInitialization.Mechanical.BaseClasses.TwoMassesEquations", "ConsistentInitialization.Mechanical.BaseClasses.TwoMasses"], "imports": [], "parameters": [{"name": "V", "type": "Real", "default": "1", "description": null}, {"name": "R", "type": "Real", "default": "400", "description": null}, {"name": "cp", "type": "Real", "default": "1000", "description": null}, {"name": "cv", "type": "Real", "default": "cp-R", "description": null}, {"name": "h0", "type": "Real", "default": "cp*300", "description": null}, {"name": "Kv", "type": "Real", "default": "1e-7", "description": null}, {"name": "M", "type": "Real", "default": "1", "description": null}, {"name": "K", "type": "Real", "default": "1", "description": null}, {"name": "F0", "type": "Real", "default": "1", "description": null}], "equations": [{"equations": ["initial equation\r\n        x1 = 0", "v1 = 0", "x2 = 1", "v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 586, "end_line": 590, "start_col": 7, "end_col": 16}}, {"equations": ["x1 = 0", "v1 = 0", "x2 = 1", "v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 587, "end_line": 590, "start_col": 9, "end_col": 16}}, {"equations": ["v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 590, "end_line": 590, "start_col": 9, "end_col": 15}}, {"equations": ["x2 = 1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 589, "end_line": 589, "start_col": 9, "end_col": 15}}, {"equations": ["v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 588, "end_line": 588, "start_col": 9, "end_col": 15}}, {"equations": ["x1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 587, "end_line": 587, "start_col": 9, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 586, "end_line": 586, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        p1 = 1e5", "T1 = 300", "p2 = 2e5", "T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 558, "end_line": 562, "start_col": 7, "end_col": 18}}, {"equations": ["p1 = 1e5", "T1 = 300", "p2 = 2e5", "T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 559, "end_line": 562, "start_col": 9, "end_col": 18}}, {"equations": ["T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 562, "end_line": 562, "start_col": 9, "end_col": 17}}, {"equations": ["p2 = 2e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 561, "end_line": 561, "start_col": 9, "end_col": 17}}, {"equations": ["T1 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 560, "end_line": 560, "start_col": 9, "end_col": 17}}, {"equations": ["p1 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 559, "end_line": 559, "start_col": 9, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 558, "end_line": 558, "start_col": 15, "end_col": 23}}, {"equations": ["equation\r\n          der(x1) = v1", "M*der(v1) = F1+F2", "der(x2) = v2", "M*der(v2) = -F2", "F1 = -K*x1", "x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 535, "end_line": 541, "start_col": 9, "end_col": 19}}, {"equations": ["der(x1) = v1", "M*der(v1) = F1+F2", "der(x2) = v2", "M*der(v2) = -F2", "F1 = -K*x1", "x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 536, "end_line": 541, "start_col": 11, "end_col": 19}}, {"equations": ["x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 541, "end_line": 541, "start_col": 11, "end_col": 18}}, {"equations": ["F1 = -K*x1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 540, "end_line": 540, "start_col": 11, "end_col": 21}}, {"equations": ["M*der(v2) = -F2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 539, "end_line": 539, "start_col": 11, "end_col": 26}}, {"equations": ["der(x2) = v2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 538, "end_line": 538, "start_col": 11, "end_col": 23}}, {"equations": ["M*der(v1) = F1+F2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 537, "end_line": 537, "start_col": 11, "end_col": 28}}, {"equations": ["der(x1) = v1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 536, "end_line": 536, "start_col": 11, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 535, "end_line": 535, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(fixed.flange, spring.flange_a) annotation (Line(\r\n              points={{-60,0},{-42,0}}, color={0,127,0}))", "connect(spring.flange_b, mass1.flange_a) annotation (Line(\r\n              points={{-22,0},{-12,0}}, color={0,127,0}))", "connect(mass1.flange_b, mass2.flange_a) annotation (Line(\r\n              points={{8,0},{26,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 520, "end_line": 526, "start_col": 9, "end_col": 56}}, {"equations": ["connect(fixed.flange, spring.flange_a) annotation (Line(\r\n              points={{-60,0},{-42,0}}, color={0,127,0}))", "connect(spring.flange_b, mass1.flange_a) annotation (Line(\r\n              points={{-22,0},{-12,0}}, color={0,127,0}))", "connect(mass1.flange_b, mass2.flange_a) annotation (Line(\r\n              points={{8,0},{26,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 521, "end_line": 526, "start_col": 11, "end_col": 56}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 520, "end_line": 520, "start_col": 9, "end_col": 17}}, {"equations": ["initial equation\r\n        der(x1) = 0", "der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 465, "end_line": 467, "start_col": 7, "end_col": 21}}, {"equations": ["der(x1) = 0", "der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 466, "end_line": 467, "start_col": 9, "end_col": 21}}, {"equations": ["der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 467, "end_line": 467, "start_col": 9, "end_col": 20}}, {"equations": ["der(x1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 466, "end_line": 466, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 465, "end_line": 465, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        der(x1) = 0", "der(v1) = 0", "der(x2) = 0", "der(v2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 453, "end_line": 457, "start_col": 7, "end_col": 21}}, {"equations": ["der(x1) = 0", "der(v1) = 0", "der(x2) = 0", "der(v2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 454, "end_line": 457, "start_col": 9, "end_col": 21}}, {"equations": ["der(v2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 457, "end_line": 457, "start_col": 9, "end_col": 20}}, {"equations": ["der(x2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 456, "end_line": 456, "start_col": 9, "end_col": 20}}, {"equations": ["der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 455, "end_line": 455, "start_col": 9, "end_col": 20}}, {"equations": ["der(x1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 454, "end_line": 454, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 453, "end_line": 453, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        x1 = 0", "v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 443, "end_line": 445, "start_col": 7, "end_col": 16}}, {"equations": ["x1 = 0", "v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 444, "end_line": 445, "start_col": 9, "end_col": 16}}, {"equations": ["v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 445, "end_line": 445, "start_col": 9, "end_col": 15}}, {"equations": ["x1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 444, "end_line": 444, "start_col": 9, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 443, "end_line": 443, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        x1 = 0", "v1 = 0", "x2 = 0", "v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 431, "end_line": 435, "start_col": 7, "end_col": 16}}, {"equations": ["x1 = 0", "v1 = 0", "x2 = 0", "v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 432, "end_line": 435, "start_col": 9, "end_col": 16}}, {"equations": ["v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 435, "end_line": 435, "start_col": 9, "end_col": 15}}, {"equations": ["x2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 434, "end_line": 434, "start_col": 9, "end_col": 15}}, {"equations": ["v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 433, "end_line": 433, "start_col": 9, "end_col": 15}}, {"equations": ["x1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 432, "end_line": 432, "start_col": 9, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 431, "end_line": 431, "start_col": 15, "end_col": 23}}, {"equations": ["equation\r\n          der(M1) = w0 - w1", "der(E1) = w0*h0 - w1*h1", "der(M2) = w1 - w2", "der(E2) = w1*h1 - w2*h2", "M1 = V*p1/(R*T1)", "M2 = V*p2/(R*T2)", "E1 = M1*cv*T1", "E2 = M2*cv*T2", "h1 = cp*T1", "h2 = cp*T2", "w0 = 0.01", "w2 = Kv*p2", "p1 = p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 406, "end_line": 419, "start_col": 9, "end_col": 19}}, {"equations": ["der(M1) = w0 - w1", "der(E1) = w0*h0 - w1*h1", "der(M2) = w1 - w2", "der(E2) = w1*h1 - w2*h2", "M1 = V*p1/(R*T1)", "M2 = V*p2/(R*T2)", "E1 = M1*cv*T1", "E2 = M2*cv*T2", "h1 = cp*T1", "h2 = cp*T2", "w0 = 0.01", "w2 = Kv*p2", "p1 = p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 407, "end_line": 419, "start_col": 11, "end_col": 19}}, {"equations": ["p1 = p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 419, "end_line": 419, "start_col": 11, "end_col": 18}}, {"equations": ["w2 = Kv*p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 418, "end_line": 418, "start_col": 11, "end_col": 21}}, {"equations": ["w0 = 0.01"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 417, "end_line": 417, "start_col": 11, "end_col": 20}}, {"equations": ["h2 = cp*T2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 416, "end_line": 416, "start_col": 11, "end_col": 21}}, {"equations": ["h1 = cp*T1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 415, "end_line": 415, "start_col": 11, "end_col": 21}}, {"equations": ["E2 = M2*cv*T2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 414, "end_line": 414, "start_col": 11, "end_col": 24}}, {"equations": ["E1 = M1*cv*T1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 413, "end_line": 413, "start_col": 11, "end_col": 24}}, {"equations": ["M2 = V*p2/(R*T2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 412, "end_line": 412, "start_col": 11, "end_col": 27}}, {"equations": ["M1 = V*p1/(R*T1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 411, "end_line": 411, "start_col": 11, "end_col": 27}}, {"equations": ["der(E2) = w1*h1 - w2*h2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 410, "end_line": 410, "start_col": 11, "end_col": 34}}, {"equations": ["der(M2) = w1 - w2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 409, "end_line": 409, "start_col": 11, "end_col": 28}}, {"equations": ["der(E1) = w0*h0 - w1*h1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 408, "end_line": 408, "start_col": 11, "end_col": 34}}, {"equations": ["der(M1) = w0 - w1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 407, "end_line": 407, "start_col": 11, "end_col": 28}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 406, "end_line": 406, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(source.ports[1], V1.ports[1]) annotation (Line(\r\n              points={{-60,-10},{-40,-10},{-40,0}}, color={0,127,255}))", "connect(V1.ports[2], V2.ports[1]) annotation (Line(\r\n              points={{-36,0},{-36,-10},{-4,-10},{-4,0}}, color={0,127,255}))", "connect(V2.ports[2], valveLinear.port_a) annotation (Line(\r\n              points={{0,0},{0,-10},{20,-10}}, color={0,127,255}))", "connect(valveLinear.port_b, sink.ports[1]) annotation (Line(\r\n              points={{40,-10},{60,-10}}, color={0,127,255}))", "connect(one.y, valveLinear.opening) annotation (Line(\r\n              points={{23,34},{30,34},{30,-2}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 376, "end_line": 386, "start_col": 9, "end_col": 67}}, {"equations": ["connect(source.ports[1], V1.ports[1]) annotation (Line(\r\n              points={{-60,-10},{-40,-10},{-40,0}}, color={0,127,255}))", "connect(V1.ports[2], V2.ports[1]) annotation (Line(\r\n              points={{-36,0},{-36,-10},{-4,-10},{-4,0}}, color={0,127,255}))", "connect(V2.ports[2], valveLinear.port_a) annotation (Line(\r\n              points={{0,0},{0,-10},{20,-10}}, color={0,127,255}))", "connect(valveLinear.port_b, sink.ports[1]) annotation (Line(\r\n              points={{40,-10},{60,-10}}, color={0,127,255}))", "connect(one.y, valveLinear.opening) annotation (Line(\r\n              points={{23,34},{30,34},{30,-2}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 377, "end_line": 386, "start_col": 11, "end_col": 67}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 376, "end_line": 376, "start_col": 9, "end_col": 17}}, {"equations": ["initial equation\r\n        der(M1) = 0", "der(E1) = 0", "der(M2) = 0", "der(E2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 312, "end_line": 316, "start_col": 7, "end_col": 21}}, {"equations": ["der(M1) = 0", "der(E1) = 0", "der(M2) = 0", "der(E2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 313, "end_line": 316, "start_col": 9, "end_col": 21}}, {"equations": ["der(E2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 316, "end_line": 316, "start_col": 9, "end_col": 20}}, {"equations": ["der(M2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 315, "end_line": 315, "start_col": 9, "end_col": 20}}, {"equations": ["der(E1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 314, "end_line": 314, "start_col": 9, "end_col": 20}}, {"equations": ["der(M1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 313, "end_line": 313, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 312, "end_line": 312, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        der(p1) = 0", "der(T1) = 0", "der(p2) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 300, "end_line": 304, "start_col": 7, "end_col": 21}}, {"equations": ["der(p1) = 0", "der(T1) = 0", "der(p2) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 301, "end_line": 304, "start_col": 9, "end_col": 21}}, {"equations": ["der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 304, "end_line": 304, "start_col": 9, "end_col": 20}}, {"equations": ["der(p2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 303, "end_line": 303, "start_col": 9, "end_col": 20}}, {"equations": ["der(T1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 302, "end_line": 302, "start_col": 9, "end_col": 20}}, {"equations": ["der(p1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 301, "end_line": 301, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 300, "end_line": 300, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        der(p1) = 0", "der(T1) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 289, "end_line": 292, "start_col": 7, "end_col": 21}}, {"equations": ["der(p1) = 0", "der(T1) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 290, "end_line": 292, "start_col": 9, "end_col": 21}}, {"equations": ["der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 292, "end_line": 292, "start_col": 9, "end_col": 20}}, {"equations": ["der(T1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 291, "end_line": 291, "start_col": 9, "end_col": 20}}, {"equations": ["der(p1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 290, "end_line": 290, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 289, "end_line": 289, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n          p1 = 1e5", "T1 = 300", "p2 = 1e5", "T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 277, "end_line": 281, "start_col": 7, "end_col": 20}}, {"equations": ["p1 = 1e5", "T1 = 300", "p2 = 1e5", "T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 278, "end_line": 281, "start_col": 11, "end_col": 20}}, {"equations": ["T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 281, "end_line": 281, "start_col": 11, "end_col": 19}}, {"equations": ["p2 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 280, "end_line": 280, "start_col": 11, "end_col": 19}}, {"equations": ["T1 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 279, "end_line": 279, "start_col": 11, "end_col": 19}}, {"equations": ["p1 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 278, "end_line": 278, "start_col": 11, "end_col": 19}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 277, "end_line": 277, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        T1 = 300", "p2 = 1e5", "T2 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 266, "end_line": 269, "start_col": 7, "end_col": 18}}, {"equations": ["T1 = 300", "p2 = 1e5", "T2 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 267, "end_line": 269, "start_col": 9, "end_col": 18}}, {"equations": ["T2 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 269, "end_line": 269, "start_col": 9, "end_col": 17}}, {"equations": ["p2 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 268, "end_line": 268, "start_col": 9, "end_col": 17}}, {"equations": ["T1 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 267, "end_line": 267, "start_col": 9, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 266, "end_line": 266, "start_col": 15, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 258, "end_line": 258, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        connect(source.ports[1], pipe1.port_a) annotation (Line(\r\n            points={{-70,0},{-50,0}}, color={0,127,255}))", "connect(valve.port_b,sink. ports[1])                          annotation (Line(\r\n            points={{46,0},{66,0}}, color={0,127,255}))", "connect(ramp.y,valve. opening)               annotation (Line(\r\n            points={{51,40},{36,40},{36,8}}, color={0,0,127}))", "connect(pipe1.port_b, pipe2.port_a) annotation (Line(\r\n            points={{-30,0},{-14,0}}, color={0,127,255}))", "connect(pipe2.port_b, valve.port_a) annotation (Line(\r\n            points={{6,0},{26,0}}, color={0,127,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 240, "end_line": 250, "start_col": 7, "end_col": 56}}, {"equations": ["connect(source.ports[1], pipe1.port_a) annotation (Line(\r\n            points={{-70,0},{-50,0}}, color={0,127,255}))", "connect(valve.port_b,sink. ports[1])                          annotation (Line(\r\n            points={{46,0},{66,0}}, color={0,127,255}))", "connect(ramp.y,valve. opening)               annotation (Line(\r\n            points={{51,40},{36,40},{36,8}}, color={0,0,127}))", "connect(pipe1.port_b, pipe2.port_a) annotation (Line(\r\n            points={{-30,0},{-14,0}}, color={0,127,255}))", "connect(pipe2.port_b, valve.port_a) annotation (Line(\r\n            points={{6,0},{26,0}}, color={0,127,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 241, "end_line": 250, "start_col": 9, "end_col": 56}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 240, "end_line": 240, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 138, "end_line": 158, "start_col": 7, "end_col": 64}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 139, "end_line": 158, "start_col": 9, "end_col": 64}}, {"equations": ["if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 142, "end_line": 147, "start_col": 9, "end_col": 15}}, {"equations": ["when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 144, "end_line": 146, "start_col": 11, "end_col": 20}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 146, "end_line": 146, "start_col": 15, "end_col": 19}}, {"equations": ["assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 145, "end_line": 145, "start_col": 13, "end_col": 124}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 144, "end_line": 144, "start_col": 11, "end_col": 15}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 139, "end_line": 141, "start_col": 9, "end_col": 17}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 141, "end_line": 141, "start_col": 13, "end_col": 17}}, {"equations": ["m_flow_initial = valve.port_a.m_flow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 140, "end_line": 140, "start_col": 11, "end_col": 48}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 139, "end_line": 139, "start_col": 9, "end_col": 13}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 138, "end_line": 138, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 54, "end_line": 74, "start_col": 7, "end_col": 64}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 55, "end_line": 74, "start_col": 9, "end_col": 64}}, {"equations": ["if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 58, "end_line": 63, "start_col": 9, "end_col": 15}}, {"equations": ["when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 60, "end_line": 62, "start_col": 11, "end_col": 20}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 62, "end_line": 62, "start_col": 15, "end_col": 19}}, {"equations": ["assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 61, "end_line": 61, "start_col": 13, "end_col": 124}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 60, "end_line": 60, "start_col": 11, "end_col": 15}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 55, "end_line": 57, "start_col": 9, "end_col": 17}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 57, "end_line": 57, "start_col": 13, "end_col": 17}}, {"equations": ["m_flow_initial = valve.port_a.m_flow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 56, "end_line": 56, "start_col": 11, "end_col": 48}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 55, "end_line": 55, "start_col": 9, "end_col": 13}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 54, "end_line": 54, "start_col": 7, "end_col": 15}}], "docstring": "extends Modelica.Icons.ExamplesPackage | components: Real×6, Modelica.Units.SI.MassFlowRate×1 | connections: 17 | params: V, R, cp | units: 1, 1 | eq: initial e", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 4, "end_line": 637, "start_col": 3, "end_col": 31}, "code_text": "package ConsistentInitialization\r\n    \"Test cases of systems with overdetermined initialization problems due to index reduction\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n\r\n    package Fluid \"Test cases with Fluid systems\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n      model DynamicPipeLumpedPressureInitialization\r\n        \"Steady-state initialization of a dynamic pipe using lumped pressure states\"\r\n        extends Modelica.Icons.Example;\r\n\r\n        Modelica.Fluid.Sources.FixedBoundary source(nPorts=1,\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          use_T=false,\r\n          h=2.5e6,\r\n          p=system.p_start)\r\n          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          diameter=0.05,\r\n          length=200,\r\n          use_T_start=false,\r\n          useLumpedPressure=true,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.a_vb,\r\n          h_start=2.5e6)\r\n          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n        Modelica.Fluid.Valves.ValveCompressible valve(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          m_flow_nominal=10,\r\n          rho_nominal=60,\r\n          CvData=Modelica.Fluid.Types.CvTypes.Av,\r\n          Av=0.05^2/4*Modelica.Constants.pi,\r\n          dp_nominal=100000,\r\n          p_nominal=10000000)\r\n          annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\n        Modelica.Fluid.Sources.FixedBoundary sink(nPorts=1,redeclare package\r\n            Medium =\r\n              Modelica.Media.Water.StandardWaterOnePhase, p=9500000)\r\n                    annotation (Placement(transformation(extent={{60,-10},{40,10}})));\r\n        Modelica.Blocks.Sources.Ramp ramp(\r\n          offset=1,\r\n          startTime=2,\r\n          duration=0,\r\n          height=-0.8)\r\n                    annotation (Placement(transformation(extent={{46,30},{26,50}})));\r\n        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,\r\n          use_eps_Re=true,\r\n          p_start=10000000)\r\n          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n        discrete Modelica.Units.SI.MassFlowRate m_flow_initial;\r\n      equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow;\r\n        end when;\r\n        if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\");\r\n          end when;\r\n        end if;\r\n        connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}));\r\n        connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}));\r\n        connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}));\r\n        connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}));\r\n\r\n        annotation (Documentation(info=\"<html>\r\nAll pressure states of the pipe are lumped into one.\r\nThe steady-state initial conditions become overdetermined as they are now specified nNodes times for the same pressure state.\r\nThe initial equations are consistent however and a tool shall reduce them appropriately.\r\n</html>\"),\r\n        Diagram(coordinateSystem(preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={Text(\r\n                extent={{-100,-20},{100,-40}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Problem: pipe.medium.p[1:5] are equal and have initial equations der(medium.p)=zeros(5);\"),\r\n                Text(\r\n                extent={{-76,-40},{80,-58}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"A translator should remove consistently overdetermined initial equations.\")}),\r\n          experiment(StopTime=4));\r\n      end DynamicPipeLumpedPressureInitialization;\r\n\r\n      model DynamicPipeInitialValues\r\n        \"Initialization of a dynamic pipe with fixed initial values and without adaptation of modelStructure to boundaries\"\r\n        extends Modelica.Icons.Example;\r\n\r\n        Modelica.Fluid.Sources.FixedBoundary source(nPorts=1,\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          use_T=false,\r\n          h=2.5e6,\r\n          p=system.p_start)\r\n          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          diameter=0.05,\r\n          length=200,\r\n          use_T_start=false,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.av_vb,\r\n          h_start=2.5e6)\r\n          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n        Modelica.Fluid.Valves.ValveCompressible valve(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          m_flow_nominal=10,\r\n          rho_nominal=60,\r\n          CvData=Modelica.Fluid.Types.CvTypes.Av,\r\n          Av=0.05^2/4*Modelica.Constants.pi,\r\n          dp_nominal=100000,\r\n          p_nominal=10000000)\r\n          annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\n        Modelica.Fluid.Sources.FixedBoundary sink(nPorts=1,redeclare package\r\n            Medium =\r\n              Modelica.Media.Water.StandardWaterOnePhase, p=9500000)\r\n                    annotation (Placement(transformation(extent={{60,-10},{40,10}})));\r\n        Modelica.Blocks.Sources.Ramp ramp(\r\n          offset=1,\r\n          startTime=2,\r\n          duration=0,\r\n          height=-0.8)\r\n                    annotation (Placement(transformation(extent={{46,30},{26,50}})));\r\n        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,\r\n          p_start=10000000,\r\n          use_eps_Re=true)\r\n          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n        discrete Modelica.Units.SI.MassFlowRate m_flow_initial;\r\n      equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow;\r\n        end when;\r\n        if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\");\r\n          end when;\r\n        end if;\r\n        connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}));\r\n        connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}));\r\n        connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}));\r\n        connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}));\r\n        annotation (Documentation(info=\"<html>\r\nThe initial values are overdetermined as the first pipe segment is directly connected to a source with fixed pressure.\r\nThe initial equations are consistent however and a tool shall reduce them appropriately.\r\n</html>\"),\r\n        Diagram(coordinateSystem(preserveAspectRatio=false,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-100,-20},{100,-40}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Problem: pipe.medium[1].p is equal to source.p and  has a consistent initial value  of system.p_start = 100 bar;\"),\r\n              Text(\r\n                extent={{-76,-36},{76,-54}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"A translator should remove consistently overdetermined initial equations.\"),\r\n              Text(\r\n                extent={{-100,-64},{90,-84}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Work-around 2: change system.energyDynamics from FixedInitial to DynamicFreeInitial\"),\r\n              Text(\r\n                extent={{-100,-54},{42,-74}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Work-around 1: change pipe.modelStructure from av_vb to a_vb\")}),\r\n          experiment(StopTime=4));\r\n      end DynamicPipeInitialValues;\r\n\r\n      model DynamicPipesSeriesSteadyStateInitial\r\n        \"Two series-connected pipes with steady-state initial condition, overedetermined initialization due to pressure states at the ports\"\r\n        extends Modelica.Icons.Example;\r\n\r\n        Modelica.Fluid.Sources.FixedBoundary source(nPorts=1,\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          use_T=false,\r\n          h=2.5e6,\r\n          p=system.p_start)\r\n          annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe1(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          length=200,\r\n          use_T_start=false,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.av_vb,\r\n          h_start=2.5e6,\r\n          diameter=0.01)\r\n          annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n        Modelica.Fluid.Valves.ValveCompressible valve(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          m_flow_nominal=10,\r\n          rho_nominal=60,\r\n          CvData=Modelica.Fluid.Types.CvTypes.Av,\r\n          Av=0.05^2/4*Modelica.Constants.pi,\r\n          dp_nominal=100000,\r\n          p_nominal=10000000)\r\n          annotation (Placement(transformation(extent={{26,-10},{46,10}})));\r\n        Modelica.Fluid.Sources.FixedBoundary sink(nPorts=1,redeclare package\r\n            Medium =\r\n              Modelica.Media.Water.StandardWaterOnePhase, p=9500000)\r\n                    annotation (Placement(transformation(extent={{86,-10},{66,10}})));\r\n        Modelica.Blocks.Sources.Ramp ramp(\r\n          offset=1,\r\n          startTime=2,\r\n          duration=0,\r\n          height=-0.8)\r\n                    annotation (Placement(transformation(extent={{72,30},{52,50}})));\r\n        inner Modelica.Fluid.System system(\r\n          use_eps_Re=true,\r\n          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,\r\n          p_start=10000000)\r\n          annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe2(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          length=200,\r\n          use_T_start=false,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.av_vb,\r\n          h_start=2.5e6,\r\n          diameter=0.01)\r\n          annotation (Placement(transformation(extent={{-14,-10},{6,10}})));\r\n      equation\r\n        connect(source.ports[1], pipe1.port_a) annotation (Line(\r\n            points={{-70,0},{-50,0}}, color={0,127,255}));\r\n        connect(valve.port_b,sink. ports[1])                          annotation (Line(\r\n            points={{46,0},{66,0}}, color={0,127,255}));\r\n        connect(ramp.y,valve. opening)               annotation (Line(\r\n            points={{51,40},{36,40},{36,8}}, color={0,0,127}));\r\n        connect(pipe1.port_b, pipe2.port_a) annotation (Line(\r\n            points={{-30,0},{-14,0}}, color={0,127,255}));\r\n        connect(pipe2.port_b, valve.port_a) annotation (Line(\r\n            points={{6,0},{26,0}}, color={0,127,255}));\r\n      end DynamicPipesSeriesSteadyStateInitial;\r\n\r\n      model DynamicPipesSeriesLargeNSteadyStateInitial\r\n        \"Same as DynamicPipesSeriesSteadyStateInitial but with larger number of nodes\"\r\n         extends DynamicPipesSeriesSteadyStateInitial(\r\n           pipe1(nNodes = 50),\r\n           pipe2(nNodes = 50));\r\n      equation\r\n\r\n      end DynamicPipesSeriesLargeNSteadyStateInitial;\r\n\r\n      model TwoVolumesEquationsReducedInitial\r\n        \"Initial values only for state variables after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        T1 = 300;\r\n        p2 = 1e5;\r\n        T2 = 300;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsReducedInitial;\r\n\r\n      model TwoVolumesEquationsFullInitial\r\n        \"Fully specified initial values for all dynamic variables, consistent values\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n          p1 = 1e5;\r\n          T1 = 300;\r\n          p2 = 1e5;\r\n          T2 = 350;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullInitial;\r\n\r\n      model TwoVolumesEquationsReducedSteadyStatePressureAndTemperature\r\n        \"Steady-state equations only for state variables after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        der(p1) = 0;\r\n        der(T1) = 0;\r\n        der(T2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsReducedSteadyStatePressureAndTemperature;\r\n\r\n      model TwoVolumesEquationsFullSteadyStatePressureAndTemperature\r\n        \"Steady-state equations only for all dynamic variables after state variable change\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        der(p1) = 0;\r\n        der(T1) = 0;\r\n        der(p2) = 0;\r\n        der(T2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullSteadyStatePressureAndTemperature;\r\n\r\n      model TwoVolumesEquationsFullSteadyStateMassAndEnergy\r\n        \"Steady-state equations for all original dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        der(M1) = 0;\r\n        der(E1) = 0;\r\n        der(M2) = 0;\r\n        der(E2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullSteadyStateMassAndEnergy;\r\n\r\n      model TwoVolumesFullInitial\r\n        \"Fully specified initial values for all dynamic variables, consistent values\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumes(\r\n          system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial),\r\n          V1(p_start=100000, T_start(displayUnit=\"K\") = 300),\r\n          V2(p_start=100000, T_start=623.15));\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesFullInitial;\r\n\r\n      model TwoVolumesFullSteadyStatePressureAndTemperature\r\n        \"Fully specified steady-state conditions for all dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumes(\r\n          system(energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial),\r\n          V1(p_start=100000, T_start(displayUnit=\"K\") = 300),\r\n          V2(p_start=100000, T_start=623.15));\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesFullSteadyStatePressureAndTemperature;\r\n\r\n      package BaseClasses \"Base classes for test models\"\r\n        extends Modelica.Icons.BasesPackage;\r\n        model TwoVolumes\r\n          \"Two volumes containing an ideal gas with a zero dp connection, MSL-based\"\r\n\r\n          Modelica.Fluid.Vessels.ClosedVolume V1(\r\n            use_portsData=false,\r\n            V=1,\r\n            nPorts=2,\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa)\r\n            annotation (Placement(transformation(extent={{-48,0},{-28,20}})));\r\n          Modelica.Fluid.Vessels.ClosedVolume V2(\r\n            use_portsData=false,\r\n            V=1,\r\n            nPorts=2,\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa)\r\n            annotation (Placement(transformation(extent={{-12,0},{8,20}})));\r\n          Modelica.Fluid.Sources.MassFlowSource_T source(\r\n            nPorts=1,\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            m_flow=0.01)\r\n            annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));\r\n          Modelica.Fluid.Sources.FixedBoundary sink(\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            T(displayUnit=\"K\") = 300,\r\n            nPorts=1,\r\n            p=1000) annotation (Placement(transformation(extent={{80,-20},{60,0}})));\r\n          inner Modelica.Fluid.System system\r\n            annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n          Modelica.Fluid.Valves.ValveLinear valveLinear(\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            dp_nominal=100000,\r\n            m_flow_nominal=0.01)\r\n            annotation (Placement(transformation(extent={{20,-20},{40,0}})));\r\n          Modelica.Blocks.Sources.RealExpression one(y=1)\r\n            annotation (Placement(transformation(extent={{2,24},{22,44}})));\r\n        equation\r\n          connect(source.ports[1], V1.ports[1]) annotation (Line(\r\n              points={{-60,-10},{-40,-10},{-40,0}}, color={0,127,255}));\r\n          connect(V1.ports[2], V2.ports[1]) annotation (Line(\r\n              points={{-36,0},{-36,-10},{-4,-10},{-4,0}}, color={0,127,255}));\r\n          connect(V2.ports[2], valveLinear.port_a) annotation (Line(\r\n              points={{0,0},{0,-10},{20,-10}}, color={0,127,255}));\r\n          connect(valveLinear.port_b, sink.ports[1]) annotation (Line(\r\n              points={{40,-10},{60,-10}}, color={0,127,255}));\r\n          connect(one.y, valveLinear.opening) annotation (Line(\r\n              points={{23,34},{30,34},{30,-2}}, color={0,0,127}));\r\n        end TwoVolumes;\r\n\r\n        model TwoVolumesEquations\r\n          \"Two volumes containing an ideal gas with a zero dp connection, equation-based\"\r\n          Real M1(stateSelect = StateSelect.avoid),\r\n               M2(stateSelect = StateSelect.avoid),\r\n               E1(stateSelect = StateSelect.avoid),\r\n               E2(stateSelect = StateSelect.avoid),\r\n               p1(stateSelect = StateSelect.prefer),\r\n               p2(stateSelect = StateSelect.prefer),\r\n               T1(stateSelect = StateSelect.prefer),\r\n               T2(stateSelect = StateSelect.prefer),\r\n               w0, w1, w2, h1, h2;\r\n          parameter Real V = 1;\r\n          parameter Real R = 400;\r\n          parameter Real cp = 1000;\r\n          parameter Real cv = cp-R;\r\n          parameter Real h0 = cp*300;\r\n          parameter Real Kv = 1e-7;\r\n        equation\r\n          der(M1) = w0 - w1;\r\n          der(E1) = w0*h0 - w1*h1;\r\n          der(M2) = w1 - w2;\r\n          der(E2) = w1*h1 - w2*h2;\r\n          M1 = V*p1/(R*T1);\r\n          M2 = V*p2/(R*T2);\r\n          E1 = M1*cv*T1;\r\n          E2 = M2*cv*T2;\r\n          h1 = cp*T1;\r\n          h2 = cp*T2;\r\n          w0 = 0.01;\r\n          w2 = Kv*p2;\r\n          p1 = p2;\r\n        end TwoVolumesEquations;\r\n      end BaseClasses;\r\n    end Fluid;\r\n\r\n    package Mechanical \"Test cases with Mechanical systems\"\r\n      extends Modelica.Icons.ExamplesPackage;\r\n\r\n      model TwoMassesEquationsFullInitial\r\n        \"Fully specified initial values for dynamic variables\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        x1 = 0;\r\n        v1 = 0;\r\n        x2 = 0;\r\n        v2 = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsFullInitial;\r\n\r\n      model TwoMassesEquationsReducedInitial\r\n        \"Initial values for state variables after index reduction\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        x1 = 0;\r\n        v1 = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsReducedInitial;\r\n\r\n      model TwoMassesEquationsFullSteadyState\r\n        \"Fully specified initial values for dynamic variables\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        der(x1) = 0;\r\n        der(v1) = 0;\r\n        der(x2) = 0;\r\n        der(v2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsFullSteadyState;\r\n\r\n      model TwoMassesEquationsReducedSteadyState\r\n        \"Fully specified initial values for states after index reduction\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        der(x1) = 0;\r\n        der(v1) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsReducedSteadyState;\r\n\r\n      model TwoMassesFullInitial\r\n        \"Fully specified initial values for dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n          mass1(s(fixed=true), v(fixed=true)),\r\n          mass2(s(fixed=true), v(fixed=true)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesFullInitial;\r\n\r\n      model TwoMassesReducedInitial\r\n        \"Initial values for state variables after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n                          mass1(s(fixed=true), v(fixed=true)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesReducedInitial;\r\n\r\n      model TwoMassesFullSteadyState\r\n        \"Fully specified steady state conditions for dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n           mass1(v(fixed=true, start=0), a(fixed=true, start=0)),\r\n           mass2(v(fixed=true, start=0), a(fixed=true, start=0)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesFullSteadyState;\r\n\r\n      model TwoMassesReducedSteadyState\r\n        \"Steady-state initial conditions for states after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n          mass1(v(fixed=true, start=0), a(fixed=true, start=0)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesReducedSteadyState;\r\n\r\n      package BaseClasses \"Base classes for test cases\"\r\n        extends Modelica.Icons.BasesPackage;\r\n        model TwoMasses\r\n          \"Two rigidly connected masses, connected to ground via a spring\"\r\n\r\n          Modelica.Mechanics.Translational.Components.Mass mass1(\r\n             m=1, s(fixed=false,start=1))\r\n            annotation (Placement(transformation(extent={{-12,-10},{8,10}})));\r\n          Modelica.Mechanics.Translational.Components.Mass mass2(\r\n             m=1, s(fixed=false, start=1))\r\n            annotation (Placement(transformation(extent={{26,-10},{46,10}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));\r\n          Modelica.Mechanics.Translational.Components.Spring spring(c=1, s_rel0=0.5)\r\n            annotation (Placement(transformation(extent={{-42,-10},{-22,10}})));\r\n        equation\r\n          connect(fixed.flange, spring.flange_a) annotation (Line(\r\n              points={{-60,0},{-42,0}}, color={0,127,0}));\r\n          connect(spring.flange_b, mass1.flange_a) annotation (Line(\r\n              points={{-22,0},{-12,0}}, color={0,127,0}));\r\n          connect(mass1.flange_b, mass2.flange_a) annotation (Line(\r\n              points={{8,0},{26,0}}, color={0,127,0}));\r\n        end TwoMasses;\r\n\r\n        model TwoMassesEquations\r\n          \"Two rigidly connected masses, connected to ground via a spring, equation-based\"\r\n          Real x1, v1, x2, v2, F1, F2;\r\n          parameter Real M = 1;\r\n          parameter Real K = 1;\r\n          parameter Real F0 = 1;\r\n        equation\r\n          der(x1) = v1;\r\n          M*der(v1) = F1+F2;\r\n          der(x2) = v2;\r\n          M*der(v2) = -F2;\r\n          F1 = -K*x1;\r\n          x1 = x2;\r\n        end TwoMassesEquations;\r\n      end BaseClasses;\r\n    end Mechanical;\r\n\r\n  end ConsistentInitialization;\r\n\r\n  package InconsistentInitialization\r\n      \"Test cases of systems with overdetermined initialization problems due to index reduction that are inconsistent (should give an error during initialization)\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n    package Fluid\r\n      \"Test cases with Fluid systems\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n      model TwoVolumesEquationsFullInitialInconsistent\r\n        \"Fully specified initial values for all dynamic variables, inconsistent values. An error should be reported\"\r\n        extends Modelica.Icons.Example;\r\n        extends ConsistentInitialization.Fluid.BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        p1 = 1e5;\r\n        T1 = 300;\r\n        p2 = 2e5;\r\n        T2 = 350;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullInitialInconsistent;\r\n\r\n      model TwoVolumesFullInitialInconsistent\r\n        \"Fully specified initial values for all dynamic variables, inconsistent values. An error should be reported\"\r\n        extends Modelica.Icons.Example;\r\n        extends ConsistentInitialization.Fluid.BaseClasses.TwoVolumes(\r\n          system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial),\r\n          V1(p_start=100000, T_start(displayUnit=\"K\") = 300),\r\n          V2(p_start=200000, T_start=623.15));\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesFullInitialInconsistent;\r\n    end Fluid;\r\n\r\n    package Mechanical\r\n      \"Test cases with mechanical systems\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n\r\n      model TwoMassesEquationsFullInitialInconsistent\r\n        \"Fully specified initial values for dynamic variables, inconsistent values\"\r\n        extends\r\n          ConsistentInitialization.Mechanical.BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        x1 = 0;\r\n        v1 = 0;\r\n        x2 = 1;\r\n        v2 = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsFullInitialInconsistent;\r\n\r\n      model TwoMassesFullInitialInconsistent\r\n        \"Fully specified initial values for dynamic variables, inconsistent values\"\r\n        extends Modelica.Icons.Example;\r\n        extends ConsistentInitialization.Mechanical.BaseClasses.TwoMasses(mass1(\r\n             s(fixed=true), v(fixed=true)), mass2(s(fixed=true, start=2), v(\r\n                fixed=true)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesFullInitialInconsistent;\r\n    end Mechanical;\r\n  end InconsistentInitialization;\r\n  annotation (Icon(graphics={\r\n                   Polygon(\r\n          points={{-70,0},{-44,0},{-24,-34},{50,56},{78,56},{-24,-74},{-70,0}},\r\n          lineColor={75,138,73},\r\n          fillColor={75,138,73},\r\n          fillPattern=FillPattern.Solid)}),\r\n       preferredView=\"info\",\r\n       version=\"4.1.0\",\r\n       versionDate=\"2024-01-12\",\r\n       dateModified = \"2024-01-12 19:40:00Z\",\r\n       revisionId=\"$Id::                                       $\",\r\n       uses(Modelica(version=\"4.1.0\")),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis library provides models and functions to test components of\r\n<strong>package Modelica</strong> (the Modelica Standard Library).\r\nAll test models in this package define more equations during initialization,\r\nas necessary. These test models are especially provided for tool vendors\r\nto improve their tools so that models with consistently overdetermined initialization\r\n(= models in subpackage <a href=\\\"modelica://ModelicaTestOverdetermined.ConsistentInitialization\\\">ConsistentInitialization</a>)\r\ncan be handled automatically and models with inconsistently overdetermined initialization\r\n(= models in subpackage <a href=\\\"modelica://ModelicaTestOverdetermined.InconsistentInitialization\\\">InconsistentInitialization</a>)\r\nfail during translation but give useful error messages.\r\n</p>\r\n\r\n<p>\r\nCopyright &copy; 1998-2025, Modelica Association and contributors\r\n</p>\r\n\r\n<p>\r\n<em>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the 3-Clause BSD license. For license conditions (including the disclaimer of warranty) visit <a href=\\\"https://modelica.org/licenses/modelica-3-clause-bsd\\\">https://modelica.org/licenses/modelica-3-clause-bsd</a>.</em>\r\n</p>\r\n</html>\"));\r\nend ModelicaTestOverdetermined", "checksum": "03cf70c9af603cc5018aaa14cc0311e077f9f1e5", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo:4-637", "component_count": 7, "connection_count": 17, "variable_count": 36, "physical_quantity_count": 2, "parameter_count": 9, "equation_count": 130, "dependency_count": 41, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 199.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "initial equation x1 = 0", "search_keywords": ["Modelica.Units.SI.MassFlowRate", "Real", "mechanical", "system"]}, "components": [{"name": "m_flow_initial", "type_name": "Modelica.Units.SI.MassFlowRate", "prefixes": ["discrete"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "x1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "x2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "source.ports[1]", "to_connector": "pipe.port_a", "condition": null}, {"from_connector": "pipe.port_b", "to_connector": "valve.port_a", "condition": null}, {"from_connector": "valve.port_b", "to_connector": "sink.ports[1]", "condition": null}, {"from_connector": "ramp.y", "to_connector": "valve.opening", "condition": null}, {"from_connector": "source.ports[1]", "to_connector": "pipe1.port_a", "condition": null}, {"from_connector": "valve.port_b", "to_connector": "sink. ports[1]", "condition": null}, {"from_connector": "ramp.y", "to_connector": "valve. opening", "condition": null}, {"from_connector": "pipe1.port_b", "to_connector": "pipe2.port_a", "condition": null}, {"from_connector": "pipe2.port_b", "to_connector": "valve.port_a", "condition": null}, {"from_connector": "source.ports[1]", "to_connector": "V1.ports[1]", "condition": null}, {"from_connector": "V1.ports[2]", "to_connector": "V2.ports[1]", "condition": null}, {"from_connector": "V2.ports[2]", "to_connector": "valveLinear.port_a", "condition": null}, {"from_connector": "valveLinear.port_b", "to_connector": "sink.ports[1]", "condition": null}, {"from_connector": "one.y", "to_connector": "valveLinear.opening", "condition": null}, {"from_connector": "fixed.flange", "to_connector": "spring.flange_a", "condition": null}, {"from_connector": "spring.flange_b", "to_connector": "mass1.flange_a", "condition": null}, {"from_connector": "mass1.flange_b", "to_connector": "mass2.flange_a", "condition": null}], "variables": [{"name": "m_flow_initial", "type_name": "Modelica.Units.SI.MassFlowRate", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipeLumpedPressureInitialization", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipeInitialValues", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipesSeriesSteadyStateInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipesSeriesLargeNSteadyStateInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsReducedInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsReducedSteadyStatePressureAndTemperature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullSteadyStatePressureAndTemperature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullSteadyStateMassAndEnergy", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesFullSteadyStatePressureAndTemperature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "sink", "type_name": "Modelica.Fluid.Sources.FixedBoundary", "prefixes": [], "attributes": {"displayUnit": "K"}, "binding_equation": "300,\r\n            nPorts=1,\r\n            p=1000) \r\n          inner Modelica.Fluid.System system\r\n            \r\n          Modelica.Fluid.Valves.ValveLinear valveLinear(\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            dp_nominal=100000,\r\n            m_flow_nominal=0.01)\r\n            \r\n          Modelica.Blocks.Sources.RealExpression one(y=1)\r\n            \r\n        equation\r\n          connect(source.ports[1], V1.ports[1]) \r\n          connect(V1.ports[2], V2.ports[1]) \r\n          connect(V2.ports[2], valveLinear.port_a) \r\n          connect(valveLinear.port_b, sink.ports[1]) \r\n          connect(one.y, valveLinear.opening) \r\n        end TwoVolumes", "comment": null}, {"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "v1", "comment": null}, {"name": "TwoVolumesEquations", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BaseClasses", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fluid", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsReducedInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsFullSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsReducedSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesReducedInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesFullSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesReducedSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMasses", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquations", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Mechanical", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ConsistentInitialization", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullInitialInconsistent", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesFullInitialInconsistent", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsFullInitialInconsistent", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesFullInitialInconsistent", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "InconsistentInitialization", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "ports", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "K", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["BaseClasses", "ConsistentInitialization.Fluid.BaseClasses", "ConsistentInitialization.Mechanical.BaseClasses", "FillPattern", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Fluid", "Modelica.Fluid.Pipes", "Modelica.Fluid.Sources", "Modelica.Fluid.Types.CvTypes", "Modelica.Fluid.Types.Dynamics", "Modelica.Fluid.Types.ModelStructure", "Modelica.Fluid.Valves", "Modelica.Fluid.Vessels", "Modelica.Icons", "Modelica.Mechanics.Translational.Components", "Modelica.Media.Air", "Modelica.Media.Water", "Modelica.Units.SI", "ModelicaTestOverdetermined", "StateSelect", "V1", "V2", "fixed", "mass1", "mass2", "medium", "modelica", "one", "pipe", "pipe.medium", "pipe1", "pipe2", "ramp", "sink", "source", "spring", "system", "valve", "valve.port_a", "valveLinear"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "DynamicPipesSeriesSteadyStateInitial", "BaseClasses.TwoVolumesEquations", "BaseClasses.TwoVolumes", "Modelica.Icons.BasesPackage", "BaseClasses.TwoMassesEquations", "BaseClasses.TwoMasses", "ConsistentInitialization.Fluid.BaseClasses.TwoVolumesEquations", "ConsistentInitialization.Fluid.BaseClasses.TwoVolumes", "ConsistentInitialization.Mechanical.BaseClasses.TwoMassesEquations", "ConsistentInitialization.Mechanical.BaseClasses.TwoMasses"]}
{"fqn": "ConsistentInitialization.Fluid", "kind": "package", "name": "Fluid", "package_path": ["ConsistentInitialization"], "extends": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "DynamicPipesSeriesSteadyStateInitial", "BaseClasses.TwoVolumesEquations", "BaseClasses.TwoVolumes", "Modelica.Icons.BasesPackage", "BaseClasses.TwoMassesEquations", "BaseClasses.TwoMasses"], "imports": [], "parameters": [{"name": "V", "type": "Real", "default": "1", "description": null}, {"name": "R", "type": "Real", "default": "400", "description": null}, {"name": "cp", "type": "Real", "default": "1000", "description": null}, {"name": "cv", "type": "Real", "default": "cp-R", "description": null}, {"name": "h0", "type": "Real", "default": "cp*300", "description": null}, {"name": "Kv", "type": "Real", "default": "1e-7", "description": null}, {"name": "M", "type": "Real", "default": "1", "description": null}, {"name": "K", "type": "Real", "default": "1", "description": null}, {"name": "F0", "type": "Real", "default": "1", "description": null}], "equations": [{"equations": ["equation\r\n          der(x1) = v1", "M*der(v1) = F1+F2", "der(x2) = v2", "M*der(v2) = -F2", "F1 = -K*x1", "x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 535, "end_line": 541, "start_col": 9, "end_col": 19}}, {"equations": ["der(x1) = v1", "M*der(v1) = F1+F2", "der(x2) = v2", "M*der(v2) = -F2", "F1 = -K*x1", "x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 536, "end_line": 541, "start_col": 11, "end_col": 19}}, {"equations": ["x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 541, "end_line": 541, "start_col": 11, "end_col": 18}}, {"equations": ["F1 = -K*x1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 540, "end_line": 540, "start_col": 11, "end_col": 21}}, {"equations": ["M*der(v2) = -F2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 539, "end_line": 539, "start_col": 11, "end_col": 26}}, {"equations": ["der(x2) = v2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 538, "end_line": 538, "start_col": 11, "end_col": 23}}, {"equations": ["M*der(v1) = F1+F2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 537, "end_line": 537, "start_col": 11, "end_col": 28}}, {"equations": ["der(x1) = v1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 536, "end_line": 536, "start_col": 11, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 535, "end_line": 535, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(fixed.flange, spring.flange_a) annotation (Line(\r\n              points={{-60,0},{-42,0}}, color={0,127,0}))", "connect(spring.flange_b, mass1.flange_a) annotation (Line(\r\n              points={{-22,0},{-12,0}}, color={0,127,0}))", "connect(mass1.flange_b, mass2.flange_a) annotation (Line(\r\n              points={{8,0},{26,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 520, "end_line": 526, "start_col": 9, "end_col": 56}}, {"equations": ["connect(fixed.flange, spring.flange_a) annotation (Line(\r\n              points={{-60,0},{-42,0}}, color={0,127,0}))", "connect(spring.flange_b, mass1.flange_a) annotation (Line(\r\n              points={{-22,0},{-12,0}}, color={0,127,0}))", "connect(mass1.flange_b, mass2.flange_a) annotation (Line(\r\n              points={{8,0},{26,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 521, "end_line": 526, "start_col": 11, "end_col": 56}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 520, "end_line": 520, "start_col": 9, "end_col": 17}}, {"equations": ["initial equation\r\n        der(x1) = 0", "der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 465, "end_line": 467, "start_col": 7, "end_col": 21}}, {"equations": ["der(x1) = 0", "der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 466, "end_line": 467, "start_col": 9, "end_col": 21}}, {"equations": ["der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 467, "end_line": 467, "start_col": 9, "end_col": 20}}, {"equations": ["der(x1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 466, "end_line": 466, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 465, "end_line": 465, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        der(x1) = 0", "der(v1) = 0", "der(x2) = 0", "der(v2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 453, "end_line": 457, "start_col": 7, "end_col": 21}}, {"equations": ["der(x1) = 0", "der(v1) = 0", "der(x2) = 0", "der(v2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 454, "end_line": 457, "start_col": 9, "end_col": 21}}, {"equations": ["der(v2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 457, "end_line": 457, "start_col": 9, "end_col": 20}}, {"equations": ["der(x2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 456, "end_line": 456, "start_col": 9, "end_col": 20}}, {"equations": ["der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 455, "end_line": 455, "start_col": 9, "end_col": 20}}, {"equations": ["der(x1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 454, "end_line": 454, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 453, "end_line": 453, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        x1 = 0", "v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 443, "end_line": 445, "start_col": 7, "end_col": 16}}, {"equations": ["x1 = 0", "v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 444, "end_line": 445, "start_col": 9, "end_col": 16}}, {"equations": ["v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 445, "end_line": 445, "start_col": 9, "end_col": 15}}, {"equations": ["x1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 444, "end_line": 444, "start_col": 9, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 443, "end_line": 443, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        x1 = 0", "v1 = 0", "x2 = 0", "v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 431, "end_line": 435, "start_col": 7, "end_col": 16}}, {"equations": ["x1 = 0", "v1 = 0", "x2 = 0", "v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 432, "end_line": 435, "start_col": 9, "end_col": 16}}, {"equations": ["v2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 435, "end_line": 435, "start_col": 9, "end_col": 15}}, {"equations": ["x2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 434, "end_line": 434, "start_col": 9, "end_col": 15}}, {"equations": ["v1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 433, "end_line": 433, "start_col": 9, "end_col": 15}}, {"equations": ["x1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 432, "end_line": 432, "start_col": 9, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 431, "end_line": 431, "start_col": 15, "end_col": 23}}, {"equations": ["equation\r\n          der(M1) = w0 - w1", "der(E1) = w0*h0 - w1*h1", "der(M2) = w1 - w2", "der(E2) = w1*h1 - w2*h2", "M1 = V*p1/(R*T1)", "M2 = V*p2/(R*T2)", "E1 = M1*cv*T1", "E2 = M2*cv*T2", "h1 = cp*T1", "h2 = cp*T2", "w0 = 0.01", "w2 = Kv*p2", "p1 = p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 406, "end_line": 419, "start_col": 9, "end_col": 19}}, {"equations": ["der(M1) = w0 - w1", "der(E1) = w0*h0 - w1*h1", "der(M2) = w1 - w2", "der(E2) = w1*h1 - w2*h2", "M1 = V*p1/(R*T1)", "M2 = V*p2/(R*T2)", "E1 = M1*cv*T1", "E2 = M2*cv*T2", "h1 = cp*T1", "h2 = cp*T2", "w0 = 0.01", "w2 = Kv*p2", "p1 = p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 407, "end_line": 419, "start_col": 11, "end_col": 19}}, {"equations": ["p1 = p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 419, "end_line": 419, "start_col": 11, "end_col": 18}}, {"equations": ["w2 = Kv*p2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 418, "end_line": 418, "start_col": 11, "end_col": 21}}, {"equations": ["w0 = 0.01"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 417, "end_line": 417, "start_col": 11, "end_col": 20}}, {"equations": ["h2 = cp*T2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 416, "end_line": 416, "start_col": 11, "end_col": 21}}, {"equations": ["h1 = cp*T1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 415, "end_line": 415, "start_col": 11, "end_col": 21}}, {"equations": ["E2 = M2*cv*T2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 414, "end_line": 414, "start_col": 11, "end_col": 24}}, {"equations": ["E1 = M1*cv*T1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 413, "end_line": 413, "start_col": 11, "end_col": 24}}, {"equations": ["M2 = V*p2/(R*T2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 412, "end_line": 412, "start_col": 11, "end_col": 27}}, {"equations": ["M1 = V*p1/(R*T1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 411, "end_line": 411, "start_col": 11, "end_col": 27}}, {"equations": ["der(E2) = w1*h1 - w2*h2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 410, "end_line": 410, "start_col": 11, "end_col": 34}}, {"equations": ["der(M2) = w1 - w2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 409, "end_line": 409, "start_col": 11, "end_col": 28}}, {"equations": ["der(E1) = w0*h0 - w1*h1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 408, "end_line": 408, "start_col": 11, "end_col": 34}}, {"equations": ["der(M1) = w0 - w1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 407, "end_line": 407, "start_col": 11, "end_col": 28}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 406, "end_line": 406, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(source.ports[1], V1.ports[1]) annotation (Line(\r\n              points={{-60,-10},{-40,-10},{-40,0}}, color={0,127,255}))", "connect(V1.ports[2], V2.ports[1]) annotation (Line(\r\n              points={{-36,0},{-36,-10},{-4,-10},{-4,0}}, color={0,127,255}))", "connect(V2.ports[2], valveLinear.port_a) annotation (Line(\r\n              points={{0,0},{0,-10},{20,-10}}, color={0,127,255}))", "connect(valveLinear.port_b, sink.ports[1]) annotation (Line(\r\n              points={{40,-10},{60,-10}}, color={0,127,255}))", "connect(one.y, valveLinear.opening) annotation (Line(\r\n              points={{23,34},{30,34},{30,-2}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 376, "end_line": 386, "start_col": 9, "end_col": 67}}, {"equations": ["connect(source.ports[1], V1.ports[1]) annotation (Line(\r\n              points={{-60,-10},{-40,-10},{-40,0}}, color={0,127,255}))", "connect(V1.ports[2], V2.ports[1]) annotation (Line(\r\n              points={{-36,0},{-36,-10},{-4,-10},{-4,0}}, color={0,127,255}))", "connect(V2.ports[2], valveLinear.port_a) annotation (Line(\r\n              points={{0,0},{0,-10},{20,-10}}, color={0,127,255}))", "connect(valveLinear.port_b, sink.ports[1]) annotation (Line(\r\n              points={{40,-10},{60,-10}}, color={0,127,255}))", "connect(one.y, valveLinear.opening) annotation (Line(\r\n              points={{23,34},{30,34},{30,-2}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 377, "end_line": 386, "start_col": 11, "end_col": 67}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 376, "end_line": 376, "start_col": 9, "end_col": 17}}, {"equations": ["initial equation\r\n        der(M1) = 0", "der(E1) = 0", "der(M2) = 0", "der(E2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 312, "end_line": 316, "start_col": 7, "end_col": 21}}, {"equations": ["der(M1) = 0", "der(E1) = 0", "der(M2) = 0", "der(E2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 313, "end_line": 316, "start_col": 9, "end_col": 21}}, {"equations": ["der(E2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 316, "end_line": 316, "start_col": 9, "end_col": 20}}, {"equations": ["der(M2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 315, "end_line": 315, "start_col": 9, "end_col": 20}}, {"equations": ["der(E1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 314, "end_line": 314, "start_col": 9, "end_col": 20}}, {"equations": ["der(M1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 313, "end_line": 313, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 312, "end_line": 312, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        der(p1) = 0", "der(T1) = 0", "der(p2) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 300, "end_line": 304, "start_col": 7, "end_col": 21}}, {"equations": ["der(p1) = 0", "der(T1) = 0", "der(p2) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 301, "end_line": 304, "start_col": 9, "end_col": 21}}, {"equations": ["der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 304, "end_line": 304, "start_col": 9, "end_col": 20}}, {"equations": ["der(p2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 303, "end_line": 303, "start_col": 9, "end_col": 20}}, {"equations": ["der(T1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 302, "end_line": 302, "start_col": 9, "end_col": 20}}, {"equations": ["der(p1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 301, "end_line": 301, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 300, "end_line": 300, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        der(p1) = 0", "der(T1) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 289, "end_line": 292, "start_col": 7, "end_col": 21}}, {"equations": ["der(p1) = 0", "der(T1) = 0", "der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 290, "end_line": 292, "start_col": 9, "end_col": 21}}, {"equations": ["der(T2) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 292, "end_line": 292, "start_col": 9, "end_col": 20}}, {"equations": ["der(T1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 291, "end_line": 291, "start_col": 9, "end_col": 20}}, {"equations": ["der(p1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 290, "end_line": 290, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 289, "end_line": 289, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n          p1 = 1e5", "T1 = 300", "p2 = 1e5", "T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 277, "end_line": 281, "start_col": 7, "end_col": 20}}, {"equations": ["p1 = 1e5", "T1 = 300", "p2 = 1e5", "T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 278, "end_line": 281, "start_col": 11, "end_col": 20}}, {"equations": ["T2 = 350"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 281, "end_line": 281, "start_col": 11, "end_col": 19}}, {"equations": ["p2 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 280, "end_line": 280, "start_col": 11, "end_col": 19}}, {"equations": ["T1 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 279, "end_line": 279, "start_col": 11, "end_col": 19}}, {"equations": ["p1 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 278, "end_line": 278, "start_col": 11, "end_col": 19}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 277, "end_line": 277, "start_col": 15, "end_col": 23}}, {"equations": ["initial equation\r\n        T1 = 300", "p2 = 1e5", "T2 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 266, "end_line": 269, "start_col": 7, "end_col": 18}}, {"equations": ["T1 = 300", "p2 = 1e5", "T2 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 267, "end_line": 269, "start_col": 9, "end_col": 18}}, {"equations": ["T2 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 269, "end_line": 269, "start_col": 9, "end_col": 17}}, {"equations": ["p2 = 1e5"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 268, "end_line": 268, "start_col": 9, "end_col": 17}}, {"equations": ["T1 = 300"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 267, "end_line": 267, "start_col": 9, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 266, "end_line": 266, "start_col": 15, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 258, "end_line": 258, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        connect(source.ports[1], pipe1.port_a) annotation (Line(\r\n            points={{-70,0},{-50,0}}, color={0,127,255}))", "connect(valve.port_b,sink. ports[1])                          annotation (Line(\r\n            points={{46,0},{66,0}}, color={0,127,255}))", "connect(ramp.y,valve. opening)               annotation (Line(\r\n            points={{51,40},{36,40},{36,8}}, color={0,0,127}))", "connect(pipe1.port_b, pipe2.port_a) annotation (Line(\r\n            points={{-30,0},{-14,0}}, color={0,127,255}))", "connect(pipe2.port_b, valve.port_a) annotation (Line(\r\n            points={{6,0},{26,0}}, color={0,127,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 240, "end_line": 250, "start_col": 7, "end_col": 56}}, {"equations": ["connect(source.ports[1], pipe1.port_a) annotation (Line(\r\n            points={{-70,0},{-50,0}}, color={0,127,255}))", "connect(valve.port_b,sink. ports[1])                          annotation (Line(\r\n            points={{46,0},{66,0}}, color={0,127,255}))", "connect(ramp.y,valve. opening)               annotation (Line(\r\n            points={{51,40},{36,40},{36,8}}, color={0,0,127}))", "connect(pipe1.port_b, pipe2.port_a) annotation (Line(\r\n            points={{-30,0},{-14,0}}, color={0,127,255}))", "connect(pipe2.port_b, valve.port_a) annotation (Line(\r\n            points={{6,0},{26,0}}, color={0,127,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 241, "end_line": 250, "start_col": 9, "end_col": 56}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 240, "end_line": 240, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 138, "end_line": 158, "start_col": 7, "end_col": 64}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 139, "end_line": 158, "start_col": 9, "end_col": 64}}, {"equations": ["if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 142, "end_line": 147, "start_col": 9, "end_col": 15}}, {"equations": ["when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 144, "end_line": 146, "start_col": 11, "end_col": 20}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 146, "end_line": 146, "start_col": 15, "end_col": 19}}, {"equations": ["assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 145, "end_line": 145, "start_col": 13, "end_col": 124}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 144, "end_line": 144, "start_col": 11, "end_col": 15}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 139, "end_line": 141, "start_col": 9, "end_col": 17}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 141, "end_line": 141, "start_col": 13, "end_col": 17}}, {"equations": ["m_flow_initial = valve.port_a.m_flow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 140, "end_line": 140, "start_col": 11, "end_col": 48}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 139, "end_line": 139, "start_col": 9, "end_col": 13}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 138, "end_line": 138, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 54, "end_line": 74, "start_col": 7, "end_col": 64}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when", "if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if", "connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}))", "connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}))", "connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}))", "connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 55, "end_line": 74, "start_col": 9, "end_col": 64}}, {"equations": ["if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 58, "end_line": 63, "start_col": 9, "end_col": 15}}, {"equations": ["when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 60, "end_line": 62, "start_col": 11, "end_col": 20}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 62, "end_line": 62, "start_col": 15, "end_col": 19}}, {"equations": ["assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 61, "end_line": 61, "start_col": 13, "end_col": 124}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 60, "end_line": 60, "start_col": 11, "end_col": 15}}, {"equations": ["when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 55, "end_line": 57, "start_col": 9, "end_col": 17}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 57, "end_line": 57, "start_col": 13, "end_col": 17}}, {"equations": ["m_flow_initial = valve.port_a.m_flow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 56, "end_line": 56, "start_col": 11, "end_col": 48}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 55, "end_line": 55, "start_col": 9, "end_col": 13}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 54, "end_line": 54, "start_col": 7, "end_col": 15}}], "docstring": "extends Modelica.Icons.ExamplesPackage | components: Real×6, Modelica.Units.SI.MassFlowRate×1 | connections: 17 | params: V, R, cp | units: 1, 1 | eq: equation ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 8, "end_line": 546, "start_col": 5, "end_col": 31}, "code_text": "package Fluid \"Test cases with Fluid systems\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n      model DynamicPipeLumpedPressureInitialization\r\n        \"Steady-state initialization of a dynamic pipe using lumped pressure states\"\r\n        extends Modelica.Icons.Example;\r\n\r\n        Modelica.Fluid.Sources.FixedBoundary source(nPorts=1,\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          use_T=false,\r\n          h=2.5e6,\r\n          p=system.p_start)\r\n          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          diameter=0.05,\r\n          length=200,\r\n          use_T_start=false,\r\n          useLumpedPressure=true,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.a_vb,\r\n          h_start=2.5e6)\r\n          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n        Modelica.Fluid.Valves.ValveCompressible valve(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          m_flow_nominal=10,\r\n          rho_nominal=60,\r\n          CvData=Modelica.Fluid.Types.CvTypes.Av,\r\n          Av=0.05^2/4*Modelica.Constants.pi,\r\n          dp_nominal=100000,\r\n          p_nominal=10000000)\r\n          annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\n        Modelica.Fluid.Sources.FixedBoundary sink(nPorts=1,redeclare package\r\n            Medium =\r\n              Modelica.Media.Water.StandardWaterOnePhase, p=9500000)\r\n                    annotation (Placement(transformation(extent={{60,-10},{40,10}})));\r\n        Modelica.Blocks.Sources.Ramp ramp(\r\n          offset=1,\r\n          startTime=2,\r\n          duration=0,\r\n          height=-0.8)\r\n                    annotation (Placement(transformation(extent={{46,30},{26,50}})));\r\n        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,\r\n          use_eps_Re=true,\r\n          p_start=10000000)\r\n          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n        discrete Modelica.Units.SI.MassFlowRate m_flow_initial;\r\n      equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow;\r\n        end when;\r\n        if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\");\r\n          end when;\r\n        end if;\r\n        connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}));\r\n        connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}));\r\n        connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}));\r\n        connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}));\r\n\r\n        annotation (Documentation(info=\"<html>\r\nAll pressure states of the pipe are lumped into one.\r\nThe steady-state initial conditions become overdetermined as they are now specified nNodes times for the same pressure state.\r\nThe initial equations are consistent however and a tool shall reduce them appropriately.\r\n</html>\"),\r\n        Diagram(coordinateSystem(preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={Text(\r\n                extent={{-100,-20},{100,-40}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Problem: pipe.medium.p[1:5] are equal and have initial equations der(medium.p)=zeros(5);\"),\r\n                Text(\r\n                extent={{-76,-40},{80,-58}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"A translator should remove consistently overdetermined initial equations.\")}),\r\n          experiment(StopTime=4));\r\n      end DynamicPipeLumpedPressureInitialization;\r\n\r\n      model DynamicPipeInitialValues\r\n        \"Initialization of a dynamic pipe with fixed initial values and without adaptation of modelStructure to boundaries\"\r\n        extends Modelica.Icons.Example;\r\n\r\n        Modelica.Fluid.Sources.FixedBoundary source(nPorts=1,\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          use_T=false,\r\n          h=2.5e6,\r\n          p=system.p_start)\r\n          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          diameter=0.05,\r\n          length=200,\r\n          use_T_start=false,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.av_vb,\r\n          h_start=2.5e6)\r\n          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n        Modelica.Fluid.Valves.ValveCompressible valve(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          m_flow_nominal=10,\r\n          rho_nominal=60,\r\n          CvData=Modelica.Fluid.Types.CvTypes.Av,\r\n          Av=0.05^2/4*Modelica.Constants.pi,\r\n          dp_nominal=100000,\r\n          p_nominal=10000000)\r\n          annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\n        Modelica.Fluid.Sources.FixedBoundary sink(nPorts=1,redeclare package\r\n            Medium =\r\n              Modelica.Media.Water.StandardWaterOnePhase, p=9500000)\r\n                    annotation (Placement(transformation(extent={{60,-10},{40,10}})));\r\n        Modelica.Blocks.Sources.Ramp ramp(\r\n          offset=1,\r\n          startTime=2,\r\n          duration=0,\r\n          height=-0.8)\r\n                    annotation (Placement(transformation(extent={{46,30},{26,50}})));\r\n        inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,\r\n          p_start=10000000,\r\n          use_eps_Re=true)\r\n          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n        discrete Modelica.Units.SI.MassFlowRate m_flow_initial;\r\n      equation\r\n        when time > 0.1 then\r\n          m_flow_initial = valve.port_a.m_flow;\r\n        end when;\r\n        if pipe.energyDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial and\r\n           pipe.massDynamics >= Modelica.Fluid.Types.Dynamics.SteadyStateInitial then\r\n          when time > 1 then\r\n            assert(abs(valve.port_a.m_flow - m_flow_initial) < 1e-3, \"!!!THE SIMULATION DID NOT START IN STEADY-STATE!!!\");\r\n          end when;\r\n        end if;\r\n        connect(source.ports[1], pipe.port_a)         annotation (Line(\r\n            points={{-60,0},{-55,0},{-55,0},{-50,\r\n                0},{-50,0},{-40,0}}, color={0,127,255}));\r\n        connect(pipe.port_b, valve.port_a)               annotation (Line(\r\n            points={{-20,0},{-15,0},{-15,0},{-10,\r\n                0},{-10,0},{0,0}}, color={0,127,255}));\r\n        connect(valve.port_b, sink.ports[1])                          annotation (Line(\r\n            points={{20,0},{25,0},{25,0},{30,\r\n                0},{30,0},{40,0}}, color={0,127,255}));\r\n        connect(ramp.y, valve.opening)               annotation (Line(\r\n            points={{25,40},{10,40},{10,8}}, color={0,0,127}));\r\n        annotation (Documentation(info=\"<html>\r\nThe initial values are overdetermined as the first pipe segment is directly connected to a source with fixed pressure.\r\nThe initial equations are consistent however and a tool shall reduce them appropriately.\r\n</html>\"),\r\n        Diagram(coordinateSystem(preserveAspectRatio=false,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-100,-20},{100,-40}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Problem: pipe.medium[1].p is equal to source.p and  has a consistent initial value  of system.p_start = 100 bar;\"),\r\n              Text(\r\n                extent={{-76,-36},{76,-54}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"A translator should remove consistently overdetermined initial equations.\"),\r\n              Text(\r\n                extent={{-100,-64},{90,-84}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Work-around 2: change system.energyDynamics from FixedInitial to DynamicFreeInitial\"),\r\n              Text(\r\n                extent={{-100,-54},{42,-74}},\r\n                textColor={0,0,255},\r\n                textString=\r\n                    \"Work-around 1: change pipe.modelStructure from av_vb to a_vb\")}),\r\n          experiment(StopTime=4));\r\n      end DynamicPipeInitialValues;\r\n\r\n      model DynamicPipesSeriesSteadyStateInitial\r\n        \"Two series-connected pipes with steady-state initial condition, overedetermined initialization due to pressure states at the ports\"\r\n        extends Modelica.Icons.Example;\r\n\r\n        Modelica.Fluid.Sources.FixedBoundary source(nPorts=1,\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          use_T=false,\r\n          h=2.5e6,\r\n          p=system.p_start)\r\n          annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe1(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          length=200,\r\n          use_T_start=false,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.av_vb,\r\n          h_start=2.5e6,\r\n          diameter=0.01)\r\n          annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n        Modelica.Fluid.Valves.ValveCompressible valve(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          m_flow_nominal=10,\r\n          rho_nominal=60,\r\n          CvData=Modelica.Fluid.Types.CvTypes.Av,\r\n          Av=0.05^2/4*Modelica.Constants.pi,\r\n          dp_nominal=100000,\r\n          p_nominal=10000000)\r\n          annotation (Placement(transformation(extent={{26,-10},{46,10}})));\r\n        Modelica.Fluid.Sources.FixedBoundary sink(nPorts=1,redeclare package\r\n            Medium =\r\n              Modelica.Media.Water.StandardWaterOnePhase, p=9500000)\r\n                    annotation (Placement(transformation(extent={{86,-10},{66,10}})));\r\n        Modelica.Blocks.Sources.Ramp ramp(\r\n          offset=1,\r\n          startTime=2,\r\n          duration=0,\r\n          height=-0.8)\r\n                    annotation (Placement(transformation(extent={{72,30},{52,50}})));\r\n        inner Modelica.Fluid.System system(\r\n          use_eps_Re=true,\r\n          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial,\r\n          p_start=10000000)\r\n          annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n        Modelica.Fluid.Pipes.DynamicPipe pipe2(\r\n          redeclare package Medium = Modelica.Media.Water.StandardWater,\r\n          length=200,\r\n          use_T_start=false,\r\n          nNodes=5,\r\n          modelStructure=Modelica.Fluid.Types.ModelStructure.av_vb,\r\n          h_start=2.5e6,\r\n          diameter=0.01)\r\n          annotation (Placement(transformation(extent={{-14,-10},{6,10}})));\r\n      equation\r\n        connect(source.ports[1], pipe1.port_a) annotation (Line(\r\n            points={{-70,0},{-50,0}}, color={0,127,255}));\r\n        connect(valve.port_b,sink. ports[1])                          annotation (Line(\r\n            points={{46,0},{66,0}}, color={0,127,255}));\r\n        connect(ramp.y,valve. opening)               annotation (Line(\r\n            points={{51,40},{36,40},{36,8}}, color={0,0,127}));\r\n        connect(pipe1.port_b, pipe2.port_a) annotation (Line(\r\n            points={{-30,0},{-14,0}}, color={0,127,255}));\r\n        connect(pipe2.port_b, valve.port_a) annotation (Line(\r\n            points={{6,0},{26,0}}, color={0,127,255}));\r\n      end DynamicPipesSeriesSteadyStateInitial;\r\n\r\n      model DynamicPipesSeriesLargeNSteadyStateInitial\r\n        \"Same as DynamicPipesSeriesSteadyStateInitial but with larger number of nodes\"\r\n         extends DynamicPipesSeriesSteadyStateInitial(\r\n           pipe1(nNodes = 50),\r\n           pipe2(nNodes = 50));\r\n      equation\r\n\r\n      end DynamicPipesSeriesLargeNSteadyStateInitial;\r\n\r\n      model TwoVolumesEquationsReducedInitial\r\n        \"Initial values only for state variables after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        T1 = 300;\r\n        p2 = 1e5;\r\n        T2 = 300;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsReducedInitial;\r\n\r\n      model TwoVolumesEquationsFullInitial\r\n        \"Fully specified initial values for all dynamic variables, consistent values\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n          p1 = 1e5;\r\n          T1 = 300;\r\n          p2 = 1e5;\r\n          T2 = 350;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullInitial;\r\n\r\n      model TwoVolumesEquationsReducedSteadyStatePressureAndTemperature\r\n        \"Steady-state equations only for state variables after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        der(p1) = 0;\r\n        der(T1) = 0;\r\n        der(T2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsReducedSteadyStatePressureAndTemperature;\r\n\r\n      model TwoVolumesEquationsFullSteadyStatePressureAndTemperature\r\n        \"Steady-state equations only for all dynamic variables after state variable change\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        der(p1) = 0;\r\n        der(T1) = 0;\r\n        der(p2) = 0;\r\n        der(T2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullSteadyStatePressureAndTemperature;\r\n\r\n      model TwoVolumesEquationsFullSteadyStateMassAndEnergy\r\n        \"Steady-state equations for all original dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumesEquations;\r\n      initial equation\r\n        der(M1) = 0;\r\n        der(E1) = 0;\r\n        der(M2) = 0;\r\n        der(E2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesEquationsFullSteadyStateMassAndEnergy;\r\n\r\n      model TwoVolumesFullInitial\r\n        \"Fully specified initial values for all dynamic variables, consistent values\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumes(\r\n          system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial),\r\n          V1(p_start=100000, T_start(displayUnit=\"K\") = 300),\r\n          V2(p_start=100000, T_start=623.15));\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesFullInitial;\r\n\r\n      model TwoVolumesFullSteadyStatePressureAndTemperature\r\n        \"Fully specified steady-state conditions for all dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoVolumes(\r\n          system(energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyStateInitial),\r\n          V1(p_start=100000, T_start(displayUnit=\"K\") = 300),\r\n          V2(p_start=100000, T_start=623.15));\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoVolumesFullSteadyStatePressureAndTemperature;\r\n\r\n      package BaseClasses \"Base classes for test models\"\r\n        extends Modelica.Icons.BasesPackage;\r\n        model TwoVolumes\r\n          \"Two volumes containing an ideal gas with a zero dp connection, MSL-based\"\r\n\r\n          Modelica.Fluid.Vessels.ClosedVolume V1(\r\n            use_portsData=false,\r\n            V=1,\r\n            nPorts=2,\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa)\r\n            annotation (Placement(transformation(extent={{-48,0},{-28,20}})));\r\n          Modelica.Fluid.Vessels.ClosedVolume V2(\r\n            use_portsData=false,\r\n            V=1,\r\n            nPorts=2,\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa)\r\n            annotation (Placement(transformation(extent={{-12,0},{8,20}})));\r\n          Modelica.Fluid.Sources.MassFlowSource_T source(\r\n            nPorts=1,\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            m_flow=0.01)\r\n            annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));\r\n          Modelica.Fluid.Sources.FixedBoundary sink(\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            T(displayUnit=\"K\") = 300,\r\n            nPorts=1,\r\n            p=1000) annotation (Placement(transformation(extent={{80,-20},{60,0}})));\r\n          inner Modelica.Fluid.System system\r\n            annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n          Modelica.Fluid.Valves.ValveLinear valveLinear(\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            dp_nominal=100000,\r\n            m_flow_nominal=0.01)\r\n            annotation (Placement(transformation(extent={{20,-20},{40,0}})));\r\n          Modelica.Blocks.Sources.RealExpression one(y=1)\r\n            annotation (Placement(transformation(extent={{2,24},{22,44}})));\r\n        equation\r\n          connect(source.ports[1], V1.ports[1]) annotation (Line(\r\n              points={{-60,-10},{-40,-10},{-40,0}}, color={0,127,255}));\r\n          connect(V1.ports[2], V2.ports[1]) annotation (Line(\r\n              points={{-36,0},{-36,-10},{-4,-10},{-4,0}}, color={0,127,255}));\r\n          connect(V2.ports[2], valveLinear.port_a) annotation (Line(\r\n              points={{0,0},{0,-10},{20,-10}}, color={0,127,255}));\r\n          connect(valveLinear.port_b, sink.ports[1]) annotation (Line(\r\n              points={{40,-10},{60,-10}}, color={0,127,255}));\r\n          connect(one.y, valveLinear.opening) annotation (Line(\r\n              points={{23,34},{30,34},{30,-2}}, color={0,0,127}));\r\n        end TwoVolumes;\r\n\r\n        model TwoVolumesEquations\r\n          \"Two volumes containing an ideal gas with a zero dp connection, equation-based\"\r\n          Real M1(stateSelect = StateSelect.avoid),\r\n               M2(stateSelect = StateSelect.avoid),\r\n               E1(stateSelect = StateSelect.avoid),\r\n               E2(stateSelect = StateSelect.avoid),\r\n               p1(stateSelect = StateSelect.prefer),\r\n               p2(stateSelect = StateSelect.prefer),\r\n               T1(stateSelect = StateSelect.prefer),\r\n               T2(stateSelect = StateSelect.prefer),\r\n               w0, w1, w2, h1, h2;\r\n          parameter Real V = 1;\r\n          parameter Real R = 400;\r\n          parameter Real cp = 1000;\r\n          parameter Real cv = cp-R;\r\n          parameter Real h0 = cp*300;\r\n          parameter Real Kv = 1e-7;\r\n        equation\r\n          der(M1) = w0 - w1;\r\n          der(E1) = w0*h0 - w1*h1;\r\n          der(M2) = w1 - w2;\r\n          der(E2) = w1*h1 - w2*h2;\r\n          M1 = V*p1/(R*T1);\r\n          M2 = V*p2/(R*T2);\r\n          E1 = M1*cv*T1;\r\n          E2 = M2*cv*T2;\r\n          h1 = cp*T1;\r\n          h2 = cp*T2;\r\n          w0 = 0.01;\r\n          w2 = Kv*p2;\r\n          p1 = p2;\r\n        end TwoVolumesEquations;\r\n      end BaseClasses;\r\n    end Fluid;\r\n\r\n    package Mechanical \"Test cases with Mechanical systems\"\r\n      extends Modelica.Icons.ExamplesPackage;\r\n\r\n      model TwoMassesEquationsFullInitial\r\n        \"Fully specified initial values for dynamic variables\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        x1 = 0;\r\n        v1 = 0;\r\n        x2 = 0;\r\n        v2 = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsFullInitial;\r\n\r\n      model TwoMassesEquationsReducedInitial\r\n        \"Initial values for state variables after index reduction\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        x1 = 0;\r\n        v1 = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsReducedInitial;\r\n\r\n      model TwoMassesEquationsFullSteadyState\r\n        \"Fully specified initial values for dynamic variables\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        der(x1) = 0;\r\n        der(v1) = 0;\r\n        der(x2) = 0;\r\n        der(v2) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsFullSteadyState;\r\n\r\n      model TwoMassesEquationsReducedSteadyState\r\n        \"Fully specified initial values for states after index reduction\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        der(x1) = 0;\r\n        der(v1) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsReducedSteadyState;\r\n\r\n      model TwoMassesFullInitial\r\n        \"Fully specified initial values for dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n          mass1(s(fixed=true), v(fixed=true)),\r\n          mass2(s(fixed=true), v(fixed=true)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesFullInitial;\r\n\r\n      model TwoMassesReducedInitial\r\n        \"Initial values for state variables after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n                          mass1(s(fixed=true), v(fixed=true)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesReducedInitial;\r\n\r\n      model TwoMassesFullSteadyState\r\n        \"Fully specified steady state conditions for dynamic variables\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n           mass1(v(fixed=true, start=0), a(fixed=true, start=0)),\r\n           mass2(v(fixed=true, start=0), a(fixed=true, start=0)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesFullSteadyState;\r\n\r\n      model TwoMassesReducedSteadyState\r\n        \"Steady-state initial conditions for states after index reduction\"\r\n        extends Modelica.Icons.Example;\r\n        extends BaseClasses.TwoMasses(\r\n          mass1(v(fixed=true, start=0), a(fixed=true, start=0)));\r\n        annotation (experiment(StopTime=10));\r\n      end TwoMassesReducedSteadyState;\r\n\r\n      package BaseClasses \"Base classes for test cases\"\r\n        extends Modelica.Icons.BasesPackage;\r\n        model TwoMasses\r\n          \"Two rigidly connected masses, connected to ground via a spring\"\r\n\r\n          Modelica.Mechanics.Translational.Components.Mass mass1(\r\n             m=1, s(fixed=false,start=1))\r\n            annotation (Placement(transformation(extent={{-12,-10},{8,10}})));\r\n          Modelica.Mechanics.Translational.Components.Mass mass2(\r\n             m=1, s(fixed=false, start=1))\r\n            annotation (Placement(transformation(extent={{26,-10},{46,10}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));\r\n          Modelica.Mechanics.Translational.Components.Spring spring(c=1, s_rel0=0.5)\r\n            annotation (Placement(transformation(extent={{-42,-10},{-22,10}})));\r\n        equation\r\n          connect(fixed.flange, spring.flange_a) annotation (Line(\r\n              points={{-60,0},{-42,0}}, color={0,127,0}));\r\n          connect(spring.flange_b, mass1.flange_a) annotation (Line(\r\n              points={{-22,0},{-12,0}}, color={0,127,0}));\r\n          connect(mass1.flange_b, mass2.flange_a) annotation (Line(\r\n              points={{8,0},{26,0}}, color={0,127,0}));\r\n        end TwoMasses;\r\n\r\n        model TwoMassesEquations\r\n          \"Two rigidly connected masses, connected to ground via a spring, equation-based\"\r\n          Real x1, v1, x2, v2, F1, F2;\r\n          parameter Real M = 1;\r\n          parameter Real K = 1;\r\n          parameter Real F0 = 1;\r\n        equation\r\n          der(x1) = v1;\r\n          M*der(v1) = F1+F2;\r\n          der(x2) = v2;\r\n          M*der(v2) = -F2;\r\n          F1 = -K*x1;\r\n          x1 = x2;\r\n        end TwoMassesEquations;\r\n      end BaseClasses;\r\n    end Mechanical;\r\n\r\n  end ConsistentInitialization", "checksum": "fd7c86da7a869440daf0b55c0a22cfff29ab0b29", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo:8-546", "component_count": 7, "connection_count": 17, "variable_count": 30, "physical_quantity_count": 2, "parameter_count": 9, "equation_count": 116, "dependency_count": 36, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 185.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation der(x1) = v1", "search_keywords": ["Modelica.Units.SI.MassFlowRate", "Real", "mechanical", "system"]}, "components": [{"name": "m_flow_initial", "type_name": "Modelica.Units.SI.MassFlowRate", "prefixes": ["discrete"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "x1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "x2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "source.ports[1]", "to_connector": "pipe.port_a", "condition": null}, {"from_connector": "pipe.port_b", "to_connector": "valve.port_a", "condition": null}, {"from_connector": "valve.port_b", "to_connector": "sink.ports[1]", "condition": null}, {"from_connector": "ramp.y", "to_connector": "valve.opening", "condition": null}, {"from_connector": "source.ports[1]", "to_connector": "pipe1.port_a", "condition": null}, {"from_connector": "valve.port_b", "to_connector": "sink. ports[1]", "condition": null}, {"from_connector": "ramp.y", "to_connector": "valve. opening", "condition": null}, {"from_connector": "pipe1.port_b", "to_connector": "pipe2.port_a", "condition": null}, {"from_connector": "pipe2.port_b", "to_connector": "valve.port_a", "condition": null}, {"from_connector": "source.ports[1]", "to_connector": "V1.ports[1]", "condition": null}, {"from_connector": "V1.ports[2]", "to_connector": "V2.ports[1]", "condition": null}, {"from_connector": "V2.ports[2]", "to_connector": "valveLinear.port_a", "condition": null}, {"from_connector": "valveLinear.port_b", "to_connector": "sink.ports[1]", "condition": null}, {"from_connector": "one.y", "to_connector": "valveLinear.opening", "condition": null}, {"from_connector": "fixed.flange", "to_connector": "spring.flange_a", "condition": null}, {"from_connector": "spring.flange_b", "to_connector": "mass1.flange_a", "condition": null}, {"from_connector": "mass1.flange_b", "to_connector": "mass2.flange_a", "condition": null}], "variables": [{"name": "m_flow_initial", "type_name": "Modelica.Units.SI.MassFlowRate", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipeLumpedPressureInitialization", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipeInitialValues", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipesSeriesSteadyStateInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DynamicPipesSeriesLargeNSteadyStateInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsReducedInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsReducedSteadyStatePressureAndTemperature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullSteadyStatePressureAndTemperature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesEquationsFullSteadyStateMassAndEnergy", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoVolumesFullSteadyStatePressureAndTemperature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "sink", "type_name": "Modelica.Fluid.Sources.FixedBoundary", "prefixes": [], "attributes": {"displayUnit": "K"}, "binding_equation": "300,\r\n            nPorts=1,\r\n            p=1000) \r\n          inner Modelica.Fluid.System system\r\n            \r\n          Modelica.Fluid.Valves.ValveLinear valveLinear(\r\n            redeclare package Medium = Modelica.Media.Air.DryAirNasa,\r\n            dp_nominal=100000,\r\n            m_flow_nominal=0.01)\r\n            \r\n          Modelica.Blocks.Sources.RealExpression one(y=1)\r\n            \r\n        equation\r\n          connect(source.ports[1], V1.ports[1]) \r\n          connect(V1.ports[2], V2.ports[1]) \r\n          connect(V2.ports[2], valveLinear.port_a) \r\n          connect(valveLinear.port_b, sink.ports[1]) \r\n          connect(one.y, valveLinear.opening) \r\n        end TwoVolumes", "comment": null}, {"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "v1", "comment": null}, {"name": "TwoVolumesEquations", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BaseClasses", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fluid", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsReducedInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsFullSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquationsReducedSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesFullInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesReducedInitial", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesFullSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesReducedSteadyState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMasses", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TwoMassesEquations", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Mechanical", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "ports", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "K", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["BaseClasses", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Fluid", "Modelica.Fluid.Pipes", "Modelica.Fluid.Sources", "Modelica.Fluid.Types.CvTypes", "Modelica.Fluid.Types.Dynamics", "Modelica.Fluid.Types.ModelStructure", "Modelica.Fluid.Valves", "Modelica.Fluid.Vessels", "Modelica.Icons", "Modelica.Mechanics.Translational.Components", "Modelica.Media.Air", "Modelica.Media.Water", "Modelica.Units.SI", "StateSelect", "V1", "V2", "fixed", "mass1", "mass2", "medium", "one", "pipe", "pipe.medium", "pipe1", "pipe2", "ramp", "sink", "source", "spring", "system", "valve", "valve.port_a", "valveLinear"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "DynamicPipesSeriesSteadyStateInitial", "BaseClasses.TwoVolumesEquations", "BaseClasses.TwoVolumes", "Modelica.Icons.BasesPackage", "BaseClasses.TwoMassesEquations", "BaseClasses.TwoMasses"]}
{"fqn": "ObsoleteModelica4", "kind": "package", "name": "ObsoleteModelica4", "package_path": [], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Icons.InternalPackage", "Modelica.Icons.Function", "Modelica.Icons.InterfacesPackage", "Modelica.Icons.RoundSensor", "Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.OnePort", "Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.TwoPlug", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint", "Modelica.Icons.TypesPackage", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "Modelica.Icons.Record", "Modelica.Icons.UtilitiesPackage", "Modelica.Icons.FunctionsPackage", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"], "imports": ["Modelica.Units.SI", "Modelica.Utilities.Streams.error", "Modelica.Math.Vectors.length", "Modelica.Math.Vectors.norm", "Modelica.Math.Vectors", "ObsoleteModelica4.Math.Vectors.Utilities", "Modelica.Constants.pi"], "parameters": [{"name": "useBipolarVoltage", "type": "Boolean", "default": "true \"Enables bipolar input voltage range\"", "description": null}, {"name": "useConstantMaximumVoltage", "type": "Boolean", "default": "true \"Enables constant maximum voltage\"", "description": null}, {"name": "vMax", "type": "SI.Voltage", "default": "0 \"Maximum voltage range mapped to dutyCycle = 1\" Modelica.Blocks.Interfaces.RealInput v \"Voltage\" Modelica.Blocks.Interfaces.RealOutput dutyCycle \"Duty cycle\" Modelica.Blocks.Math", "description": null}, {"name": "useAxisFlange", "type": "Boolean", "default": "false \"= true, if axis flange is enabled\" parameter Boolean animation=true \"= true, if animation shall be enabled (show axis as cylinder)\"", "description": null}, {"name": "n", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,0,1} \"Axis of rotation resolved in frame_a (= same as in frame_b)\" parameter SI.Angle phi_offset=0 \"Relative angle offset (angle = phi_offset + phi)\"", "description": null}, {"name": "boxWidthDirection", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,1,0} \"Vector in width direction of box, resolved in frame_a\" parameter SI.Distance boxWidth=world.defaultJointWidth \"Width of prismatic joint box\" parameter SI.Distance boxHeigh", "description": null}, {"name": "cylinderLength", "type": "SI.Distance", "default": "world.defaultJointLength \"Length of cylinder representing the joint axis\" parameter SI.Distance cylinderDiameter=world.defaultJointWidth \"Diameter of cylinder representing the join", "description": null}, {"name": "animation", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "length", "type": "SI.Position", "default": "10 \"Length and width of box (center is at x=y=0)\" parameter SI.Position height = 0.02 \"Height of box (upper surface is at z=0, lower surface is at z=-height)\" parameter Modelica.Me", "description": null}, {"name": "useSupport", "type": "Boolean", "default": "false \"= true, if support flange enabled, otherwise implicitly grounded\" extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "description": null}, {"name": "m", "type": "Integer", "default": "3 \"Number of phases\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"Enable / disable (=fixed temperatures) thermal port\" parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance RRef(d(start=1), q(start=1)) \"Salient cage resistanc", "description": null}, {"name": "effectiveTurns", "type": "Real", "default": "1 \"Effective number of turns\"", "description": null}, {"name": "if animation shall be enabled\"", "type": "Boolean", "default": "", "description": null}, {"name": "alpha20(start", "type": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "default": "0) \"Temperature coefficient of winding at 20 degC\"", "description": null}, {"name": "Lsigma \"Cage stray inductance\"", "type": "SI.Inductance", "default": "", "description": null}, {"name": "RRef(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientResistance", "default": "1), q(start=1)) \"Salient cage resistance\"", "description": null}, {"name": "Lsigma(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientInductance", "default": "1), q(start=1)) \"Salient cage stray inductance\"", "description": null}], "equations": [{"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2836, "start_col": 11, "end_col": 65}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2819, "end_line": 2836, "start_col": 13, "end_col": 65}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2818, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2715, "start_col": 11, "end_col": 64}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2698, "end_line": 2715, "start_col": 13, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2697, "start_col": 11, "end_col": 19}}, {"equations": ["algorithm\r\n      n := size(table, 1)", "if n <= 1 then\r\n        y := transpose([table[1, icol]])", "else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1", "else\r\n          i := 2", "// Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1", "end while", "i := i - 1", "end if", "// Get interpolation data\r\n        u1 := table[i, 1]", "u2 := table[i + 1, 1]", "y1 := transpose([table[i, icol]])", "y2 := transpose([table[i + 1, icol]])", "assert(u2 > u1, \"Table index must be increasing\")", "// Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2581, "end_line": 2618, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2581, "end_line": 2581, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm\r\n      n := size(table, 1)", "if n <= 1 then\r\n        y := table[1, icol]", "else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1", "else\r\n          i := 2", "// Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1", "end while", "i := i - 1", "end if", "// Get interpolation data\r\n        u1 := table[i, 1]", "u2 := table[i + 1, 1]", "y1 := table[i, icol]", "y2 := table[i + 1, icol]", "assert(u2 > u1, \"Table index must be increasing\")", "// Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2519, "end_line": 2556, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2519, "end_line": 2519, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm\r\n          if na > 0 then\r\n            S := -2*matrix(u)*transpose(matrix(u))/(Vectors.length(u)*\r\n              Vectors.length(u))", "for i in 1:na loop\r\n              S[i, i] := 1.0 + S[i, i]", "end for", "SAS := S*A*S", "else\r\n            SAS := fill(\r\n                    0.0,\r\n                    0,\r\n                    0)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2429, "end_line": 2442, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2429, "end_line": 2429, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          for i in 1:n loop\r\n            h := scalar(2*transpose(matrix(u))*A[:, i]/lu)", "RA[:, i] := A[:, i] - h*u", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2350, "end_line": 2354, "start_col": 9, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2350, "end_line": 2350, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          ra := a - h*u", "// Values close to zero are set to zero.\r\n          for i in 1:size(ra, 1) loop\r\n            ra[i] := if abs(ra[i]) >= norm_a*1e-12 then ra[i] else 0", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1660, "end_line": 1666, "start_col": 9, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1660, "end_line": 1660, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          assert(norm_b > 0,\r\n            \"Vector b in function householderVector is zero vector, but at least one element should be different from zero\")", "assert(norm_a > 0,\r\n            \"Vector a in function householderVector is zero vector, but at least one element should be different from zero\")", "alpha := if norm(a + norm_a/norm_b*b, 2) > norm(a - norm_a/norm_b*b, 2)\r\n             then norm_a/norm_b else -norm_a/norm_b", "u := (a + alpha*b)/length(a + alpha*b)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1585, "end_line": 1592, "start_col": 9, "end_col": 50}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1585, "end_line": 1585, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          // Check that f(x_min) and f(x_max) have different sign\r\n          fa := f_nonlinear(\r\n                  x_min2,\r\n                  pressure,\r\n                  X,\r\n                  f_nonlinear_data) - y_zero", "fb := f_nonlinear(\r\n                  x_max2,\r\n                  pressure,\r\n                  X,\r\n                  f_nonlinear_data) - y_zero", "fc := fb", "if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments x_min and x_max to OneNonLinearEquation.solve(..)\\n\"\r\n               + \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  x_min  = \" + String(x_min2) + \"\\n\" + \"  x_max  = \" + String(x_max2)\r\n               + \"\\n\" + \"  y_zero = \" + String(y_zero) + \"\\n\" +\r\n              \"  fa = f(x_min) - y_zero = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(x_max) - y_zero = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\")", "end if", "// Initialize variables\r\n          c := a", "fc := fa", "e := b - a", "d := e", "// Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b", "b := c", "c := a", "fa := fb", "fb := fc", "fc := fa", "end if", "tol := 2*eps*abs(b) + x_tol", "m := (c - b)/2", "if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true", "x_zero := b", "else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m", "d := e", "else\r\n                s := fb/fa", "if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "q := 1 - s", "else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc", "r := fb/fc", "p := s*(2*m*q*(q - r) - (b - a)*(r - 1))", "q := (q - 1)*(r - 1)*(s - 1)", "end if", "if p > 0 then\r\n                  q := -q", "else\r\n                  p := -p", "end if", "s := e", "e := d", "if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q", "else\r\n                  // use bi-section\r\n                  e := m", "d := e", "end if", "end if", "// Best guess value is defined as \"a\"\r\n              a := b", "fa := fb", "b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol)", "fb := f_nonlinear(\r\n                      b,\r\n                      pressure,\r\n                      X,\r\n                      f_nonlinear_data) - y_zero", "if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a", "fc := fa", "e := b - a", "d := e", "end if", "end if", "end while"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1393, "end_line": 1496, "start_col": 9, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1393, "end_line": 1393, "start_col": 9, "end_col": 18}}, {"equations": ["equation\r\n          s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1285, "start_col": 9, "end_col": 69}}, {"equations": ["s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1285, "start_col": 11, "end_col": 69}}, {"equations": ["s_b = flange_b.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1281, "end_line": 1281, "start_col": 11, "end_col": 47}}, {"equations": ["s_a = flange_a.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1280, "start_col": 11, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1279, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1217, "start_col": 9, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1217, "start_col": 11, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1213, "start_col": 11, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1212, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-87}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1140, "end_line": 1144, "start_col": 9, "end_col": 52}}, {"equations": ["connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-87}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1141, "end_line": 1144, "start_col": 11, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1140, "end_line": 1140, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-86}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1073, "end_line": 1077, "start_col": 9, "end_col": 52}}, {"equations": ["connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-86}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1074, "end_line": 1077, "start_col": 11, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1073, "end_line": 1073, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n\r\n           connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 980, "end_line": 985, "start_col": 9, "end_col": 32}}, {"equations": ["connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 982, "end_line": 985, "start_col": 12, "end_col": 32}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 980, "end_line": 980, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 812, "start_col": 9, "end_col": 41}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 812, "start_col": 11, "end_col": 41}}, {"equations": ["phi = internalAxis.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 805, "end_line": 805, "start_col": 11, "end_col": 33}}, {"equations": ["tau = -frame_b.t*e"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 802, "end_line": 802, "start_col": 11, "end_col": 29}}, {"equations": ["if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 789, "end_line": 799, "start_col": 11, "end_col": 17}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 798, "start_col": 13, "end_col": 89}}, {"equations": ["frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 798, "end_line": 798, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 797, "end_line": 797, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 796, "end_line": 796, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 795, "start_col": 13, "end_col": 96}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 793, "start_col": 13, "end_col": 89}}, {"equations": ["frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 793, "end_line": 793, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 792, "end_line": 792, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 791, "end_line": 791, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 790, "start_col": 13, "end_col": 95}}, {"equations": ["frame_b.r_0 = frame_a.r_0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 787, "end_line": 787, "start_col": 11, "end_col": 36}}, {"equations": ["a = der(w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 784, "end_line": 784, "start_col": 11, "end_col": 21}}, {"equations": ["w = der(phi)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 783, "end_line": 783, "start_col": 11, "end_col": 23}}, {"equations": ["angle = phi_offset + phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 782, "end_line": 782, "start_col": 11, "end_col": 35}}, {"equations": ["assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 779, "end_line": 780, "start_col": 11, "end_col": 68}}, {"equations": ["assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 777, "end_line": 778, "start_col": 11, "end_col": 68}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 775, "start_col": 11, "end_col": 51}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 774, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 587, "start_col": 9, "end_col": 59}}, {"equations": ["v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 587, "start_col": 11, "end_col": 59}}, {"equations": ["s = internalAxis.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 580, "end_line": 580, "start_col": 11, "end_col": 29}}, {"equations": ["f = -e*frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 577, "end_line": 577, "start_col": 11, "end_col": 27}}, {"equations": ["zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 574, "end_line": 574, "start_col": 11, "end_col": 80}}, {"equations": ["zeros(3) = frame_a.f + frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 573, "end_line": 573, "start_col": 11, "end_col": 43}}, {"equations": ["frame_b.R = frame_a.R"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 570, "end_line": 570, "start_col": 11, "end_col": 32}}, {"equations": ["frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 569, "end_line": 569, "start_col": 11, "end_col": 112}}, {"equations": ["a = der(v)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 566, "end_line": 566, "start_col": 11, "end_col": 21}}, {"equations": ["v = der(s)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 565, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 564, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n            connect(divisionBipolar.y, add.u1) annotation (Line(points={{-19,-30},{-10,-30},\r\n                    {-10,-44},{-2,-44}}, color={0,0,127}))", "connect(offset.y, add.u2) annotation (Line(\r\n                points={{-19,-70},{-10,-70},{-10,-56},{-2,-56}},  color={0,0,127}))", "connect(divisionUnipolar.y, dutyCycle) annotation (Line(points={{-19,30},{40,30},\r\n                    {40,0},{110,0}}, color={0,0,127}))", "connect(add.y, dutyCycle) annotation (Line(\r\n                points={{21,-50},{40,-50},{40,0},{110,0}},  color={0,0,127}))", "connect(v, divisionUnipolar.u1) annotation (Line(points={{-120,0},{-80,0},{-80,\r\n                    36},{-42,36}}, color={0,0,127}))", "connect(v, divisionBipolar.u1) annotation (Line(points={{-120,0},{-80,0},{-80,\r\n                    -24},{-42,-24}}, color={0,0,127}))", "connect(vMaxExt, vMaxInt)\r\n              annotation (Line(points={{0,120},{0,80}}, color={0,0,127}))", "connect(vMaxInt, divisionUnipolar.u2) annotation (Line(points={{0,80},{-60,80},\r\n                    {-60,24},{-42,24}}, color={0,0,127}))", "connect(vMaxInt, vMaxConst.y)\r\n              annotation (Line(points={{0,80},{19,80}}, color={0,0,127}))", "connect(vMaxInt, divisionBipolar.u2) annotation (Line(points={{0,80},{-60,80},\r\n                    {-60,-36},{-42,-36}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 305, "end_line": 325, "start_col": 11, "end_col": 61}}, {"equations": ["connect(divisionBipolar.y, add.u1) annotation (Line(points={{-19,-30},{-10,-30},\r\n                    {-10,-44},{-2,-44}}, color={0,0,127}))", "connect(offset.y, add.u2) annotation (Line(\r\n                points={{-19,-70},{-10,-70},{-10,-56},{-2,-56}},  color={0,0,127}))", "connect(divisionUnipolar.y, dutyCycle) annotation (Line(points={{-19,30},{40,30},\r\n                    {40,0},{110,0}}, color={0,0,127}))", "connect(add.y, dutyCycle) annotation (Line(\r\n                points={{21,-50},{40,-50},{40,0},{110,0}},  color={0,0,127}))", "connect(v, divisionUnipolar.u1) annotation (Line(points={{-120,0},{-80,0},{-80,\r\n                    36},{-42,36}}, color={0,0,127}))", "connect(v, divisionBipolar.u1) annotation (Line(points={{-120,0},{-80,0},{-80,\r\n                    -24},{-42,-24}}, color={0,0,127}))", "connect(vMaxExt, vMaxInt)\r\n              annotation (Line(points={{0,120},{0,80}}, color={0,0,127}))", "connect(vMaxInt, divisionUnipolar.u2) annotation (Line(points={{0,80},{-60,80},\r\n                    {-60,24},{-42,24}}, color={0,0,127}))", "connect(vMaxInt, vMaxConst.y)\r\n              annotation (Line(points={{0,80},{19,80}}, color={0,0,127}))", "connect(vMaxInt, divisionBipolar.u2) annotation (Line(points={{0,80},{-60,80},\r\n                    {-60,-36},{-42,-36}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 306, "end_line": 325, "start_col": 13, "end_col": 61}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 305, "end_line": 305, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n          y = fromBus"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 177, "end_line": 178, "start_col": 9, "end_col": 23}}, {"equations": ["y = fromBus"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 178, "end_line": 178, "start_col": 11, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 177, "end_line": 177, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          y = fromBus"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 145, "end_line": 146, "start_col": 9, "end_col": 23}}, {"equations": ["y = fromBus"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 146, "end_line": 146, "start_col": 11, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 145, "end_line": 145, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          y = fromBus"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 113, "end_line": 114, "start_col": 9, "end_col": 23}}, {"equations": ["y = fromBus"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 114, "end_line": 114, "start_col": 11, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 113, "end_line": 113, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          toBus = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 81, "end_line": 82, "start_col": 9, "end_col": 21}}, {"equations": ["toBus = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 82, "end_line": 82, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 81, "end_line": 81, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          toBus = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 49, "end_line": 50, "start_col": 9, "end_col": 21}}, {"equations": ["toBus = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 50, "end_line": 50, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 49, "end_line": 49, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          toBus = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 17, "end_line": 18, "start_col": 9, "end_col": 21}}, {"equations": ["toBus = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 18, "end_line": 18, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 17, "end_line": 17, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: Real×45, Integer×13, SI.Length×2 | connections: 27 | params: useBipolarVoltage, useConstantMaximumVoltage, vMax | u", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2, "end_line": 2925, "start_col": 1, "end_col": 22}, "code_text": "package ObsoleteModelica4 \"Library that contains components from Modelica Standard Library 3.2.3 that have been removed from version 4.0.0\"\r\n  extends Modelica.Icons.Package;\r\n\r\n  import Modelica.Units.SI;\r\n\r\n  package Blocks \"Library of basic input/output control blocks (continuous, discrete, logical, table blocks)\"\r\n    extends Modelica.Icons.Package;\r\n    package Interfaces \"Library of connectors and partial models for input/output blocks\"\r\n      extends Modelica.Icons.Package;\r\n      package Adaptors \"Package with adaptors\"\r\n        extends Modelica.Icons.Package;\r\n        block SendReal \"Obsolete block to send Real signal to bus\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          Modelica.Blocks.Interfaces.RealOutput toBus \"Output signal to be connected to bus\" annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Interfaces.RealInput u \"Input signal to be send to bus\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        equation\r\n          toBus = u;\r\n          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                    extent={{-100,40},{100,-40}},\r\n                    lineColor={0,0,127},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),Text(\r\n                    extent={{-150,90},{150,50}},\r\n                textString=\"%name\",\r\n                lineColor={0,0,255}),   Text(\r\n                    extent={{-100,30},{100,-30}},\r\n                    lineColor={0,0,127},\r\n                    textString=\"send\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete block that was previously used to connect a Real signal\r\nto a signal in a connector. This block is only provided for\r\nbackward compatibility.\r\n</p>\r\n<p>\r\nIt is much more convenient and more powerful to use \\\"expandable connectors\\\"\r\nfor signal buses, see example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"),\r\n          obsolete = \"Obsolete block - use expandable connectors instead\");\r\n        end SendReal;\r\n\r\n        block SendBoolean \"Obsolete block to send Boolean signal to bus\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          Modelica.Blocks.Interfaces.BooleanOutput toBus \"Output signal to be connected to bus\" annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Interfaces.BooleanInput u \"Input signal to be send to bus\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        equation\r\n          toBus = u;\r\n          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                    extent={{-100,40},{100,-40}},\r\n                    lineColor={255,0,255},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),Text(\r\n                    extent={{-150,90},{150,50}},\r\n                textString=\"%name\",\r\n                lineColor={0,0,255}),   Text(\r\n                    extent={{-100,30},{100,-30}},\r\n                    lineColor={255,0,255},\r\n                    textString=\"send\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete block that was previously used to connect a Boolean signal\r\nto a signal in a connector. This block is only provided for\r\nbackward compatibility.\r\n</p>\r\n<p>\r\nIt is much more convenient and more powerful to use \\\"expandable connectors\\\"\r\nfor signal buses, see example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"),\r\n          obsolete = \"Obsolete block - use expandable connectors instead\");\r\n        end SendBoolean;\r\n\r\n        block SendInteger \"Obsolete block to send Integer signal to bus\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          Modelica.Blocks.Interfaces.IntegerOutput toBus \"Output signal to be connected to bus\" annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Interfaces.IntegerInput u \"Input signal to be send to bus\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        equation\r\n          toBus = u;\r\n          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                    extent={{-100,40},{100,-40}},\r\n                    lineColor={255,127,0},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),Text(\r\n                    extent={{-150,90},{150,50}},\r\n                textString=\"%name\",\r\n                lineColor={0,0,255}),   Text(\r\n                    extent={{-100,30},{100,-30}},\r\n                    lineColor={255,127,0},\r\n                    textString=\"send\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete block that was previously used to connect an Integer signal\r\nto a signal in a connector. This block is only provided for\r\nbackward compatibility.\r\n</p>\r\n<p>\r\nIt is much more convenient and more powerful to use \\\"expandable connectors\\\"\r\nfor signal buses, see example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"),\r\n          obsolete = \"Obsolete block - use expandable connectors instead\");\r\n        end SendInteger;\r\n\r\n        block ReceiveReal \"Obsolete block to receive Real signal from bus\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          Modelica.Blocks.Interfaces.RealInput fromBus \"To be connected with signal on bus\" annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));\r\n          Modelica.Blocks.Interfaces.RealOutput y \"Output signal to be received from bus\" annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n        equation\r\n          y = fromBus;\r\n          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                    extent={{-100,40},{100,-40}},\r\n                    lineColor={0,0,127},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),Text(\r\n                    extent={{-100,30},{100,-30}},\r\n                    lineColor={0,0,127},\r\n                    textString=\"receive\"),Text(\r\n                    extent={{-150,90},{150,50}},\r\n                textString=\"%name\",\r\n                lineColor={0,0,255})}),    Documentation(info=\"<html>\r\n<p>\r\nObsolete block that was previously used to connect a Real signal\r\nin a connector to an input of a block. This block is only provided for\r\nbackward compatibility.\r\n</p>\r\n<p>\r\nIt is much more convenient and more powerful to use \\\"expandable connectors\\\"\r\nfor signal buses, see example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"),\r\n          obsolete = \"Obsolete block - use expandable connectors instead\");\r\n        end ReceiveReal;\r\n\r\n        block ReceiveBoolean \"Obsolete block to receive Boolean signal from bus\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          Modelica.Blocks.Interfaces.BooleanInput fromBus \"To be connected with signal on bus\" annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));\r\n          Modelica.Blocks.Interfaces.BooleanOutput y \"Output signal to be received from bus\" annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n        equation\r\n          y = fromBus;\r\n          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                    extent={{-100,40},{100,-40}},\r\n                    lineColor={255,0,255},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),Text(\r\n                    extent={{-100,30},{100,-30}},\r\n                    lineColor={255,0,255},\r\n                    textString=\"receive\"),Text(\r\n                    extent={{-150,90},{150,50}},\r\n                textString=\"%name\",\r\n                lineColor={0,0,255})}),    Documentation(info=\"<html>\r\n<p>\r\nObsolete block that was previously used to connect a Boolean signal\r\nin a connector to an input of a block. This block is only provided for\r\nbackward compatibility.\r\n</p>\r\n<p>\r\nIt is much more convenient and more powerful to use \\\"expandable connectors\\\"\r\nfor signal buses, see example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"),\r\n          obsolete = \"Obsolete block - use expandable connectors instead\");\r\n        end ReceiveBoolean;\r\n\r\n        block ReceiveInteger \"Obsolete block to receive Integer signal from bus\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          Modelica.Blocks.Interfaces.IntegerInput fromBus \"To be connected with signal on bus\" annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));\r\n          Modelica.Blocks.Interfaces.IntegerOutput y \"Output signal to be received from bus\" annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n        equation\r\n          y = fromBus;\r\n          annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                    extent={{-100,40},{100,-40}},\r\n                    lineColor={255,127,0},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),Text(\r\n                    extent={{-100,30},{100,-30}},\r\n                    lineColor={255,127,0},\r\n                    textString=\"receive\"),Text(\r\n                    extent={{-150,90},{150,50}},\r\n                textString=\"%name\",\r\n                lineColor={0,0,255})}),    Documentation(info=\"<html>\r\n<p>\r\nObsolete block that was previously used to connect an Integer signal\r\nin a connector to an input of a block. This block is only provided for\r\nbackward compatibility.\r\n</p>\r\n<p>\r\nIt is much more convenient and more powerful to use \\\"expandable connectors\\\"\r\nfor signal buses, see example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"),\r\n          obsolete = \"Obsolete block - use expandable connectors instead\");\r\n        end ReceiveInteger;\r\n      end Adaptors;\r\n    end Interfaces;\r\n\r\n    package Tables \"Library of blocks to interpolate in one and two-dimensional tables\"\r\n      extends Modelica.Icons.Package;\r\n      package Internal \"Internal external object definitions for table functions that should not be directly utilized by the user\"\r\n        extends Modelica.Icons.InternalPackage;\r\n        function readTimeTableData \"Read table data from text or MATLAB MAT-file\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Modelica.Blocks.Types.ExternalCombiTimeTable tableID \"External table object\";\r\n          input Boolean forceRead = false\r\n            \"= true: Force reading of table data; = false: Only read, if not yet read.\";\r\n          output Real readSuccess \"Table read success\";\r\n          input Boolean verboseRead = true\r\n            \"= true: Print info message; = false: No info message\";\r\n          external \"C\" readSuccess = ModelicaStandardTables_CombiTimeTable_read(tableID, forceRead, verboseRead)\r\n            annotation (IncludeDirectory=\"modelica://Modelica/Resources/C-Sources\", Include=\"#include \\\"ModelicaStandardTables.h\\\"\", Library={\"ModelicaStandardTables\", \"ModelicaIO\", \"ModelicaMatIO\", \"zlib\"});\r\n          annotation(__ModelicaAssociation_Impure=true);\r\n        end readTimeTableData;\r\n\r\n        function readTable1DData \"Read table data from text or MATLAB MAT-file\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Modelica.Blocks.Types.ExternalCombiTable1D tableID \"External table object\";\r\n          input Boolean forceRead = false\r\n            \"= true: Force reading of table data; = false: Only read, if not yet read.\";\r\n          input Boolean verboseRead = true\r\n            \"= true: Print info message; = false: No info message\";\r\n          output Real readSuccess \"Table read success\";\r\n          external \"C\" readSuccess = ModelicaStandardTables_CombiTable1D_read(tableID, forceRead, verboseRead)\r\n            annotation (IncludeDirectory=\"modelica://Modelica/Resources/C-Sources\", Include=\"#include \\\"ModelicaStandardTables.h\\\"\", Library={\"ModelicaStandardTables\", \"ModelicaIO\", \"ModelicaMatIO\", \"zlib\"});\r\n          annotation(__ModelicaAssociation_Impure=true);\r\n        end readTable1DData;\r\n\r\n        function readTable2DData \"Read table data from text or MATLAB MAT-file\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Modelica.Blocks.Types.ExternalCombiTable2D tableID \"External table object\";\r\n          input Boolean forceRead = false\r\n            \"= true: Force reading of table data; = false: Only read, if not yet read.\";\r\n          input Boolean verboseRead = true\r\n            \"= true: Print info message; = false: No info message\";\r\n          output Real readSuccess \"Table read success\";\r\n          external \"C\" readSuccess = ModelicaStandardTables_CombiTable2D_read(tableID, forceRead, verboseRead)\r\n            annotation (IncludeDirectory=\"modelica://Modelica/Resources/C-Sources\", Include=\"#include \\\"ModelicaStandardTables.h\\\"\", Library={\"ModelicaStandardTables\", \"ModelicaIO\", \"ModelicaMatIO\", \"zlib\"});\r\n          annotation(__ModelicaAssociation_Impure=true);\r\n        end readTable2DData;\r\n      end Internal;\r\n    end Tables;\r\n  end Blocks;\r\n\r\n  package Electrical \"Library of electrical models (analog, digital, machines, polyphase)\"\r\n    extends Modelica.Icons.Package;\r\n    package PowerConverters \"Rectifiers, Inverters and DC/DC converters\"\r\n      extends Modelica.Icons.Package;\r\n      package DCDC \"DC to DC converters\"\r\n        extends Modelica.Icons.Package;\r\n        package Control \"Control components for DC to DC converters\"\r\n          extends Modelica.Icons.Package;\r\n          block VoltageToDutyCycle \"Obsolete block - use Modelica.Electrical.PowerConverters.DCDC.Control.Voltage2DutyCycle instead\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            parameter Boolean useBipolarVoltage = true\r\n              \"Enables bipolar input voltage range\";\r\n            parameter Boolean useConstantMaximumVoltage=true\r\n              \"Enables constant maximum voltage\";\r\n            parameter SI.Voltage vMax=0\r\n              \"Maximum voltage range mapped to dutyCycle = 1\"\r\n              annotation(Dialog(enable=useConstantMaximumVoltage));\r\n            Modelica.Blocks.Interfaces.RealInput v \"Voltage\" annotation (Placement(\r\n                  transformation(extent={{-140,-20},{-100,20}}), iconTransformation(\r\n                    extent={{-140,-20},{-100,20}})));\r\n            Modelica.Blocks.Interfaces.RealOutput dutyCycle \"Duty cycle\" annotation (\r\n                Placement(transformation(extent={{100,-10},{120,10}}), iconTransformation(\r\n                    extent={{100,-10},{120,10}})));\r\n            Modelica.Blocks.Math.Division divisionUnipolar if not useBipolarVoltage\r\n              annotation (Placement(transformation(extent={{-40,20},{-20,40}})));\r\n            Modelica.Blocks.Math.Division divisionBipolar if useBipolarVoltage\r\n              annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));\r\n            Modelica.Blocks.Math.Add add(k1=0.5, k2=1) if useBipolarVoltage\r\n              annotation (Placement(transformation(extent={{0,-60},{20,-40}})));\r\n            Modelica.Blocks.Sources.Constant offset(final k=0.5) if useBipolarVoltage\r\n              \"Offset of 0.5 in case of bipolar operation\"\r\n              annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n            Modelica.Blocks.Interfaces.RealInput vMaxExt if not useConstantMaximumVoltage\r\n              \"External maximum voltage\" annotation (Placement(transformation(\r\n                  extent={{-20,-20},{20,20}},\r\n                  rotation=270,\r\n                  origin={0,120}), iconTransformation(\r\n                  extent={{-20,-20},{20,20}},\r\n                  rotation=270,\r\n                  origin={0,120})));\r\n            Modelica.Blocks.Sources.Constant vMaxConst(final k=vMax) if\r\n              useConstantMaximumVoltage \"Offset of 0.5 in case of bipolar operation\"\r\n              annotation (Placement(transformation(extent={{40,70},{20,90}})));\r\n          protected\r\n            Modelica.Blocks.Interfaces.RealInput vMaxInt \"External maximum voltage\"\r\n              annotation (Placement(transformation(\r\n                  extent={{-4,-4},{4,4}},\r\n                  rotation=180,\r\n                  origin={0,80})));\r\n          equation\r\n            connect(divisionBipolar.y, add.u1) annotation (Line(points={{-19,-30},{-10,-30},\r\n                    {-10,-44},{-2,-44}}, color={0,0,127}));\r\n            connect(offset.y, add.u2) annotation (Line(\r\n                points={{-19,-70},{-10,-70},{-10,-56},{-2,-56}},  color={0,0,127}));\r\n            connect(divisionUnipolar.y, dutyCycle) annotation (Line(points={{-19,30},{40,30},\r\n                    {40,0},{110,0}}, color={0,0,127}));\r\n            connect(add.y, dutyCycle) annotation (Line(\r\n                points={{21,-50},{40,-50},{40,0},{110,0}},  color={0,0,127}));\r\n            connect(v, divisionUnipolar.u1) annotation (Line(points={{-120,0},{-80,0},{-80,\r\n                    36},{-42,36}}, color={0,0,127}));\r\n            connect(v, divisionBipolar.u1) annotation (Line(points={{-120,0},{-80,0},{-80,\r\n                    -24},{-42,-24}}, color={0,0,127}));\r\n            connect(vMaxExt, vMaxInt)\r\n              annotation (Line(points={{0,120},{0,80}}, color={0,0,127}));\r\n            connect(vMaxInt, divisionUnipolar.u2) annotation (Line(points={{0,80},{-60,80},\r\n                    {-60,24},{-42,24}}, color={0,0,127}));\r\n            connect(vMaxInt, vMaxConst.y)\r\n              annotation (Line(points={{0,80},{19,80}}, color={0,0,127}));\r\n            connect(vMaxInt, divisionBipolar.u2) annotation (Line(points={{0,80},{-60,80},\r\n                    {-60,-36},{-42,-36}}, color={0,0,127}));\r\n            annotation (obsolete=\"Obsolete block - use Modelica.Electrical.PowerConverters.DCDC.Control.Voltage2DutyCycle instead\",\r\n              defaultComponentName=\"adaptor\", Icon(graphics={\r\n                  Rectangle(\r\n                    extent={{-100,100},{100,-100}},\r\n                    fillColor={255,255,255},\r\n                    fillPattern=FillPattern.Solid),\r\n                  Line(\r\n                    points={{0,-60},{60,60}},\r\n                    pattern=LinePattern.Dash),\r\n                  Line(\r\n                    points={{-60,-60},{60,60}}),\r\n                  Polygon(\r\n                    points={{-78,-60},{-76,-60},{62,-60},{62,-54},{82,-60},{62,-66},{62,-60},\r\n                        {62,-60},{-78,-60}},\r\n                    fillPattern=FillPattern.Solid),\r\n                  Polygon(\r\n                    points={{0,-80},{0,60},{-6,60},{0,80},{6,60},{0,60},{0,-80}},\r\n                    fillPattern=FillPattern.Solid), Text(extent={{\r\n                        -150,-120},{150,-160}}, textString = \"%name\", lineColor = {0, 0, 255})}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nThis model linearly transforms the input voltage signal into a duty cycle. For the unipolar case the input voltage range is between zero and <code>vMax</code>. In case of bipolar input the input voltage is in the range between <code>-vMax</code> and <code>vMax</code>.\r\n</p>\r\n<p>\r\nNote: This block is replaced by the improved <a href=\\\"modelica://Modelica.Electrical.PowerConverters.DCDC.Control.Voltage2DutyCycle\\\">Voltage2DutyCycle</a> block.\r\n</p>\r\n</html>\"));\r\n          end VoltageToDutyCycle;\r\n        end Control;\r\n      end DCDC;\r\n      annotation (Icon(graphics={\r\n            Line(\r\n              points={{-78,0},{80,0}},\r\n              color={95,95,95}),\r\n            Polygon(points={{36,0},{-34,50},{-34,-50},{36,0}}, lineColor={95,95,95}),\r\n            Line(\r\n              points={{36,50},{36,-52}},\r\n              color={95,95,95})}));\r\n    end PowerConverters;\r\n\r\n    package QuasiStationary \"Library for quasi-stationary electrical singlephase and multiphase AC simulation\"\r\n      extends Modelica.Icons.Package;\r\n      package SinglePhase \"Single phase AC library\"\r\n        extends Modelica.Icons.Package;\r\n        package Interfaces \"Interfaces\"\r\n          extends Modelica.Icons.InterfacesPackage;\r\n          partial model RelativeSensor \"Obsolete model - use Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.RelativeSensorElementary instead\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Icons.RoundSensor;\r\n            extends Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.OnePort;\r\n            Modelica.ComplexBlocks.Interfaces.ComplexOutput y annotation (Placement(\r\n                  transformation(\r\n                  origin={0,-110},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=270)));\r\n            annotation (obsolete=\"Obsolete block - use Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.RelativeSensorElementary instead\",\r\n                Icon(graphics={\r\n                  Line(points={{-70,0},{-94,0}}, color={85,170,255}),\r\n                  Line(points={{70,0},{94,0}}, color={85,170,255}),\r\n                  Text(\r\n                    extent={{-160,120},{160,80}},\r\n                    lineColor={0,0,255},\r\n                    textString=\"%name\"),\r\n                  Line(points={{0,-70},{0,-80},{0,-90},{0,-100}})}),\r\n                Documentation(info=\"<html>\r\n<p>\r\nThe relative sensor partial model relies on the\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.OnePort\\\">OnePort</a> to measure the complex voltage or current. Additionally this model contains a proper icon and a definition of the angular velocity.\r\n</p>\r\n\r\n<h4>See also</h4>\r\n\r\n<p>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.AbsoluteSensor\\\">AbsoluteSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Sensors.VoltageSensor\\\">VoltageSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Sensors.CurrentSensor\\\">CurrentSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Sensors.PowerSensor\\\">PowerSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.AbsoluteSensor\\\">Polyphase.Interfaces.AbsoluteSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.RelativeSensorElementary\\\">Polyphase.Interfaces.RelativeSensorElementary</a>\r\n</p>\r\n\r\n</html>\"));\r\n          end RelativeSensor;\r\n        end Interfaces;\r\n      end SinglePhase;\r\n\r\n      package MultiPhase \"Polyphase AC library\"\r\n        extends Modelica.Icons.Package;\r\n        package Interfaces \"Interfaces\"\r\n          extends Modelica.Icons.InterfacesPackage;\r\n          partial model RelativeSensor \"Obsolete model - use Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.RelativeSensorElementary instead\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Icons.RoundSensor;\r\n            extends Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.TwoPlug;\r\n            Modelica.ComplexBlocks.Interfaces.ComplexOutput y[m] annotation (\r\n                Placement(transformation(\r\n                  origin={0,-110},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=270)));\r\n            annotation (obsolete=\"Obsolete block - use Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.RelativeSensorElementary instead\",\r\n                Icon(graphics={\r\n                  Line(points={{-70,0},{-94,0}}, color={85,170,255}),\r\n                  Line(points={{70,0},{94,0}}, color={85,170,255}),\r\n                  Line(points={{0,-70},{0,-80},{0,-90},{0,-100}}, color={85,170,255}),\r\n                  Text(\r\n                    extent={{150,-100},{-150,-70}},\r\n                    textString=\"m=%m\"),\r\n                  Text(\r\n                    lineColor={0,0,255},\r\n                    extent={{-150,80},{150,120}},\r\n                    textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nThe relative sensor partial model relies on the\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.TwoPlug\\\">TwoPlug</a> to measure the complex voltages and currents. Additionally this model contains a proper icon and a definition of the angular velocity.\r\n</p>\r\n\r\n<h4>See also</h4>\r\n\r\n<p>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.AbsoluteSensor\\\">AbsoluteSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.AbsoluteSensor\\\">SinglePhase.Interfaces.AbsoluteSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.RelativeSensorElementary\\\">SinglePhase.Interfaces.RelativeSensorElementary</a>\r\n</p>\r\n\r\n</html>\"));\r\n\r\n          end RelativeSensor;\r\n        end Interfaces;\r\n      end MultiPhase;\r\n    end QuasiStationary;\r\n    annotation (Icon(graphics={\r\n      Rectangle(\r\n        origin={20.3125,82.8571},\r\n        extent={{-45.3125,-57.8571},{4.6875,-27.8571}}),\r\n      Line(\r\n        origin={7.0,50.0},\r\n        points={{18.0,-10.0},{53.0,-10.0},{53.0,-45.0}}),\r\n      Line(\r\n        origin={9.0,54.0},\r\n        points={{31.0,-49.0},{71.0,-49.0}}),\r\n      Line(\r\n        origin={8.0,48.0},\r\n        points={{32.0,-58.0},{72.0,-58.0}}),\r\n      Line(\r\n        origin={6.2593,48.0},\r\n        points={{53.7407,-58.0},{53.7407,-93.0},{-66.2593,-93.0},{-66.2593,-58.0}}),\r\n      Line(\r\n        origin={-3.0,45.0},\r\n        points={{-72.0,-55.0},{-42.0,-55.0}}),\r\n      Line(\r\n        origin={-2.0,55.0},\r\n        points={{-83.0,-50.0},{-33.0,-50.0}}),\r\n      Line(\r\n        origin={1.0,50.0},\r\n        points={{-61.0,-45.0},{-61.0,-10.0},{-26.0,-10.0}})}));\r\n  end Electrical;\r\n\r\n  package Mechanics \"Library of 1-dim. and 3-dim. mechanical components (multi-body, rotational, translational)\"\r\n    extends Modelica.Icons.Package;\r\n    package MultiBody \"Library to model 3-dimensional mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Joints \"Components that constrain the motion between two frames\"\r\n        extends Modelica.Icons.Package;\r\n        model Prismatic \"Prismatic joint (1 translational degree-of-freedom, 2 potential states, optional axis flange, optional distance offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          extends Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint;\r\n\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. translational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{90,50},{70,70}})));\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. translational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-30,50},{-50,70}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true \"= true, if animation shall be enabled\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={1,0,0}\r\n            \"Axis of translation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Position s_offset=0\r\n            \"Relative distance offset (distance between frame_a and frame_b = s_offset + s)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis boxWidthDirection={0,1,0}\r\n            \"Vector in width direction of box, resolved in frame_a\"\r\n            annotation (Evaluate=true, Dialog(tab=\"Animation\", group=\r\n                  \"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxWidth=world.defaultJointWidth\r\n            \"Width of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxHeight=boxWidth \"Height of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color boxColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\";\r\n\r\n          SI.Position s(start=0, final stateSelect=stateSelect)\r\n            \"Relative distance between frame_a and frame_b\"\r\n            annotation (unassignedMessage=\"\r\nThe relative distance s of a prismatic joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the prismatic joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n\r\n          SI.Velocity v(start=0,final stateSelect=stateSelect)\r\n            \"First derivative of s (relative velocity)\";\r\n          SI.Acceleration a(start=0) \"Second derivative of s (relative acceleration)\";\r\n          SI.Force f \"Actuation force in direction of joint axis\";\r\n\r\n        protected\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape box(\r\n            shapeType=\"box\",\r\n            color=boxColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=if noEvent(abs(s + s_offset) > 1.e-6) then s + s_offset else 1.e-6,\r\n            width=boxWidth,\r\n            height=boxHeight,\r\n            lengthDirection=e,\r\n            widthDirection=boxWidthDirection,\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalAxis(f = f)\r\n            annotation (Placement(transformation(extent={{70,50},{90,30}})));\r\n          Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(f_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,30},{60,50}})));\r\n        equation\r\n          v = der(s);\r\n          a = der(v);\r\n\r\n          // relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s));\r\n          frame_b.R = frame_a.R;\r\n\r\n          // Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f;\r\n          zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f);\r\n\r\n          // d'Alemberts principle\r\n          f = -e*frame_b.f;\r\n\r\n          // Connection to internal connectors\r\n          s = internalAxis.s;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}));\r\n          connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Prismatic instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-50},{-30,41}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-100,40},{-30,50}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,-30},{100,20}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,20},{100,30}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Line(points={{-30,-50},{-30,50}}),\r\n                Line(points={{100,-30},{100,21}}),\r\n                Text(\r\n                  extent={{60,12},{96,-13}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Text(\r\n                  extent={{-95,13},{-60,-9}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-135},{150,-95}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  extent={{-150,-90},{150,-60}},\r\n                  textString=\"n=%n\"),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{90,30},{100,70}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,60},{150,100}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b is translated along axis n which is fixed in frame_a.\r\nThe two frames coincide when the relative distance \\\"s = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Translational\\\">Modelica.Mechanics.Translational</a>\r\nlibrary.\r\n\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the relative distance \\\"s\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the relative distance and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a prismatic\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {1,1,0}).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Prismatic.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Prismatic;\r\n\r\n        model Revolute \"Revolute joint (1 rotational degree-of-freedom, 2 potential states, optional axis flange, optional angle offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. rotational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{10,90},{-10,110}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. rotational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-70,90},{-50,110}})));\r\n\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{-116,-16},{-84,16}})));\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{84,-16},{116,16}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true\r\n            \"= true, if animation shall be enabled (show axis as cylinder)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={0,0,1}\r\n            \"Axis of rotation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Angle phi_offset=0\r\n            \"Relative angle offset (angle = phi_offset + phi)\";\r\n          parameter SI.Distance cylinderLength=world.defaultJointLength\r\n            \"Length of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance cylinderDiameter=world.defaultJointWidth\r\n            \"Diameter of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color cylinderColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             annotation (unassignedMessage=\"\r\nThe rotation angle phi of a revolute joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the revolute joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\";\r\n          SI.AngularAcceleration a(start=0)\r\n            \"Second derivative of angle phi (relative angular acceleration)\";\r\n          SI.Torque tau \"Driving torque in direction of axis of rotation\";\r\n          SI.Angle angle \"= phi_offset + phi\";\r\n\r\n        protected\r\n          outer Modelica.Mechanics.MultiBody.World world;\r\n          parameter Real e[3](each final unit=\"1\")=Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";\r\n          Modelica.Mechanics.MultiBody.Frames.Orientation R_rel\r\n            \"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\";\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape cylinder(\r\n            shapeType=\"cylinder\",\r\n            color=cylinderColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=cylinderLength,\r\n            width=cylinderDiameter,\r\n            height=cylinderDiameter,\r\n            lengthDirection=e,\r\n            widthDirection={0,1,0},\r\n            r_shape=-e*(cylinderLength/2),\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n\r\n        protected\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed\r\n            \"support flange is fixed to ground\"\r\n            annotation (Placement(transformation(extent={{-70,70},{-50,90}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalAxis(tau=tau)\r\n            annotation (Placement(transformation(extent={{-10,90},{10,70}})));\r\n          Modelica.Mechanics.Rotational.Sources.ConstantTorque constantTorque(tau_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,70},{20,90}})));\r\n        equation\r\n          Connections.branch(frame_a.R, frame_b.R);\r\n\r\n          assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\");\r\n          assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\");\r\n\r\n          angle = phi_offset + phi;\r\n          w = der(phi);\r\n          a = der(w);\r\n\r\n          // relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0;\r\n\r\n          if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w);\r\n            frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel);\r\n            frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f);\r\n            frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t);\r\n          else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w);\r\n            frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel);\r\n            frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f);\r\n            frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t);\r\n          end if;\r\n\r\n          // d'Alemberts principle\r\n          tau = -frame_b.t*e;\r\n\r\n          // Connection to internal connectors\r\n          phi = internalAxis.phi;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}));\r\n          connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Revolute instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-60},{-30,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(\r\n                  extent={{30,-60},{100,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(extent={{-100,60},{-30,-60}}, lineColor={64,64,64}, radius=10),\r\n                Rectangle(extent={{30,60},{100,-60}}, lineColor={64,64,64}, radius=10),\r\n                Text(\r\n                  extent={{-90,14},{-54,-11}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  extent={{51,11},{87,-14}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,80},{-20,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,80},{20,60}}),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{-10,100},{10,50}},\r\n                  fillPattern=FillPattern.VerticalCylinder,\r\n                  fillColor={192,192,192}),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{-10,30},{10,30},{30,50},{-30,50},{-10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Rectangle(\r\n                  extent={{-30,11},{30,-10}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{10,30},{30,50},{30,-50},{10,-30},{10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Text(\r\n                  extent={{-150,-110},{150,-80}},\r\n                  textString=\"n=%n\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-155},{150,-115}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,70},{-60,70},{-60,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,70},{50,70},{50,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-90,100},{-30,100}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-30,100},{-50,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-49,100},{-70,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-70,100},{-90,80}}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,70},{150,110}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b rotates around axis n which is fixed in frame_a.\r\nThe two frames coincide when the rotation angle \\\"phi = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Rotational\\\">Modelica.Mechanics.Rotational</a>\r\nlibrary.\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the rotation angle \\\"phi\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the joint angle and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIf a <strong>planar loop</strong> is present, e.g., consisting of 4 revolute joints\r\nwhere the joint axes are all parallel to each other, then there is no\r\nlonger a unique mathematical solution and the symbolic algorithms will\r\nfail. Usually, an error message will be printed pointing out this\r\nsituation. In this case, one revolute joint of the loop has to be replaced\r\nby a Joints.RevolutePlanarLoopConstraint joint. The\r\neffect is that from the 5 constraints of a usual revolute joint,\r\n3 constraints are removed and replaced by appropriate known\r\nvariables (e.g., the force in the direction of the axis of rotation is\r\ntreated as known with value equal to zero; for standard revolute joints,\r\nthis force is an unknown quantity).\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a revolute\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {0,0,1}, phi.start = 45<sup>o</sup>).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Revolute.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Revolute;\r\n      end Joints;\r\n\r\n      package Visualizers \"3-dimensional visual objects used for animation\"\r\n        extends Modelica.Icons.Package;\r\n        model Ground \"Visualizing the ground (box in z=0)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n           parameter Boolean animation=true\r\n           \"= true, if animation of ground shall be enabled\";\r\n           parameter SI.Position length = 10\r\n           \"Length and width of box (center is at x=y=0)\" annotation (Dialog(enable=animation));\r\n           parameter SI.Position height = 0.02\r\n           \"Height of box (upper surface is at z=0, lower surface is at z=-height)\" annotation (Dialog(enable=animation));\r\n           parameter Modelica.Mechanics.MultiBody.Types.Color groundColor={0,255,0}\r\n           \"Color of box\" annotation (Dialog(colorSelector=true, enable=animation));\r\n\r\n           Modelica.Mechanics.MultiBody.Visualizers.FixedShape ground(\r\n             lengthDirection={1,0,0},\r\n             widthDirection={0,1,0},\r\n             animation=animation,\r\n             r_shape={-length/2,0,-height},\r\n             length=length,\r\n             height=height,\r\n             color=groundColor,\r\n             width=length)\r\n             annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n           Modelica.Mechanics.MultiBody.Parts.Fixed fixed\r\n             annotation (Placement(transformation(extent={{-60,0},{-40,20}})));\r\n        equation\r\n\r\n           connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5));\r\n           annotation (\r\n             obsolete = \"Obsolete model - use ground visualization feature in Modelica.Mechanics.MultiBody.World, or use model Modelica.Mechanics.MultiBody.Visualizers.Rectangle instead\",\r\n             Icon(\r\n               coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}),\r\n               graphics = {\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {126, 181, 78}, fillPattern = FillPattern.Solid, points = {{-100, -30}, {20, -90}, {100, 0}, {-10, 40}}),\r\n                 Text(lineColor = {64, 64, 64}, extent = {{20, 70}, {60, 100}}, textString = \"z\", horizontalAlignment = TextAlignment.Left),\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {14, 111, 1}, fillPattern = FillPattern.Solid, points = {{100, -10}, {20, -100}, {20, -90}, {100, 0}}),\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {14, 111, 1}, fillPattern = FillPattern.Solid, points = {{-100, -40}, {20, -100}, {20, -90}, {-100, -30}}), Line(origin = {6, -8}, points={{-6,-10},{-6,108}}),\r\n                 Polygon(origin = {6, 0}, points={{-6,102},{-14,72},{2,72},{-6,102}}, fillPattern=FillPattern.Solid),\r\n                 Text(lineColor = {0,0,255}, extent = {{-150, -145}, {150, -105}}, textString = \"%name\")}),\r\n             Documentation(info = \"<html>\r\n<p>\r\nThis shape visualizes the x-y plane by a box.\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Visualizers/Ground.png\\\">\r\n</blockquote>\r\n</html>\"));\r\n        end Ground;\r\n      end Visualizers;\r\n      package Types \"Constants and types with choices, especially to build menus\"\r\n        extends Modelica.Icons.TypesPackage;\r\n        type Init = enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        annotation (\r\n          obsolete = \"Obsolete type - use start/fixed attributes instead\",\r\n          Documentation(info=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th><strong>Types.Init.</strong></th><th><strong>Meaning</strong></th></tr>\r\n<tr><td>Free</td>\r\n    <td>No initialization</td></tr>\r\n\r\n<tr><td>PositionVelocity</td>\r\n    <td>Initialize generalized position and velocity variables</td></tr>\r\n\r\n<tr><td>SteadyState</td>\r\n    <td>Initialize in steady state (velocity and acceleration are zero)</td></tr>\r\n\r\n<tr><td>Position </td>\r\n    <td>Initialize only generalized position variable(s)</td></tr>\r\n\r\n<tr><td>Velocity</td>\r\n    <td>Initialize only generalized velocity variable(s)</td></tr>\r\n\r\n<tr><td>VelocityAcceleration</td>\r\n    <td>Initialize generalized velocity and acceleration variables</td></tr>\r\n\r\n<tr><td>PositionVelocityAcceleration</td>\r\n    <td>Initialize generalized position, velocity and acceleration variables</td></tr>\r\n</table>\r\n</html>\"));\r\n      end Types;\r\n    end MultiBody;\r\n\r\n    package Rotational \"Library to model 1-dimensional, rotational mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Interfaces \"Connectors and partial models for 1D rotational mechanical components\"\r\n        extends Modelica.Icons.Package;\r\n        partial model PartialElementaryOneFlangeAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryOneFlangeAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange \"Flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        protected\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalSupport(tau=-flange.tau)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-96},{30,-76}})));\r\n        equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}));\r\n          connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-86}}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Rotational.Interfaces.PartialElementaryOneFlangeAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. rotational component with one flange and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n</html>\"),\r\n            Diagram(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={Text(\r\n                      extent={{25,-97},{65,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\"),Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryOneFlangeAndSupport;\r\n\r\n        partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a \"Flange of left shaft\" annotation (Placement(\r\n                transformation(extent={{-110,-10},{-90,10}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b \"Flange of right shaft\" annotation (Placement(\r\n                transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        protected\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalSupport(\r\n            tau=-flange_a.tau - flange_b.tau)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}));\r\n          connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-87}}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Rotational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. rotational component with two flanges and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n</html>\"),\r\n            Diagram(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\"),Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport;\r\n      end Interfaces;\r\n    end Rotational;\r\n\r\n    package Translational \"Library to model 1-dimensional, translational mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Interfaces \"Interfaces for 1-dim. translational mechanical components\"\r\n        extends Modelica.Icons.Package;\r\n        partial model PartialElementaryOneFlangeAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryOneFlangeAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          SI.Length s\r\n            \"Distance between flange and support (= flange.s - support.s)\";\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b flange \"Flange of component\" annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\" annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s = flange.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryOneFlangeAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n    <p>\r\nThis is a 1-dim. translational component with one flange and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryOneFlangeAndSupport;\r\n\r\n        partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges;\r\n          SI.Length s_a \"Distance between left flange and support\";\r\n          SI.Length s_b \"Distance between right flange and support\";\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange_a.f - flange_b.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s_a = flange_a.s - internalSupport.s;\r\n          s_b = flange_b.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. translational component with two flanges and an additional support.\r\nIt is used e.g., to build up elementary ideal gear components. The component\r\ncontains the force balance, i.e., the sum of the forces of the connectors\r\nis zero (therefore, components that are based on PartialGear cannot have\r\na mass). The support connector needs to be connected\r\nto avoid the unphysical behavior that the\r\nsupport force is required to be zero (= the default value, if the\r\nconnector is not connected).\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport;\r\n      end Interfaces;\r\n    end Translational;\r\n  end Mechanics;\r\n\r\n  package Media \"Library of media property models\"\r\n    extends Modelica.Icons.Package;\r\n    package Common \"Data structures and fundamental functions for fluid properties\"\r\n      extends Modelica.Icons.Package;\r\n      package OneNonLinearEquation \"Determine solution of a non-linear algebraic equation in one unknown without derivatives in a reliable and efficient way\"\r\n        extends Modelica.Icons.Package;\r\n        extends Modelica.Icons.ObsoleteModel;\r\n\r\n        replaceable record f_nonlinear_Data\r\n          \"Data specific for function f_nonlinear\"\r\n          extends Modelica.Icons.Record;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n        end f_nonlinear_Data;\r\n\r\n        replaceable partial function f_nonlinear\r\n          \"Non-linear algebraic equation in one unknown: y = f_nonlinear(x,p,X)\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Real x \"Independent variable of function\";\r\n          input Real p=0.0 \"Disregarded variables (here always used for pressure)\";\r\n          input Real[:] X=fill(0, 0)\r\n            \"Disregarded variables (her always used for composition)\";\r\n          input f_nonlinear_Data f_nonlinear_data\r\n            \"Additional data for the function\";\r\n          output Real y \"= f_nonlinear(x)\";\r\n          // annotation(derivative(zeroDerivative=y)); // this must hold for all replaced functions\r\n        end f_nonlinear;\r\n\r\n        replaceable function solve\r\n          \"Solve f_nonlinear(x_zero)=y_zero; f_nonlinear(x_min) - y_zero and f_nonlinear(x_max)-y_zero must have different sign\"\r\n          import Modelica.Utilities.Streams.error;\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Real y_zero\r\n            \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";\r\n          input Real x_min \"Minimum value of x\";\r\n          input Real x_max \"Maximum value of x\";\r\n          input Real pressure=0.0\r\n            \"Disregarded variables (here always used for pressure)\";\r\n          input Real[:] X=fill(0, 0)\r\n            \"Disregarded variables (here always used for composition)\";\r\n          input f_nonlinear_Data f_nonlinear_data\r\n            \"Additional data for function f_nonlinear\";\r\n          input Real x_tol=100*Modelica.Constants.eps\r\n            \"Relative tolerance of the result\";\r\n          output Real x_zero \"f_nonlinear(x_zero) = y_zero\";\r\n        protected\r\n          constant Real eps=Modelica.Constants.eps \"Machine epsilon\";\r\n          constant Real x_eps=1e-10\r\n            \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";\r\n          Real x_min2=x_min - x_eps;\r\n          Real x_max2=x_max + x_eps;\r\n          Real a=x_min2 \"Current best minimum interval value\";\r\n          Real b=x_max2 \"Current best maximum interval value\";\r\n          Real c \"Intermediate point a <= c <= b\";\r\n          Real d;\r\n          Real e \"b - a\";\r\n          Real m;\r\n          Real s;\r\n          Real p;\r\n          Real q;\r\n          Real r;\r\n          Real tol;\r\n          Real fa \"= f_nonlinear(a) - y_zero\";\r\n          Real fb \"= f_nonlinear(b) - y_zero\";\r\n          Real fc;\r\n          Boolean found=false;\r\n        algorithm\r\n          // Check that f(x_min) and f(x_max) have different sign\r\n          fa := f_nonlinear(\r\n                  x_min2,\r\n                  pressure,\r\n                  X,\r\n                  f_nonlinear_data) - y_zero;\r\n          fb := f_nonlinear(\r\n                  x_max2,\r\n                  pressure,\r\n                  X,\r\n                  f_nonlinear_data) - y_zero;\r\n          fc := fb;\r\n          if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments x_min and x_max to OneNonLinearEquation.solve(..)\\n\"\r\n               + \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  x_min  = \" + String(x_min2) + \"\\n\" + \"  x_max  = \" + String(x_max2)\r\n               + \"\\n\" + \"  y_zero = \" + String(y_zero) + \"\\n\" +\r\n              \"  fa = f(x_min) - y_zero = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(x_max) - y_zero = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\");\r\n          end if;\r\n\r\n          // Initialize variables\r\n          c := a;\r\n          fc := fa;\r\n          e := b - a;\r\n          d := e;\r\n\r\n          // Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b;\r\n              b := c;\r\n              c := a;\r\n              fa := fb;\r\n              fb := fc;\r\n              fc := fa;\r\n            end if;\r\n\r\n            tol := 2*eps*abs(b) + x_tol;\r\n            m := (c - b)/2;\r\n\r\n            if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true;\r\n              x_zero := b;\r\n            else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m;\r\n                d := e;\r\n              else\r\n                s := fb/fa;\r\n                if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s;\r\n                  q := 1 - s;\r\n                else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc;\r\n                  r := fb/fc;\r\n                  p := s*(2*m*q*(q - r) - (b - a)*(r - 1));\r\n                  q := (q - 1)*(r - 1)*(s - 1);\r\n                end if;\r\n\r\n                if p > 0 then\r\n                  q := -q;\r\n                else\r\n                  p := -p;\r\n                end if;\r\n\r\n                s := e;\r\n                e := d;\r\n                if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q;\r\n                else\r\n                  // use bi-section\r\n                  e := m;\r\n                  d := e;\r\n                end if;\r\n              end if;\r\n\r\n              // Best guess value is defined as \"a\"\r\n              a := b;\r\n              fa := fb;\r\n              b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol);\r\n              fb := f_nonlinear(\r\n                      b,\r\n                      pressure,\r\n                      X,\r\n                      f_nonlinear_data) - y_zero;\r\n\r\n              if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a;\r\n                fc := fa;\r\n                e := b - a;\r\n                d := e;\r\n              end if;\r\n            end if;\r\n          end while;\r\n          annotation (obsolete = \"Obsolete function - use Modelica.Math.Nonlinear.solveOneNonlinearEquation instead\");\r\n        end solve;\r\n\r\n        annotation (\r\n          obsolete = \"Obsolete package - use Modelica.Math.Nonlinear.solveOneNonlinearEquation instead\",\r\n          Documentation(info=\"<html>\r\n<p>\r\nThis package was used in Modelica.Media of MSL &le; 3.2.3 and was replaced by\r\nthe function <a href=\\\"modelica://Modelica.Math.Nonlinear.solveOneNonlinearEquation\\\">\r\nModelica.Math.Nonlinear.solveOneNonlinearEquation</a>.\r\n</p>\r\n\r\n<p>\r\nThis library determines the solution of one non-linear algebraic equation \\\"y=f(x)\\\"\r\nin one unknown \\\"x\\\" in a reliable way. As input, the desired value y of the\r\nnon-linear function has to be given, as well as an interval x_min, x_max that\r\ncontains the solution, i.e., \\\"f(x_min) - y\\\" and \\\"f(x_max) - y\\\" must\r\nhave a different sign. If possible, a smaller interval is computed by\r\ninverse quadratic interpolation (interpolating with a quadratic polynomial\r\nthrough the last 3 points and computing the zero). If this fails,\r\nbisection is used, which always reduces the interval by a factor of 2.\r\nThe inverse quadratic interpolation method has superlinear convergence.\r\nThis is roughly the same convergence rate as a globally convergent Newton\r\nmethod, but without the need to compute derivatives of the non-linear\r\nfunction. The solver function is a direct mapping of the Algol 60 procedure\r\n\\\"zero\\\" to Modelica, from:\r\n</p>\r\n\r\n<dl>\r\n<dt> Brent R.P.:</dt>\r\n<dd> <strong>Algorithms for Minimization without derivatives</strong>.\r\n     Prentice Hall, 1973, pp. 58-59.</dd>\r\n</dl>\r\n\r\n<p>\r\nDue to limitations of the\r\nModelica language &le; 3.1 (not possible to pass a function reference to a function),\r\nthe construction to use this solver on a user-defined function was a bit\r\ncomplicated (this method is from Hans Olsson, Dassault Syst&egrave;mes AB). A user has to\r\nprovide a package in the following way:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>package</strong> MyNonLinearSolver\r\n  <strong>extends</strong> OneNonLinearEquation;\r\n\r\n  <strong>redeclare record extends</strong> Data\r\n    // Define data to be passed to user function\r\n    ...\r\n  <strong>end</strong> Data;\r\n\r\n  <strong>redeclare function extends</strong> f_nonlinear\r\n  <strong>algorithm</strong>\r\n     // Compute the non-linear equation: y = f(x, Data)\r\n  <strong>end</strong> f_nonlinear;\r\n\r\n  // Dummy definition that had to be present for older version of Dymola\r\n  <strong>redeclare function extends</strong> solve\r\n  <strong>end</strong> solve;\r\n<strong>end</strong> MyNonLinearSolver;\r\n\r\nx_zero = MyNonLinearSolver.solve(y_zero, x_min, x_max, data=data);\r\n</pre></blockquote>\r\n</html>\"));\r\n      end OneNonLinearEquation;\r\n    end Common;\r\n  end Media;\r\n\r\n  package Math \"Library of mathematical functions (e.g., sin, cos) and of functions operating on vectors and matrices\"\r\n    extends Modelica.Icons.Package;\r\n    package Vectors \"Library of functions operating on vectors\"\r\n      extends Modelica.Icons.Package;\r\n      package Utilities \"Utility functions that should not be directly utilized by the user\"\r\n        extends Modelica.Icons.UtilitiesPackage;\r\n        function householderVector \"Calculate a normalized householder vector to reflect vector a onto vector b\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors.length;\r\n          import Modelica.Math.Vectors.norm;\r\n\r\n          input Real a[:] \"Real vector to be reflected\";\r\n          input Real b[size(a, 1)] \"Real vector b vector a is mapped onto\";\r\n          output Real u[size(a, 1)] \"Householder vector to map a onto b\";\r\n        protected\r\n          Real norm_a=norm(a, 2);\r\n          Real norm_b=norm(b, 2);\r\n          Real alpha;\r\n\r\n        algorithm\r\n          assert(norm_b > 0,\r\n            \"Vector b in function householderVector is zero vector, but at least one element should be different from zero\");\r\n          assert(norm_a > 0,\r\n            \"Vector a in function householderVector is zero vector, but at least one element should be different from zero\");\r\n          alpha := if norm(a + norm_a/norm_b*b, 2) > norm(a - norm_a/norm_b*b, 2)\r\n             then norm_a/norm_b else -norm_a/norm_b;\r\n          u := (a + alpha*b)/length(a + alpha*b);\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Vectors.householderVector instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.Utilities.<strong>householderVector</strong>(a,b);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThe function call \\\"<code>householderVector(a, b)</code>\\\" returns the normalized Householder vector\r\n<strong>u</strong> for Householder reflection of input vector <strong>a</strong> onto vector <strong>b</strong>, i.e., Householder vector <strong>u</strong> is the normal\r\nvector of the reflection plane. Algebraically, the reflection is performed by transformation matrix <strong>Q</strong>\r\n</p>\r\n<blockquote>\r\n<p>\r\n<strong>Q</strong> = <strong>I</strong> - 2*<strong>u</strong>*<strong>u</strong>',\r\n</p>\r\n</blockquote>\r\ni.e., vector <strong>a</strong> is mapped to\r\n<blockquote>\r\n<p>\r\n<strong>a</strong> -> <strong>Q</strong>*<strong>a</strong>=c*<strong>b</strong>\r\n</p>\r\n</blockquote>\r\nwith scalar c, |c| = ||<strong>a</strong>|| / ||<strong>b</strong>||. <strong>Q</strong>*<strong>a</strong> is the reflection of <strong>a</strong> about the hyperplane orthogonal to <strong>u</strong>.\r\n<strong>Q</strong> is an orthogonal matrix, i.e.\r\n<blockquote>\r\n<p>\r\n    <strong>Q</strong> = inv(<strong>Q</strong>) = <strong>Q</strong>'\r\n</p>\r\n</blockquote>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n  a = {2, -4, -2, -1};\r\n  b = {1, 0, 0, 0};\r\n\r\n  u = <strong>householderVector</strong>(a,b);    // {0.837, -0.478, -0.239, -0.119}\r\n                               // Computation (identity(4) - 2*matrix(u)*transpose(matrix(u)))*a results in\r\n                               // {-5, 0, 0, 0} = -5*b\r\n</pre></blockquote>\r\n<h4>See also</h4>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderReflection\\\">Vectors.Utilities.householderReflection</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderReflection\\\">Matrices.Utilities.householderReflection</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation\\\">Matrices.Utilities.householderSimilarityTransformation</a>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n\r\n</html>\"));\r\n        end householderVector;\r\n\r\n        function householderReflection \"Reflect a vector a on a plane with orthogonal vector u\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors;\r\n\r\n          input Real a[:] \"Real vector a to be reflected\";\r\n          input Real u[size(a, 1)] \"Householder vector\";\r\n          output Real ra[size(u, 1)] \"Reflection of a\";\r\n\r\n        protected\r\n          Real norm_a=Vectors.length(a);\r\n          Real h=2*u*a;\r\n\r\n        algorithm\r\n          ra := a - h*u;\r\n\r\n          // Values close to zero are set to zero.\r\n          for i in 1:size(ra, 1) loop\r\n            ra[i] := if abs(ra[i]) >= norm_a*1e-12 then ra[i] else 0;\r\n          end for;\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Vectors.householderReflexion instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nVectors.Utilities.<strong>householderReflection</strong>(a,u);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nFunction \\\"<code>householderReflection(a, u)</code>\\\" performs the reflection of vector\r\n<strong>a</strong> about a plane orthogonal to vector <strong>u</strong> (Householder vector).\r\nAlgebraically the operation is defined by\r\n</p>\r\n<blockquote>\r\n<p>\r\n<strong>b</strong>=<strong>Q</strong>*<strong>a</strong>\r\n</p>\r\n</blockquote>\r\nwith\r\n<blockquote>\r\n<p>\r\n   <strong>Q</strong> = <strong>I</strong> - 2*<strong>u</strong>*<strong>u</strong>',\r\n</p>\r\n</blockquote>\r\nwhere <strong>Q</strong> is an orthogonal matrix, i.e.\r\n<blockquote>\r\n<p>\r\n    <strong>Q</strong> = inv(<strong>Q</strong>) = <strong>Q</strong>'\r\n</p>\r\n</blockquote>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\na = {2, -4, -2, -1};\r\nu = {0.837, -0.478, -0.239, -0.119};\r\n\r\n<strong>householderReflection</strong>(a,u);    //  = {-5.0, -0.001, -0.0005, -0.0044}\r\n</pre></blockquote>\r\n<h4>See also</h4>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderVector\\\">Utilities.householderVector</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderReflection\\\">Matrices.Utilities.householderReflection</a><br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation\\\">Matrices.Utilities.householderSimilarityTransformation</a>\r\n\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n</html>\"));\r\n        end householderReflection;\r\n      end Utilities;\r\n    end Vectors;\r\n\r\n    package Matrices \"Library of functions operating on matrices\"\r\n      extends Modelica.Icons.Package;\r\n      package LAPACK \"Interface to LAPACK library (should usually not directly be used but only indirectly via Modelica.Math.Matrices)\"\r\n        extends Modelica.Icons.FunctionsPackage;\r\n        function dgegv \"Obsolete function. Use Modelica.Math.Matrices.LAPACK.dggev instead\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Real A[:, size(A, 1)];\r\n          input Real B[size(A, 1), size(A, 1)];\r\n          output Real alphaReal[size(A, 1)]\r\n            \"Real part of alpha (eigenvalue=(alphaReal+i*alphaImag)/beta)\";\r\n          output Real alphaImag[size(A, 1)] \"Imaginary part of alpha\";\r\n          output Real beta[size(A, 1)] \"Denominator of eigenvalue\";\r\n          output Integer info;\r\n        protected\r\n          Integer n=size(A, 1);\r\n          Integer lwork=12*n;\r\n          Integer ldvl=1;\r\n          Integer ldvr=1;\r\n          Real Awork[size(A, 1), size(A, 1)]=A;\r\n          Real Bwork[size(A, 1), size(A, 1)]=B;\r\n          Real work[12*size(A, 1)];\r\n          Real dummy1[1, 1];\r\n          Real dummy2[1, 1];\r\n\r\n        external\"FORTRAN 77\" dgegv(\r\n                  \"N\",\r\n                  \"N\",\r\n                  n,\r\n                  Awork,\r\n                  n,\r\n                  Bwork,\r\n                  n,\r\n                  alphaReal,\r\n                  alphaImag,\r\n                  beta,\r\n                  dummy1,\r\n                  ldvl,\r\n                  dummy2,\r\n                  ldvr,\r\n                  work,\r\n                  lwork,\r\n                  info) annotation (Library=\"lapack\");\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica.Math.Matrices.LAPACK.dggev instead\",\r\n            Documentation(info=\"Lapack documentation\r\n    Purpose\r\n    =======\r\n\r\n    This routine is deprecated and has been replaced by routine DGGEV.\r\n\r\n    DGEGV computes the eigenvalues and, optionally, the left and/or right\r\n    eigenvectors of a real matrix pair (A,B).\r\n    Given two square matrices A and B,\r\n    the generalized nonsymmetric eigenvalue problem (GNEP) is to find the\r\n    eigenvalues lambda and corresponding (non-zero) eigenvectors x such\r\n    that\r\n\r\n       A*x = lambda*B*x.\r\n\r\n    An alternate form is to find the eigenvalues mu and corresponding\r\n    eigenvectors y such that\r\n\r\n       mu*A*y = B*y.\r\n\r\n    These two forms are equivalent with mu = 1/lambda and x = y if\r\n    neither lambda nor mu is zero.  In order to deal with the case that\r\n    lambda or mu is zero or small, two values alpha and beta are returned\r\n    for each eigenvalue, such that lambda = alpha/beta and\r\n    mu = beta/alpha.\r\n\r\n    The vectors x and y in the above equations are right eigenvectors of\r\n    the matrix pair (A,B).  Vectors u and v satisfying\r\n\r\n       u**H*A = lambda*u**H*B  or  mu*v**H*A = v**H*B\r\n\r\n    are left eigenvectors of (A,B).\r\n\r\n    Note: this routine performs \\\"full balancing\\\" on A and B -- see\r\n    \\\"Further Details\\\", below.\r\n\r\n    Arguments\r\n    =========\r\n\r\n    JOBVL   (input) CHARACTER*1\r\n            = 'N':  do not compute the left generalized eigenvectors;\r\n            = 'V':  compute the left generalized eigenvectors (returned\r\n                    in VL).\r\n\r\n    JOBVR   (input) CHARACTER*1\r\n            = 'N':  do not compute the right generalized eigenvectors;\r\n            = 'V':  compute the right generalized eigenvectors (returned\r\n                    in VR).\r\n\r\n    N       (input) INTEGER\r\n            The order of the matrices A, B, VL, and VR.  N >= 0.\r\n\r\n    A       (input/output) DOUBLE PRECISION array, dimension (LDA, N)\r\n            On entry, the matrix A.\r\n            If JOBVL = 'V' or JOBVR = 'V', then on exit A\r\n            contains the real Schur form of A from the generalized Schur\r\n            factorization of the pair (A,B) after balancing.\r\n            If no eigenvectors were computed, then only the diagonal\r\n            blocks from the Schur form will be correct.  See DGGHRD and\r\n            DHGEQZ for details.\r\n\r\n    LDA     (input) INTEGER\r\n            The leading dimension of A.  LDA >= max(1,N).\r\n\r\n    B       (input/output) DOUBLE PRECISION array, dimension (LDB, N)\r\n            On entry, the matrix B.\r\n            If JOBVL = 'V' or JOBVR = 'V', then on exit B contains the\r\n            upper triangular matrix obtained from B in the generalized\r\n            Schur factorization of the pair (A,B) after balancing.\r\n            If no eigenvectors were computed, then only those elements of\r\n            B corresponding to the diagonal blocks from the Schur form of\r\n            A will be correct.  See DGGHRD and DHGEQZ for details.\r\n\r\n    LDB     (input) INTEGER\r\n            The leading dimension of B.  LDB >= max(1,N).\r\n\r\n    ALPHAR  (output) DOUBLE PRECISION array, dimension (N)\r\n            The real parts of each scalar alpha defining an eigenvalue of\r\n            GNEP.\r\n\r\n    ALPHAI  (output) DOUBLE PRECISION array, dimension (N)\r\n            The imaginary parts of each scalar alpha defining an\r\n            eigenvalue of GNEP.  If ALPHAI(j) is zero, then the j-th\r\n            eigenvalue is real; if positive, then the j-th and\r\n            (j+1)-st eigenvalues are a complex conjugate pair, with\r\n            ALPHAI(j+1) = -ALPHAI(j).\r\n\r\n    BETA    (output) DOUBLE PRECISION array, dimension (N)\r\n            The scalars beta that define the eigenvalues of GNEP.\r\n\r\n            Together, the quantities alpha = (ALPHAR(j),ALPHAI(j)) and\r\n            beta = BETA(j) represent the j-th eigenvalue of the matrix\r\n            pair (A,B), in one of the forms lambda = alpha/beta or\r\n            mu = beta/alpha.  Since either lambda or mu may overflow,\r\n            they should not, in general, be computed.\r\n\r\n    VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)\r\n            If JOBVL = 'V', the left eigenvectors u(j) are stored\r\n            in the columns of VL, in the same order as their eigenvalues.\r\n            If the j-th eigenvalue is real, then u(j) = VL(:,j).\r\n            If the j-th and (j+1)-st eigenvalues form a complex conjugate\r\n            pair, then\r\n               u(j) = VL(:,j) + i*VL(:,j+1)\r\n            and\r\n              u(j+1) = VL(:,j) - i*VL(:,j+1).\r\n\r\n            Each eigenvector is scaled so that its largest component has\r\n            abs(real part) + abs(imag. part) = 1, except for eigenvectors\r\n            corresponding to an eigenvalue with alpha = beta = 0, which\r\n            are set to zero.\r\n            Not referenced if JOBVL = 'N'.\r\n\r\n    LDVL    (input) INTEGER\r\n            The leading dimension of the matrix VL. LDVL >= 1, and\r\n            if JOBVL = 'V', LDVL >= N.\r\n\r\n    VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)\r\n            If JOBVR = 'V', the right eigenvectors x(j) are stored\r\n            in the columns of VR, in the same order as their eigenvalues.\r\n            If the j-th eigenvalue is real, then x(j) = VR(:,j).\r\n            If the j-th and (j+1)-st eigenvalues form a complex conjugate\r\n            pair, then\r\n              x(j) = VR(:,j) + i*VR(:,j+1)\r\n            and\r\n              x(j+1) = VR(:,j) - i*VR(:,j+1).\r\n\r\n            Each eigenvector is scaled so that its largest component has\r\n            abs(real part) + abs(imag. part) = 1, except for eigenvalues\r\n            corresponding to an eigenvalue with alpha = beta = 0, which\r\n            are set to zero.\r\n            Not referenced if JOBVR = 'N'.\r\n\r\n    LDVR    (input) INTEGER\r\n            The leading dimension of the matrix VR. LDVR >= 1, and\r\n            if JOBVR = 'V', LDVR >= N.\r\n\r\n    WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\r\n            On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\r\n\r\n    LWORK   (input) INTEGER\r\n            The dimension of the array WORK.  LWORK >= max(1,8*N).\r\n            For good performance, LWORK must generally be larger.\r\n            To compute the optimal value of LWORK, call ILAENV to get\r\n            blocksizes (for DGEQRF, DORMQR, and DORGQR.)  Then compute:\r\n            NB  -- MAX of the blocksizes for DGEQRF, DORMQR, and DORGQR;\r\n            The optimal LWORK is:\r\n                2*N + MAX( 6*N, N*(NB+1) ).\r\n\r\n            If LWORK = -1, then a workspace query is assumed; the routine\r\n            only calculates the optimal size of the WORK array, returns\r\n            this value as the first entry of the WORK array, and no error\r\n            message related to LWORK is issued by XERBLA.\r\n\r\n    INFO    (output) INTEGER\r\n            = 0:  successful exit\r\n            < 0:  if INFO = -i, the i-th argument had an illegal value.\r\n            = 1,...,N:\r\n                  The QZ iteration failed.  No eigenvectors have been\r\n                  calculated, but ALPHAR(j), ALPHAI(j), and BETA(j)\r\n                  should be correct for j=INFO+1,...,N.\r\n            > N:  errors that usually indicate LAPACK problems:\r\n                  =N+1: error return from DGGBAL\r\n                  =N+2: error return from DGEQRF\r\n                  =N+3: error return from DORMQR\r\n                  =N+4: error return from DORGQR\r\n                  =N+5: error return from DGGHRD\r\n                  =N+6: error return from DHGEQZ (other than failed\r\n                                                  iteration)\r\n                  =N+7: error return from DTGEVC\r\n                  =N+8: error return from DGGBAK (computing VL)\r\n                  =N+9: error return from DGGBAK (computing VR)\r\n                  =N+10: error return from DLASCL (various calls)\r\n\r\n    Further Details\r\n    ===============\r\n\r\n    Balancing\r\n    ---------\r\n\r\n    This driver calls DGGBAL to both permute and scale rows and columns\r\n    of A and B.  The permutations PL and PR are chosen so that PL*A*PR\r\n    and PL*B*R will be upper triangular except for the diagonal blocks\r\n    A(i:j,i:j) and B(i:j,i:j), with i and j as close together as\r\n    possible.  The diagonal scaling matrices DL and DR are chosen so\r\n    that the pair  DL*PL*A*PR*DR, DL*PL*B*PR*DR have elements close to\r\n    one (except for the elements that start out zero.)\r\n\r\n    After the eigenvalues and eigenvectors of the balanced matrices\r\n    have been computed, DGGBAK transforms the eigenvectors back to what\r\n    they would have been (in perfect arithmetic) if they had not been\r\n    balanced.\r\n\r\n    Contents of A and B on Exit\r\n    -------- -- - --- - -- ----\r\n\r\n    If any eigenvectors are computed (either JOBVL='V' or JOBVR='V' or\r\n    both), then on exit the arrays A and B will contain the real Schur\r\n    form[*] of the \\\"balanced\\\" versions of A and B.  If no eigenvectors\r\n    are computed, then only the diagonal blocks will be correct.\r\n\r\n    [*] See DHGEQZ, DGEGS, or read the book \\\"Matrix Computations\\\",\r\n        by Golub & van Loan, pub. by Johns Hopkins U. Press.\r\n\"));\r\n        end dgegv;\r\n\r\n        function dgelsx \"Obsolete function. Use Modelica.Math.Matrices.LAPACK.dgelsy instead\"\r\n\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Real A[:, :];\r\n          input Real B[size(A, 1), :];\r\n          input Real rcond=0.0 \"Reciprocal condition number to estimate rank\";\r\n          output Real X[max(size(A, 1), size(A, 2)), size(B, 2)]=cat(\r\n                    1,\r\n                    B,\r\n                    zeros(max(nrow, ncol) - nrow, nrhs))\r\n            \"Solution is in first size(A,2) rows\";\r\n          output Integer info;\r\n          output Integer rank \"Effective rank of A\";\r\n        protected\r\n          Integer nrow=size(A, 1);\r\n          Integer ncol=size(A, 2);\r\n          Integer nx=max(nrow, ncol);\r\n          Integer nrhs=size(B, 2);\r\n          Real work[max(min(size(A, 1), size(A, 2)) + 3*size(A, 2), 2*min(size(A, 1),\r\n            size(A, 2)) + size(B, 2))];\r\n          Real Awork[size(A, 1), size(A, 2)]=A;\r\n          Integer jpvt[size(A, 2)]=zeros(ncol);\r\n\r\n        external\"FORTRAN 77\" dgelsx(\r\n                  nrow,\r\n                  ncol,\r\n                  nrhs,\r\n                  Awork,\r\n                  nrow,\r\n                  X,\r\n                  nx,\r\n                  jpvt,\r\n                  rcond,\r\n                  rank,\r\n                  work,\r\n                  info) annotation (Library=\"lapack\");\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica.Math.Matrices.LAPACK.dgelsy instead\",\r\n            Documentation(info=\"Lapack documentation\r\n    Purpose\r\n    =======\r\n\r\n    This routine is deprecated and has been replaced by routine DGELSY.\r\n\r\n    DGELSX computes the minimum-norm solution to a real linear least\r\n    squares problem:\r\n        minimize || A * X - B ||\r\n    using a complete orthogonal factorization of A.  A is an M-by-N\r\n    matrix which may be rank-deficient.\r\n\r\n    Several right hand side vectors b and solution vectors x can be\r\n    handled in a single call; they are stored as the columns of the\r\n    M-by-NRHS right hand side matrix B and the N-by-NRHS solution\r\n    matrix X.\r\n\r\n    The routine first computes a QR factorization with column pivoting:\r\n        A * P = Q * [ R11 R12 ]\r\n                    [  0  R22 ]\r\n    with R11 defined as the largest leading submatrix whose estimated\r\n    condition number is less than 1/RCOND.  The order of R11, RANK,\r\n    is the effective rank of A.\r\n\r\n    Then, R22 is considered to be negligible, and R12 is annihilated\r\n    by orthogonal transformations from the right, arriving at the\r\n    complete orthogonal factorization:\r\n       A * P = Q * [ T11 0 ] * Z\r\n                   [  0  0 ]\r\n    The minimum-norm solution is then\r\n       X = P * Z' [ inv(T11)*Q1'*B ]\r\n                  [        0       ]\r\n    where Q1 consists of the first RANK columns of Q.\r\n\r\n    Arguments\r\n    =========\r\n\r\n    M       (input) INTEGER\r\n            The number of rows of the matrix A.  M >= 0.\r\n\r\n    N       (input) INTEGER\r\n            The number of columns of the matrix A.  N >= 0.\r\n\r\n    NRHS    (input) INTEGER\r\n            The number of right hand sides, i.e., the number of\r\n            columns of matrices B and X. NRHS >= 0.\r\n\r\n    A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\r\n            On entry, the M-by-N matrix A.\r\n            On exit, A has been overwritten by details of its\r\n            complete orthogonal factorization.\r\n\r\n    LDA     (input) INTEGER\r\n            The leading dimension of the array A.  LDA >= max(1,M).\r\n\r\n    B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\r\n            On entry, the M-by-NRHS right hand side matrix B.\r\n            On exit, the N-by-NRHS solution matrix X.\r\n            If m >= n and RANK = n, the residual sum-of-squares for\r\n            the solution in the i-th column is given by the sum of\r\n            squares of elements N+1:M in that column.\r\n\r\n    LDB     (input) INTEGER\r\n            The leading dimension of the array B. LDB >= max(1,M,N).\r\n\r\n    JPVT    (input/output) INTEGER array, dimension (N)\r\n            On entry, if JPVT(i) .ne. 0, the i-th column of A is an\r\n            initial column, otherwise it is a free column.  Before\r\n            the QR factorization of A, all initial columns are\r\n            permuted to the leading positions; only the remaining\r\n            free columns are moved as a result of column pivoting\r\n            during the factorization.\r\n            On exit, if JPVT(i) = k, then the i-th column of A*P\r\n            was the k-th column of A.\r\n\r\n    RCOND   (input) DOUBLE PRECISION\r\n            RCOND is used to determine the effective rank of A, which\r\n            is defined as the order of the largest leading triangular\r\n            submatrix R11 in the QR factorization with pivoting of A,\r\n            whose estimated condition number < 1/RCOND.\r\n\r\n    RANK    (output) INTEGER\r\n            The effective rank of A, i.e., the order of the submatrix\r\n            R11.  This is the same as the order of the submatrix T11\r\n            in the complete orthogonal factorization of A.\r\n\r\n    WORK    (workspace) DOUBLE PRECISION array, dimension\r\n                        (max( min(M,N)+3*N, 2*min(M,N)+NRHS )),\r\n\r\n    INFO    (output) INTEGER\r\n            = 0:  successful exit\r\n            < 0:  if INFO = -i, the i-th argument had an illegal value\r\n\"));\r\n        end dgelsx;\r\n\r\n        function dgelsx_vec \"Obsolete function. Use Modelica.Math.Matrices.LAPACK.dgelsy_vec instead\"\r\n\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Real A[:, :];\r\n          input Real b[size(A, 1)];\r\n          input Real rcond=0.0 \"Reciprocal condition number to estimate rank\";\r\n          output Real x[max(size(A, 1), size(A, 2))]=cat(\r\n                    1,\r\n                    b,\r\n                    zeros(max(nrow, ncol) - nrow))\r\n            \"solution is in first size(A,2) rows\";\r\n          output Integer info;\r\n          output Integer rank \"Effective rank of A\";\r\n        protected\r\n          Integer nrow=size(A, 1);\r\n          Integer ncol=size(A, 2);\r\n          Integer nrhs=1;\r\n          Integer nx=max(nrow, ncol);\r\n          Real work[max(min(size(A, 1), size(A, 2)) + 3*size(A, 2), 2*min(size(A, 1),\r\n            size(A, 2)) + 1)];\r\n          Real Awork[size(A, 1), size(A, 2)]=A;\r\n          Integer jpvt[size(A, 2)]=zeros(ncol);\r\n\r\n        external\"FORTRAN 77\" dgelsx(\r\n                  nrow,\r\n                  ncol,\r\n                  nrhs,\r\n                  Awork,\r\n                  nrow,\r\n                  x,\r\n                  nx,\r\n                  jpvt,\r\n                  rcond,\r\n                  rank,\r\n                  work,\r\n                  info) annotation (Library=\"lapack\");\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica.Math.Matrices.LAPACK.dgelsy_vec instead\",\r\n            Documentation(info=\"Lapack documentation\r\n    Purpose\r\n    =======\r\n\r\n    This routine is deprecated and has been replaced by routine DGELSY.\r\n\r\n    DGELSX computes the minimum-norm solution to a real linear least\r\n    squares problem:\r\n        minimize || A * X - B ||\r\n    using a complete orthogonal factorization of A.  A is an M-by-N\r\n    matrix which may be rank-deficient.\r\n\r\n    Several right hand side vectors b and solution vectors x can be\r\n    handled in a single call; they are stored as the columns of the\r\n    M-by-NRHS right hand side matrix B and the N-by-NRHS solution\r\n    matrix X.\r\n\r\n    The routine first computes a QR factorization with column pivoting:\r\n        A * P = Q * [ R11 R12 ]\r\n                    [  0  R22 ]\r\n    with R11 defined as the largest leading submatrix whose estimated\r\n    condition number is less than 1/RCOND.  The order of R11, RANK,\r\n    is the effective rank of A.\r\n\r\n    Then, R22 is considered to be negligible, and R12 is annihilated\r\n    by orthogonal transformations from the right, arriving at the\r\n    complete orthogonal factorization:\r\n       A * P = Q * [ T11 0 ] * Z\r\n                   [  0  0 ]\r\n    The minimum-norm solution is then\r\n       X = P * Z' [ inv(T11)*Q1'*B ]\r\n                  [        0       ]\r\n    where Q1 consists of the first RANK columns of Q.\r\n\r\n    Arguments\r\n    =========\r\n\r\n    M       (input) INTEGER\r\n            The number of rows of the matrix A.  M >= 0.\r\n\r\n    N       (input) INTEGER\r\n            The number of columns of the matrix A.  N >= 0.\r\n\r\n    NRHS    (input) INTEGER\r\n            The number of right hand sides, i.e., the number of\r\n            columns of matrices B and X. NRHS >= 0.\r\n\r\n    A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\r\n            On entry, the M-by-N matrix A.\r\n            On exit, A has been overwritten by details of its\r\n            complete orthogonal factorization.\r\n\r\n    LDA     (input) INTEGER\r\n            The leading dimension of the array A.  LDA >= max(1,M).\r\n\r\n    B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\r\n            On entry, the M-by-NRHS right hand side matrix B.\r\n            On exit, the N-by-NRHS solution matrix X.\r\n            If m >= n and RANK = n, the residual sum-of-squares for\r\n            the solution in the i-th column is given by the sum of\r\n            squares of elements N+1:M in that column.\r\n\r\n    LDB     (input) INTEGER\r\n            The leading dimension of the array B. LDB >= max(1,M,N).\r\n\r\n    JPVT    (input/output) INTEGER array, dimension (N)\r\n            On entry, if JPVT(i) .ne. 0, the i-th column of A is an\r\n            initial column, otherwise it is a free column.  Before\r\n            the QR factorization of A, all initial columns are\r\n            permuted to the leading positions; only the remaining\r\n            free columns are moved as a result of column pivoting\r\n            during the factorization.\r\n            On exit, if JPVT(i) = k, then the i-th column of A*P\r\n            was the k-th column of A.\r\n\r\n    RCOND   (input) DOUBLE PRECISION\r\n            RCOND is used to determine the effective rank of A, which\r\n            is defined as the order of the largest leading triangular\r\n            submatrix R11 in the QR factorization with pivoting of A,\r\n            whose estimated condition number < 1/RCOND.\r\n\r\n    RANK    (output) INTEGER\r\n            The effective rank of A, i.e., the order of the submatrix\r\n            R11.  This is the same as the order of the submatrix T11\r\n            in the complete orthogonal factorization of A.\r\n\r\n    WORK    (workspace) DOUBLE PRECISION array, dimension\r\n                        (max( min(M,N)+3*N, 2*min(M,N)+NRHS )),\r\n\r\n    INFO    (output) INTEGER\r\n            = 0:  successful exit\r\n            < 0:  if INFO = -i, the i-th argument had an illegal value\r\n\"));\r\n        end dgelsx_vec;\r\n\r\n        function dgeqpf \"Obsolete function. Use Modelica.Math.Matrices.LAPACK.dgeqp3 instead\"\r\n\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          input Real A[:, :] \"Square or rectangular matrix\";\r\n          output Real QR[size(A, 1), size(A, 2)]=A\r\n            \"QR factorization in packed format\";\r\n          output Real tau[min(size(A, 1), size(A, 2))]\r\n            \"The scalar factors of the elementary reflectors of Q\";\r\n          output Integer p[size(A, 2)]=zeros(size(A, 2)) \"Pivot vector\";\r\n          output Integer info;\r\n        protected\r\n          Integer m=size(A, 1);\r\n          Integer lda=max(1, size(A, 1));\r\n          Integer ncol=size(A, 2) \"Column dimension of A\";\r\n          Real work[3*size(A, 2)] \"work array\";\r\n\r\n        external\"FORTRAN 77\" dgeqpf(\r\n                  m,\r\n                  ncol,\r\n                  QR,\r\n                  lda,\r\n                  p,\r\n                  tau,\r\n                  work,\r\n                  info) annotation (Library={\"lapack\"});\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica.Math.Matrices.LAPACK.dgeqp3 instead\",\r\n            Documentation(info=\"Lapack documentation\r\n    Purpose\r\n    =======\r\n\r\n    This routine is deprecated and has been replaced by routine DGEQP3.\r\n\r\n    DGEQPF computes a QR factorization with column pivoting of a\r\n    real M-by-N matrix A: A*P = Q*R.\r\n\r\n    Arguments\r\n    =========\r\n\r\n    M       (input) INTEGER\r\n            The number of rows of the matrix A. M >= 0.\r\n\r\n    N       (input) INTEGER\r\n            The number of columns of the matrix A. N >= 0\r\n\r\n    A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\r\n            On entry, the M-by-N matrix A.\r\n            On exit, the upper triangle of the array contains the\r\n            min(M,N)-by-N upper triangular matrix R; the elements\r\n            below the diagonal, together with the array TAU,\r\n            represent the orthogonal matrix Q as a product of\r\n            min(m,n) elementary reflectors.\r\n\r\n    LDA     (input) INTEGER\r\n            The leading dimension of the array A. LDA >= max(1,M).\r\n\r\n    JPVT    (input/output) INTEGER array, dimension (N)\r\n            On entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\r\n            to the front of A*P (a leading column); if JPVT(i) = 0,\r\n            the i-th column of A is a free column.\r\n            On exit, if JPVT(i) = k, then the i-th column of A*P\r\n            was the k-th column of A.\r\n\r\n    TAU     (output) DOUBLE PRECISION array, dimension (min(M,N))\r\n            The scalar factors of the elementary reflectors.\r\n\r\n    WORK    (workspace) DOUBLE PRECISION array, dimension (3*N)\r\n\r\n    INFO    (output) INTEGER\r\n            = 0:  successful exit\r\n            < 0:  if INFO = -i, the i-th argument had an illegal value\r\n\r\n    Further Details\r\n    ===============\r\n\r\n    The matrix Q is represented as a product of elementary reflectors\r\n\r\n       Q = H(1) H(2) . . . H(n)\r\n\r\n    Each H(i) has the form\r\n\r\n       H = I - tau * v * v'\r\n\r\n    where tau is a real scalar, and v is a real vector with\r\n    v(1:i-1) = 0 and v(i) = 1; v(i+1:m) is stored on exit in A(i+1:m,i).\r\n\r\n    The matrix P is represented in jpvt as follows: If\r\n       jpvt(j) = i\r\n    then the jth column of P is the ith canonical unit vector.\r\n\"));\r\n        end dgeqpf;\r\n      end LAPACK;\r\n\r\n      package Utilities \"Utility functions that should not be directly utilized by the user\"\r\n        extends Modelica.Icons.UtilitiesPackage;\r\n        function householderReflection\r\n          \"Reflect each of the vectors a_i of matrix  A=[a_1, a_2, ..., a_n] on a plane with orthogonal vector u\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors;\r\n\r\n          input Real A[:, :] \"Rectangular matrix\";\r\n          input Real u[size(A, 1)] \"Householder vector\";\r\n\r\n          output Real RA[size(A, 1), size(A, 2)] \"Reflection of A\";\r\n\r\n        protected\r\n          Integer n=size(A, 2);\r\n          Real h;\r\n          Real lu=(Vectors.length(u))^2;\r\n\r\n        algorithm\r\n          for i in 1:n loop\r\n            h := scalar(2*transpose(matrix(u))*A[:, i]/lu);\r\n            RA[:, i] := A[:, i] - h*u;\r\n          end for;\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Matrices.householderReflexion instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nMatrices.<strong>householderReflection</strong>(A,u);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the Householder reflection (transformation)\r\n</p>\r\n<blockquote>\r\n <strong>Ar</strong> = <strong>Q</strong>*<strong>A</strong>\r\n</blockquote>\r\nwith\r\n<blockquote>\r\n <strong>Q</strong> = <strong>I</strong> -2*<strong>u</strong>*<strong>u</strong>'/(<strong>u</strong>'*<strong>u</strong>)\r\n</blockquote>\r\n<p>\r\nwhere <strong>u</strong> is Householder vector, i.e., the normal vector of the reflection plane.\r\n</p>\r\n<p>\r\nHouseholder reflection is widely used in numerical linear algebra, e.g., to perform QR decompositions.\r\n</p>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n// First step of QR decomposition\r\n  import   ObsoleteModelica4.Math.Vectors.Utilities;\r\n\r\n  Real A[3,3] = [1,2,3;\r\n                 3,4,5;\r\n                 2,1,4];\r\n  Real Ar[3,3];\r\n  Real u[:];\r\n\r\n  u=Utilities.householderVector(A[:,1],{1,0,0});\r\n  // u= {0.763, 0.646, 0}\r\n\r\n  Ar=householderReflection(A,u);\r\n // Ar = [-6.0828,   -5.2608,   -4.4388;\r\n //        0.0,      -1.1508,   -2.3016;\r\n //        0.0,       2.0,       0.0]\r\n\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderSimilarityTransformation\\\">Matrices.Utilities.housholderSimilarityTransformation</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderReflection\\\">Vectors.Utilities.householderReflection</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderVector\\\">Vectors.Utilities.householderVector</a>\r\n</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n</html>\"));\r\n        end householderReflection;\r\n\r\n        function householderSimilarityTransformation\r\n          \"Perform the similarity transformation S*A*S of matrix A with symmetric householder matrix S = I - 2u*u'\"\r\n          extends Modelica.Icons.Function;\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          import Modelica.Math.Vectors;\r\n\r\n          input Real A[:, size(A, 1)] \"Square matrix A\";\r\n          input Real u[size(A, 1)] \"Householder vector\";\r\n          output Real SAS[size(A, 1), size(A, 1)] \"Transformation of matrix A\";\r\n\r\n        protected\r\n          Integer na=size(A, 1);\r\n          Real S[size(A, 1), size(A, 1)] \"Symmetric matrix\";\r\n          Integer i;\r\n        algorithm\r\n          if na > 0 then\r\n            S := -2*matrix(u)*transpose(matrix(u))/(Vectors.length(u)*\r\n              Vectors.length(u));\r\n            for i in 1:na loop\r\n              S[i, i] := 1.0 + S[i, i];\r\n            end for;\r\n            SAS := S*A*S;\r\n          else\r\n            SAS := fill(\r\n                    0.0,\r\n                    0,\r\n                    0);\r\n          end if;\r\n\r\n          annotation (\r\n            obsolete = \"Obsolete function - use Modelica_LinearSystems2.Math.Matrices.householderSimilarityTransformation instead\",\r\n            Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\n  As = Matrices.<strong>householderSimilarityTransformation</strong>(A,u);\r\n</pre></blockquote>\r\n<h4>Description</h4>\r\n<p>\r\nThis function computes the Householder similarity transformation\r\n</p>\r\n<blockquote>\r\n <strong>As</strong> = <strong>S</strong>*<strong>A</strong>*<strong>S</strong>\r\n</blockquote>\r\nwith\r\n<blockquote>\r\n <strong>S</strong> = <strong>I</strong> -2*<strong>u</strong>*<strong>u</strong>'/(<strong>u</strong>'*<strong>u</strong>).\r\n</blockquote>\r\n<p>\r\nThis transformation is widely used for transforming non-symmetric matrices to a Hessenberg form.\r\n</p>\r\n<h4>Example</h4>\r\n<blockquote><pre>\r\n// First step of Hessenberg decomposition\r\n  import   ObsoleteModelica4.Math.Vectors.Utilities;\r\n\r\n  Real A[4,4] = [1,2,3,4;\r\n                 3,4,5,6;\r\n                 9,8,7,6;\r\n                 1,2,0,0];\r\n  Real Ar[4,4];\r\n  Real u[4]={0,0,0,0};\r\n\r\n  u[2:4]=Utilities.householderVector(A[2:4,1],{1,0,0});\r\n  // u= = {0, 0.8107, 0.5819, 0.0647}\r\n\r\n  Ar=householderSimilarityTransformation(A,u);\r\n //  Ar = [1.0,     -3.8787,    -1.2193,    3.531;\r\n          -9.5394, 11.3407,      6.4336,   -5.9243;\r\n           0.0,     3.1307,      0.7525,   -3.3670;\r\n           0.0,     0.8021,     -1.1656,   -1.0932]\r\n</pre></blockquote>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Matrices.Utilities.householderReflection\\\">Matrices.Utilities.householderReflection</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderReflection\\\">Vectors.Utilities.householderReflection</a>,<br>\r\n<a href=\\\"modelica://ObsoleteModelica4.Math.Vectors.Utilities.householderVector\\\">Vectors.Utilities.householderVector</a>\r\n</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>2010/04/30 </em>\r\n       by Marcus Baur, DLR-RM</li>\r\n</ul>\r\n</html>\"));\r\n        end householderSimilarityTransformation;\r\n      end Utilities;\r\n    end Matrices;\r\n\r\n    function tempInterpol1\r\n      \"Obsolete function for linear interpolation\"\r\n      extends Modelica.Icons.Function;\r\n      extends Modelica.Icons.ObsoleteModel;\r\n\r\n      input Real u \"Input value (first column of table)\";\r\n      input Real table[:, :] \"Table to be interpolated\";\r\n      input Integer icol \"Column of table to be interpolated\";\r\n      output Real y \"Interpolated input value (icol column of table)\";\r\n    protected\r\n      Integer i;\r\n      Integer n \"Number of rows of table\";\r\n      Real u1;\r\n      Real u2;\r\n      Real y1;\r\n      Real y2;\r\n    algorithm\r\n      n := size(table, 1);\r\n\r\n      if n <= 1 then\r\n        y := table[1, icol];\r\n\r\n      else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1;\r\n\r\n        else\r\n          i := 2;\r\n          // Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1;\r\n\r\n          end while;\r\n          i := i - 1;\r\n\r\n        end if;\r\n\r\n        // Get interpolation data\r\n        u1 := table[i, 1];\r\n        u2 := table[i + 1, 1];\r\n        y1 := table[i, icol];\r\n        y2 := table[i + 1, icol];\r\n\r\n        assert(u2 > u1, \"Table index must be increasing\");\r\n        // Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1);\r\n\r\n      end if;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n\r\n    </html>\"),\r\n      obsolete = \"Obsolete function\");\r\n    end tempInterpol1;\r\n\r\n    function tempInterpol2\r\n      \"Obsolete function for vectorized linear interpolation\"\r\n      extends Modelica.Icons.Function;\r\n      extends Modelica.Icons.ObsoleteModel;\r\n\r\n      input Real u \"Input value (first column of table)\";\r\n      input Real table[:, :] \"Table to be interpolated\";\r\n      input Integer icol[:] \"Column(s) of table to be interpolated\";\r\n      output Real y[1, size(icol, 1)]\r\n        \"Interpolated input value(s) (column(s) icol of table)\";\r\n    protected\r\n      Integer i;\r\n      Integer n \"Number of rows of table\";\r\n      Real u1;\r\n      Real u2;\r\n      Real y1[1, size(icol, 1)];\r\n      Real y2[1, size(icol, 1)];\r\n    algorithm\r\n      n := size(table, 1);\r\n\r\n      if n <= 1 then\r\n        y := transpose([table[1, icol]]);\r\n\r\n      else\r\n        // Search interval\r\n\r\n        if u <= table[1, 1] then\r\n          i := 1;\r\n\r\n        else\r\n          i := 2;\r\n          // Supports duplicate table[i, 1] values\r\n          // in the interior to allow discontinuities.\r\n          // Interior means that\r\n          // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n\r\n\r\n          while i < n and u >= table[i, 1] loop\r\n            i := i + 1;\r\n\r\n          end while;\r\n          i := i - 1;\r\n\r\n        end if;\r\n\r\n        // Get interpolation data\r\n        u1 := table[i, 1];\r\n        u2 := table[i + 1, 1];\r\n        y1 := transpose([table[i, icol]]);\r\n        y2 := transpose([table[i + 1, icol]]);\r\n\r\n        assert(u2 > u1, \"Table index must be increasing\");\r\n        // Interpolate\r\n        y := y1 + (y2 - y1)*(u - u1)/(u2 - u1);\r\n\r\n      end if;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n\r\n    </html>\"),\r\n      obsolete = \"Obsolete function\");\r\n    end tempInterpol2;\r\n  end Math;\r\n\r\n  package Magnetic \"Library of magnetic models\"\r\n    extends Modelica.Icons.Package;\r\n    package FundamentalWave \"Library for magnetic fundamental wave effects in electric machines\"\r\n      extends Modelica.Icons.Package;\r\n      package BasicMachines \"Basic machine components and models\"\r\n        extends Modelica.Icons.Package;\r\n        package Components \"Components specially for electric machines\"\r\n          extends Modelica.Icons.Package;\r\n          model SymmetricMultiPhaseCageWinding \"Symmetrical rotor cage\"\r\n            import Modelica.Constants.pi;\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Integer m=3 \"Number of phases\";\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter SI.Resistance RRef\r\n              \"Winding resistance per phase at TRef\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter SI.Inductance Lsigma \"Cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            SI.Current i[m]=strayInductor.i \"Cage currents\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=m,\r\n              final effectiveTurns=fill(effectiveTurns, m),\r\n              final orientation=\r\n                  Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m))\r\n              \"Symmetric winding\" annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=m,\r\n                final L=fill(Lsigma, m)) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=m,\r\n              final R=fill(RRef, m),\r\n              final T_ref=fill(TRef, m),\r\n              final alpha=fill(alphaRef, m),\r\n              final T=fill(TOperational, m)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n                Placement(transformation(extent={{30,-30},{50,-10}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-20},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=m) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n            Modelica.Electrical.Polyphase.Basic.Star starAuxiliary(final m=m)\r\n              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n                      {100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nObsolete symmetric cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding\\\">SymmetricPolyphaseCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SymmetricMultiPhaseCageWinding;\r\n\r\n          model SaliencyCageWinding \"Rotor cage with saliency in d- and q-axis\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance\r\n              RRef(d(start=1), q(start=1)) \"Salient cage resistance\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientInductance\r\n              Lsigma(d(start=1), q(start=1)) \"Salient cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            Modelica.Blocks.Interfaces.RealOutput i[2](\r\n              each final quantity=\"ElectricCurrent\",\r\n              each final unit=\"A\") = resistor.i \"Currents out from damper\";\r\n            Modelica.Blocks.Interfaces.RealOutput lossPower(\r\n              final quantity=\"Power\",\r\n              final unit=\"W\") = sum(resistor.resistor.LossPower) \"Damper losses\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) annotation (\r\n                Placement(transformation(extent={{30,-90},{50,-70}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-80},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,\r\n                      -100},{100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete saliency cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding\\\">SaliencyCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SaliencyCageWinding;\r\n        end Components;\r\n      end BasicMachines;\r\n    end FundamentalWave;\r\n  end Magnetic;\r\n  annotation (uses(Modelica(version=\"4.1.0\")),\r\n              version=\"4.1.0\",\r\n              versionDate=\"2024-01-12\",\r\n              dateModified = \"2024-01-12 19:40:00Z\",\r\n              revisionId=\"$Format:%h %ci$\",\r\nDocumentation(info=\"<html>\r\n<p>\r\nThis package contains models and blocks from the Modelica Standard Library\r\nversion 3.2.3 that are no longer available in version 4.0.0\r\nThe conversion script for version 4.0.0 changes references in existing\r\nuser models automatically to the models and blocks of package\r\nObsoleteModelica4. The user should <strong>manually</strong> replace all\r\nreferences to ObsoleteModelica4 in his/her models to the models\r\nthat are recommended in the documentation of the respective model.\r\n</p>\r\n\r\n<p>\r\nIn most cases, this means that a model with the name\r\n\\\"ObsoleteModelica4.XXX\\\" should be renamed to \\\"Modelica.XXX\\\"\r\nand then a manual adaptation is needed. For example, a reference to\r\nObsoleteModelica4.Math.Matrices.LAPACK.dgeqpf\r\nshould be replaced by\r\nModelica.Math.Matrices.LAPACK.dgeqp3.\r\nThis usually requires some changes at the place where\r\nthe class is used (besides the renaming of the underlying class).\r\n</p>\r\n\r\n<p>\r\nThe models in ObsoleteModelica4 are either not according to the Modelica Language\r\nversion 3.4 and higher, or the model was changed to get a better design.\r\nIn all cases, an automatic conversion to the new implementation\r\nwas not feasible, since too complicated.\r\n</p>\r\n\r\n<p>\r\nIn order to easily detect obsolete models and blocks, all of them are specially\r\nmarked in the icon layer with a red box.\r\n</p>\r\n\r\n<p>\r\nCopyright &copy; 2019-2025, Modelica Association and contributors\r\n</p>\r\n\r\n<p>\r\n<em>This Modelica package is <u>free</u> software and the use is completely at <u>your own risk</u>; it can be redistributed and/or modified under the terms of the 3-Clause BSD license. For license conditions (including the disclaimer of warranty) visit <a href=\\\"https://modelica.org/licenses/modelica-3-clause-bsd\\\">https://modelica.org/licenses/modelica-3-clause-bsd</a>.</em>\r\n</p>\r\n</html>\"));\r\nend ObsoleteModelica4", "checksum": "06d17858baa69842df7202ca840b298be324081c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2-2925", "component_count": 66, "connection_count": 27, "variable_count": 149, "physical_quantity_count": 28, "parameter_count": 18, "equation_count": 93, "dependency_count": 110, "has_physical_interface": true, "interface_component_count": 22, "has_connections": true, "is_composite_model": true, "complexity_score": 315.0, "model_type": "system", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "package", "equation_summary": "equation connect(port_p, winding.port_p) annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "search_keywords": ["1, 1", "Acceleration", "Boolean", "ElectricCurrent", "Force", "Integer", "Length", "Modelica.Blocks.Types.ExternalCombiTimeTable", "N.m", "Power", "Real", "SI.Acceleration", "SI.Angle", "SI.Force", "SI.Length", "SI.Torque", "Torque", "Velocity", "a_1, a_2, ..., a_n", "electrical", "i + 1, icol", "m/s", "m/s2", "max(size(A, 1), size(A, 2)), size(B, 2)", "mechanical", "min(size(A, 1), size(A, 2))", "size(A, 1)", "size(A, 1), size(A, 2)", "size(A, 2)", "size(a, 1)", "size(u, 1)", "system"]}, "components": [{"name": "tableID", "type_name": "Modelica.Blocks.Types.ExternalCombiTimeTable", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "External table object"}, {"name": "readSuccess", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Table read success"}, {"name": "a", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Second derivative of s (relative acceleration)"}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Actuation force in direction of joint axis"}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Driving torque in direction of axis of rotation"}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= phi_offset + phi"}, {"name": "s_a", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between left flange and support"}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between right flange and support"}, {"name": "x", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Independent variable of function"}, {"name": "p", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f_nonlinear(x)"}, {"name": "x_min", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Minimum value of x"}, {"name": "x_max", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Maximum value of x"}, {"name": "x_zero", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "f_nonlinear(x_zero) = y_zero"}, {"name": "x_min2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "x_max2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "b", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(a, 1)]", "comment": "Real vector b vector a is mapped onto"}, {"name": "c", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Intermediate point a <= c <= b"}, {"name": "d", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "e", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "b - a"}, {"name": "m", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "s", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "q", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "tol", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "fa", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f_nonlinear(a) - y_zero"}, {"name": "fb", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f_nonlinear(b) - y_zero"}, {"name": "fc", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "found", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(a, 1)]", "comment": "Householder vector to map a onto b"}, {"name": "norm_b", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "ra", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(u, 1)]", "comment": "Reflection of a"}, {"name": "h", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "A", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Square or rectangular matrix"}, {"name": "B", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": null}, {"name": "alphaImag", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1)]", "comment": "Imaginary part of alpha"}, {"name": "beta", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1)]", "comment": "Denominator of eigenvalue"}, {"name": "info", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "lwork", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "ldvl", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "ldvr", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Awork", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": null}, {"name": "Bwork", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": null}, {"name": "work", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[3*size(A, 2)]", "comment": "work array"}, {"name": "dummy1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[1, 1]", "comment": null}, {"name": "dummy2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[1, 1]", "comment": null}, {"name": "rcond", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "rank", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Effective rank of A"}, {"name": "ncol", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "nx", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "nrhs", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "jpvt", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[size(A, 2)]", "comment": null}, {"name": "lda", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "RA", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 2)]", "comment": "Reflection of A"}, {"name": "lu", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "SAS", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "Transformation of matrix A"}, {"name": "S", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[size(A, 1), size(A, 1)]", "comment": "Symmetric matrix"}, {"name": "i", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": "Table to be interpolated"}, {"name": "icol", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Column of table to be interpolated"}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Number of rows of table"}, {"name": "u1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "divisionBipolar.y", "to_connector": "add.u1", "condition": null}, {"from_connector": "offset.y", "to_connector": "add.u2", "condition": null}, {"from_connector": "divisionUnipolar.y", "to_connector": "dutyCycle", "condition": null}, {"from_connector": "add.y", "to_connector": "dutyCycle", "condition": null}, {"from_connector": "v", "to_connector": "divisionUnipolar.u1", "condition": null}, {"from_connector": "v", "to_connector": "divisionBipolar.u1", "condition": null}, {"from_connector": "vMaxExt", "to_connector": "vMaxInt", "condition": null}, {"from_connector": "vMaxInt", "to_connector": "divisionUnipolar.u2", "condition": null}, {"from_connector": "vMaxInt", "to_connector": "vMaxConst.y", "condition": null}, {"from_connector": "vMaxInt", "to_connector": "divisionBipolar.u2", "condition": null}, {"from_connector": "fixed.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalAxis.flange", "to_connector": "axis", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "constantTorque.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "fixed.frame_b", "to_connector": "ground.frame_a", "condition": null}, {"from_connector": "internalSupport.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalSupport.flange", "to_connector": "fixed.flange", "condition": null}, {"from_connector": "port_p", "to_connector": "winding.port_p", "condition": null}, {"from_connector": "winding.port_n", "to_connector": "port_n", "condition": null}, {"from_connector": "ground.p", "to_connector": "star.pin_n", "condition": null}, {"from_connector": "strayInductor.plug_n", "to_connector": "resistor.plug_p", "condition": null}, {"from_connector": "strayInductor.plug_p", "to_connector": "winding.plug_p", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "winding.plug_n", "condition": null}, {"from_connector": "thermalCollector.port_a", "to_connector": "resistor.heatPort", "condition": null}, {"from_connector": "thermalCollector.port_b", "to_connector": "heatPortWinding", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "starAuxiliary.plug_p", "condition": null}, {"from_connector": "winding.plug_n", "to_connector": "resistor.plug_n", "condition": null}], "variables": [{"name": "toBus", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "u", "comment": null}, {"name": "SendReal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SendBoolean", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SendInteger", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "fromBus", "comment": "\"Interpolated input value(s) (column(s) icol of table)\""}, {"name": "ReceiveReal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ReceiveBoolean", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ReceiveInteger", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Adaptors", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Interfaces", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tableID", "type_name": "Modelica.Blocks.Types.ExternalCombiTable2D", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"External table object\""}, {"name": "forceRead", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "false\r\n            \"= true: Force reading of table data", "comment": null}, {"name": "readSuccess", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Table read success\""}, {"name": "verboseRead", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "true\r\n            \"= true: Print info message", "comment": null}, {"name": "readTimeTableData", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "readTable1DData", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "readTable2DData", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Internal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Tables", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Blocks", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "VoltageToDutyCycle", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Control", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DCDC", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PowerConverters", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "RelativeSensor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SinglePhase", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MultiPhase", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "QuasiStationary", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Electrical", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "boxColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" \r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\"", "comment": null}, {"name": "v", "type_name": "equation", "prefixes": [], "attributes": {"start": "0", "stateSelect": "stateSelect"}, "binding_equation": "der(s)", "comment": "\"First derivative of s (relative velocity)\""}, {"name": "a", "type_name": "Real", "prefixes": ["input"], "attributes": {"start": "0"}, "binding_equation": "c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "comment": "\"Real vector a to be reflected\""}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Actuation force in direction of joint axis\""}, {"name": "Prismatic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cylinderColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" \r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             \r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\"", "comment": null}, {"name": "tau", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"The scalar factors of the elementary reflectors of Q\""}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= phi_offset + phi\""}, {"name": "world", "type_name": "Modelica.Mechanics.MultiBody.World", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "R_rel", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "comment": "\"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Revolute", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Joints", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Ground", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Visualizers", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Init", "type_name": "type", "prefixes": [], "attributes": {}, "binding_equation": "enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        \r\n      end Types", "comment": null}, {"name": "MultiBody", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialElementaryOneFlangeAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialElementaryTwoFlangesAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Rotational", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "flange.s - internalSupport.s", "comment": "\"Distance between flange and support (= flange.s - support.s)\""}, {"name": "s_a", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange_a.s - internalSupport.s", "comment": "\"Distance between left flange and support\""}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Distance between right flange and support\""}, {"name": "Translational", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Mechanics", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "f_nonlinear_Data", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "x", "type_name": "Real", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "cat(\r\n                    1,\r\n                    b,\r\n                    zeros(max(nrow, ncol) - nrow))\r\n            \"solution is in first size(A,2) rows\"", "comment": "\"Independent variable of function\""}, {"name": "p", "type_name": "Integer", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "zeros(size(A, 2)) \"Pivot vector\"", "comment": null}, {"name": "f_nonlinear_data", "type_name": "f_nonlinear_Data", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Additional data for function f_nonlinear\""}, {"name": "f_nonlinear", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y_zero", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\""}, {"name": "x_min", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Minimum value of x\""}, {"name": "x_max", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Maximum value of x\""}, {"name": "pressure", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "0.0\r\n            \"Disregarded variables (here always used for pressure)\"", "comment": null}, {"name": "x_tol", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "100*Modelica.Constants.eps\r\n            \"Relative tolerance of the result\"", "comment": null}, {"name": "x_zero", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"f_nonlinear(x_zero) = y_zero\""}, {"name": "x_min2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "x_min - x_eps", "comment": null}, {"name": "x_max2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "x_max + x_eps", "comment": null}, {"name": "b", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "x_max2 \"Current best maximum interval value\"", "comment": "\"Real vector b vector a is mapped onto\""}, {"name": "c", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Intermediate point a <= c <= b\""}, {"name": "d", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "e", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"b - a\""}, {"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              \r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) \r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) \r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) \r\n            Modelica.Electrical.Analog.Basic.Ground ground \r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" \r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" \r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              \r\n            connect(winding.port_n, port_n)\r\n              \r\n            connect(ground.p, star.pin_n)\r\n              \r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              \r\n            connect(winding.plug_n, resistor.plug_n) \r\n            connect(star.plug_p, winding.plug_n) \r\n            connect(strayInductor.plug_p, winding.plug_p) \r\n            connect(thermalCollector.port_b, heatPortWinding) \r\n            connect(resistor.heatPort, thermalCollector.port_a) \r\n            \r\n          end SaliencyCageWinding", "comment": null}, {"name": "q", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tol", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "fa", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= f_nonlinear(a) - y_zero\""}, {"name": "fb", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= f_nonlinear(b) - y_zero\""}, {"name": "fc", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "found", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "solve", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "OneNonLinearEquation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Common", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Media", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u", "type_name": "Real", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": "\"Input value (first column of table)\""}, {"name": "norm_a", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "Vectors.length(a)", "comment": null}, {"name": "norm_b", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "norm(b, 2)", "comment": null}, {"name": "alpha", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "algorithm", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "householderVector", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ra", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Reflection of a\""}, {"name": "h", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "2*u*a", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "householderReflection", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Utilities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Vectors", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "A", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Square matrix A\""}, {"name": "B", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alphaReal", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Real part of alpha (eigenvalue=(alphaReal+i*alphaImag)/beta)\""}, {"name": "alphaImag", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Imaginary part of alpha\""}, {"name": "beta", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Denominator of eigenvalue\""}, {"name": "info", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(A, 2)", "comment": "\"Number of rows of table\""}, {"name": "lwork", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "12*n", "comment": null}, {"name": "ldvl", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "ldvr", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "Awork", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "A", "comment": null}, {"name": "Bwork", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "B", "comment": null}, {"name": "work", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"work array\""}, {"name": "dummy1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dummy2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dgegv", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "rcond", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "0.0 \"Reciprocal condition number to estimate rank\"", "comment": null}, {"name": "X", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "cat(\r\n                    1,\r\n                    B,\r\n                    zeros(max(nrow, ncol) - nrow, nrhs))\r\n            \"Solution is in first size(A,2) rows\"", "comment": null}, {"name": "rank", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Effective rank of A\""}, {"name": "nrow", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(A, 1)", "comment": null}, {"name": "ncol", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(A, 2) \"Column dimension of A\"", "comment": null}, {"name": "nx", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "max(nrow, ncol)", "comment": null}, {"name": "nrhs", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "1", "comment": null}, {"name": "jpvt", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "zeros(ncol)", "comment": null}, {"name": "dgelsx", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dgelsx_vec", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "QR", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "A\r\n            \"QR factorization in packed format\"", "comment": null}, {"name": "lda", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "max(1, size(A, 1))", "comment": null}, {"name": "dgeqpf", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LAPACK", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "RA", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Reflection of A\""}, {"name": "lu", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "(Vectors.length(u))^2", "comment": null}, {"name": "SAS", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Transformation of matrix A\""}, {"name": "na", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(A, 1)", "comment": null}, {"name": "S", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Symmetric matrix\""}, {"name": "i", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "A", "quantity": "ElectricCurrent"}, "binding_equation": "resistor.i \"Currents out from damper\"", "comment": null}, {"name": "householderSimilarityTransformation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Matrices", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Table to be interpolated\""}, {"name": "icol", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Column(s) of table to be interpolated\""}, {"name": "u1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tempInterpol1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tempInterpol2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Math", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alpha20", "type_name": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Temperature coefficient of winding at 20 degC\""}, {"name": "lossPower", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "W", "quantity": "Power"}, "binding_equation": "sum(resistor.resistor.LossPower) \"Damper losses\"", "comment": null}, {"name": "Components", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BasicMachines", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FundamentalWave", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Magnetic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "lossPower", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "a", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "f", "unit": "N", "display_unit": null, "quantity": "Force", "nominal": null}, {"name": "tau", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "s", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_a", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_b", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "instead", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Advanced", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "phi", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "b", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "reflected", "unit": "size(a, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "onto", "unit": "size(a, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "u", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "vector", "unit": "size(u, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "alpha", "unit": "size(A, 1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "eigenvalue", "unit": "1, 1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "rank", "unit": "max(size(A, 1), size(A, 2)), size(B, 2)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "A", "unit": "size(A, 2)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "matrix", "unit": "size(A, 1), size(A, 2)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "format", "unit": "min(size(A, 1), size(A, 2))", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Q", "unit": "size(A, 2)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "householderReflection", "unit": "a_1, a_2, ..., a_n", "display_unit": null, "quantity": null, "nominal": null}, {"name": "table", "unit": "i + 1, icol", "display_unit": null, "quantity": null, "nominal": null}, {"name": "interpolated", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "turns", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Connections", "FillPattern", "Ground", "Joints", "LinePattern", "Lsigma", "Matrices.Utilities", "Modelica", "Modelica.Blocks.Examples", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Sources", "Modelica.Blocks.Types", "Modelica.ComplexBlocks.Interfaces", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Functions", "Modelica.Electrical.PowerConverters.DCDC.Control", "Modelica.Electrical.QuasiStatic.Polyphase.Interfaces", "Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces", "Modelica.Electrical.QuasiStatic.SinglePhase.Sensors", "Modelica.Icons", "Modelica.Magnetic.FundamentalWave.BasicMachines.Components", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Magnetic.FundamentalWave.Interfaces", "Modelica.Magnetic.FundamentalWave.Types", "Modelica.Math", "Modelica.Math.Matrices.LAPACK", "Modelica.Math.Nonlinear", "Modelica.Math.Vectors", "Modelica.Math.Vectors.length", "Modelica.Math.Vectors.norm", "Modelica.Mechanics", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Parts", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "Modelica.Mechanics.MultiBody.Visualizers", "Modelica.Mechanics.MultiBody.Visualizers.Advanced", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sources", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "Modelica.Mechanics.Translational.Sources", "Modelica.Thermal.HeatTransfer.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "Modelica.Units", "Modelica.Units.SI", "Modelica.Utilities.Streams", "Modelica.Utilities.Streams.error", "ModelicaStandardTables", "Modelica_LinearSystems2.Math.Matrices", "Modelica_LinearSystems2.Math.Vectors", "MyNonLinearSolver", "ObsoleteModelica4", "ObsoleteModelica4.Math.Matrices.LAPACK", "ObsoleteModelica4.Math.Matrices.Utilities", "ObsoleteModelica4.Math.Vectors", "ObsoleteModelica4.Math.Vectors.Utilities", "OneNonLinearEquation", "Polyphase.Interfaces", "Prismatic", "R", "RRef", "Revolute", "SI", "SinglePhase.Interfaces", "StateSelect", "TextAlignment", "Types", "Utilities", "Vectors", "Vectors.Utilities", "add", "constantForce", "constantTorque", "divisionBipolar", "divisionUnipolar", "e", "fixed", "flange", "flange_a", "flange_b", "frame_a", "frame_b", "github", "ground", "i", "internalAxis", "internalSupport", "modelica", "offset", "phi", "resistor", "resistor.resistor", "star", "starAuxiliary", "strayInductor", "support", "thermalCollector", "vMaxConst", "winding", "world"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Icons.InternalPackage", "Modelica.Icons.Function", "Modelica.Icons.InterfacesPackage", "Modelica.Icons.RoundSensor", "Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.OnePort", "Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.TwoPlug", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint", "Modelica.Icons.TypesPackage", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "Modelica.Icons.Record", "Modelica.Icons.UtilitiesPackage", "Modelica.Icons.FunctionsPackage", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"]}
{"fqn": "ObsoleteModelica4.Magnetic", "kind": "package", "name": "Magnetic", "package_path": ["ObsoleteModelica4"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "m", "type": "Integer", "default": "3 \"Number of phases\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"Enable / disable (=fixed temperatures) thermal port\" parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance RRef(d(start=1), q(start=1)) \"Salient cage resistanc", "description": null}, {"name": "effectiveTurns", "type": "Real", "default": "1 \"Effective number of turns\"", "description": null}, {"name": "alpha20(start", "type": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "default": "0) \"Temperature coefficient of winding at 20 degC\"", "description": null}, {"name": "Lsigma \"Cage stray inductance\"", "type": "SI.Inductance", "default": "", "description": null}, {"name": "RRef(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientResistance", "default": "1), q(start=1)) \"Salient cage resistance\"", "description": null}, {"name": "Lsigma(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientInductance", "default": "1), q(start=1)) \"Salient cage stray inductance\"", "description": null}], "equations": [{"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2836, "start_col": 11, "end_col": 65}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2819, "end_line": 2836, "start_col": 13, "end_col": 65}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2818, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2715, "start_col": 11, "end_col": 64}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2698, "end_line": 2715, "start_col": 13, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2697, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.Package | components: SI.Current×1 | connections: 10 | params: m, useHeatPort, effectiveTurns | units: A, W, m | eq: equation connect(por", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2627, "end_line": 2877, "start_col": 3, "end_col": 15}, "code_text": "package Magnetic \"Library of magnetic models\"\r\n    extends Modelica.Icons.Package;\r\n    package FundamentalWave \"Library for magnetic fundamental wave effects in electric machines\"\r\n      extends Modelica.Icons.Package;\r\n      package BasicMachines \"Basic machine components and models\"\r\n        extends Modelica.Icons.Package;\r\n        package Components \"Components specially for electric machines\"\r\n          extends Modelica.Icons.Package;\r\n          model SymmetricMultiPhaseCageWinding \"Symmetrical rotor cage\"\r\n            import Modelica.Constants.pi;\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Integer m=3 \"Number of phases\";\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter SI.Resistance RRef\r\n              \"Winding resistance per phase at TRef\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter SI.Inductance Lsigma \"Cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            SI.Current i[m]=strayInductor.i \"Cage currents\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=m,\r\n              final effectiveTurns=fill(effectiveTurns, m),\r\n              final orientation=\r\n                  Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m))\r\n              \"Symmetric winding\" annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=m,\r\n                final L=fill(Lsigma, m)) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=m,\r\n              final R=fill(RRef, m),\r\n              final T_ref=fill(TRef, m),\r\n              final alpha=fill(alphaRef, m),\r\n              final T=fill(TOperational, m)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n                Placement(transformation(extent={{30,-30},{50,-10}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-20},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=m) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n            Modelica.Electrical.Polyphase.Basic.Star starAuxiliary(final m=m)\r\n              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n                      {100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nObsolete symmetric cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding\\\">SymmetricPolyphaseCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SymmetricMultiPhaseCageWinding;\r\n\r\n          model SaliencyCageWinding \"Rotor cage with saliency in d- and q-axis\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance\r\n              RRef(d(start=1), q(start=1)) \"Salient cage resistance\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientInductance\r\n              Lsigma(d(start=1), q(start=1)) \"Salient cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            Modelica.Blocks.Interfaces.RealOutput i[2](\r\n              each final quantity=\"ElectricCurrent\",\r\n              each final unit=\"A\") = resistor.i \"Currents out from damper\";\r\n            Modelica.Blocks.Interfaces.RealOutput lossPower(\r\n              final quantity=\"Power\",\r\n              final unit=\"W\") = sum(resistor.resistor.LossPower) \"Damper losses\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) annotation (\r\n                Placement(transformation(extent={{30,-90},{50,-70}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-80},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,\r\n                      -100},{100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete saliency cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding\\\">SaliencyCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SaliencyCageWinding;\r\n        end Components;\r\n      end BasicMachines;\r\n    end FundamentalWave;\r\n  end Magnetic", "checksum": "b742cd621dfcec9f3881131540872be140bc10a1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2627-2877", "component_count": 1, "connection_count": 10, "variable_count": 7, "physical_quantity_count": 3, "parameter_count": 7, "equation_count": 6, "dependency_count": 27, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 41.5, "model_type": "library", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "package", "equation_summary": "equation connect(port_p, winding.port_p) annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "search_keywords": ["ElectricCurrent", "Power", "SI.Current", "electrical", "library", "mechanical"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}], "connections": [{"from_connector": "port_p", "to_connector": "winding.port_p", "condition": null}, {"from_connector": "winding.port_n", "to_connector": "port_n", "condition": null}, {"from_connector": "ground.p", "to_connector": "star.pin_n", "condition": null}, {"from_connector": "strayInductor.plug_n", "to_connector": "resistor.plug_p", "condition": null}, {"from_connector": "strayInductor.plug_p", "to_connector": "winding.plug_p", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "winding.plug_n", "condition": null}, {"from_connector": "thermalCollector.port_a", "to_connector": "resistor.heatPort", "condition": null}, {"from_connector": "thermalCollector.port_b", "to_connector": "heatPortWinding", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "starAuxiliary.plug_p", "condition": null}, {"from_connector": "winding.plug_n", "to_connector": "resistor.plug_n", "condition": null}], "variables": [{"name": "alpha20", "type_name": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Temperature coefficient of winding at 20 degC\""}, {"name": "i", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "A", "quantity": "ElectricCurrent"}, "binding_equation": "resistor.i \"Currents out from damper\"", "comment": null}, {"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              \r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) \r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) \r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) \r\n            Modelica.Electrical.Analog.Basic.Ground ground \r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" \r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" \r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              \r\n            connect(winding.port_n, port_n)\r\n              \r\n            connect(ground.p, star.pin_n)\r\n              \r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              \r\n            connect(winding.plug_n, resistor.plug_n) \r\n            connect(star.plug_p, winding.plug_n) \r\n            connect(strayInductor.plug_p, winding.plug_p) \r\n            connect(thermalCollector.port_b, heatPortWinding) \r\n            connect(resistor.heatPort, thermalCollector.port_a) \r\n            \r\n          end SaliencyCageWinding", "comment": null}, {"name": "lossPower", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "W", "quantity": "Power"}, "binding_equation": "sum(resistor.resistor.LossPower) \"Damper losses\"", "comment": null}, {"name": "Components", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BasicMachines", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FundamentalWave", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "lossPower", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "turns", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Lsigma", "Modelica.Blocks.Interfaces", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Functions", "Modelica.Icons", "Modelica.Magnetic.FundamentalWave.BasicMachines.Components", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Magnetic.FundamentalWave.Interfaces", "Modelica.Magnetic.FundamentalWave.Types", "Modelica.Thermal.HeatTransfer.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "RRef", "SI", "github", "ground", "resistor", "resistor.resistor", "star", "starAuxiliary", "strayInductor", "thermalCollector", "winding"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"]}
{"fqn": "ObsoleteModelica4.Magnetic.FundamentalWave", "kind": "package", "name": "FundamentalWave", "package_path": ["ObsoleteModelica4", "Magnetic"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "m", "type": "Integer", "default": "3 \"Number of phases\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"Enable / disable (=fixed temperatures) thermal port\" parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance RRef(d(start=1), q(start=1)) \"Salient cage resistanc", "description": null}, {"name": "effectiveTurns", "type": "Real", "default": "1 \"Effective number of turns\"", "description": null}, {"name": "alpha20(start", "type": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "default": "0) \"Temperature coefficient of winding at 20 degC\"", "description": null}, {"name": "Lsigma \"Cage stray inductance\"", "type": "SI.Inductance", "default": "", "description": null}, {"name": "RRef(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientResistance", "default": "1), q(start=1)) \"Salient cage resistance\"", "description": null}, {"name": "Lsigma(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientInductance", "default": "1), q(start=1)) \"Salient cage stray inductance\"", "description": null}], "equations": [{"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2836, "start_col": 11, "end_col": 65}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2819, "end_line": 2836, "start_col": 13, "end_col": 65}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2818, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2715, "start_col": 11, "end_col": 64}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2698, "end_line": 2715, "start_col": 13, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2697, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.Package | components: SI.Current×1 | connections: 10 | params: m, useHeatPort, effectiveTurns | units: A, W, m | eq: equation connect(por", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2629, "end_line": 2876, "start_col": 5, "end_col": 24}, "code_text": "package FundamentalWave \"Library for magnetic fundamental wave effects in electric machines\"\r\n      extends Modelica.Icons.Package;\r\n      package BasicMachines \"Basic machine components and models\"\r\n        extends Modelica.Icons.Package;\r\n        package Components \"Components specially for electric machines\"\r\n          extends Modelica.Icons.Package;\r\n          model SymmetricMultiPhaseCageWinding \"Symmetrical rotor cage\"\r\n            import Modelica.Constants.pi;\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Integer m=3 \"Number of phases\";\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter SI.Resistance RRef\r\n              \"Winding resistance per phase at TRef\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter SI.Inductance Lsigma \"Cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            SI.Current i[m]=strayInductor.i \"Cage currents\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=m,\r\n              final effectiveTurns=fill(effectiveTurns, m),\r\n              final orientation=\r\n                  Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m))\r\n              \"Symmetric winding\" annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=m,\r\n                final L=fill(Lsigma, m)) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=m,\r\n              final R=fill(RRef, m),\r\n              final T_ref=fill(TRef, m),\r\n              final alpha=fill(alphaRef, m),\r\n              final T=fill(TOperational, m)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n                Placement(transformation(extent={{30,-30},{50,-10}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-20},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=m) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n            Modelica.Electrical.Polyphase.Basic.Star starAuxiliary(final m=m)\r\n              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n                      {100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nObsolete symmetric cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding\\\">SymmetricPolyphaseCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SymmetricMultiPhaseCageWinding;\r\n\r\n          model SaliencyCageWinding \"Rotor cage with saliency in d- and q-axis\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance\r\n              RRef(d(start=1), q(start=1)) \"Salient cage resistance\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientInductance\r\n              Lsigma(d(start=1), q(start=1)) \"Salient cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            Modelica.Blocks.Interfaces.RealOutput i[2](\r\n              each final quantity=\"ElectricCurrent\",\r\n              each final unit=\"A\") = resistor.i \"Currents out from damper\";\r\n            Modelica.Blocks.Interfaces.RealOutput lossPower(\r\n              final quantity=\"Power\",\r\n              final unit=\"W\") = sum(resistor.resistor.LossPower) \"Damper losses\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) annotation (\r\n                Placement(transformation(extent={{30,-90},{50,-70}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-80},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,\r\n                      -100},{100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete saliency cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding\\\">SaliencyCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SaliencyCageWinding;\r\n        end Components;\r\n      end BasicMachines;\r\n    end FundamentalWave", "checksum": "e2ccdd19395bda0e31f7ee40becdea6a13237203", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2629-2876", "component_count": 1, "connection_count": 10, "variable_count": 6, "physical_quantity_count": 3, "parameter_count": 7, "equation_count": 6, "dependency_count": 27, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 41.5, "model_type": "library", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "package", "equation_summary": "equation connect(port_p, winding.port_p) annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "search_keywords": ["ElectricCurrent", "Power", "SI.Current", "electrical", "library", "mechanical"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}], "connections": [{"from_connector": "port_p", "to_connector": "winding.port_p", "condition": null}, {"from_connector": "winding.port_n", "to_connector": "port_n", "condition": null}, {"from_connector": "ground.p", "to_connector": "star.pin_n", "condition": null}, {"from_connector": "strayInductor.plug_n", "to_connector": "resistor.plug_p", "condition": null}, {"from_connector": "strayInductor.plug_p", "to_connector": "winding.plug_p", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "winding.plug_n", "condition": null}, {"from_connector": "thermalCollector.port_a", "to_connector": "resistor.heatPort", "condition": null}, {"from_connector": "thermalCollector.port_b", "to_connector": "heatPortWinding", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "starAuxiliary.plug_p", "condition": null}, {"from_connector": "winding.plug_n", "to_connector": "resistor.plug_n", "condition": null}], "variables": [{"name": "alpha20", "type_name": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Temperature coefficient of winding at 20 degC\""}, {"name": "i", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "A", "quantity": "ElectricCurrent"}, "binding_equation": "resistor.i \"Currents out from damper\"", "comment": null}, {"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              \r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) \r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) \r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) \r\n            Modelica.Electrical.Analog.Basic.Ground ground \r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" \r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" \r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              \r\n            connect(winding.port_n, port_n)\r\n              \r\n            connect(ground.p, star.pin_n)\r\n              \r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              \r\n            connect(winding.plug_n, resistor.plug_n) \r\n            connect(star.plug_p, winding.plug_n) \r\n            connect(strayInductor.plug_p, winding.plug_p) \r\n            connect(thermalCollector.port_b, heatPortWinding) \r\n            connect(resistor.heatPort, thermalCollector.port_a) \r\n            \r\n          end SaliencyCageWinding", "comment": null}, {"name": "lossPower", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "W", "quantity": "Power"}, "binding_equation": "sum(resistor.resistor.LossPower) \"Damper losses\"", "comment": null}, {"name": "Components", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BasicMachines", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "lossPower", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "turns", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Lsigma", "Modelica.Blocks.Interfaces", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Functions", "Modelica.Icons", "Modelica.Magnetic.FundamentalWave.BasicMachines.Components", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Magnetic.FundamentalWave.Interfaces", "Modelica.Magnetic.FundamentalWave.Types", "Modelica.Thermal.HeatTransfer.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "RRef", "SI", "github", "ground", "resistor", "resistor.resistor", "star", "starAuxiliary", "strayInductor", "thermalCollector", "winding"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"]}
{"fqn": "ObsoleteModelica4.Magnetic.FundamentalWave.BasicMachines", "kind": "package", "name": "BasicMachines", "package_path": ["ObsoleteModelica4", "Magnetic", "FundamentalWave"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "m", "type": "Integer", "default": "3 \"Number of phases\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"Enable / disable (=fixed temperatures) thermal port\" parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance RRef(d(start=1), q(start=1)) \"Salient cage resistanc", "description": null}, {"name": "effectiveTurns", "type": "Real", "default": "1 \"Effective number of turns\"", "description": null}, {"name": "alpha20(start", "type": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "default": "0) \"Temperature coefficient of winding at 20 degC\"", "description": null}, {"name": "Lsigma \"Cage stray inductance\"", "type": "SI.Inductance", "default": "", "description": null}, {"name": "RRef(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientResistance", "default": "1), q(start=1)) \"Salient cage resistance\"", "description": null}, {"name": "Lsigma(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientInductance", "default": "1), q(start=1)) \"Salient cage stray inductance\"", "description": null}], "equations": [{"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2836, "start_col": 11, "end_col": 65}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2819, "end_line": 2836, "start_col": 13, "end_col": 65}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2818, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2715, "start_col": 11, "end_col": 64}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2698, "end_line": 2715, "start_col": 13, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2697, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.Package | components: SI.Current×1 | connections: 10 | params: m, useHeatPort, effectiveTurns | units: A, W, m | eq: equation connect(por", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2631, "end_line": 2875, "start_col": 7, "end_col": 24}, "code_text": "package BasicMachines \"Basic machine components and models\"\r\n        extends Modelica.Icons.Package;\r\n        package Components \"Components specially for electric machines\"\r\n          extends Modelica.Icons.Package;\r\n          model SymmetricMultiPhaseCageWinding \"Symmetrical rotor cage\"\r\n            import Modelica.Constants.pi;\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Integer m=3 \"Number of phases\";\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter SI.Resistance RRef\r\n              \"Winding resistance per phase at TRef\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter SI.Inductance Lsigma \"Cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            SI.Current i[m]=strayInductor.i \"Cage currents\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=m,\r\n              final effectiveTurns=fill(effectiveTurns, m),\r\n              final orientation=\r\n                  Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m))\r\n              \"Symmetric winding\" annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=m,\r\n                final L=fill(Lsigma, m)) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=m,\r\n              final R=fill(RRef, m),\r\n              final T_ref=fill(TRef, m),\r\n              final alpha=fill(alphaRef, m),\r\n              final T=fill(TOperational, m)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n                Placement(transformation(extent={{30,-30},{50,-10}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-20},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=m) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n            Modelica.Electrical.Polyphase.Basic.Star starAuxiliary(final m=m)\r\n              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n                      {100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nObsolete symmetric cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding\\\">SymmetricPolyphaseCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SymmetricMultiPhaseCageWinding;\r\n\r\n          model SaliencyCageWinding \"Rotor cage with saliency in d- and q-axis\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance\r\n              RRef(d(start=1), q(start=1)) \"Salient cage resistance\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientInductance\r\n              Lsigma(d(start=1), q(start=1)) \"Salient cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            Modelica.Blocks.Interfaces.RealOutput i[2](\r\n              each final quantity=\"ElectricCurrent\",\r\n              each final unit=\"A\") = resistor.i \"Currents out from damper\";\r\n            Modelica.Blocks.Interfaces.RealOutput lossPower(\r\n              final quantity=\"Power\",\r\n              final unit=\"W\") = sum(resistor.resistor.LossPower) \"Damper losses\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) annotation (\r\n                Placement(transformation(extent={{30,-90},{50,-70}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-80},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,\r\n                      -100},{100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete saliency cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding\\\">SaliencyCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SaliencyCageWinding;\r\n        end Components;\r\n      end BasicMachines", "checksum": "3c185ba8dc96b385fb70f3d0c817d491f3a5e3aa", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2631-2875", "component_count": 1, "connection_count": 10, "variable_count": 5, "physical_quantity_count": 3, "parameter_count": 7, "equation_count": 6, "dependency_count": 27, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 41.5, "model_type": "library", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "package", "equation_summary": "equation connect(port_p, winding.port_p) annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "search_keywords": ["ElectricCurrent", "Power", "SI.Current", "electrical", "library", "mechanical"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}], "connections": [{"from_connector": "port_p", "to_connector": "winding.port_p", "condition": null}, {"from_connector": "winding.port_n", "to_connector": "port_n", "condition": null}, {"from_connector": "ground.p", "to_connector": "star.pin_n", "condition": null}, {"from_connector": "strayInductor.plug_n", "to_connector": "resistor.plug_p", "condition": null}, {"from_connector": "strayInductor.plug_p", "to_connector": "winding.plug_p", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "winding.plug_n", "condition": null}, {"from_connector": "thermalCollector.port_a", "to_connector": "resistor.heatPort", "condition": null}, {"from_connector": "thermalCollector.port_b", "to_connector": "heatPortWinding", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "starAuxiliary.plug_p", "condition": null}, {"from_connector": "winding.plug_n", "to_connector": "resistor.plug_n", "condition": null}], "variables": [{"name": "alpha20", "type_name": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Temperature coefficient of winding at 20 degC\""}, {"name": "i", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "A", "quantity": "ElectricCurrent"}, "binding_equation": "resistor.i \"Currents out from damper\"", "comment": null}, {"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              \r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) \r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) \r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) \r\n            Modelica.Electrical.Analog.Basic.Ground ground \r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" \r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" \r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              \r\n            connect(winding.port_n, port_n)\r\n              \r\n            connect(ground.p, star.pin_n)\r\n              \r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              \r\n            connect(winding.plug_n, resistor.plug_n) \r\n            connect(star.plug_p, winding.plug_n) \r\n            connect(strayInductor.plug_p, winding.plug_p) \r\n            connect(thermalCollector.port_b, heatPortWinding) \r\n            connect(resistor.heatPort, thermalCollector.port_a) \r\n            \r\n          end SaliencyCageWinding", "comment": null}, {"name": "lossPower", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "W", "quantity": "Power"}, "binding_equation": "sum(resistor.resistor.LossPower) \"Damper losses\"", "comment": null}, {"name": "Components", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "lossPower", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "turns", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Lsigma", "Modelica.Blocks.Interfaces", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Functions", "Modelica.Icons", "Modelica.Magnetic.FundamentalWave.BasicMachines.Components", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Magnetic.FundamentalWave.Interfaces", "Modelica.Magnetic.FundamentalWave.Types", "Modelica.Thermal.HeatTransfer.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "RRef", "SI", "github", "ground", "resistor", "resistor.resistor", "star", "starAuxiliary", "strayInductor", "thermalCollector", "winding"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"]}
{"fqn": "ObsoleteModelica4.Magnetic.FundamentalWave.BasicMachines.Components", "kind": "package", "name": "Components", "package_path": ["ObsoleteModelica4", "Magnetic", "FundamentalWave", "BasicMachines"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "m", "type": "Integer", "default": "3 \"Number of phases\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"Enable / disable (=fixed temperatures) thermal port\" parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance RRef(d(start=1), q(start=1)) \"Salient cage resistanc", "description": null}, {"name": "effectiveTurns", "type": "Real", "default": "1 \"Effective number of turns\"", "description": null}, {"name": "alpha20(start", "type": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "default": "0) \"Temperature coefficient of winding at 20 degC\"", "description": null}, {"name": "Lsigma \"Cage stray inductance\"", "type": "SI.Inductance", "default": "", "description": null}, {"name": "RRef(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientResistance", "default": "1), q(start=1)) \"Salient cage resistance\"", "description": null}, {"name": "Lsigma(d(start", "type": "Modelica.Magnetic.FundamentalWave.Types.SalientInductance", "default": "1), q(start=1)) \"Salient cage stray inductance\"", "description": null}], "equations": [{"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2836, "start_col": 11, "end_col": 65}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2819, "end_line": 2836, "start_col": 13, "end_col": 65}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2818, "end_line": 2818, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2715, "start_col": 11, "end_col": 64}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2698, "end_line": 2715, "start_col": 13, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2697, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.Package | components: SI.Current×1 | connections: 10 | params: m, useHeatPort, effectiveTurns | units: A, W, m | eq: equation connect(por", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2633, "end_line": 2874, "start_col": 9, "end_col": 23}, "code_text": "package Components \"Components specially for electric machines\"\r\n          extends Modelica.Icons.Package;\r\n          model SymmetricMultiPhaseCageWinding \"Symmetrical rotor cage\"\r\n            import Modelica.Constants.pi;\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Integer m=3 \"Number of phases\";\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter SI.Resistance RRef\r\n              \"Winding resistance per phase at TRef\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter SI.Inductance Lsigma \"Cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            SI.Current i[m]=strayInductor.i \"Cage currents\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=m,\r\n              final effectiveTurns=fill(effectiveTurns, m),\r\n              final orientation=\r\n                  Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m))\r\n              \"Symmetric winding\" annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=m,\r\n                final L=fill(Lsigma, m)) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=m,\r\n              final R=fill(RRef, m),\r\n              final T_ref=fill(TRef, m),\r\n              final alpha=fill(alphaRef, m),\r\n              final T=fill(TOperational, m)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n                Placement(transformation(extent={{30,-30},{50,-10}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-20},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=m) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n            Modelica.Electrical.Polyphase.Basic.Star starAuxiliary(final m=m)\r\n              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n                      {100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nObsolete symmetric cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding\\\">SymmetricPolyphaseCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SymmetricMultiPhaseCageWinding;\r\n\r\n          model SaliencyCageWinding \"Rotor cage with saliency in d- and q-axis\"\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientResistance\r\n              RRef(d(start=1), q(start=1)) \"Salient cage resistance\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter Modelica.Magnetic.FundamentalWave.Types.SalientInductance\r\n              Lsigma(d(start=1), q(start=1)) \"Salient cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            Modelica.Blocks.Interfaces.RealOutput i[2](\r\n              each final quantity=\"ElectricCurrent\",\r\n              each final unit=\"A\") = resistor.i \"Currents out from damper\";\r\n            Modelica.Blocks.Interfaces.RealOutput lossPower(\r\n              final quantity=\"Power\",\r\n              final unit=\"W\") = sum(resistor.resistor.LossPower) \"Damper losses\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) annotation (\r\n                Placement(transformation(extent={{30,-90},{50,-70}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-80},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n)\r\n              annotation (Line(points={{10,0},{100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n)\r\n              annotation (Line(points={{60,-80},{50,-80}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(winding.plug_n, resistor.plug_n) annotation (Line(\r\n                points={{10,-20},{20,-20},{20,-80},{-20,-80}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-80},{20,-80},{20,-20},{10,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.heatPort, thermalCollector.port_a) annotation (Line(\r\n                points={{-30,-70},{-40,-70}}, color={191,0,0}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,\r\n                      -100},{100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nObsolete saliency cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SaliencyCageWinding\\\">SaliencyCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SaliencyCageWinding;\r\n        end Components", "checksum": "e44748c149b79f0ff79556beb47163ee8bc51cee", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2633-2874", "component_count": 1, "connection_count": 10, "variable_count": 4, "physical_quantity_count": 3, "parameter_count": 7, "equation_count": 6, "dependency_count": 27, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 41.5, "model_type": "library", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "package", "equation_summary": "equation connect(port_p, winding.port_p) annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "search_keywords": ["ElectricCurrent", "Power", "SI.Current", "electrical", "library", "mechanical"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}], "connections": [{"from_connector": "port_p", "to_connector": "winding.port_p", "condition": null}, {"from_connector": "winding.port_n", "to_connector": "port_n", "condition": null}, {"from_connector": "ground.p", "to_connector": "star.pin_n", "condition": null}, {"from_connector": "strayInductor.plug_n", "to_connector": "resistor.plug_p", "condition": null}, {"from_connector": "strayInductor.plug_p", "to_connector": "winding.plug_p", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "winding.plug_n", "condition": null}, {"from_connector": "thermalCollector.port_a", "to_connector": "resistor.heatPort", "condition": null}, {"from_connector": "thermalCollector.port_b", "to_connector": "heatPortWinding", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "starAuxiliary.plug_p", "condition": null}, {"from_connector": "winding.plug_n", "to_connector": "resistor.plug_n", "condition": null}], "variables": [{"name": "alpha20", "type_name": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Temperature coefficient of winding at 20 degC\""}, {"name": "i", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "A", "quantity": "ElectricCurrent"}, "binding_equation": "resistor.i \"Currents out from damper\"", "comment": null}, {"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "2,\r\n              final orientation={0,Modelica.Constants.pi/2},\r\n              final effectiveTurns=fill(effectiveTurns, 2)) \"Symmetric winding\"\r\n              \r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=2,\r\n                final L={Lsigma.d,Lsigma.q}) \r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=2,\r\n              final R={RRef.d,RRef.q},\r\n              final T_ref=fill(TRef, 2),\r\n              final alpha=fill(alphaRef, 2),\r\n              final T=fill(TOperational, 2)) \r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=2) \r\n            Modelica.Electrical.Analog.Basic.Ground ground \r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" \r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=2) if useHeatPort \"Connector of thermal rotor resistance heat ports\" \r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              \r\n            connect(winding.port_n, port_n)\r\n              \r\n            connect(ground.p, star.pin_n)\r\n              \r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              \r\n            connect(winding.plug_n, resistor.plug_n) \r\n            connect(star.plug_p, winding.plug_n) \r\n            connect(strayInductor.plug_p, winding.plug_p) \r\n            connect(thermalCollector.port_b, heatPortWinding) \r\n            connect(resistor.heatPort, thermalCollector.port_a) \r\n            \r\n          end SaliencyCageWinding", "comment": null}, {"name": "lossPower", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "W", "quantity": "Power"}, "binding_equation": "sum(resistor.resistor.LossPower) \"Damper losses\"", "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "lossPower", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "turns", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Lsigma", "Modelica.Blocks.Interfaces", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Functions", "Modelica.Icons", "Modelica.Magnetic.FundamentalWave.BasicMachines.Components", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Magnetic.FundamentalWave.Interfaces", "Modelica.Magnetic.FundamentalWave.Types", "Modelica.Thermal.HeatTransfer.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "RRef", "SI", "github", "ground", "resistor", "resistor.resistor", "star", "starAuxiliary", "strayInductor", "thermalCollector", "winding"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"]}
{"fqn": "ObsoleteModelica4.Mechanics", "kind": "package", "name": "Mechanics", "package_path": ["ObsoleteModelica4"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint", "Modelica.Icons.TypesPackage", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"], "imports": [], "parameters": [{"name": "useAxisFlange", "type": "Boolean", "default": "false \"= true, if axis flange is enabled\" parameter Boolean animation=true \"= true, if animation shall be enabled (show axis as cylinder)\"", "description": null}, {"name": "n", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,0,1} \"Axis of rotation resolved in frame_a (= same as in frame_b)\" parameter SI.Angle phi_offset=0 \"Relative angle offset (angle = phi_offset + phi)\"", "description": null}, {"name": "boxWidthDirection", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,1,0} \"Vector in width direction of box, resolved in frame_a\" parameter SI.Distance boxWidth=world.defaultJointWidth \"Width of prismatic joint box\" parameter SI.Distance boxHeigh", "description": null}, {"name": "cylinderLength", "type": "SI.Distance", "default": "world.defaultJointLength \"Length of cylinder representing the joint axis\" parameter SI.Distance cylinderDiameter=world.defaultJointWidth \"Diameter of cylinder representing the join", "description": null}, {"name": "animation", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "length", "type": "SI.Position", "default": "10 \"Length and width of box (center is at x=y=0)\" parameter SI.Position height = 0.02 \"Height of box (upper surface is at z=0, lower surface is at z=-height)\" parameter Modelica.Me", "description": null}, {"name": "useSupport", "type": "Boolean", "default": "false \"= true, if support flange enabled, otherwise implicitly grounded\" extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "description": null}, {"name": "if animation shall be enabled\"", "type": "Boolean", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n          s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1285, "start_col": 9, "end_col": 69}}, {"equations": ["s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1285, "start_col": 11, "end_col": 69}}, {"equations": ["s_b = flange_b.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1281, "end_line": 1281, "start_col": 11, "end_col": 47}}, {"equations": ["s_a = flange_a.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1280, "start_col": 11, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1279, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1217, "start_col": 9, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1217, "start_col": 11, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1213, "start_col": 11, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1212, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-87}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1140, "end_line": 1144, "start_col": 9, "end_col": 52}}, {"equations": ["connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-87}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1141, "end_line": 1144, "start_col": 11, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1140, "end_line": 1140, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-86}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1073, "end_line": 1077, "start_col": 9, "end_col": 52}}, {"equations": ["connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}))", "connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-86}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1074, "end_line": 1077, "start_col": 11, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1073, "end_line": 1073, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n\r\n           connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 980, "end_line": 985, "start_col": 9, "end_col": 32}}, {"equations": ["connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 982, "end_line": 985, "start_col": 12, "end_col": 32}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 980, "end_line": 980, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 812, "start_col": 9, "end_col": 41}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 812, "start_col": 11, "end_col": 41}}, {"equations": ["phi = internalAxis.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 805, "end_line": 805, "start_col": 11, "end_col": 33}}, {"equations": ["tau = -frame_b.t*e"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 802, "end_line": 802, "start_col": 11, "end_col": 29}}, {"equations": ["if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 789, "end_line": 799, "start_col": 11, "end_col": 17}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 798, "start_col": 13, "end_col": 89}}, {"equations": ["frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 798, "end_line": 798, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 797, "end_line": 797, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 796, "end_line": 796, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 795, "start_col": 13, "end_col": 96}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 793, "start_col": 13, "end_col": 89}}, {"equations": ["frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 793, "end_line": 793, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 792, "end_line": 792, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 791, "end_line": 791, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 790, "start_col": 13, "end_col": 95}}, {"equations": ["frame_b.r_0 = frame_a.r_0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 787, "end_line": 787, "start_col": 11, "end_col": 36}}, {"equations": ["a = der(w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 784, "end_line": 784, "start_col": 11, "end_col": 21}}, {"equations": ["w = der(phi)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 783, "end_line": 783, "start_col": 11, "end_col": 23}}, {"equations": ["angle = phi_offset + phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 782, "end_line": 782, "start_col": 11, "end_col": 35}}, {"equations": ["assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 779, "end_line": 780, "start_col": 11, "end_col": 68}}, {"equations": ["assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 777, "end_line": 778, "start_col": 11, "end_col": 68}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 775, "start_col": 11, "end_col": 51}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 774, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 587, "start_col": 9, "end_col": 59}}, {"equations": ["v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 587, "start_col": 11, "end_col": 59}}, {"equations": ["s = internalAxis.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 580, "end_line": 580, "start_col": 11, "end_col": 29}}, {"equations": ["f = -e*frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 577, "end_line": 577, "start_col": 11, "end_col": 27}}, {"equations": ["zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 574, "end_line": 574, "start_col": 11, "end_col": 80}}, {"equations": ["zeros(3) = frame_a.f + frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 573, "end_line": 573, "start_col": 11, "end_col": 43}}, {"equations": ["frame_b.R = frame_a.R"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 570, "end_line": 570, "start_col": 11, "end_col": 32}}, {"equations": ["frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 569, "end_line": 569, "start_col": 11, "end_col": 112}}, {"equations": ["a = der(v)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 566, "end_line": 566, "start_col": 11, "end_col": 21}}, {"equations": ["v = der(s)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 565, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 564, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: SI.Length×2, SI.Acceleration×1, SI.Force×1 | connections: 7 | params: useAxisFlange, n, boxWidthDirection | units: ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 483, "end_line": 1324, "start_col": 3, "end_col": 16}, "code_text": "package Mechanics \"Library of 1-dim. and 3-dim. mechanical components (multi-body, rotational, translational)\"\r\n    extends Modelica.Icons.Package;\r\n    package MultiBody \"Library to model 3-dimensional mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Joints \"Components that constrain the motion between two frames\"\r\n        extends Modelica.Icons.Package;\r\n        model Prismatic \"Prismatic joint (1 translational degree-of-freedom, 2 potential states, optional axis flange, optional distance offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          extends Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint;\r\n\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. translational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{90,50},{70,70}})));\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. translational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-30,50},{-50,70}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true \"= true, if animation shall be enabled\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={1,0,0}\r\n            \"Axis of translation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Position s_offset=0\r\n            \"Relative distance offset (distance between frame_a and frame_b = s_offset + s)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis boxWidthDirection={0,1,0}\r\n            \"Vector in width direction of box, resolved in frame_a\"\r\n            annotation (Evaluate=true, Dialog(tab=\"Animation\", group=\r\n                  \"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxWidth=world.defaultJointWidth\r\n            \"Width of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxHeight=boxWidth \"Height of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color boxColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\";\r\n\r\n          SI.Position s(start=0, final stateSelect=stateSelect)\r\n            \"Relative distance between frame_a and frame_b\"\r\n            annotation (unassignedMessage=\"\r\nThe relative distance s of a prismatic joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the prismatic joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n\r\n          SI.Velocity v(start=0,final stateSelect=stateSelect)\r\n            \"First derivative of s (relative velocity)\";\r\n          SI.Acceleration a(start=0) \"Second derivative of s (relative acceleration)\";\r\n          SI.Force f \"Actuation force in direction of joint axis\";\r\n\r\n        protected\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape box(\r\n            shapeType=\"box\",\r\n            color=boxColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=if noEvent(abs(s + s_offset) > 1.e-6) then s + s_offset else 1.e-6,\r\n            width=boxWidth,\r\n            height=boxHeight,\r\n            lengthDirection=e,\r\n            widthDirection=boxWidthDirection,\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalAxis(f = f)\r\n            annotation (Placement(transformation(extent={{70,50},{90,30}})));\r\n          Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(f_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,30},{60,50}})));\r\n        equation\r\n          v = der(s);\r\n          a = der(v);\r\n\r\n          // relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s));\r\n          frame_b.R = frame_a.R;\r\n\r\n          // Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f;\r\n          zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f);\r\n\r\n          // d'Alemberts principle\r\n          f = -e*frame_b.f;\r\n\r\n          // Connection to internal connectors\r\n          s = internalAxis.s;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}));\r\n          connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Prismatic instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-50},{-30,41}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-100,40},{-30,50}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,-30},{100,20}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,20},{100,30}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Line(points={{-30,-50},{-30,50}}),\r\n                Line(points={{100,-30},{100,21}}),\r\n                Text(\r\n                  extent={{60,12},{96,-13}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Text(\r\n                  extent={{-95,13},{-60,-9}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-135},{150,-95}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  extent={{-150,-90},{150,-60}},\r\n                  textString=\"n=%n\"),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{90,30},{100,70}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,60},{150,100}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b is translated along axis n which is fixed in frame_a.\r\nThe two frames coincide when the relative distance \\\"s = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Translational\\\">Modelica.Mechanics.Translational</a>\r\nlibrary.\r\n\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the relative distance \\\"s\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the relative distance and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a prismatic\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {1,1,0}).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Prismatic.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Prismatic;\r\n\r\n        model Revolute \"Revolute joint (1 rotational degree-of-freedom, 2 potential states, optional axis flange, optional angle offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. rotational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{10,90},{-10,110}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. rotational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-70,90},{-50,110}})));\r\n\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{-116,-16},{-84,16}})));\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{84,-16},{116,16}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true\r\n            \"= true, if animation shall be enabled (show axis as cylinder)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={0,0,1}\r\n            \"Axis of rotation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Angle phi_offset=0\r\n            \"Relative angle offset (angle = phi_offset + phi)\";\r\n          parameter SI.Distance cylinderLength=world.defaultJointLength\r\n            \"Length of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance cylinderDiameter=world.defaultJointWidth\r\n            \"Diameter of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color cylinderColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             annotation (unassignedMessage=\"\r\nThe rotation angle phi of a revolute joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the revolute joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\";\r\n          SI.AngularAcceleration a(start=0)\r\n            \"Second derivative of angle phi (relative angular acceleration)\";\r\n          SI.Torque tau \"Driving torque in direction of axis of rotation\";\r\n          SI.Angle angle \"= phi_offset + phi\";\r\n\r\n        protected\r\n          outer Modelica.Mechanics.MultiBody.World world;\r\n          parameter Real e[3](each final unit=\"1\")=Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";\r\n          Modelica.Mechanics.MultiBody.Frames.Orientation R_rel\r\n            \"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\";\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape cylinder(\r\n            shapeType=\"cylinder\",\r\n            color=cylinderColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=cylinderLength,\r\n            width=cylinderDiameter,\r\n            height=cylinderDiameter,\r\n            lengthDirection=e,\r\n            widthDirection={0,1,0},\r\n            r_shape=-e*(cylinderLength/2),\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n\r\n        protected\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed\r\n            \"support flange is fixed to ground\"\r\n            annotation (Placement(transformation(extent={{-70,70},{-50,90}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalAxis(tau=tau)\r\n            annotation (Placement(transformation(extent={{-10,90},{10,70}})));\r\n          Modelica.Mechanics.Rotational.Sources.ConstantTorque constantTorque(tau_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,70},{20,90}})));\r\n        equation\r\n          Connections.branch(frame_a.R, frame_b.R);\r\n\r\n          assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\");\r\n          assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\");\r\n\r\n          angle = phi_offset + phi;\r\n          w = der(phi);\r\n          a = der(w);\r\n\r\n          // relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0;\r\n\r\n          if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w);\r\n            frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel);\r\n            frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f);\r\n            frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t);\r\n          else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w);\r\n            frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel);\r\n            frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f);\r\n            frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t);\r\n          end if;\r\n\r\n          // d'Alemberts principle\r\n          tau = -frame_b.t*e;\r\n\r\n          // Connection to internal connectors\r\n          phi = internalAxis.phi;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}));\r\n          connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Revolute instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-60},{-30,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(\r\n                  extent={{30,-60},{100,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(extent={{-100,60},{-30,-60}}, lineColor={64,64,64}, radius=10),\r\n                Rectangle(extent={{30,60},{100,-60}}, lineColor={64,64,64}, radius=10),\r\n                Text(\r\n                  extent={{-90,14},{-54,-11}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  extent={{51,11},{87,-14}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,80},{-20,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,80},{20,60}}),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{-10,100},{10,50}},\r\n                  fillPattern=FillPattern.VerticalCylinder,\r\n                  fillColor={192,192,192}),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{-10,30},{10,30},{30,50},{-30,50},{-10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Rectangle(\r\n                  extent={{-30,11},{30,-10}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{10,30},{30,50},{30,-50},{10,-30},{10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Text(\r\n                  extent={{-150,-110},{150,-80}},\r\n                  textString=\"n=%n\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-155},{150,-115}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,70},{-60,70},{-60,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,70},{50,70},{50,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-90,100},{-30,100}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-30,100},{-50,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-49,100},{-70,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-70,100},{-90,80}}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,70},{150,110}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b rotates around axis n which is fixed in frame_a.\r\nThe two frames coincide when the rotation angle \\\"phi = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Rotational\\\">Modelica.Mechanics.Rotational</a>\r\nlibrary.\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the rotation angle \\\"phi\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the joint angle and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIf a <strong>planar loop</strong> is present, e.g., consisting of 4 revolute joints\r\nwhere the joint axes are all parallel to each other, then there is no\r\nlonger a unique mathematical solution and the symbolic algorithms will\r\nfail. Usually, an error message will be printed pointing out this\r\nsituation. In this case, one revolute joint of the loop has to be replaced\r\nby a Joints.RevolutePlanarLoopConstraint joint. The\r\neffect is that from the 5 constraints of a usual revolute joint,\r\n3 constraints are removed and replaced by appropriate known\r\nvariables (e.g., the force in the direction of the axis of rotation is\r\ntreated as known with value equal to zero; for standard revolute joints,\r\nthis force is an unknown quantity).\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a revolute\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {0,0,1}, phi.start = 45<sup>o</sup>).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Revolute.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Revolute;\r\n      end Joints;\r\n\r\n      package Visualizers \"3-dimensional visual objects used for animation\"\r\n        extends Modelica.Icons.Package;\r\n        model Ground \"Visualizing the ground (box in z=0)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n           parameter Boolean animation=true\r\n           \"= true, if animation of ground shall be enabled\";\r\n           parameter SI.Position length = 10\r\n           \"Length and width of box (center is at x=y=0)\" annotation (Dialog(enable=animation));\r\n           parameter SI.Position height = 0.02\r\n           \"Height of box (upper surface is at z=0, lower surface is at z=-height)\" annotation (Dialog(enable=animation));\r\n           parameter Modelica.Mechanics.MultiBody.Types.Color groundColor={0,255,0}\r\n           \"Color of box\" annotation (Dialog(colorSelector=true, enable=animation));\r\n\r\n           Modelica.Mechanics.MultiBody.Visualizers.FixedShape ground(\r\n             lengthDirection={1,0,0},\r\n             widthDirection={0,1,0},\r\n             animation=animation,\r\n             r_shape={-length/2,0,-height},\r\n             length=length,\r\n             height=height,\r\n             color=groundColor,\r\n             width=length)\r\n             annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n           Modelica.Mechanics.MultiBody.Parts.Fixed fixed\r\n             annotation (Placement(transformation(extent={{-60,0},{-40,20}})));\r\n        equation\r\n\r\n           connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5));\r\n           annotation (\r\n             obsolete = \"Obsolete model - use ground visualization feature in Modelica.Mechanics.MultiBody.World, or use model Modelica.Mechanics.MultiBody.Visualizers.Rectangle instead\",\r\n             Icon(\r\n               coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}),\r\n               graphics = {\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {126, 181, 78}, fillPattern = FillPattern.Solid, points = {{-100, -30}, {20, -90}, {100, 0}, {-10, 40}}),\r\n                 Text(lineColor = {64, 64, 64}, extent = {{20, 70}, {60, 100}}, textString = \"z\", horizontalAlignment = TextAlignment.Left),\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {14, 111, 1}, fillPattern = FillPattern.Solid, points = {{100, -10}, {20, -100}, {20, -90}, {100, 0}}),\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {14, 111, 1}, fillPattern = FillPattern.Solid, points = {{-100, -40}, {20, -100}, {20, -90}, {-100, -30}}), Line(origin = {6, -8}, points={{-6,-10},{-6,108}}),\r\n                 Polygon(origin = {6, 0}, points={{-6,102},{-14,72},{2,72},{-6,102}}, fillPattern=FillPattern.Solid),\r\n                 Text(lineColor = {0,0,255}, extent = {{-150, -145}, {150, -105}}, textString = \"%name\")}),\r\n             Documentation(info = \"<html>\r\n<p>\r\nThis shape visualizes the x-y plane by a box.\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Visualizers/Ground.png\\\">\r\n</blockquote>\r\n</html>\"));\r\n        end Ground;\r\n      end Visualizers;\r\n      package Types \"Constants and types with choices, especially to build menus\"\r\n        extends Modelica.Icons.TypesPackage;\r\n        type Init = enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        annotation (\r\n          obsolete = \"Obsolete type - use start/fixed attributes instead\",\r\n          Documentation(info=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th><strong>Types.Init.</strong></th><th><strong>Meaning</strong></th></tr>\r\n<tr><td>Free</td>\r\n    <td>No initialization</td></tr>\r\n\r\n<tr><td>PositionVelocity</td>\r\n    <td>Initialize generalized position and velocity variables</td></tr>\r\n\r\n<tr><td>SteadyState</td>\r\n    <td>Initialize in steady state (velocity and acceleration are zero)</td></tr>\r\n\r\n<tr><td>Position </td>\r\n    <td>Initialize only generalized position variable(s)</td></tr>\r\n\r\n<tr><td>Velocity</td>\r\n    <td>Initialize only generalized velocity variable(s)</td></tr>\r\n\r\n<tr><td>VelocityAcceleration</td>\r\n    <td>Initialize generalized velocity and acceleration variables</td></tr>\r\n\r\n<tr><td>PositionVelocityAcceleration</td>\r\n    <td>Initialize generalized position, velocity and acceleration variables</td></tr>\r\n</table>\r\n</html>\"));\r\n      end Types;\r\n    end MultiBody;\r\n\r\n    package Rotational \"Library to model 1-dimensional, rotational mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Interfaces \"Connectors and partial models for 1D rotational mechanical components\"\r\n        extends Modelica.Icons.Package;\r\n        partial model PartialElementaryOneFlangeAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryOneFlangeAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange \"Flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        protected\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalSupport(tau=-flange.tau)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-96},{30,-76}})));\r\n        equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}));\r\n          connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-86}}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Rotational.Interfaces.PartialElementaryOneFlangeAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. rotational component with one flange and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n</html>\"),\r\n            Diagram(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={Text(\r\n                      extent={{25,-97},{65,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\"),Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryOneFlangeAndSupport;\r\n\r\n        partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a \"Flange of left shaft\" annotation (Placement(\r\n                transformation(extent={{-110,-10},{-90,10}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b \"Flange of right shaft\" annotation (Placement(\r\n                transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        protected\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalSupport(\r\n            tau=-flange_a.tau - flange_b.tau)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        equation\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}));\r\n          connect(internalSupport.flange, fixed.flange) annotation (Line(\r\n              points={{0,-80},{20,-80},{20,-87}}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Rotational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. rotational component with two flanges and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n</html>\"),\r\n            Diagram(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\"),Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport;\r\n      end Interfaces;\r\n    end Rotational;\r\n\r\n    package Translational \"Library to model 1-dimensional, translational mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Interfaces \"Interfaces for 1-dim. translational mechanical components\"\r\n        extends Modelica.Icons.Package;\r\n        partial model PartialElementaryOneFlangeAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryOneFlangeAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          SI.Length s\r\n            \"Distance between flange and support (= flange.s - support.s)\";\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b flange \"Flange of component\" annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\" annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s = flange.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryOneFlangeAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n    <p>\r\nThis is a 1-dim. translational component with one flange and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryOneFlangeAndSupport;\r\n\r\n        partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges;\r\n          SI.Length s_a \"Distance between left flange and support\";\r\n          SI.Length s_b \"Distance between right flange and support\";\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange_a.f - flange_b.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s_a = flange_a.s - internalSupport.s;\r\n          s_b = flange_b.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. translational component with two flanges and an additional support.\r\nIt is used e.g., to build up elementary ideal gear components. The component\r\ncontains the force balance, i.e., the sum of the forces of the connectors\r\nis zero (therefore, components that are based on PartialGear cannot have\r\na mass). The support connector needs to be connected\r\nto avoid the unphysical behavior that the\r\nsupport force is required to be zero (= the default value, if the\r\nconnector is not connected).\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport;\r\n      end Interfaces;\r\n    end Translational;\r\n  end Mechanics", "checksum": "851456064aa2a676ab2fe68262eecb35c3e0856c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:483-1324", "component_count": 6, "connection_count": 7, "variable_count": 25, "physical_quantity_count": 9, "parameter_count": 8, "equation_count": 52, "dependency_count": 45, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 89.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation s_a = flange_a.s - internalSupport.s", "search_keywords": ["Acceleration", "Force", "Length", "N.m", "SI.Acceleration", "SI.Angle", "SI.Force", "SI.Length", "SI.Torque", "Torque", "Velocity", "m/s", "m/s2", "mechanical", "system"]}, "components": [{"name": "a", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Second derivative of s (relative acceleration)"}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Actuation force in direction of joint axis"}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Driving torque in direction of axis of rotation"}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= phi_offset + phi"}, {"name": "s_a", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between left flange and support"}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between right flange and support"}], "connections": [{"from_connector": "fixed.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalAxis.flange", "to_connector": "axis", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "constantTorque.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "fixed.frame_b", "to_connector": "ground.frame_a", "condition": null}, {"from_connector": "internalSupport.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalSupport.flange", "to_connector": "fixed.flange", "condition": null}], "variables": [{"name": "boxColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" \r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\"", "comment": null}, {"name": "v", "type_name": "equation", "prefixes": [], "attributes": {"start": "0", "stateSelect": "stateSelect"}, "binding_equation": "der(s)", "comment": "\"First derivative of s (relative velocity)\""}, {"name": "a", "type_name": "SI.AngularAcceleration", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Second derivative of angle phi (relative angular acceleration)\""}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Actuation force in direction of joint axis\""}, {"name": "Prismatic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cylinderColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" \r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             \r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\"", "comment": null}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Driving torque in direction of axis of rotation\""}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= phi_offset + phi\""}, {"name": "world", "type_name": "Modelica.Mechanics.MultiBody.World", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "R_rel", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "comment": "\"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Revolute", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Joints", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Ground", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Visualizers", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Init", "type_name": "type", "prefixes": [], "attributes": {}, "binding_equation": "enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        \r\n      end Types", "comment": null}, {"name": "MultiBody", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialElementaryOneFlangeAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialElementaryTwoFlangesAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Interfaces", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Rotational", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange.s - internalSupport.s", "comment": "\"Distance between flange and support (= flange.s - support.s)\""}, {"name": "s_a", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange_a.s - internalSupport.s", "comment": "\"Distance between left flange and support\""}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Distance between right flange and support\""}, {"name": "Translational", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "a", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "f", "unit": "N", "display_unit": null, "quantity": "Force", "nominal": null}, {"name": "tau", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "s", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_a", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_b", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "Advanced", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "phi", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Connections", "FillPattern", "Ground", "Joints", "LinePattern", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Mechanics", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Parts", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "Modelica.Mechanics.MultiBody.Visualizers", "Modelica.Mechanics.MultiBody.Visualizers.Advanced", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sources", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "Modelica.Mechanics.Translational.Sources", "Prismatic", "Revolute", "SI", "StateSelect", "TextAlignment", "Types", "constantForce", "constantTorque", "e", "fixed", "flange", "flange_a", "flange_b", "frame_a", "frame_b", "ground", "i", "internalAxis", "internalSupport", "phi", "support", "world"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint", "Modelica.Icons.TypesPackage", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"]}
{"fqn": "ObsoleteModelica4.Mechanics.Translational", "kind": "package", "name": "Translational", "package_path": ["ObsoleteModelica4", "Mechanics"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"], "imports": [], "parameters": [{"name": "useSupport", "type": "Boolean", "default": "false \"= true, if support flange enabled, otherwise implicitly grounded\" extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "description": null}], "equations": [{"equations": ["equation\r\n          s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1285, "start_col": 9, "end_col": 69}}, {"equations": ["s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1285, "start_col": 11, "end_col": 69}}, {"equations": ["s_b = flange_b.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1281, "end_line": 1281, "start_col": 11, "end_col": 47}}, {"equations": ["s_a = flange_a.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1280, "start_col": 11, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1279, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1217, "start_col": 9, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1217, "start_col": 11, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1213, "start_col": 11, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1212, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: SI.Length×2 | connections: 2 | params: useSupport | units: m, m, m | eq: equation s_a = flange_a.s - internalSuppor", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1186, "end_line": 1323, "start_col": 5, "end_col": 22}, "code_text": "package Translational \"Library to model 1-dimensional, translational mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Interfaces \"Interfaces for 1-dim. translational mechanical components\"\r\n        extends Modelica.Icons.Package;\r\n        partial model PartialElementaryOneFlangeAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryOneFlangeAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          SI.Length s\r\n            \"Distance between flange and support (= flange.s - support.s)\";\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b flange \"Flange of component\" annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\" annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s = flange.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryOneFlangeAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n    <p>\r\nThis is a 1-dim. translational component with one flange and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryOneFlangeAndSupport;\r\n\r\n        partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges;\r\n          SI.Length s_a \"Distance between left flange and support\";\r\n          SI.Length s_b \"Distance between right flange and support\";\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange_a.f - flange_b.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s_a = flange_a.s - internalSupport.s;\r\n          s_b = flange_b.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. translational component with two flanges and an additional support.\r\nIt is used e.g., to build up elementary ideal gear components. The component\r\ncontains the force balance, i.e., the sum of the forces of the connectors\r\nis zero (therefore, components that are based on PartialGear cannot have\r\na mass). The support connector needs to be connected\r\nto avoid the unphysical behavior that the\r\nsupport force is required to be zero (= the default value, if the\r\nconnector is not connected).\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport;\r\n      end Interfaces;\r\n    end Translational", "checksum": "75ea4a0ab9bff2ce883461892fa9d372ba9a4e6c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:1186-1323", "component_count": 2, "connection_count": 2, "variable_count": 6, "physical_quantity_count": 3, "parameter_count": 1, "equation_count": 9, "dependency_count": 12, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 19.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation s_a = flange_a.s - internalSupport.s", "search_keywords": ["Length", "SI.Length", "mechanical", "system"]}, "components": [{"name": "s_a", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between left flange and support"}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between right flange and support"}], "connections": [{"from_connector": "internalSupport.flange", "to_connector": "support", "condition": null}, {"from_connector": "fixed.flange", "to_connector": "internalSupport.flange", "condition": null}], "variables": [{"name": "s", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange.s - internalSupport.s", "comment": "\"Distance between flange and support (= flange.s - support.s)\""}, {"name": "PartialElementaryOneFlangeAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s_a", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange_a.s - internalSupport.s", "comment": "\"Distance between left flange and support\""}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Distance between right flange and support\""}, {"name": "PartialElementaryTwoFlangesAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Interfaces", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "s", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_a", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_b", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}], "dependencies": ["Modelica.Icons", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "SI", "e", "fixed", "flange", "flange_a", "flange_b", "i", "internalSupport", "support"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"]}
{"fqn": "ObsoleteModelica4.Mechanics.Translational.Interfaces", "kind": "package", "name": "Interfaces", "package_path": ["ObsoleteModelica4", "Mechanics", "Translational"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"], "imports": [], "parameters": [{"name": "useSupport", "type": "Boolean", "default": "false \"= true, if support flange enabled, otherwise implicitly grounded\" extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "description": null}], "equations": [{"equations": ["equation\r\n          s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1285, "start_col": 9, "end_col": 69}}, {"equations": ["s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1285, "start_col": 11, "end_col": 69}}, {"equations": ["s_b = flange_b.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1281, "end_line": 1281, "start_col": 11, "end_col": 47}}, {"equations": ["s_a = flange_a.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1280, "start_col": 11, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1279, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1217, "start_col": 9, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1217, "start_col": 11, "end_col": 69}}, {"equations": ["s = flange.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1213, "end_line": 1213, "start_col": 11, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1212, "end_line": 1212, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: SI.Length×2 | connections: 2 | params: useSupport | units: m, m, m | eq: equation s_a = flange_a.s - internalSuppor", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1188, "end_line": 1322, "start_col": 7, "end_col": 21}, "code_text": "package Interfaces \"Interfaces for 1-dim. translational mechanical components\"\r\n        extends Modelica.Icons.Package;\r\n        partial model PartialElementaryOneFlangeAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryOneFlangeAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          SI.Length s\r\n            \"Distance between flange and support (= flange.s - support.s)\";\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b flange \"Flange of component\" annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\" annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s = flange.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryOneFlangeAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n    <p>\r\nThis is a 1-dim. translational component with one flange and a support/housing.\r\nIt is used to build up elementary components of a drive train with\r\nequations in the text layer.\r\n</p>\r\n\r\n<p>\r\nIf <em>useSupport=true</em>, the support connector is conditionally enabled\r\nand needs to be connected.<br>\r\nIf <em>useSupport=false</em>, the support connector is conditionally disabled\r\nand instead the component is internally fixed to ground.\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryOneFlangeAndSupport;\r\n\r\n        partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges;\r\n          SI.Length s_a \"Distance between left flange and support\";\r\n          SI.Length s_b \"Distance between right flange and support\";\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange_a.f - flange_b.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s_a = flange_a.s - internalSupport.s;\r\n          s_b = flange_b.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. translational component with two flanges and an additional support.\r\nIt is used e.g., to build up elementary ideal gear components. The component\r\ncontains the force balance, i.e., the sum of the forces of the connectors\r\nis zero (therefore, components that are based on PartialGear cannot have\r\na mass). The support connector needs to be connected\r\nto avoid the unphysical behavior that the\r\nsupport force is required to be zero (= the default value, if the\r\nconnector is not connected).\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport;\r\n      end Interfaces", "checksum": "632e425138e1d6e3e2c554aab6753860cd255887", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:1188-1322", "component_count": 2, "connection_count": 2, "variable_count": 5, "physical_quantity_count": 3, "parameter_count": 1, "equation_count": 9, "dependency_count": 12, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 19.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation s_a = flange_a.s - internalSupport.s", "search_keywords": ["Length", "SI.Length", "mechanical", "system"]}, "components": [{"name": "s_a", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between left flange and support"}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between right flange and support"}], "connections": [{"from_connector": "internalSupport.flange", "to_connector": "support", "condition": null}, {"from_connector": "fixed.flange", "to_connector": "internalSupport.flange", "condition": null}], "variables": [{"name": "s", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange.s - internalSupport.s", "comment": "\"Distance between flange and support (= flange.s - support.s)\""}, {"name": "PartialElementaryOneFlangeAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s_a", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange_a.s - internalSupport.s", "comment": "\"Distance between left flange and support\""}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Distance between right flange and support\""}, {"name": "PartialElementaryTwoFlangesAndSupport", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "s", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_a", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_b", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}], "dependencies": ["Modelica.Icons", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "SI", "e", "fixed", "flange", "flange_a", "flange_b", "i", "internalSupport", "support"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"]}
{"fqn": "ObsoleteModelica4.Mechanics.MultiBody", "kind": "package", "name": "MultiBody", "package_path": ["ObsoleteModelica4", "Mechanics"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint", "Modelica.Icons.TypesPackage"], "imports": [], "parameters": [{"name": "useAxisFlange", "type": "Boolean", "default": "false \"= true, if axis flange is enabled\" parameter Boolean animation=true \"= true, if animation shall be enabled (show axis as cylinder)\"", "description": null}, {"name": "n", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,0,1} \"Axis of rotation resolved in frame_a (= same as in frame_b)\" parameter SI.Angle phi_offset=0 \"Relative angle offset (angle = phi_offset + phi)\"", "description": null}, {"name": "boxWidthDirection", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,1,0} \"Vector in width direction of box, resolved in frame_a\" parameter SI.Distance boxWidth=world.defaultJointWidth \"Width of prismatic joint box\" parameter SI.Distance boxHeigh", "description": null}, {"name": "cylinderLength", "type": "SI.Distance", "default": "world.defaultJointLength \"Length of cylinder representing the joint axis\" parameter SI.Distance cylinderDiameter=world.defaultJointWidth \"Diameter of cylinder representing the join", "description": null}, {"name": "animation", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "length", "type": "SI.Position", "default": "10 \"Length and width of box (center is at x=y=0)\" parameter SI.Position height = 0.02 \"Height of box (upper surface is at z=0, lower surface is at z=-height)\" parameter Modelica.Me", "description": null}, {"name": "if animation shall be enabled\"", "type": "Boolean", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n\r\n           connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 980, "end_line": 985, "start_col": 9, "end_col": 32}}, {"equations": ["connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 982, "end_line": 985, "start_col": 12, "end_col": 32}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 980, "end_line": 980, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 812, "start_col": 9, "end_col": 41}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 812, "start_col": 11, "end_col": 41}}, {"equations": ["phi = internalAxis.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 805, "end_line": 805, "start_col": 11, "end_col": 33}}, {"equations": ["tau = -frame_b.t*e"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 802, "end_line": 802, "start_col": 11, "end_col": 29}}, {"equations": ["if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 789, "end_line": 799, "start_col": 11, "end_col": 17}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 798, "start_col": 13, "end_col": 89}}, {"equations": ["frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 798, "end_line": 798, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 797, "end_line": 797, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 796, "end_line": 796, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 795, "start_col": 13, "end_col": 96}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 793, "start_col": 13, "end_col": 89}}, {"equations": ["frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 793, "end_line": 793, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 792, "end_line": 792, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 791, "end_line": 791, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 790, "start_col": 13, "end_col": 95}}, {"equations": ["frame_b.r_0 = frame_a.r_0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 787, "end_line": 787, "start_col": 11, "end_col": 36}}, {"equations": ["a = der(w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 784, "end_line": 784, "start_col": 11, "end_col": 21}}, {"equations": ["w = der(phi)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 783, "end_line": 783, "start_col": 11, "end_col": 23}}, {"equations": ["angle = phi_offset + phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 782, "end_line": 782, "start_col": 11, "end_col": 35}}, {"equations": ["assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 779, "end_line": 780, "start_col": 11, "end_col": 68}}, {"equations": ["assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 777, "end_line": 778, "start_col": 11, "end_col": 68}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 775, "start_col": 11, "end_col": 51}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 774, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 587, "start_col": 9, "end_col": 59}}, {"equations": ["v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 587, "start_col": 11, "end_col": 59}}, {"equations": ["s = internalAxis.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 580, "end_line": 580, "start_col": 11, "end_col": 29}}, {"equations": ["f = -e*frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 577, "end_line": 577, "start_col": 11, "end_col": 27}}, {"equations": ["zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 574, "end_line": 574, "start_col": 11, "end_col": 80}}, {"equations": ["zeros(3) = frame_a.f + frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 573, "end_line": 573, "start_col": 11, "end_col": 43}}, {"equations": ["frame_b.R = frame_a.R"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 570, "end_line": 570, "start_col": 11, "end_col": 32}}, {"equations": ["frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 569, "end_line": 569, "start_col": 11, "end_col": 112}}, {"equations": ["a = der(v)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 566, "end_line": 566, "start_col": 11, "end_col": 21}}, {"equations": ["v = der(s)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 565, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 564, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: SI.Acceleration×1, SI.Force×1, SI.Torque×1 | connections: 5 | params: useAxisFlange, n, boxWidthDirection | units: ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 485, "end_line": 1047, "start_col": 5, "end_col": 18}, "code_text": "package MultiBody \"Library to model 3-dimensional mechanical systems\"\r\n      extends Modelica.Icons.Package;\r\n      package Joints \"Components that constrain the motion between two frames\"\r\n        extends Modelica.Icons.Package;\r\n        model Prismatic \"Prismatic joint (1 translational degree-of-freedom, 2 potential states, optional axis flange, optional distance offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          extends Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint;\r\n\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. translational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{90,50},{70,70}})));\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. translational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-30,50},{-50,70}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true \"= true, if animation shall be enabled\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={1,0,0}\r\n            \"Axis of translation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Position s_offset=0\r\n            \"Relative distance offset (distance between frame_a and frame_b = s_offset + s)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis boxWidthDirection={0,1,0}\r\n            \"Vector in width direction of box, resolved in frame_a\"\r\n            annotation (Evaluate=true, Dialog(tab=\"Animation\", group=\r\n                  \"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxWidth=world.defaultJointWidth\r\n            \"Width of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxHeight=boxWidth \"Height of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color boxColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\";\r\n\r\n          SI.Position s(start=0, final stateSelect=stateSelect)\r\n            \"Relative distance between frame_a and frame_b\"\r\n            annotation (unassignedMessage=\"\r\nThe relative distance s of a prismatic joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the prismatic joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n\r\n          SI.Velocity v(start=0,final stateSelect=stateSelect)\r\n            \"First derivative of s (relative velocity)\";\r\n          SI.Acceleration a(start=0) \"Second derivative of s (relative acceleration)\";\r\n          SI.Force f \"Actuation force in direction of joint axis\";\r\n\r\n        protected\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape box(\r\n            shapeType=\"box\",\r\n            color=boxColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=if noEvent(abs(s + s_offset) > 1.e-6) then s + s_offset else 1.e-6,\r\n            width=boxWidth,\r\n            height=boxHeight,\r\n            lengthDirection=e,\r\n            widthDirection=boxWidthDirection,\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalAxis(f = f)\r\n            annotation (Placement(transformation(extent={{70,50},{90,30}})));\r\n          Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(f_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,30},{60,50}})));\r\n        equation\r\n          v = der(s);\r\n          a = der(v);\r\n\r\n          // relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s));\r\n          frame_b.R = frame_a.R;\r\n\r\n          // Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f;\r\n          zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f);\r\n\r\n          // d'Alemberts principle\r\n          f = -e*frame_b.f;\r\n\r\n          // Connection to internal connectors\r\n          s = internalAxis.s;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}));\r\n          connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Prismatic instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-50},{-30,41}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-100,40},{-30,50}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,-30},{100,20}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,20},{100,30}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Line(points={{-30,-50},{-30,50}}),\r\n                Line(points={{100,-30},{100,21}}),\r\n                Text(\r\n                  extent={{60,12},{96,-13}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Text(\r\n                  extent={{-95,13},{-60,-9}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-135},{150,-95}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  extent={{-150,-90},{150,-60}},\r\n                  textString=\"n=%n\"),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{90,30},{100,70}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,60},{150,100}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b is translated along axis n which is fixed in frame_a.\r\nThe two frames coincide when the relative distance \\\"s = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Translational\\\">Modelica.Mechanics.Translational</a>\r\nlibrary.\r\n\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the relative distance \\\"s\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the relative distance and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a prismatic\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {1,1,0}).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Prismatic.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Prismatic;\r\n\r\n        model Revolute \"Revolute joint (1 rotational degree-of-freedom, 2 potential states, optional axis flange, optional angle offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. rotational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{10,90},{-10,110}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. rotational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-70,90},{-50,110}})));\r\n\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{-116,-16},{-84,16}})));\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{84,-16},{116,16}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true\r\n            \"= true, if animation shall be enabled (show axis as cylinder)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={0,0,1}\r\n            \"Axis of rotation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Angle phi_offset=0\r\n            \"Relative angle offset (angle = phi_offset + phi)\";\r\n          parameter SI.Distance cylinderLength=world.defaultJointLength\r\n            \"Length of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance cylinderDiameter=world.defaultJointWidth\r\n            \"Diameter of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color cylinderColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             annotation (unassignedMessage=\"\r\nThe rotation angle phi of a revolute joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the revolute joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\";\r\n          SI.AngularAcceleration a(start=0)\r\n            \"Second derivative of angle phi (relative angular acceleration)\";\r\n          SI.Torque tau \"Driving torque in direction of axis of rotation\";\r\n          SI.Angle angle \"= phi_offset + phi\";\r\n\r\n        protected\r\n          outer Modelica.Mechanics.MultiBody.World world;\r\n          parameter Real e[3](each final unit=\"1\")=Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";\r\n          Modelica.Mechanics.MultiBody.Frames.Orientation R_rel\r\n            \"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\";\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape cylinder(\r\n            shapeType=\"cylinder\",\r\n            color=cylinderColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=cylinderLength,\r\n            width=cylinderDiameter,\r\n            height=cylinderDiameter,\r\n            lengthDirection=e,\r\n            widthDirection={0,1,0},\r\n            r_shape=-e*(cylinderLength/2),\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n\r\n        protected\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed\r\n            \"support flange is fixed to ground\"\r\n            annotation (Placement(transformation(extent={{-70,70},{-50,90}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalAxis(tau=tau)\r\n            annotation (Placement(transformation(extent={{-10,90},{10,70}})));\r\n          Modelica.Mechanics.Rotational.Sources.ConstantTorque constantTorque(tau_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,70},{20,90}})));\r\n        equation\r\n          Connections.branch(frame_a.R, frame_b.R);\r\n\r\n          assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\");\r\n          assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\");\r\n\r\n          angle = phi_offset + phi;\r\n          w = der(phi);\r\n          a = der(w);\r\n\r\n          // relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0;\r\n\r\n          if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w);\r\n            frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel);\r\n            frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f);\r\n            frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t);\r\n          else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w);\r\n            frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel);\r\n            frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f);\r\n            frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t);\r\n          end if;\r\n\r\n          // d'Alemberts principle\r\n          tau = -frame_b.t*e;\r\n\r\n          // Connection to internal connectors\r\n          phi = internalAxis.phi;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}));\r\n          connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Revolute instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-60},{-30,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(\r\n                  extent={{30,-60},{100,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(extent={{-100,60},{-30,-60}}, lineColor={64,64,64}, radius=10),\r\n                Rectangle(extent={{30,60},{100,-60}}, lineColor={64,64,64}, radius=10),\r\n                Text(\r\n                  extent={{-90,14},{-54,-11}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  extent={{51,11},{87,-14}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,80},{-20,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,80},{20,60}}),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{-10,100},{10,50}},\r\n                  fillPattern=FillPattern.VerticalCylinder,\r\n                  fillColor={192,192,192}),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{-10,30},{10,30},{30,50},{-30,50},{-10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Rectangle(\r\n                  extent={{-30,11},{30,-10}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{10,30},{30,50},{30,-50},{10,-30},{10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Text(\r\n                  extent={{-150,-110},{150,-80}},\r\n                  textString=\"n=%n\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-155},{150,-115}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,70},{-60,70},{-60,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,70},{50,70},{50,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-90,100},{-30,100}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-30,100},{-50,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-49,100},{-70,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-70,100},{-90,80}}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,70},{150,110}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b rotates around axis n which is fixed in frame_a.\r\nThe two frames coincide when the rotation angle \\\"phi = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Rotational\\\">Modelica.Mechanics.Rotational</a>\r\nlibrary.\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the rotation angle \\\"phi\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the joint angle and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIf a <strong>planar loop</strong> is present, e.g., consisting of 4 revolute joints\r\nwhere the joint axes are all parallel to each other, then there is no\r\nlonger a unique mathematical solution and the symbolic algorithms will\r\nfail. Usually, an error message will be printed pointing out this\r\nsituation. In this case, one revolute joint of the loop has to be replaced\r\nby a Joints.RevolutePlanarLoopConstraint joint. The\r\neffect is that from the 5 constraints of a usual revolute joint,\r\n3 constraints are removed and replaced by appropriate known\r\nvariables (e.g., the force in the direction of the axis of rotation is\r\ntreated as known with value equal to zero; for standard revolute joints,\r\nthis force is an unknown quantity).\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a revolute\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {0,0,1}, phi.start = 45<sup>o</sup>).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Revolute.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Revolute;\r\n      end Joints;\r\n\r\n      package Visualizers \"3-dimensional visual objects used for animation\"\r\n        extends Modelica.Icons.Package;\r\n        model Ground \"Visualizing the ground (box in z=0)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n           parameter Boolean animation=true\r\n           \"= true, if animation of ground shall be enabled\";\r\n           parameter SI.Position length = 10\r\n           \"Length and width of box (center is at x=y=0)\" annotation (Dialog(enable=animation));\r\n           parameter SI.Position height = 0.02\r\n           \"Height of box (upper surface is at z=0, lower surface is at z=-height)\" annotation (Dialog(enable=animation));\r\n           parameter Modelica.Mechanics.MultiBody.Types.Color groundColor={0,255,0}\r\n           \"Color of box\" annotation (Dialog(colorSelector=true, enable=animation));\r\n\r\n           Modelica.Mechanics.MultiBody.Visualizers.FixedShape ground(\r\n             lengthDirection={1,0,0},\r\n             widthDirection={0,1,0},\r\n             animation=animation,\r\n             r_shape={-length/2,0,-height},\r\n             length=length,\r\n             height=height,\r\n             color=groundColor,\r\n             width=length)\r\n             annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n           Modelica.Mechanics.MultiBody.Parts.Fixed fixed\r\n             annotation (Placement(transformation(extent={{-60,0},{-40,20}})));\r\n        equation\r\n\r\n           connect(fixed.frame_b, ground.frame_a) annotation (Line(\r\n               points={{-40,10},{-20,10}},\r\n               color={95,95,95},\r\n               thickness=0.5));\r\n           annotation (\r\n             obsolete = \"Obsolete model - use ground visualization feature in Modelica.Mechanics.MultiBody.World, or use model Modelica.Mechanics.MultiBody.Visualizers.Rectangle instead\",\r\n             Icon(\r\n               coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}),\r\n               graphics = {\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {126, 181, 78}, fillPattern = FillPattern.Solid, points = {{-100, -30}, {20, -90}, {100, 0}, {-10, 40}}),\r\n                 Text(lineColor = {64, 64, 64}, extent = {{20, 70}, {60, 100}}, textString = \"z\", horizontalAlignment = TextAlignment.Left),\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {14, 111, 1}, fillPattern = FillPattern.Solid, points = {{100, -10}, {20, -100}, {20, -90}, {100, 0}}),\r\n                 Polygon(lineColor = {255, 255, 255}, fillColor = {14, 111, 1}, fillPattern = FillPattern.Solid, points = {{-100, -40}, {20, -100}, {20, -90}, {-100, -30}}), Line(origin = {6, -8}, points={{-6,-10},{-6,108}}),\r\n                 Polygon(origin = {6, 0}, points={{-6,102},{-14,72},{2,72},{-6,102}}, fillPattern=FillPattern.Solid),\r\n                 Text(lineColor = {0,0,255}, extent = {{-150, -145}, {150, -105}}, textString = \"%name\")}),\r\n             Documentation(info = \"<html>\r\n<p>\r\nThis shape visualizes the x-y plane by a box.\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Visualizers/Ground.png\\\">\r\n</blockquote>\r\n</html>\"));\r\n        end Ground;\r\n      end Visualizers;\r\n      package Types \"Constants and types with choices, especially to build menus\"\r\n        extends Modelica.Icons.TypesPackage;\r\n        type Init = enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        annotation (\r\n          obsolete = \"Obsolete type - use start/fixed attributes instead\",\r\n          Documentation(info=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th><strong>Types.Init.</strong></th><th><strong>Meaning</strong></th></tr>\r\n<tr><td>Free</td>\r\n    <td>No initialization</td></tr>\r\n\r\n<tr><td>PositionVelocity</td>\r\n    <td>Initialize generalized position and velocity variables</td></tr>\r\n\r\n<tr><td>SteadyState</td>\r\n    <td>Initialize in steady state (velocity and acceleration are zero)</td></tr>\r\n\r\n<tr><td>Position </td>\r\n    <td>Initialize only generalized position variable(s)</td></tr>\r\n\r\n<tr><td>Velocity</td>\r\n    <td>Initialize only generalized velocity variable(s)</td></tr>\r\n\r\n<tr><td>VelocityAcceleration</td>\r\n    <td>Initialize generalized velocity and acceleration variables</td></tr>\r\n\r\n<tr><td>PositionVelocityAcceleration</td>\r\n    <td>Initialize generalized position, velocity and acceleration variables</td></tr>\r\n</table>\r\n</html>\"));\r\n      end Types;\r\n    end MultiBody", "checksum": "84d65cdb7364f6e7ade35107f1ce87f92e3e4da6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:485-1047", "component_count": 4, "connection_count": 5, "variable_count": 16, "physical_quantity_count": 6, "parameter_count": 7, "equation_count": 37, "dependency_count": 39, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 63.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(fixed.frame_b, ground.frame_a) annotation (Line( points={{-40,10},{-20,10}}, color={95,95,95}, thickness=0.5))", "search_keywords": ["Acceleration", "Force", "N.m", "SI.Acceleration", "SI.Angle", "SI.Force", "SI.Torque", "Torque", "Velocity", "m/s", "m/s2", "mechanical", "system"]}, "components": [{"name": "a", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Second derivative of s (relative acceleration)"}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Actuation force in direction of joint axis"}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Driving torque in direction of axis of rotation"}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= phi_offset + phi"}], "connections": [{"from_connector": "fixed.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalAxis.flange", "to_connector": "axis", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "constantTorque.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "fixed.frame_b", "to_connector": "ground.frame_a", "condition": null}], "variables": [{"name": "boxColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" \r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\"", "comment": null}, {"name": "v", "type_name": "equation", "prefixes": [], "attributes": {"start": "0", "stateSelect": "stateSelect"}, "binding_equation": "der(s)", "comment": "\"First derivative of s (relative velocity)\""}, {"name": "a", "type_name": "SI.AngularAcceleration", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Second derivative of angle phi (relative angular acceleration)\""}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Actuation force in direction of joint axis\""}, {"name": "Prismatic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cylinderColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" \r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             \r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\"", "comment": null}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Driving torque in direction of axis of rotation\""}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= phi_offset + phi\""}, {"name": "world", "type_name": "Modelica.Mechanics.MultiBody.World", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "R_rel", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "comment": "\"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Revolute", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Joints", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Ground", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Visualizers", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Init", "type_name": "type", "prefixes": [], "attributes": {}, "binding_equation": "enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        \r\n      end Types", "comment": null}], "physical_quantities": [{"name": "v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "a", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "f", "unit": "N", "display_unit": null, "quantity": "Force", "nominal": null}, {"name": "tau", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "Advanced", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "phi", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Connections", "FillPattern", "Ground", "Joints", "LinePattern", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Mechanics", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Parts", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "Modelica.Mechanics.MultiBody.Visualizers", "Modelica.Mechanics.MultiBody.Visualizers.Advanced", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sources", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "Modelica.Mechanics.Translational.Sources", "Prismatic", "Revolute", "SI", "StateSelect", "TextAlignment", "Types", "constantForce", "constantTorque", "e", "fixed", "frame_a", "frame_b", "ground", "internalAxis", "phi", "world"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint", "Modelica.Icons.TypesPackage"]}
{"fqn": "ObsoleteModelica4.Mechanics.MultiBody.Joints", "kind": "package", "name": "Joints", "package_path": ["ObsoleteModelica4", "Mechanics", "MultiBody"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint"], "imports": [], "parameters": [{"name": "useAxisFlange", "type": "Boolean", "default": "false \"= true, if axis flange is enabled\" parameter Boolean animation=true \"= true, if animation shall be enabled (show axis as cylinder)\"", "description": null}, {"name": "n", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,0,1} \"Axis of rotation resolved in frame_a (= same as in frame_b)\" parameter SI.Angle phi_offset=0 \"Relative angle offset (angle = phi_offset + phi)\"", "description": null}, {"name": "boxWidthDirection", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,1,0} \"Vector in width direction of box, resolved in frame_a\" parameter SI.Distance boxWidth=world.defaultJointWidth \"Width of prismatic joint box\" parameter SI.Distance boxHeigh", "description": null}, {"name": "cylinderLength", "type": "SI.Distance", "default": "world.defaultJointLength \"Length of cylinder representing the joint axis\" parameter SI.Distance cylinderDiameter=world.defaultJointWidth \"Diameter of cylinder representing the join", "description": null}, {"name": "animation", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "if animation shall be enabled\"", "type": "Boolean", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n          Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 812, "start_col": 9, "end_col": 41}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 812, "start_col": 11, "end_col": 41}}, {"equations": ["phi = internalAxis.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 805, "end_line": 805, "start_col": 11, "end_col": 33}}, {"equations": ["tau = -frame_b.t*e"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 802, "end_line": 802, "start_col": 11, "end_col": 29}}, {"equations": ["if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 789, "end_line": 799, "start_col": 11, "end_col": 17}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 798, "start_col": 13, "end_col": 89}}, {"equations": ["frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 798, "end_line": 798, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 797, "end_line": 797, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 796, "end_line": 796, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 795, "start_col": 13, "end_col": 96}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 793, "start_col": 13, "end_col": 89}}, {"equations": ["frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 793, "end_line": 793, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 792, "end_line": 792, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 791, "end_line": 791, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 790, "start_col": 13, "end_col": 95}}, {"equations": ["frame_b.r_0 = frame_a.r_0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 787, "end_line": 787, "start_col": 11, "end_col": 36}}, {"equations": ["a = der(w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 784, "end_line": 784, "start_col": 11, "end_col": 21}}, {"equations": ["w = der(phi)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 783, "end_line": 783, "start_col": 11, "end_col": 23}}, {"equations": ["angle = phi_offset + phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 782, "end_line": 782, "start_col": 11, "end_col": 35}}, {"equations": ["assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 779, "end_line": 780, "start_col": 11, "end_col": 68}}, {"equations": ["assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 777, "end_line": 778, "start_col": 11, "end_col": 68}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 775, "start_col": 11, "end_col": 51}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 774, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 587, "start_col": 9, "end_col": 59}}, {"equations": ["v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 587, "start_col": 11, "end_col": 59}}, {"equations": ["s = internalAxis.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 580, "end_line": 580, "start_col": 11, "end_col": 29}}, {"equations": ["f = -e*frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 577, "end_line": 577, "start_col": 11, "end_col": 27}}, {"equations": ["zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 574, "end_line": 574, "start_col": 11, "end_col": 80}}, {"equations": ["zeros(3) = frame_a.f + frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 573, "end_line": 573, "start_col": 11, "end_col": 43}}, {"equations": ["frame_b.R = frame_a.R"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 570, "end_line": 570, "start_col": 11, "end_col": 32}}, {"equations": ["frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 569, "end_line": 569, "start_col": 11, "end_col": 112}}, {"equations": ["a = der(v)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 566, "end_line": 566, "start_col": 11, "end_col": 21}}, {"equations": ["v = der(s)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 565, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 564, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: SI.Acceleration×1, SI.Force×1, SI.Torque×1 | connections: 4 | params: useAxisFlange, n, boxWidthDirection | units: ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 487, "end_line": 953, "start_col": 7, "end_col": 17}, "code_text": "package Joints \"Components that constrain the motion between two frames\"\r\n        extends Modelica.Icons.Package;\r\n        model Prismatic \"Prismatic joint (1 translational degree-of-freedom, 2 potential states, optional axis flange, optional distance offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          extends Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint;\r\n\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. translational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{90,50},{70,70}})));\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. translational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-30,50},{-50,70}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true \"= true, if animation shall be enabled\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={1,0,0}\r\n            \"Axis of translation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Position s_offset=0\r\n            \"Relative distance offset (distance between frame_a and frame_b = s_offset + s)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis boxWidthDirection={0,1,0}\r\n            \"Vector in width direction of box, resolved in frame_a\"\r\n            annotation (Evaluate=true, Dialog(tab=\"Animation\", group=\r\n                  \"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxWidth=world.defaultJointWidth\r\n            \"Width of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxHeight=boxWidth \"Height of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color boxColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\";\r\n\r\n          SI.Position s(start=0, final stateSelect=stateSelect)\r\n            \"Relative distance between frame_a and frame_b\"\r\n            annotation (unassignedMessage=\"\r\nThe relative distance s of a prismatic joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the prismatic joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n\r\n          SI.Velocity v(start=0,final stateSelect=stateSelect)\r\n            \"First derivative of s (relative velocity)\";\r\n          SI.Acceleration a(start=0) \"Second derivative of s (relative acceleration)\";\r\n          SI.Force f \"Actuation force in direction of joint axis\";\r\n\r\n        protected\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape box(\r\n            shapeType=\"box\",\r\n            color=boxColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=if noEvent(abs(s + s_offset) > 1.e-6) then s + s_offset else 1.e-6,\r\n            width=boxWidth,\r\n            height=boxHeight,\r\n            lengthDirection=e,\r\n            widthDirection=boxWidthDirection,\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalAxis(f = f)\r\n            annotation (Placement(transformation(extent={{70,50},{90,30}})));\r\n          Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(f_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,30},{60,50}})));\r\n        equation\r\n          v = der(s);\r\n          a = der(v);\r\n\r\n          // relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s));\r\n          frame_b.R = frame_a.R;\r\n\r\n          // Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f;\r\n          zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f);\r\n\r\n          // d'Alemberts principle\r\n          f = -e*frame_b.f;\r\n\r\n          // Connection to internal connectors\r\n          s = internalAxis.s;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}));\r\n          connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Prismatic instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-50},{-30,41}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-100,40},{-30,50}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,-30},{100,20}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,20},{100,30}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Line(points={{-30,-50},{-30,50}}),\r\n                Line(points={{100,-30},{100,21}}),\r\n                Text(\r\n                  extent={{60,12},{96,-13}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Text(\r\n                  extent={{-95,13},{-60,-9}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-135},{150,-95}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  extent={{-150,-90},{150,-60}},\r\n                  textString=\"n=%n\"),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{90,30},{100,70}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,60},{150,100}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b is translated along axis n which is fixed in frame_a.\r\nThe two frames coincide when the relative distance \\\"s = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Translational\\\">Modelica.Mechanics.Translational</a>\r\nlibrary.\r\n\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the relative distance \\\"s\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the relative distance and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a prismatic\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {1,1,0}).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Prismatic.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Prismatic;\r\n\r\n        model Revolute \"Revolute joint (1 rotational degree-of-freedom, 2 potential states, optional axis flange, optional angle offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. rotational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{10,90},{-10,110}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. rotational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-70,90},{-50,110}})));\r\n\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{-116,-16},{-84,16}})));\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{84,-16},{116,16}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true\r\n            \"= true, if animation shall be enabled (show axis as cylinder)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={0,0,1}\r\n            \"Axis of rotation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Angle phi_offset=0\r\n            \"Relative angle offset (angle = phi_offset + phi)\";\r\n          parameter SI.Distance cylinderLength=world.defaultJointLength\r\n            \"Length of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance cylinderDiameter=world.defaultJointWidth\r\n            \"Diameter of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color cylinderColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             annotation (unassignedMessage=\"\r\nThe rotation angle phi of a revolute joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the revolute joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\";\r\n          SI.AngularAcceleration a(start=0)\r\n            \"Second derivative of angle phi (relative angular acceleration)\";\r\n          SI.Torque tau \"Driving torque in direction of axis of rotation\";\r\n          SI.Angle angle \"= phi_offset + phi\";\r\n\r\n        protected\r\n          outer Modelica.Mechanics.MultiBody.World world;\r\n          parameter Real e[3](each final unit=\"1\")=Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";\r\n          Modelica.Mechanics.MultiBody.Frames.Orientation R_rel\r\n            \"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\";\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape cylinder(\r\n            shapeType=\"cylinder\",\r\n            color=cylinderColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=cylinderLength,\r\n            width=cylinderDiameter,\r\n            height=cylinderDiameter,\r\n            lengthDirection=e,\r\n            widthDirection={0,1,0},\r\n            r_shape=-e*(cylinderLength/2),\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n\r\n        protected\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed\r\n            \"support flange is fixed to ground\"\r\n            annotation (Placement(transformation(extent={{-70,70},{-50,90}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalAxis(tau=tau)\r\n            annotation (Placement(transformation(extent={{-10,90},{10,70}})));\r\n          Modelica.Mechanics.Rotational.Sources.ConstantTorque constantTorque(tau_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,70},{20,90}})));\r\n        equation\r\n          Connections.branch(frame_a.R, frame_b.R);\r\n\r\n          assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\");\r\n          assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\");\r\n\r\n          angle = phi_offset + phi;\r\n          w = der(phi);\r\n          a = der(w);\r\n\r\n          // relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0;\r\n\r\n          if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w);\r\n            frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel);\r\n            frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f);\r\n            frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t);\r\n          else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w);\r\n            frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel);\r\n            frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f);\r\n            frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t);\r\n          end if;\r\n\r\n          // d'Alemberts principle\r\n          tau = -frame_b.t*e;\r\n\r\n          // Connection to internal connectors\r\n          phi = internalAxis.phi;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}));\r\n          connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Revolute instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-60},{-30,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(\r\n                  extent={{30,-60},{100,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(extent={{-100,60},{-30,-60}}, lineColor={64,64,64}, radius=10),\r\n                Rectangle(extent={{30,60},{100,-60}}, lineColor={64,64,64}, radius=10),\r\n                Text(\r\n                  extent={{-90,14},{-54,-11}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  extent={{51,11},{87,-14}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,80},{-20,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,80},{20,60}}),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{-10,100},{10,50}},\r\n                  fillPattern=FillPattern.VerticalCylinder,\r\n                  fillColor={192,192,192}),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{-10,30},{10,30},{30,50},{-30,50},{-10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Rectangle(\r\n                  extent={{-30,11},{30,-10}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{10,30},{30,50},{30,-50},{10,-30},{10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Text(\r\n                  extent={{-150,-110},{150,-80}},\r\n                  textString=\"n=%n\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-155},{150,-115}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,70},{-60,70},{-60,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,70},{50,70},{50,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-90,100},{-30,100}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-30,100},{-50,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-49,100},{-70,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-70,100},{-90,80}}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,70},{150,110}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b rotates around axis n which is fixed in frame_a.\r\nThe two frames coincide when the rotation angle \\\"phi = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Rotational\\\">Modelica.Mechanics.Rotational</a>\r\nlibrary.\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the rotation angle \\\"phi\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the joint angle and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIf a <strong>planar loop</strong> is present, e.g., consisting of 4 revolute joints\r\nwhere the joint axes are all parallel to each other, then there is no\r\nlonger a unique mathematical solution and the symbolic algorithms will\r\nfail. Usually, an error message will be printed pointing out this\r\nsituation. In this case, one revolute joint of the loop has to be replaced\r\nby a Joints.RevolutePlanarLoopConstraint joint. The\r\neffect is that from the 5 constraints of a usual revolute joint,\r\n3 constraints are removed and replaced by appropriate known\r\nvariables (e.g., the force in the direction of the axis of rotation is\r\ntreated as known with value equal to zero; for standard revolute joints,\r\nthis force is an unknown quantity).\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a revolute\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {0,0,1}, phi.start = 45<sup>o</sup>).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Revolute.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Revolute;\r\n      end Joints", "checksum": "22da3edc4522da53e684d48cef493ab6755967c2", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:487-953", "component_count": 4, "connection_count": 4, "variable_count": 12, "physical_quantity_count": 6, "parameter_count": 6, "equation_count": 34, "dependency_count": 33, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 57.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation Connections.branch(frame_a.R, frame_b.R)", "search_keywords": ["Acceleration", "Force", "N.m", "SI.Acceleration", "SI.Angle", "SI.Force", "SI.Torque", "Torque", "Velocity", "m/s", "m/s2", "mechanical", "system"]}, "components": [{"name": "a", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Second derivative of s (relative acceleration)"}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Actuation force in direction of joint axis"}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Driving torque in direction of axis of rotation"}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= phi_offset + phi"}], "connections": [{"from_connector": "fixed.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalAxis.flange", "to_connector": "axis", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "internalAxis.flange", "condition": null}, {"from_connector": "constantTorque.flange", "to_connector": "internalAxis.flange", "condition": null}], "variables": [{"name": "boxColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" \r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\"", "comment": null}, {"name": "v", "type_name": "equation", "prefixes": [], "attributes": {"start": "0", "stateSelect": "stateSelect"}, "binding_equation": "der(s)", "comment": "\"First derivative of s (relative velocity)\""}, {"name": "a", "type_name": "SI.AngularAcceleration", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Second derivative of angle phi (relative angular acceleration)\""}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Actuation force in direction of joint axis\""}, {"name": "Prismatic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cylinderColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" \r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             \r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\"", "comment": null}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Driving torque in direction of axis of rotation\""}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= phi_offset + phi\""}, {"name": "world", "type_name": "Modelica.Mechanics.MultiBody.World", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "R_rel", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "comment": "\"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Revolute", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "a", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "f", "unit": "N", "display_unit": null, "quantity": "Force", "nominal": null}, {"name": "tau", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "Advanced", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "phi", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Connections", "FillPattern", "Joints", "LinePattern", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Mechanics", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "Modelica.Mechanics.MultiBody.Visualizers.Advanced", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sources", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "Modelica.Mechanics.Translational.Sources", "Prismatic", "Revolute", "SI", "StateSelect", "constantForce", "constantTorque", "e", "fixed", "frame_a", "frame_b", "internalAxis", "phi", "world"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint"]}
{"fqn": "Modelica.StateGraph", "kind": "package", "name": "StateGraph", "package_path": ["Modelica"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.Information", "Modelica.Icons.ReleaseNotes", "Modelica.Icons.References", "Modelica.Icons.Contact", "Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Icons.UtilitiesPackage", "StateGraph.Interfaces.PartialStateGraphIcon", "StateGraph.PartialCompositeStep", "PartialCompositeStep", "Modelica.Icons.InterfacesPackage", "Interfaces.PartialStep", "Interfaces.PartialTransition", "StateGraph.Interfaces.CompositeStepState"], "imports": ["Modelica.Units.SI"], "parameters": [{"name": "limit", "type": "Real", "default": "0.98 \"Limit level of tank 1\"", "description": null}, {"name": "waitTime", "type": "SI.Time", "default": "2 \"Waiting time in this composite step\"", "description": null}, {"name": "A", "type": "SI.Area", "default": "1 \"Ground area of tank\"", "description": null}, {"name": "a", "type": "SI.Area", "default": "0.2 \"Area of drain hole\"", "description": null}, {"name": "hmax", "type": "SI.Height", "default": "1 \"Max height of tank\"", "description": null}, {"name": "maxflow", "type": "Real", "default": "1 \"Maximal flow out of source\"", "description": null}, {"name": "enableTimer", "type": "Boolean", "default": "false \"= true, if timer is enabled\" parameter SI.Time waitTime(min=0) = 0 \"Wait time before transition fires\" output SI.Time t \"Actual waiting time (transition will fire when t > w", "description": null}, {"name": "nSuspend", "type": "Integer", "default": "1 \"Number of suspend ports\" parameter Integer nResume = 1 \"Number of resume ports\" /* The modification of stateGraphRoot is with respect to the \"inner\" definition, i.e., it is repo", "description": null}, {"name": "nBranches(min", "type": "Integer", "default": "1)=2 \"Number of alternative branches\"", "description": null}], "equations": [{"equations": ["equation\r\n  activeSteps = -integer(subgraphStatePort.activeSteps)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2685, "end_line": 2686, "start_col": 1, "end_col": 57}}, {"equations": ["activeSteps = -integer(subgraphStatePort.activeSteps)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2686, "end_line": 2686, "start_col": 3, "end_col": 57}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2685, "end_line": 2685, "start_col": 1, "end_col": 9}}, {"equations": ["equation\r\n  // connect to outer CompositeStep\r\n  connect(outerState.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// set active flag  of CompositeStep\r\n  activeSteps = -integer(innerState.stateGraphRoot.subgraphStatePort.activeSteps)", "active = pre(newActive)", "/* The CompositeStep is active if\r\n     - at least one step within the CompositeStep is active, and\r\n     - the suspend transition does not fire, and\r\n     - the suspend transition of a higher level CompositeStep does not fire or\r\n     - no step within the CompositeStep is active, and\r\n     - the resume transition fires or the resume transition of\r\n       a higher level CompositeStep fires.\r\n  */\r\n  // newActive = activeSteps > 0 and not suspend.reset or resume.set", "newActive = activeSteps > 0 and not Modelica.Math.BooleanVectors.anyTrue(suspend.reset) and not\r\n              outerState.subgraphStatePort.suspend or\r\n              Modelica.Math.BooleanVectors.anyTrue(resume.set) or outerState.subgraphStatePort.resume", "// Report state to suspend and resume transitions\r\n\r\n  for i in 1:nResume loop\r\n    resume[i].occupied = if i == 1 then active else\r\n                                        resume[i-1].occupied or\r\n                                        resume[i-1].set", "end for", "for i in 1:nSuspend loop\r\n     suspend[i].available = if i == 1 then active else\r\n                                           suspend[i-1].available and not\r\n                                           suspend[i-1].reset", "end for", "/* Check that connections to the connectors are correct\r\n     and set appropriate defaults if necessary\r\n  */\r\n\r\n  for i in 1:nSuspend loop\r\n\r\n  assert(cardinality(suspend[i]) <= 1,\r\n\"Connector suspend[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(suspend[i]) == 0 then\r\n      suspend[i].reset = false", "end if", "end for", "for i in 1:nResume loop\r\n\r\n  assert(cardinality(resume[i]) <= 1,\r\n\"Connector resume[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(resume[i]) == 0 then\r\n      resume[i].set = false", "end if", "end for", "/* Zero sized connectors are not yet fully supported in\r\n     Dymola. This requires to set the dimension of the connector\r\n     to 1, if it should have a dimension of zero. This requires\r\n     to set the connector variables to a default value in this case\r\n  */\r\n\r\n  if cardinality(inPort) < 2 then\r\n    inPort.occupied = false", "inPort.set = false", "end if", "if cardinality(outPort) < 2 then\r\n    outPort.available = false", "outPort.reset = false", "end if", "// Check inPort/outPort connections\r\n\r\n  assert(cardinality(inPort) <= 2,\r\n\"Connector inPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outside to the\r\ninPort and one connection to a step inside the CompositeStep.\")", "assert(cardinality(outPort) <= 2,\r\n\"Connector outPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outPort to the\r\noutside to the CompositeStep and one connection from a step\r\ninside the CompositeStep to the outPort connector.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2558, "end_line": 2654, "start_col": 1, "end_col": 54}}, {"equations": ["connect(outerState.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// set active flag  of CompositeStep\r\n  activeSteps = -integer(innerState.stateGraphRoot.subgraphStatePort.activeSteps)", "active = pre(newActive)", "/* The CompositeStep is active if\r\n     - at least one step within the CompositeStep is active, and\r\n     - the suspend transition does not fire, and\r\n     - the suspend transition of a higher level CompositeStep does not fire or\r\n     - no step within the CompositeStep is active, and\r\n     - the resume transition fires or the resume transition of\r\n       a higher level CompositeStep fires.\r\n  */\r\n  // newActive = activeSteps > 0 and not suspend.reset or resume.set", "newActive = activeSteps > 0 and not Modelica.Math.BooleanVectors.anyTrue(suspend.reset) and not\r\n              outerState.subgraphStatePort.suspend or\r\n              Modelica.Math.BooleanVectors.anyTrue(resume.set) or outerState.subgraphStatePort.resume", "// Report state to suspend and resume transitions\r\n\r\n  for i in 1:nResume loop\r\n    resume[i].occupied = if i == 1 then active else\r\n                                        resume[i-1].occupied or\r\n                                        resume[i-1].set", "end for", "for i in 1:nSuspend loop\r\n     suspend[i].available = if i == 1 then active else\r\n                                           suspend[i-1].available and not\r\n                                           suspend[i-1].reset", "end for", "/* Check that connections to the connectors are correct\r\n     and set appropriate defaults if necessary\r\n  */\r\n\r\n  for i in 1:nSuspend loop\r\n\r\n  assert(cardinality(suspend[i]) <= 1,\r\n\"Connector suspend[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(suspend[i]) == 0 then\r\n      suspend[i].reset = false", "end if", "end for", "for i in 1:nResume loop\r\n\r\n  assert(cardinality(resume[i]) <= 1,\r\n\"Connector resume[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(resume[i]) == 0 then\r\n      resume[i].set = false", "end if", "end for", "/* Zero sized connectors are not yet fully supported in\r\n     Dymola. This requires to set the dimension of the connector\r\n     to 1, if it should have a dimension of zero. This requires\r\n     to set the connector variables to a default value in this case\r\n  */\r\n\r\n  if cardinality(inPort) < 2 then\r\n    inPort.occupied = false", "inPort.set = false", "end if", "if cardinality(outPort) < 2 then\r\n    outPort.available = false", "outPort.reset = false", "end if", "// Check inPort/outPort connections\r\n\r\n  assert(cardinality(inPort) <= 2,\r\n\"Connector inPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outside to the\r\ninPort and one connection to a step inside the CompositeStep.\")", "assert(cardinality(outPort) <= 2,\r\n\"Connector outPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outPort to the\r\noutside to the CompositeStep and one connection from a step\r\ninside the CompositeStep to the outPort connector.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2560, "end_line": 2654, "start_col": 3, "end_col": 54}}, {"equations": ["assert(cardinality(outPort) <= 2,\r\n\"Connector outPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outPort to the\r\noutside to the CompositeStep and one connection from a step\r\ninside the CompositeStep to the outPort connector.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2650, "end_line": 2654, "start_col": 3, "end_col": 53}}, {"equations": ["assert(cardinality(inPort) <= 2,\r\n\"Connector inPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outside to the\r\ninPort and one connection to a step inside the CompositeStep.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2645, "end_line": 2648, "start_col": 3, "end_col": 64}}, {"equations": ["if cardinality(outPort) < 2 then\r\n    outPort.available = false", "outPort.reset = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2637, "end_line": 2641, "start_col": 3, "end_col": 9}}, {"equations": ["outPort.available = false", "outPort.reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2638, "end_line": 2639, "start_col": 5, "end_col": 27}}, {"equations": ["outPort.reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2639, "end_line": 2639, "start_col": 5, "end_col": 26}}, {"equations": ["outPort.available = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2638, "end_line": 2638, "start_col": 5, "end_col": 30}}, {"equations": ["if cardinality(inPort) < 2 then\r\n    inPort.occupied = false", "inPort.set = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2631, "end_line": 2635, "start_col": 3, "end_col": 9}}, {"equations": ["inPort.occupied = false", "inPort.set = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2632, "end_line": 2633, "start_col": 5, "end_col": 24}}, {"equations": ["inPort.set = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2633, "end_line": 2633, "start_col": 5, "end_col": 23}}, {"equations": ["inPort.occupied = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2632, "end_line": 2632, "start_col": 5, "end_col": 28}}, {"equations": ["for i in 1:nResume loop\r\n\r\n  assert(cardinality(resume[i]) <= 1,\r\n\"Connector resume[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(resume[i]) == 0 then\r\n      resume[i].set = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2612, "end_line": 2623, "start_col": 3, "end_col": 10}}, {"equations": ["assert(cardinality(resume[i]) <= 1,\r\n\"Connector resume[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(resume[i]) == 0 then\r\n      resume[i].set = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2614, "end_line": 2621, "start_col": 3, "end_col": 12}}, {"equations": ["if cardinality(resume[i]) == 0 then\r\n      resume[i].set = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2618, "end_line": 2621, "start_col": 5, "end_col": 11}}, {"equations": ["resume[i].set = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2619, "end_line": 2619, "start_col": 7, "end_col": 29}}, {"equations": ["assert(cardinality(resume[i]) <= 1,\r\n\"Connector resume[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2614, "end_line": 2616, "start_col": 3, "end_col": 30}}, {"equations": ["for i in 1:nSuspend loop\r\n\r\n  assert(cardinality(suspend[i]) <= 1,\r\n\"Connector suspend[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(suspend[i]) == 0 then\r\n      suspend[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2599, "end_line": 2610, "start_col": 3, "end_col": 10}}, {"equations": ["assert(cardinality(suspend[i]) <= 1,\r\n\"Connector suspend[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")", "if cardinality(suspend[i]) == 0 then\r\n      suspend[i].reset = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2601, "end_line": 2608, "start_col": 3, "end_col": 12}}, {"equations": ["if cardinality(suspend[i]) == 0 then\r\n      suspend[i].reset = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2605, "end_line": 2608, "start_col": 5, "end_col": 11}}, {"equations": ["suspend[i].reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2606, "end_line": 2606, "start_col": 7, "end_col": 32}}, {"equations": ["assert(cardinality(suspend[i]) <= 1,\r\n\"Connector suspend[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2601, "end_line": 2603, "start_col": 3, "end_col": 30}}, {"equations": ["for i in 1:nSuspend loop\r\n     suspend[i].available = if i == 1 then active else\r\n                                           suspend[i-1].available and not\r\n                                           suspend[i-1].reset", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2588, "end_line": 2593, "start_col": 3, "end_col": 10}}, {"equations": ["suspend[i].available = if i == 1 then active else\r\n                                           suspend[i-1].available and not\r\n                                           suspend[i-1].reset"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2589, "end_line": 2591, "start_col": 6, "end_col": 63}}, {"equations": ["for i in 1:nResume loop\r\n    resume[i].occupied = if i == 1 then active else\r\n                                        resume[i-1].occupied or\r\n                                        resume[i-1].set", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2581, "end_line": 2586, "start_col": 3, "end_col": 10}}, {"equations": ["resume[i].occupied = if i == 1 then active else\r\n                                        resume[i-1].occupied or\r\n                                        resume[i-1].set"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2582, "end_line": 2584, "start_col": 5, "end_col": 57}}, {"equations": ["newActive = activeSteps > 0 and not Modelica.Math.BooleanVectors.anyTrue(suspend.reset) and not\r\n              outerState.subgraphStatePort.suspend or\r\n              Modelica.Math.BooleanVectors.anyTrue(resume.set) or outerState.subgraphStatePort.resume"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2575, "end_line": 2577, "start_col": 3, "end_col": 102}}, {"equations": ["active = pre(newActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2564, "end_line": 2564, "start_col": 3, "end_col": 26}}, {"equations": ["activeSteps = -integer(innerState.stateGraphRoot.subgraphStatePort.activeSteps)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2563, "end_line": 2563, "start_col": 3, "end_col": 82}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2558, "end_line": 2558, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  pre(newActive) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2555, "end_line": 2556, "start_col": 1, "end_col": 26}}, {"equations": ["pre(newActive) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2556, "end_line": 2556, "start_col": 3, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2555, "end_line": 2555, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n    subgraphStatePort.activeSteps = if active then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2541, "end_line": 2542, "start_col": 3, "end_col": 65}}, {"equations": ["subgraphStatePort.activeSteps = if active then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2542, "end_line": 2542, "start_col": 5, "end_col": 65}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2541, "end_line": 2541, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n  // Check connections of connectors\r\n\r\n  assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\")", "for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "end for", "// Propagate flags between the connectors\r\n  split.set  = fill(inPort.set, nBranches)", "join.reset = fill(outPort.reset, nBranches)", "inPort.occupied   = Modelica.Math.BooleanVectors.anyTrue(split.occupied)", "outPort.available = Modelica.Math.BooleanVectors.andTrue(join.available)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2463, "end_line": 2486, "start_col": 1, "end_col": 76}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\")", "for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "end for", "// Propagate flags between the connectors\r\n  split.set  = fill(inPort.set, nBranches)", "join.reset = fill(outPort.reset, nBranches)", "inPort.occupied   = Modelica.Math.BooleanVectors.anyTrue(split.occupied)", "outPort.available = Modelica.Math.BooleanVectors.andTrue(join.available)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2466, "end_line": 2486, "start_col": 3, "end_col": 76}}, {"equations": ["outPort.available = Modelica.Math.BooleanVectors.andTrue(join.available)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2486, "end_line": 2486, "start_col": 3, "end_col": 75}}, {"equations": ["inPort.occupied   = Modelica.Math.BooleanVectors.anyTrue(split.occupied)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2485, "end_line": 2485, "start_col": 3, "end_col": 75}}, {"equations": ["join.reset = fill(outPort.reset, nBranches)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2484, "end_line": 2484, "start_col": 3, "end_col": 46}}, {"equations": ["split.set  = fill(inPort.set, nBranches)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2483, "end_line": 2483, "start_col": 3, "end_col": 43}}, {"equations": ["for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2472, "end_line": 2480, "start_col": 3, "end_col": 10}}, {"equations": ["assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2474, "end_line": 2478, "start_col": 6, "end_col": 69}}, {"equations": ["assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2477, "end_line": 2478, "start_col": 6, "end_col": 68}}, {"equations": ["assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2474, "end_line": 2475, "start_col": 6, "end_col": 68}}, {"equations": ["assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2469, "end_line": 2470, "start_col": 3, "end_col": 73}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2466, "end_line": 2467, "start_col": 3, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2463, "end_line": 2463, "start_col": 1, "end_col": 9}}, {"equations": ["equation\r\n  // Check connections of connectors\r\n\r\n  assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\")", "for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "end for", "// Propagate flags between the connectors\r\n\r\n  for i in 1:nBranches loop\r\n     split[i].available = if i==1 then inPort.available else\r\n                                       split[i-1].available and not split[i-1].reset", "end for", "join.occupied = fill(outPort.occupied, nBranches)", "inPort.reset  = Modelica.Math.BooleanVectors.anyTrue(split.reset)", "outPort.set   = Modelica.Math.BooleanVectors.anyTrue(join.set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2316, "end_line": 2344, "start_col": 1, "end_col": 66}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\")", "for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "end for", "// Propagate flags between the connectors\r\n\r\n  for i in 1:nBranches loop\r\n     split[i].available = if i==1 then inPort.available else\r\n                                       split[i-1].available and not split[i-1].reset", "end for", "join.occupied = fill(outPort.occupied, nBranches)", "inPort.reset  = Modelica.Math.BooleanVectors.anyTrue(split.reset)", "outPort.set   = Modelica.Math.BooleanVectors.anyTrue(join.set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2319, "end_line": 2344, "start_col": 3, "end_col": 66}}, {"equations": ["outPort.set   = Modelica.Math.BooleanVectors.anyTrue(join.set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2344, "end_line": 2344, "start_col": 3, "end_col": 65}}, {"equations": ["inPort.reset  = Modelica.Math.BooleanVectors.anyTrue(split.reset)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2343, "end_line": 2343, "start_col": 3, "end_col": 68}}, {"equations": ["join.occupied = fill(outPort.occupied, nBranches)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2342, "end_line": 2342, "start_col": 3, "end_col": 52}}, {"equations": ["for i in 1:nBranches loop\r\n     split[i].available = if i==1 then inPort.available else\r\n                                       split[i-1].available and not split[i-1].reset", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2337, "end_line": 2341, "start_col": 3, "end_col": 10}}, {"equations": ["split[i].available = if i==1 then inPort.available else\r\n                                       split[i-1].available and not split[i-1].reset"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2338, "end_line": 2339, "start_col": 6, "end_col": 86}}, {"equations": ["for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2325, "end_line": 2333, "start_col": 3, "end_col": 10}}, {"equations": ["assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")", "assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2327, "end_line": 2331, "start_col": 6, "end_col": 69}}, {"equations": ["assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2330, "end_line": 2331, "start_col": 6, "end_col": 68}}, {"equations": ["assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2327, "end_line": 2328, "start_col": 6, "end_col": 68}}, {"equations": ["assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2322, "end_line": 2323, "start_col": 3, "end_col": 73}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2319, "end_line": 2320, "start_col": 3, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2316, "end_line": 2316, "start_col": 1, "end_col": 9}}, {"equations": ["equation\r\n  active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2159, "end_line": 2160, "start_col": 1, "end_col": 24}}, {"equations": ["active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2160, "end_line": 2160, "start_col": 3, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2159, "end_line": 2159, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  active = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2157, "end_line": 2158, "start_col": 1, "end_col": 18}}, {"equations": ["active = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2158, "end_line": 2158, "start_col": 3, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2157, "end_line": 2157, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n  active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2130, "end_line": 2131, "start_col": 1, "end_col": 24}}, {"equations": ["active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2131, "end_line": 2131, "start_col": 3, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2130, "end_line": 2130, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  active = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2128, "end_line": 2129, "start_col": 1, "end_col": 18}}, {"equations": ["active = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2129, "end_line": 2129, "start_col": 3, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2128, "end_line": 2128, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n  active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2101, "end_line": 2102, "start_col": 1, "end_col": 24}}, {"equations": ["active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2102, "end_line": 2102, "start_col": 3, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2101, "end_line": 2101, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  active = true"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2099, "end_line": 2100, "start_col": 1, "end_col": 17}}, {"equations": ["active = true"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2100, "end_line": 2100, "start_col": 3, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2099, "end_line": 2099, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n  active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2069, "end_line": 2070, "start_col": 1, "end_col": 24}}, {"equations": ["active = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2070, "end_line": 2070, "start_col": 3, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2069, "end_line": 2069, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  active = true"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2067, "end_line": 2068, "start_col": 1, "end_col": 17}}, {"equations": ["active = true"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2068, "end_line": 2068, "start_col": 3, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2067, "end_line": 2067, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n    suspend = subgraphStatePort.suspend", "resume  = subgraphStatePort.resume", "subgraphStatePort.activeStepsDummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2049, "end_line": 2052, "start_col": 3, "end_col": 44}}, {"equations": ["suspend = subgraphStatePort.suspend", "resume  = subgraphStatePort.resume", "subgraphStatePort.activeStepsDummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2050, "end_line": 2052, "start_col": 5, "end_col": 44}}, {"equations": ["subgraphStatePort.activeStepsDummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2052, "end_line": 2052, "start_col": 5, "end_col": 43}}, {"equations": ["resume  = subgraphStatePort.resume"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2051, "end_line": 2051, "start_col": 5, "end_col": 39}}, {"equations": ["suspend = subgraphStatePort.suspend"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2050, "end_line": 2050, "start_col": 5, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2049, "end_line": 2049, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\")", "// Handling of Timer\r\n    if enableTimer then\r\n      when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime", "else\r\n      when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire", "end if", "// Determine fire setting and report it to the connected step\r\n    enableFire = localCondition and inPort.available and not outPort.occupied", "inPort.reset = fire", "outPort.set = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1995, "end_line": 2021, "start_col": 3, "end_col": 24}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\")", "// Handling of Timer\r\n    if enableTimer then\r\n      when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime", "else\r\n      when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire", "end if", "// Determine fire setting and report it to the connected step\r\n    enableFire = localCondition and inPort.available and not outPort.occupied", "inPort.reset = fire", "outPort.set = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1996, "end_line": 2021, "start_col": 5, "end_col": 24}}, {"equations": ["outPort.set = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2021, "end_line": 2021, "start_col": 5, "end_col": 23}}, {"equations": ["inPort.reset = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2020, "end_line": 2020, "start_col": 5, "end_col": 24}}, {"equations": ["enableFire = localCondition and inPort.available and not outPort.occupied"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2019, "end_line": 2019, "start_col": 5, "end_col": 78}}, {"equations": ["if enableTimer then\r\n      when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime", "else\r\n      when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2002, "end_line": 2016, "start_col": 5, "end_col": 11}}, {"equations": ["when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2010, "end_line": 2015, "start_col": 7, "end_col": 25}}, {"equations": ["fire = enableFire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2015, "end_line": 2015, "start_col": 7, "end_col": 24}}, {"equations": ["t = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2014, "end_line": 2014, "start_col": 7, "end_col": 12}}, {"equations": ["t_dummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2013, "end_line": 2013, "start_col": 7, "end_col": 18}}, {"equations": ["when false then\r\n        t_start = pre(t_start)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2010, "end_line": 2012, "start_col": 7, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2012, "end_line": 2012, "start_col": 11, "end_col": 15}}, {"equations": ["t_start = pre(t_start)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2011, "end_line": 2011, "start_col": 9, "end_col": 32}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2010, "end_line": 2010, "start_col": 7, "end_col": 11}}, {"equations": ["when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2003, "end_line": 2008, "start_col": 7, "end_col": 56}}, {"equations": ["fire = enableFire and time >= t_start + waitTime"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2008, "end_line": 2008, "start_col": 7, "end_col": 55}}, {"equations": ["t = if enableFire then t_dummy else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2007, "end_line": 2007, "start_col": 7, "end_col": 44}}, {"equations": ["t_dummy = time - t_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2006, "end_line": 2006, "start_col": 7, "end_col": 31}}, {"equations": ["when enableFire then\r\n        t_start = time", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2003, "end_line": 2005, "start_col": 7, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2005, "end_line": 2005, "start_col": 11, "end_col": 15}}, {"equations": ["t_start = time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2004, "end_line": 2004, "start_col": 9, "end_col": 24}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2003, "end_line": 2003, "start_col": 7, "end_col": 11}}, {"equations": ["assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1998, "end_line": 1999, "start_col": 5, "end_col": 75}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1996, "end_line": 1997, "start_col": 5, "end_col": 74}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1995, "end_line": 1995, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(t_start) = time", "pre(enableFire) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1992, "end_line": 1994, "start_col": 3, "end_col": 29}}, {"equations": ["pre(t_start) = time", "pre(enableFire) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1993, "end_line": 1994, "start_col": 5, "end_col": 29}}, {"equations": ["pre(enableFire) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1994, "end_line": 1994, "start_col": 5, "end_col": 28}}, {"equations": ["pre(t_start) = time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1993, "end_line": 1993, "start_col": 5, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1992, "end_line": 1992, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "// set active state\r\n    localActive = pre(newActive)", "newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend", "// Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when", "// Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for", "for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for", "// Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for", "for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1911, "end_line": 1965, "start_col": 3, "end_col": 13}}, {"equations": ["connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "// set active state\r\n    localActive = pre(newActive)", "newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend", "// Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when", "// Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for", "for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for", "// Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for", "for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1912, "end_line": 1965, "start_col": 5, "end_col": 13}}, {"equations": ["for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1961, "end_line": 1965, "start_col": 5, "end_col": 12}}, {"equations": ["if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1962, "end_line": 1964, "start_col": 7, "end_col": 14}}, {"equations": ["outPort[i].reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1963, "end_line": 1963, "start_col": 9, "end_col": 34}}, {"equations": ["for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1955, "end_line": 1959, "start_col": 5, "end_col": 12}}, {"equations": ["if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1956, "end_line": 1958, "start_col": 7, "end_col": 14}}, {"equations": ["inPort[i].set = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1957, "end_line": 1957, "start_col": 9, "end_col": 31}}, {"equations": ["for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1948, "end_line": 1952, "start_col": 5, "end_col": 12}}, {"equations": ["outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1949, "end_line": 1951, "start_col": 8, "end_col": 65}}, {"equations": ["for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1942, "end_line": 1946, "start_col": 5, "end_col": 12}}, {"equations": ["inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1943, "end_line": 1945, "start_col": 7, "end_col": 59}}, {"equations": ["when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1937, "end_line": 1939, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1939, "end_line": 1939, "start_col": 9, "end_col": 13}}, {"equations": ["oldActive = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1938, "end_line": 1938, "start_col": 7, "end_col": 31}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1937, "end_line": 1937, "start_col": 5, "end_col": 9}}, {"equations": ["newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1929, "end_line": 1934, "start_col": 5, "end_col": 70}}, {"equations": ["localActive = pre(newActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1928, "end_line": 1928, "start_col": 5, "end_col": 33}}, {"equations": ["for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1921, "end_line": 1925, "start_col": 5, "end_col": 12}}, {"equations": ["assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1923, "end_line": 1924, "start_col": 5, "end_col": 88}}, {"equations": ["for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1915, "end_line": 1919, "start_col": 5, "end_col": 12}}, {"equations": ["assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1917, "end_line": 1918, "start_col": 5, "end_col": 88}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1911, "end_line": 1911, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(newActive) = pre(localActive)", "pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1908, "end_line": 1910, "start_col": 3, "end_col": 39}}, {"equations": ["pre(newActive) = pre(localActive)", "pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1909, "end_line": 1910, "start_col": 5, "end_col": 39}}, {"equations": ["pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1910, "end_line": 1910, "start_col": 5, "end_col": 38}}, {"equations": ["pre(newActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1909, "end_line": 1909, "start_col": 5, "end_col": 38}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1908, "end_line": 1908, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n      subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1900, "end_line": 1901, "start_col": 5, "end_col": 72}}, {"equations": ["subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1901, "end_line": 1901, "start_col": 7, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1900, "end_line": 1900, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}))", "connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1727, "end_line": 1735, "start_col": 5, "end_col": 55}}, {"equations": ["connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}))", "connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1728, "end_line": 1735, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1727, "end_line": 1727, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}))", "connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}))", "connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}))", "connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}))", "connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}))", "connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}))", "connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}))", "connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1690, "end_line": 1716, "start_col": 5, "end_col": 64}}, {"equations": ["connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}))", "connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}))", "connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}))", "connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}))", "connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}))", "connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}))", "connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}))", "connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1691, "end_line": 1716, "start_col": 7, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1690, "end_line": 1690, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}))", "connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}))", "connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}))", "connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}))", "connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}))", "connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}))", "connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}))", "connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}))", "connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}))", "connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1624, "end_line": 1656, "start_col": 5, "end_col": 62}}, {"equations": ["connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}))", "connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}))", "connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}))", "connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}))", "connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}))", "connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}))", "connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}))", "connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}))", "connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}))", "connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1625, "end_line": 1656, "start_col": 7, "end_col": 62}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1624, "end_line": 1624, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      if outflow1.open then\r\n        outflow1.Fo = maxflow", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1576, "end_line": 1581, "start_col": 5, "end_col": 14}}, {"equations": ["if outflow1.open then\r\n        outflow1.Fo = maxflow", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1577, "end_line": 1581, "start_col": 7, "end_col": 14}}, {"equations": ["outflow1.Fo = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1580, "end_line": 1580, "start_col": 9, "end_col": 25}}, {"equations": ["outflow1.Fo = maxflow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1578, "end_line": 1578, "start_col": 9, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1576, "end_line": 1576, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)", "if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if", "levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1542, "end_line": 1549, "start_col": 5, "end_col": 27}}, {"equations": ["der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)", "if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if", "levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1543, "end_line": 1549, "start_col": 7, "end_col": 27}}, {"equations": ["levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1549, "end_line": 1549, "start_col": 7, "end_col": 26}}, {"equations": ["if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1544, "end_line": 1548, "start_col": 7, "end_col": 13}}, {"equations": ["outflow1.Fo = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1547, "end_line": 1547, "start_col": 9, "end_col": 25}}, {"equations": ["outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1545, "end_line": 1545, "start_col": 9, "end_col": 53}}, {"equations": ["der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1543, "end_line": 1543, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1542, "end_line": 1542, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      outflow1.Fo = inflow1.Fi", "outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1506, "end_line": 1508, "start_col": 5, "end_col": 36}}, {"equations": ["outflow1.Fo = inflow1.Fi", "outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1507, "end_line": 1508, "start_col": 7, "end_col": 36}}, {"equations": ["outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1508, "end_line": 1508, "start_col": 7, "end_col": 35}}, {"equations": ["outflow1.Fo = inflow1.Fi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1507, "end_line": 1507, "start_col": 7, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1506, "end_line": 1506, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}))", "connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}))", "connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}))", "connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}))", "connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}))", "connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}))", "connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}))", "connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}))", "connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}))", "connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1407, "end_line": 1435, "start_col": 5, "end_col": 28}}, {"equations": ["connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}))", "connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}))", "connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}))", "connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}))", "connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}))", "connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}))", "connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}))", "connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}))", "connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}))", "connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1408, "end_line": 1435, "start_col": 7, "end_col": 28}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1407, "end_line": 1407, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n\r\n      connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}))", "connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}))", "connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}))", "connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}))", "connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}))", "connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}))", "connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}))", "connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}))", "connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}))", "connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}))", "connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}))", "connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}))", "connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}))", "connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}))", "connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}))", "connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1312, "end_line": 1352, "start_col": 5, "end_col": 71}}, {"equations": ["connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}))", "connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}))", "connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}))", "connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}))", "connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}))", "connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}))", "connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}))", "connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}))", "connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}))", "connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}))", "connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}))", "connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}))", "connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}))", "connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}))", "connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}))", "connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1314, "end_line": 1352, "start_col": 7, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1312, "end_line": 1312, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n    connect(tank1.outflow1, valve2.outflow1) annotation (Line(\r\n          points={{50,33.75},{50,26.875},{46.5,26.875},{46.5,16.5}},\r\n          thickness=0.5))", "connect(tank2.inflow1, valve2.inflow1) annotation (Line(\r\n          points={{46.5,-18.75},{46.5,9.5}},\r\n          thickness=0.5))", "connect(tank2.outflow1, valve3.outflow1) annotation (Line(\r\n          points={{74,-46.25},{74,-73.5},{73.5,-73.5}},\r\n          thickness=0.5))", "connect(tank1.inflow1, valve1.inflow1) annotation (Line(\r\n          points={{22.5,61.25},{22.5,69.25}},\r\n          thickness=0.5))", "connect(shut.on, tankController.shut) annotation (Line(points={{-69,-30},{\r\n              -62,-30},{-62,-12},{-52,-12}}, color={255,0,255}))", "connect(stop.on, tankController.stop) annotation (Line(points={{-69,0},{-52,\r\n              0}}, color={255,0,255}))", "connect(start.on, tankController.start) annotation (Line(points={{-69,30},{\r\n              -60,30},{-60,12},{-52,12}}, color={255,0,255}))", "connect(tank1.levelSensor, tankController.level1) annotation (Line(points={\r\n              {17.25,40},{-30,40},{-30,60},{-97,60},{-97,-50},{-42,-50},{-42,\r\n              -22}}, color={0,0,255}))", "connect(tank2.levelSensor, tankController.level2) annotation (Line(points={\r\n              {41.25,-40},{-18,-40},{-18,-22}}, color={0,0,255}))", "connect(tankController.valve1, valve1.valveControl) annotation (Line(points=\r\n             {{-9,12},{10,12},{10,72},{18.1,72}}, color={255,0,255}))", "connect(tankController.valve2, valve2.valveControl) annotation (Line(points={{-9,0},{\r\n              30,0},{30,13},{40.1,13}}, color={255,0,255}))", "connect(tankController.valve3, valve3.valveControl) annotation (Line(points=\r\n             {{-9,-12},{23,-12},{23,-77},{67.1,-77}}, color={255,0,255}))", "connect(source.outflow1, valve1.outflow1) annotation (Line(\r\n          points={{22.5,85.5},{22.5,74.75}},\r\n          thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1176, "end_line": 1209, "start_col": 3, "end_col": 27}}, {"equations": ["connect(tank1.outflow1, valve2.outflow1) annotation (Line(\r\n          points={{50,33.75},{50,26.875},{46.5,26.875},{46.5,16.5}},\r\n          thickness=0.5))", "connect(tank2.inflow1, valve2.inflow1) annotation (Line(\r\n          points={{46.5,-18.75},{46.5,9.5}},\r\n          thickness=0.5))", "connect(tank2.outflow1, valve3.outflow1) annotation (Line(\r\n          points={{74,-46.25},{74,-73.5},{73.5,-73.5}},\r\n          thickness=0.5))", "connect(tank1.inflow1, valve1.inflow1) annotation (Line(\r\n          points={{22.5,61.25},{22.5,69.25}},\r\n          thickness=0.5))", "connect(shut.on, tankController.shut) annotation (Line(points={{-69,-30},{\r\n              -62,-30},{-62,-12},{-52,-12}}, color={255,0,255}))", "connect(stop.on, tankController.stop) annotation (Line(points={{-69,0},{-52,\r\n              0}}, color={255,0,255}))", "connect(start.on, tankController.start) annotation (Line(points={{-69,30},{\r\n              -60,30},{-60,12},{-52,12}}, color={255,0,255}))", "connect(tank1.levelSensor, tankController.level1) annotation (Line(points={\r\n              {17.25,40},{-30,40},{-30,60},{-97,60},{-97,-50},{-42,-50},{-42,\r\n              -22}}, color={0,0,255}))", "connect(tank2.levelSensor, tankController.level2) annotation (Line(points={\r\n              {41.25,-40},{-18,-40},{-18,-22}}, color={0,0,255}))", "connect(tankController.valve1, valve1.valveControl) annotation (Line(points=\r\n             {{-9,12},{10,12},{10,72},{18.1,72}}, color={255,0,255}))", "connect(tankController.valve2, valve2.valveControl) annotation (Line(points={{-9,0},{\r\n              30,0},{30,13},{40.1,13}}, color={255,0,255}))", "connect(tankController.valve3, valve3.valveControl) annotation (Line(points=\r\n             {{-9,-12},{23,-12},{23,-77},{67.1,-77}}, color={255,0,255}))", "connect(source.outflow1, valve1.outflow1) annotation (Line(\r\n          points={{22.5,85.5},{22.5,74.75}},\r\n          thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1177, "end_line": 1209, "start_col": 5, "end_col": 27}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1176, "end_line": 1176, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(transition1.outPort, compositeStep.inPort)\r\n      annotation (Line(points={{-38.5,40},{-21,40}}))", "connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-59.5,40},{-44,40}}))", "connect(compositeStep.outPort, transition2.inPort)\r\n      annotation (Line(points={{10.5,40},{26,40}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{31.5,40},{46,40},{46,80},{-90,80},{-90,40},{-81,40}}))", "connect(compositeStep.suspend[1], transition3.inPort)\r\n                                                  annotation (Line(points={{-12.5,\r\n              24.5},{-12.5,10},{-60,10},{-60,-20},{-49,-20}}))", "connect(transition3.outPort, step1.inPort[1]) annotation (Line(points={{\r\n              -43.5,-20},{-25,-20}}))", "connect(step1.outPort[1], transition4.inPort)\r\n      annotation (Line(points={{-3.5,-20},{16,-20}}))", "connect(transition4.outPort, compositeStep.resume[1])\r\n                                                  annotation (Line(points={{21.5,\r\n              -20},{40,-20},{40,10},{2.5,10},{2.5,24}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1106, "end_line": 1125, "start_col": 3, "end_col": 58}}, {"equations": ["connect(transition1.outPort, compositeStep.inPort)\r\n      annotation (Line(points={{-38.5,40},{-21,40}}))", "connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-59.5,40},{-44,40}}))", "connect(compositeStep.outPort, transition2.inPort)\r\n      annotation (Line(points={{10.5,40},{26,40}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{31.5,40},{46,40},{46,80},{-90,80},{-90,40},{-81,40}}))", "connect(compositeStep.suspend[1], transition3.inPort)\r\n                                                  annotation (Line(points={{-12.5,\r\n              24.5},{-12.5,10},{-60,10},{-60,-20},{-49,-20}}))", "connect(transition3.outPort, step1.inPort[1]) annotation (Line(points={{\r\n              -43.5,-20},{-25,-20}}))", "connect(step1.outPort[1], transition4.inPort)\r\n      annotation (Line(points={{-3.5,-20},{16,-20}}))", "connect(transition4.outPort, compositeStep.resume[1])\r\n                                                  annotation (Line(points={{21.5,\r\n              -20},{40,-20},{40,10},{2.5,10},{2.5,24}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1108, "end_line": 1125, "start_col": 5, "end_col": 58}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1106, "end_line": 1106, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step0.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-68.5,0},{-53,0}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -1.5,-60},{-98,-60},{-98,0},{-90,0}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              91.5,0},{96,0},{96,-60},{4,-60}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(\r\n          points={{56.5,0},{70,0}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{-47.5,0},\r\n              {-30.99,0}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{36.66,0},\r\n              {51,0}}))", "connect(compositeStep.inPort, Parallel1.split[1])\r\n                                                 annotation (Line(points={{-11,20},\r\n              {-22.575,20}}))", "connect(compositeStep.outPort, Parallel1.join[1])\r\n                                                 annotation (Line(points={{20.5,20},\r\n              {28.575,20}}))", "connect(step1.inPort[1], Parallel1.split[2]) annotation (Line(points={{-5,-20},\r\n              {-10,-20},{-10,-20},{-14,-20},{-14,-20},{-22.575,-20}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{16.5,\r\n              -20},{28.575,-20}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -8.5,-80},{0,-80},{0,-72}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1048, "end_line": 1072, "start_col": 3, "end_col": 63}}, {"equations": ["connect(step0.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-68.5,0},{-53,0}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -1.5,-60},{-98,-60},{-98,0},{-90,0}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              91.5,0},{96,0},{96,-60},{4,-60}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(\r\n          points={{56.5,0},{70,0}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{-47.5,0},\r\n              {-30.99,0}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{36.66,0},\r\n              {51,0}}))", "connect(compositeStep.inPort, Parallel1.split[1])\r\n                                                 annotation (Line(points={{-11,20},\r\n              {-22.575,20}}))", "connect(compositeStep.outPort, Parallel1.join[1])\r\n                                                 annotation (Line(points={{20.5,20},\r\n              {28.575,20}}))", "connect(step1.inPort[1], Parallel1.split[2]) annotation (Line(points={{-5,-20},\r\n              {-10,-20},{-10,-20},{-14,-20},{-14,-20},{-22.575,-20}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{16.5,\r\n              -20},{28.575,-20}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -8.5,-80},{0,-80},{0,-72}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1049, "end_line": 1072, "start_col": 5, "end_col": 63}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1048, "end_line": 1048, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(transition3.outPort, step3.inPort[1])\r\n      annotation (Line(points={{-30.5,90},{-9,90}}))", "connect(step3.outPort[1], transition5.inPort)\r\n      annotation (Line(points={{12.5,90},{32,90}}))", "connect(transition4.outPort, step4.inPort[1])\r\n      annotation (Line(points={{-30.5,50},{-9,50}}))", "connect(step4.outPort[1], transition6.inPort)\r\n      annotation (Line(points={{12.5,50},{32,50}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -2.5,-124},{-149,-124},{-149,-90},{-141,-90}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              140.5,-90},{150,-90},{150,-124},{3,-124}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-9,10}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n      annotation (Line(points={{12.5,10},{32,10}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -16.1,-150},{-1,-150},{-1,-136}}, color={255,0,255}))", "connect(setReal.y, NumericValue1.numberPort) annotation (Line(\r\n          points={{42,-150},{59,-150}}, color={0,0,255}))", "connect(transition3.inPort, alternative.split[1]) annotation (Line(points={{-36,90},\r\n              {-55.09,90}}))", "connect(transition4.inPort, alternative.split[2]) annotation (Line(points={{-36,50},\r\n              {-55.09,50}}))", "connect(transition4a.inPort, alternative.split[3]) annotation (Line(points={{-36,10},\r\n              {-45.0125,10},{-45.0125,10},{-55.09,10}}))", "connect(transition5.outPort, alternative.join[1]) annotation (Line(points={{37.5,90},\r\n              {57.09,90}}))", "connect(transition6.outPort, alternative.join[2]) annotation (Line(points={{37.5,50},\r\n              {57.09,50}}))", "connect(transition6a.outPort, alternative.join[3]) annotation (Line(points={{37.5,10},\r\n              {46.7625,10},{46.7625,10},{57.09,10}}))", "connect(step2.outPort[1], alternative.inPort) annotation (Line(points={{\r\n              -77.5,50},{-72.13,50}}))", "connect(alternative.outPort, step5.inPort[1])\r\n      annotation (Line(points={{73.42,50},{79,50}}))", "connect(step2.inPort[1], Parallel1.split[1]) annotation (Line(points={{-99,\r\n              50},{-118,50},{-118,78},{-119.575,78},{-119.575,77.5}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{10.5,\r\n              -30},{118,-30},{118,-7.5},{117.575,-7.5}}))", "connect(step0.outPort[1], transition1.inPort) annotation (Line(points={{\r\n              -119.5,-90},{-94,-90}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(points={{\r\n              101.5,-90},{119,-90}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{\r\n              -88.5,-90},{-70,-90},{-70,-64},{-174,-64},{-174,35},{-158.59,35}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{\r\n              155.06,35},{168,35},{168,-60},{80,-60},{80,-90},{96,-90}}))", "connect(step5.outPort[1], Parallel1.join[1]) annotation (Line(points={{\r\n              100.5,50},{116,50},{116,77.5},{117.575,77.5}}))", "connect(Parallel1.split[2], step1.inPort[1]) annotation (Line(points={{\r\n              -119.575,-7.5},{-118,-8},{-118,-30},{-11,-30}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 948, "end_line": 1000, "start_col": 3, "end_col": 64}}, {"equations": ["connect(transition3.outPort, step3.inPort[1])\r\n      annotation (Line(points={{-30.5,90},{-9,90}}))", "connect(step3.outPort[1], transition5.inPort)\r\n      annotation (Line(points={{12.5,90},{32,90}}))", "connect(transition4.outPort, step4.inPort[1])\r\n      annotation (Line(points={{-30.5,50},{-9,50}}))", "connect(step4.outPort[1], transition6.inPort)\r\n      annotation (Line(points={{12.5,50},{32,50}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -2.5,-124},{-149,-124},{-149,-90},{-141,-90}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              140.5,-90},{150,-90},{150,-124},{3,-124}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-9,10}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n      annotation (Line(points={{12.5,10},{32,10}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -16.1,-150},{-1,-150},{-1,-136}}, color={255,0,255}))", "connect(setReal.y, NumericValue1.numberPort) annotation (Line(\r\n          points={{42,-150},{59,-150}}, color={0,0,255}))", "connect(transition3.inPort, alternative.split[1]) annotation (Line(points={{-36,90},\r\n              {-55.09,90}}))", "connect(transition4.inPort, alternative.split[2]) annotation (Line(points={{-36,50},\r\n              {-55.09,50}}))", "connect(transition4a.inPort, alternative.split[3]) annotation (Line(points={{-36,10},\r\n              {-45.0125,10},{-45.0125,10},{-55.09,10}}))", "connect(transition5.outPort, alternative.join[1]) annotation (Line(points={{37.5,90},\r\n              {57.09,90}}))", "connect(transition6.outPort, alternative.join[2]) annotation (Line(points={{37.5,50},\r\n              {57.09,50}}))", "connect(transition6a.outPort, alternative.join[3]) annotation (Line(points={{37.5,10},\r\n              {46.7625,10},{46.7625,10},{57.09,10}}))", "connect(step2.outPort[1], alternative.inPort) annotation (Line(points={{\r\n              -77.5,50},{-72.13,50}}))", "connect(alternative.outPort, step5.inPort[1])\r\n      annotation (Line(points={{73.42,50},{79,50}}))", "connect(step2.inPort[1], Parallel1.split[1]) annotation (Line(points={{-99,\r\n              50},{-118,50},{-118,78},{-119.575,78},{-119.575,77.5}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{10.5,\r\n              -30},{118,-30},{118,-7.5},{117.575,-7.5}}))", "connect(step0.outPort[1], transition1.inPort) annotation (Line(points={{\r\n              -119.5,-90},{-94,-90}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(points={{\r\n              101.5,-90},{119,-90}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{\r\n              -88.5,-90},{-70,-90},{-70,-64},{-174,-64},{-174,35},{-158.59,35}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{\r\n              155.06,35},{168,35},{168,-60},{80,-60},{80,-90},{96,-90}}))", "connect(step5.outPort[1], Parallel1.join[1]) annotation (Line(points={{\r\n              100.5,50},{116,50},{116,77.5},{117.575,77.5}}))", "connect(Parallel1.split[2], step1.inPort[1]) annotation (Line(points={{\r\n              -119.575,-7.5},{-118,-8},{-118,-30},{-11,-30}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 949, "end_line": 1000, "start_col": 5, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 948, "end_line": 948, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-9.5},{\r\n              -4,-18},{-4,-18}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{62,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{67.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))", "connect(SetBoolean1.y, transition2.condition) annotation (Line(points={{\r\n              61.6,-30},{66,-30},{66,-2}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 871, "end_line": 885, "start_col": 3, "end_col": 64}}, {"equations": ["connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-9.5},{\r\n              -4,-18},{-4,-18}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{62,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{67.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))", "connect(SetBoolean1.y, transition2.condition) annotation (Line(points={{\r\n              61.6,-30},{66,-30},{66,-2}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 873, "end_line": 885, "start_col": 5, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 871, "end_line": 871, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-30},{4,\r\n              -30}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{58,10}}))", "connect(timer.y, greaterEqual.u)\r\n      annotation (Line(points={{27,-30},{34,-30}}, color={0,0,255}))", "connect(greaterEqual.y, transition2.condition) annotation (Line(points={{57,\r\n              -30},{62,-30},{62,-2}}, color={255,0,255}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{63.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 831, "end_line": 847, "start_col": 3, "end_col": 71}}, {"equations": ["connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-30},{4,\r\n              -30}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{58,10}}))", "connect(timer.y, greaterEqual.u)\r\n      annotation (Line(points={{27,-30},{34,-30}}, color={0,0,255}))", "connect(greaterEqual.y, transition2.condition) annotation (Line(points={{57,\r\n              -30},{62,-30},{62,-2}}, color={255,0,255}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{63.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 833, "end_line": 847, "start_col": 5, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 831, "end_line": 831, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-27.5,10},{-14,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-8.5,10},{9,10}}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{30.5,10},{46,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{51.5,10},{70,10},{70,32},{-62,32},{-62,10},{-49,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 802, "end_line": 811, "start_col": 3, "end_col": 71}}, {"equations": ["connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-27.5,10},{-14,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-8.5,10},{9,10}}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{30.5,10},{46,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{51.5,10},{70,10},{70,32},{-62,32},{-62,10},{-49,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 804, "end_line": 811, "start_col": 5, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 802, "end_line": 802, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.Package | components: Boolean×8, Real×4, SI.VolumeFlowRate×2 | connections: 103 | params: limit, waitTime, A | units: s, s, 1 | eq: equat", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2, "end_line": 2815, "start_col": 1, "end_col": 15}, "code_text": "package StateGraph\r\n  \"Library of hierarchical state machine components to model discrete event and reactive systems\"\r\n\r\n  extends Modelica.Icons.Package;\r\n  import Modelica.Units.SI;\r\npackage UsersGuide \"User's Guide of StateGraph Library\"\r\n  extends Modelica.Icons.Information;\r\n\r\n  class OverView \"Overview of library\"\r\n    extends Modelica.Icons.Information;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nIn this section, an overview of the most important features\r\nof this library is given.\r\n</p>\r\n<h4>Steps and Transitions</h4>\r\n<p>\r\nA <strong>StateGraph</strong> is an enhanced finite state machine.\r\nIt is based on the JGrafchart method and\r\ntakes advantage of Modelica features for\r\nthe \\\"action\\\" language. JGrafchart is a further development of\r\nGrafcet to include elements of StateCharts that are not present\r\nin Grafcet/Sequential Function Charts. Therefore, the StateGraph\r\nlibrary has a similar modeling power as StateCharts but avoids\r\nsome deficiencies of StateCharts.\r\n</p>\r\n<p>\r\nThe basic elements of StateGraphs are <strong>steps</strong> and <strong>transitions</strong>:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/StepAndTransition1.png\\\">\r\n</div>\r\n\r\n<p>\r\n<strong>Steps</strong> represent the possible states a StateGraph can have.\r\nIf a step is active the Boolean variable <strong>active</strong> of\r\nthe step is <strong>true</strong>. If it is deactivated,\r\n<strong>active</strong> = <strong>false</strong>. At the initial time, all \\\"usual\\\"\r\nsteps are deactivated. The <strong>InitialStep</strong> objects are steps\r\nthat are activated at the initial time. They are characterized\r\nby a double box (see figure above).\r\n</p>\r\n<p>\r\n<strong>Transitions</strong> are used to change the state of a StateGraph.\r\nWhen the step connected to the input of a transition is active,\r\nthe step connected to the output of this transition is deactivated\r\nand the transition condition becomes true, then the\r\ntransition fires. This means that the step connected to the input to the\r\ntransition is deactivated and the step connected to the output\r\nof the transition is activated.\r\n</p>\r\n<p>\r\nThe transition <strong>condition</strong> is defined via the parameter menu\r\nof the transition object. Clicking on object \\\"transition1\\\" in\r\nthe above figure, results in the following menu:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/StepAndTransition2.png\\\">\r\n</div>\r\n\r\n<p>\r\nIn the input field \\\"<strong>condition</strong>\\\", any type of time varying\r\nBoolean expression can be given (in Modelica notation, this is\r\na modification of the time varying variable <strong>condition</strong>).\r\nWhenever this condition is true, the transition can fire.\r\nAdditionally, it is possible to activate a timer, via\r\n<strong>enableTimer</strong> (see menu above) and provide a\r\n<strong>waitTime</strong>. In this case the firing of the transition\r\nis delayed according to the provided waitTime. The transition\r\ncondition and the waitTime are displayed in the transition icon.\r\n</p>\r\n<p>\r\nIn the above example, the simulation starts at <strong>initialStep</strong>.\r\nAfter 1 second, <strong>transition1</strong> fires and <strong>step1</strong> becomes\r\nactive. After another second <strong>transition2</strong> fires and\r\n<strong>initialStep</strong> becomes again active. After a further\r\nsecond <strong>step1</strong> becomes again active, and so on.\r\n</p>\r\n<p>\r\nIn JGrafcharts, Grafcet and Sequential Function Charts, the\r\nnetwork of steps and transitions is drawn from top to bottom.\r\nIn StateGraphs, no particular direction is defined, since\r\nsteps and transitions are blocks with input and output connectors\r\nthat can be arbitrarily placed and connected. Usually, it is\r\nmost practical to define the network from left to right,\r\nas in the example above, since then it is easy to read the\r\nlabels on the icons.\r\n</p>\r\n<h4>Conditions and Actions</h4>\r\n<p>\r\nWith the block <strong>TransitionWithSignal</strong>, the firing condition\r\ncan be provided as Boolean input signal, instead as entry in the\r\nmenu of the transition. An example is given in the next\r\nfigure:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/StepAndTransition3.png\\\">\r\n</div>\r\n\r\n<p>\r\nComponent \\\"step\\\" is an instance of \\\"StepWithSignal\\\" that is\r\na usual step where the active flag is available as Boolean\r\noutput signal. To this output, component \\\"Timer\\\" from\r\nlibrary \\\"Modelica.Blocks.Logical\\\" is connected. It measures the\r\ntime from the time instant where the Boolean input (i.e., the\r\nactive flag of the step) became true up to the current\r\ntime instant. The timer is connected to a comparison\r\ncomponent. The output is true, once the timer reaches\r\n1 second. This signal is used as condition input of the\r\ntransition. As a result, \\\"transition2\\\" fires, once step\r\n\\\"step\\\" has been active for 1 second.\r\nOf course, any other\r\nModelica block with a Boolean output signal can be\r\nconnected to the condition input of such a transition block\r\nas well.\r\n</p>\r\n<p>\r\nConditions of a transition can either be computed by\r\na network of logical blocks from the Logical library as\r\nin the figure above, or via the \\\"SetBoolean\\\" component\r\nany type of logical expression can be defined in textual\r\nform, as shown in the next figure:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/StepAndTransition4.png\\\">\r\n</div>\r\n\r\n<p>\r\nWith the block \\\"<strong>SetBoolean</strong>\\\", a time varying expression\r\ncan be provided as modification to the output signal <strong>y</strong>\r\n(see block with icon text \\\"timer.y > 1\\\" in the figure above).\r\nThe output signal can be in turn connected to the condition\r\ninput of a TransitionWithSignal block.\r\n</p>\r\n<p>\r\nThe \\\"<strong>SetBoolean</strong>\\\" block can also be used to\r\ncompute a Boolean signal depending on the active step.\r\nIn the figure above, the output of the block with the\r\nicon text \\\"step.active\\\" is\r\ntrue, when \\\"step\\\" is active, otherwise it is false\r\n(note, the icon text of \\\"SetBoolean\\\" displays the modification\r\nof the output signal \\\"y\\\").\r\nThis signal can then be used to compute desired <strong>actions</strong>\r\nin the physical systems model. For example, if a <strong>valve</strong>\r\nshall be open, when the StateGraph is in \\\"step1\\\" or\r\nin \\\"step4\\\", a \\\"SetBoolean\\\" block may be connected to the\r\nvalve model using the following condition:\r\n</p>\r\n<blockquote><pre>\r\nvalve = step1.active <strong>or</strong> step2.active\r\n</pre></blockquote>\r\n<p>\r\nVia the Modelica operators <strong>edge</strong>(..) and <strong>change</strong>(..),\r\nconditions depending on rising and falling edges of\r\nBoolean expressions can be used when needed.\r\n</p>\r\n<p>\r\nIn JGrafcharts, Grafcet, Sequential Function Charts and StateCharts,\r\n<strong>actions</strong> are formulated <strong>within a step</strong>. Such actions are\r\ndistinguished as <strong>entry</strong>, <strong>normal</strong>, <strong>exit</strong> and\r\n<strong>abort</strong> actions. For example, a valve might be opened by\r\nan entry action of a step and might be closed by an exit\r\naction of the same step. In StateGraphs, this is (fortunately)\r\n<strong>not possible</strong>\r\ndue to Modelica's \\\"single assignment rule\\\" that requires that every\r\nvariable is defined by exactly one equation. Instead, the\r\napproach explained above is used. For example, via the\r\n\\\"SetBoolean\\\" component, the valve variable is set to true\r\nwhen the StateGraph is in particular steps.\r\n</p>\r\n<p>\r\nThis feature of a StateGraph is <strong>very useful</strong>, since it allows\r\na Modelica translator to <strong>guarantee</strong> that a given StateGraph\r\nhas always <strong>deterministic</strong> behaviour without conflicts.\r\nIn the other methodologies this is much more cumbersome. For example,\r\nif two steps are executed in parallel and both step actions\r\nmodify the same variable, the result is either non-deterministic\r\nor non-obvious rules have to be defined which action\r\ntakes priority. In a StateGraph, such a situation is detected by\r\nthe translator resulting in an error, since there are two equations\r\nto compute one variable. Additional benefits of the StateGraph\r\napproach are:\r\n</p>\r\n<ul>\r\n<li> A JGrafchart or a StateChart need to potentially access\r\n     variables in a step that are defined in\r\n     higher hierarchical levels of a model. Therefore, mostly <strong>global\r\n     variables</strong> are used in the whole network, even if the\r\n     network is structured hierarchically. In StateGraphs this\r\n     is not necessary, since the physical systems outside\r\n     of a StateGraph might access the step or transition state\r\n     via a hierarchical name. This means that <strong>no global variables</strong>\r\n     are needed, because the local variables in the StateGraph\r\n     are accessed from local variables outside of the StateGraph.\r\n     </li>\r\n<li> It is simpler for a user to understand the information that\r\n     is provided in the non-graphical definition, since every\r\n     variable is defined at exactly one place. In the other\r\n     methodologies, the setting and re-setting of the same\r\n     variable is cluttered within the whole network.\r\n    </li>\r\n</ul>\r\n<p>\r\nTo emphasize this important difference between these methodologies,\r\nconsider the case that a state machine has the following\r\nhierarchy:\r\n</p>\r\n<blockquote><pre>\r\nstateMachine.superstate1.superstate2.step1\r\n</pre></blockquote>\r\n<p>\r\nWithin \\\"step1\\\" a StateChart would, e.g., access variable\r\n\\\"stateMachine.openValve\\\", say as \\\"entry action: openValve = true\\\".\r\nThis typical usage has the severe drawback that it is not possible\r\nto use the hierarchical state \\\"superstate1\\\" as component in another\r\ncontext, because \\\"step1\\\" references a particular name outside of this\r\ncomponent.\r\n</p>\r\n<p>\r\nIn a StateGraph, there would be typically a \\\"SetBoolean\\\" component\r\nin the \\\"stateMachine\\\" component stating:\r\n</p>\r\n<blockquote><pre>\r\nopenValve = superstate1.superstate2.step1.active;\r\n</pre></blockquote>\r\n<p>\r\nAs a result, the \\\"superstate1\\\" component can be used in\r\nanother context, because it does not depend on the environment\r\nwhere it is used.\r\n</p>\r\n<h4>Execution Model</h4>\r\n<p>\r\nThe execution model of a StateGraph follows from its\r\nModelica implementation: Given the states of all steps, i.e.,\r\nwhether a step is active or not active, the equations of all\r\nsteps, transitions, transition conditions, actions etc. are\r\nsorted resulting in an execution sequence to compute\r\nessentially the new values of the steps. If conflicts occur,\r\ne.g., if there are more equations as variables, of if there\r\nare algebraic loops between Boolean variables, an exception\r\nis raised. Once all equations have been processed, the\r\n<strong>active</strong> variables of all steps are updated to the newly\r\ncalculated values. Afterwards, the equations are again\r\nevaluated. The iteration stops, once no step changes\r\nits state anymore, i.e., once no transition fires anymore.\r\nThen, simulation continuous until a new event is triggered,\r\n(when a relation changes its value).\r\n</p>\r\n<p>\r\nWith the Modelica \\\"sample(..)\\\" operator, a StateGraph might also\r\nbe executed within a discrete controller that is called\r\nat regular time instants. Furthermore, clocked state machines\r\nare directly supported by the Modelica language itself, see <a href=\\\"https://specification.modelica.org/maint/3.6/state-machines.html\\\">Chapter&nbsp;17 (State Machines) of the Modelica&nbsp;3.6 specification</a>.\r\n</p>\r\n<h4>Parallel and Alternative Execution</h4>\r\n<p>\r\nParallel activities can be defined by\r\ncomponent <strong>Parallel</strong> and alternative activities\r\ncan be defined by component <strong>Alternative</strong>.\r\nAn example for both components is given in the next figure.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/Parallel1.png\\\">\r\n</div>\r\n\r\n<p>\r\nHere, the branch from \\\"step2\\\" to \\\"step5\\\" is executed in parallel\r\nto \\\"step1\\\". A transition connected to the output of a parallel\r\nbranch component can only fire if the final steps\r\nin all parallel branches are active simultaneously.\r\nThe figure above is a screen-shot from the animation of the\r\nStateGraph: Whenever a step is active or a transition can fire,\r\nthe corresponding component is marked in <strong>green</strong> color.\r\n</p>\r\n<p>\r\nThe three branches within \\\"step2\\\" to \\\"step5\\\" are\r\nexecuted alternatively, depending which transition condition\r\nof \\\"transition3\\\", \\\"transition4\\\", \\\"transition4a\\\" fires first.\r\nSince all three transitions fire after 1 second, they are all\r\ncandidates for the active branch. If two or more transitions\r\nwould fire at the same time instant, a priority selection\r\nis made: The alternative and parallel components have a\r\nvector of connectors. Every branch has to be connected to\r\nexactly one entry of the connector vector. The entry with\r\nthe lowest number has the highest priority.\r\n</p>\r\n<p>\r\nParallel, Alternative and Step components have vectors of\r\nconnectors. The dimensions of these vectors are set in the\r\ncorresponding parameter menu. E.g. in a \\\"Parallel\\\" component:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/Parallel2.png\\\">\r\n</div>\r\n\r\n<p>\r\nCurrently in Dymola the following menu pops up, when a branch\r\nis connected to a vector of components in order to define\r\nthe vector index to which the component shall be connected:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/Parallel3.png\\\">\r\n</div>\r\n\r\n<h4>CompositeSteps, Suspend and Resume Port</h4>\r\n<p>\r\nA StateGraph can be hierarchically structured by using a <strong>CompositeStep</strong>.\r\nThis is a component that inherits from <strong>PartialCompositeStep</strong>.\r\nAn example is given in the next figure (from Examples.ControlledTanks):\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/CompositeStep1.png\\\">\r\n</div>\r\n\r\n<p>\r\nThe CompositeStep component contains a local StateGraph that is\r\nentered by one or more input transitions and that is left\r\nby one or more output transitions. Also, other needed signals\r\nmay enter a CompositeStep. The CompositeStep has similar properties\r\nas a \\\"usual\\\" step: The CompositeStep is <strong>active</strong> once at least\r\none step within the CompositeStep is active. Variable <strong>active</strong>\r\ndefines the state of the CompositeStep.\r\n</p>\r\n<p>\r\nAdditionally, a CompositeStep has a <strong>suspend</strong> port. Whenever the\r\ntransition connected to this port fires, the CompositeStep is left\r\nat once. When leaving the CompositeStep via the suspend port, the internal\r\nstate of the CompositeStep is saved, i.e., the active flags of all\r\nsteps within the CompositeStep. The CompositeStep might be entered via\r\nits <strong>resume</strong> port. In this case the internal state from the\r\nsuspend transition is reconstructed and the CompositeStep continues\r\nthe execution that it had before the suspend transition fired\r\n(this corresponds to the history ports of StateCharts or JGrafcharts).\r\n</p>\r\n<p>\r\nA CompositeStep may contain other CompositeSteps. At every level,\r\na CompositeStep and all of its content can be left via its suspend ports\r\n(actually, there\r\nis a vector of suspend connectors, i.e., a CompositeStep might\r\nbe aborted due to different transitions).\r\n</p>\r\n</html>\"));\r\n  end OverView;\r\n\r\n  class FirstExample \"A first example\"\r\n    extends Modelica.Icons.Information;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nA first example will be given here (not yet done).\r\n</p>\r\n</html>\"));\r\n  end FirstExample;\r\n\r\n  class ApplicationExample \"An application example\"\r\n    extends Modelica.Icons.Information;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nIn this section a more realistic, still simple, application example\r\nis given, to demonstrate various features of the StateGraph library.\r\nThis example shows the control of a two tank system from the master thesis\r\nof Isolde Dressler\r\n(<a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Literature\\\">see literature</a>).\r\n</p>\r\n<p>\r\nIn the following figure the top level of the model is shown.\r\nThis model is available as StateGraph.Examples.ControlledTanks.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/ControlledTanks1.png\\\">\r\n</div>\r\n\r\n<p>\r\nIn the right part of the figure, two tanks are shown. At the top part,\r\na large fluid source is present from which fluid can be filled in\r\n<strong>tank1</strong> when <strong>valve1</strong> is open. Tank1 can be emptied via\r\n<strong>valve2</strong> that is located in the bottom of tank2 and\r\nfills a second <strong>tank2</strong> which in turn is emptied via\r\n<strong>valve3</strong>. The actual levels of the tanks are measured\r\nand are provided as signals <strong>level1</strong> and <strong>level2</strong>\r\nto the <strong>tankController</strong>.\r\n</p>\r\n<p>\r\nThe <strong>tankController</strong> is controlled by three buttons,\r\n<strong>start</strong>, <strong>stop</strong> and <strong>shut</strong> (for shutdown)\r\nthat are mutually exclusive. This means that whenever one button is\r\npressed (i.e., its state is <strong>true</strong>) then the other two\r\nbuttons are not pressed (i.e., their states are <strong>false</strong>).\r\nWhen button <strong>start</strong> is pressed, the \\\"normal\\\" operation\r\nto fill and to empty the two tanks is processed:\r\n</p>\r\n<ol>\r\n<li> Valve 1 is opened and tank 1 is filled.</li>\r\n<li> When tank 1 reaches its fill level limit,\r\n     valve 1 is closed.</li>\r\n<li> After a waiting time, valve 2 is\r\n     opened and the fluid flows from tank 1 into tank 2.</li>\r\n<li> When tank 1 is empty, valve 2 is closed.</li>\r\n<li> After a waiting time, valve 3 is opened and\r\n     the fluid flows out of tank 2.</li>\r\n<li> When tank 2 is empty, valve 3 is closed.</li>\r\n</ol>\r\n<p>\r\nThe above \\\"normal\\\" process can be influenced by the following\r\nbuttons:\r\n</p>\r\n<ul>\r\n<li> Button <strong>start</strong> starts the above process.\r\n     When this button is pressed after a \\\"stop\\\" or\r\n     \\\"shut\\\" operation, the process operation continues.\r\n     </li>\r\n<li> Button <strong>stop</strong> stops the above process by\r\n     closing all valves. Then, the controller waits for\r\n     further input (either \\\"start\\\" or \\\"shut\\\" operation).</li>\r\n<li> Button <strong>shut</strong> is used to shutdown the process,\r\n     by emptying at once both tanks. When this is achieved,\r\n     the process goes back to its start configuration.\r\n     Clicking on \\\"start\\\", restarts the process.</li>\r\n</ul>\r\n<p>\r\nThe implementation of the <strong>tankController</strong> is shown in\r\nthe next figure:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/ControlledTanks2.png\\\">\r\n</div>\r\n\r\n<p>\r\nWhen the \\\"<strong>start</strong>\\\" button is pressed, the stateGraph is\r\nwithin the CompositeStep \\\"<strong>makeProduct</strong>\\\". During normal\r\noperation this CompositeStep is only left, once tank2 is empty.\r\nAfterwards, the CompositeStep is at once re-entered.\r\n</p>\r\n<p>\r\nWhen the \\\"<strong>stop</strong>\\\" button is pressed, the \\\"makeProduct\\\"\r\nCompositeStep is at once terminated via the \\\"<strong>suspend</strong>\\\" port\r\nand the stateGraph waits in step \\\"<strong>s2</strong>\\\" for further\r\ncommands. When the \\\"<strong>start</strong>\\\" button is pressed, the CompositeStep\r\nis re-entered via its <strong>resume</strong> port and the \\\"normal\\\"\r\noperation continues at the state where it was aborted by the\r\nsuspend transition. If the \\\"<strong>shut</strong>\\\" button is pressed,\r\nthe stateGraph waits in the \\\"<strong>emptyTanks</strong>\\\" step, until\r\nboth tanks are empty and then waits at the initial step\r\n\\\"<strong>s1</strong>\\\" for further input.\r\n</p>\r\n<p>\r\nThe opening and closing of valves is <strong>not</strong> directly\r\ndefined in the stateGraph. Instead via the \\\"<strong>setValveX</strong>\\\"\r\ncomponents, the Boolean state of the valves are computed.\r\nFor example, the output y of \\\"setValve2\\\" is computed as:\r\n</p>\r\n<blockquote><pre>\r\ny = makeProduct.fillTank2.active or emptyTanks.active\r\n</pre></blockquote>\r\n<p>\r\ni.e., valve2 is open, when step \\\"makeProduct.fillTank2 or when\r\nstep \\\"emptyTanks\\\" is active. Otherwise, valve2 is closed.\r\n</p>\r\n</html>\"));\r\n  end ApplicationExample;\r\n\r\n  class ComparisonWithStateGraph2 \"Comparison with StateGraph2\"\r\n    extends Modelica.Icons.Information;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nAn evolved, but non-standard conforming Modelica library, called \\\"Modelica_StateGraph2\\\", is available from <a href=\\\"https://github.com/HansOlsson/Modelica_StateGraph2\\\">https://github.com/HansOlsson/Modelica_StateGraph2</a>.\r\nFind below a comparison with respect to Modelica.StateGraph.\r\nA third option, especially for modeling of discrete controllers, are the clocked state machines, which\r\nare available as built-in Modelica language elements, see <a href=\\\"https://specification.modelica.org/maint/3.6/state-machines.html\\\">Chapter&nbsp;17 <em>State Machines</em> of the Modelica&nbsp;3.6 specification</a>.\r\n</p>\r\n\r\n<p>\r\nThe Modelica_StateGraph2 library (called <u>StateGraph2</u> below)\r\nis based on the experience with the current\r\nModelica.StateGraph library (called <u>StateGraph1</u> below) and is\r\na significantly further development of StateGraph1. Furthermore, it is heavily\r\nbased on the article (Malmheden et. al. 2008), see Literature below,\r\nbut uses a different implementation\r\ntechnique as described in this article. The StateGraph2\r\nlibrary has the following improvements with respect to the StateGraph1\r\nlibrary:\r\n</p>\r\n\r\n<ul>\r\n<li> <strong>3 Basic Components (Step, Transition, Parallel)</strong><br>\r\n     All multiple versions of a component are\r\n     combined in only one version (e.g., one step and not 4 step components).\r\n     This is easier to understand and more convenient to use.\r\n     The \\\"Parallel\\\" component is both used as \\\"composite step\\\" (so only one branch),\r\n     as well as \\\"parallel step\\\" (so several execution branches).<br>&nbsp;</li>\r\n\r\n<li> <strong>Safer state machines</strong><br>\r\n     It is no longer possible to construct a wrong state machine in the sense that properties\r\n     of the graph are violated (e.g., two initial steps, or branching wrongly out of a parallel\r\n     component). Contrary to StateGraph2, in StateGraph1 such wrong graphs do not lead to an\r\n     error but to unexpected simulation results. Still, other desirable properties\r\n     of a state machine,  such as \\\"no deadlock\\\" or \\\"lifeliness\\\" or \\\"every step reachable\\\",\r\n     are not (yet) guaranteed with the current StateGraph2.<br>&nbsp;</li>\r\n\r\n<li> <strong>Composite, autonomous, synchronized, preempted subgraphs</strong><br>\r\n     Composite steps and parallel steps are described in a much better and more powerful\r\n     way as in StateGraph1: Either by component \\\"Parallel\\\" or\r\n     by inheriting from \\\"PartialParallel\\\". The first alternative has the advantage that it\r\n     is simple to use (not necessary to construct a new class and instantiating this class, and\r\n     easy variable access since no new hierarchy is constructed), the second alternative\r\n     has the advantage that it introduces a Modelica hierarchy (useful for large subgraphs).\r\n     In both cases, various options are possible, such as\r\n     <ol>\r\n     <li> autonomous subgraphs (branches are executed in parallel autonomously),</li>\r\n     <li> synchronized subgraphs (branches are executed in parallel and are synchronized\r\n           before leaving the subgraph via the outPort),</li>\r\n     <li> subgraphs with preemption and exception (a parallel step can be interrupted via\r\n          the suspend ports and can continue execution via the resume ports).</li>\r\n     </ol>\r\n     This is achieved by enabling/disabling the different ports.<br>&nbsp;</li>\r\n<li> <strong>No infinite looping</strong>:<br>\r\n     As in StateGraph1, there are two types of transitions: immediate transitions (during event\r\n     iteration all immediate transitions fire until no transition condition is true anymore) and\r\n     delayed transitions (a transition fires only after a delay). Contrary to StateGraph1,\r\n     in StateGraph2 every loop must have at least one delayed transition. If this is not the case\r\n     a translation error occurs which states that the model contains an algebraic loop\r\n     between Booleans with the name \\\"checkOneDelayedTransitionPerLoop\\\".<br>\r\n     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This property guarantees that an event\r\n     iteration over a StateGraph2 converges after a\r\n     finite number of iterations, provided the modeller does not introduce an unsafe construct\r\n     in the actions associated with a StateGraph2 (e.g., \\\"i = pre(i) + 1\\\" in the equation section\r\n     outside of a when-clause will give an event iteration that never stops).<br>\r\n     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It is possible to switch off this feature, by setting parameter\r\n     \\\"loopCheck = <strong>false</strong>\\\" in one transition of a loop, instead of using a \\\"delayed transition\\\"\r\n     at this place (in cases where immediate transitions are\r\n     important and the transition conditions are in a form that they cannot fire at the\r\n     same time instant).</li>\r\n</ul>\r\n\r\n<h4> Literature </h4>\r\n\r\n<p>\r\nThe Modelica_StateGraph2 library is described in detail in\r\n(Otter et. al. 2009, see below) and is additionally\r\nbased on the following references:\r\n</p>\r\n\r\n<dl>\r\n<dt>Andr&eacute;, C. (2003):</dt>\r\n<dd><a href=\\\"http://www.i3s.unice.fr/~map/WEBSPORTS/Documents/2003a2005/SSMsemantics.pdf\\\">\r\n     Semantics of S.S.M (Safe State Machine)</a>.\r\n     I3S Laboratory, UMR 6070 University of Nice-Sophia Antipolis / CNRS.<br>&nbsp;</dd>\r\n\r\n<dt>&Aring;rz&eacute;n K.-E. (2004):</dt>\r\n<dd> <strong>JGrafchart User Manual. Version 1.5</strong>.\r\n     Department of Automatic Control, Lund Institute of Technology,\r\n     Lund, Sweden, Feb. 13, 2004.<br>&nbsp;</dd>\r\n\r\n<dt>Dressler I. (2004):</dt>\r\n<dd> <a href=\\\"http://lup.lub.lu.se/student-papers/record/8848017/file/8859434.pdf\\\">\r\n     Code Generation From JGrafchart to Modelica</a>.\r\n     Master thesis, supervisor: Karl-Erik &Aring;rz&eacute;n,\r\n     Department of Automatic Control, Lund Institute of Technology,\r\n     Lund, Sweden, March 30, 2004.<br>&nbsp;</dd>\r\n\r\n<dt>Elmqvist H., Mattsson S.E., Otter M. (2001):</dt>\r\n<dd> <strong>Object-Oriented and Hybrid Modeling in Modelica</strong>.\r\n     Journal Europeen des systemes automatises (JESA),\r\n     Volume 35 - n. 1, 2001.<br>&nbsp;</dd>\r\n\r\n<dt>Harel, D. (1987):</dt>\r\n<dd> <a href=\\\"http://www.inf.ed.ac.uk/teaching/courses/seoc1/2005_2006/resources/statecharts.pdf\\\">\r\n      A Visual Formalism for Complex Systems</a>.\r\n      Science of Computer Programming 8, 231-274. Department of Applied Mathematics,\r\n      The Weizmann Institute of Science, Rehovot, Israel.<br>&nbsp;</dd>\r\n\r\n<dt>Malmheden M. (2007):</dt>\r\n<dd> <a href=\\\"http://lup.lub.lu.se/student-papers/record/8847773/file/8859375.pdf\\\">\r\n      ModeGraph - A Mode-Automata-Based Modelica Library for Embedded Control</a>.\r\n      Master thesis, Department of Automatic Control, Lund University, Sweden.<br>&nbsp;\r\n     </dd>\r\n\r\n<dt>Malmheden M., Elmqvist H., Mattsson S.E., Henrisson D., Otter M. (2008):</dt>\r\n<dd> <a href=\\\"https://www.modelica.org/events/conference2008/sessions/session3a3.pdf\\\">\r\n      ModeGraph - A Modelica Library for Embedded Control based on Mode-Automata</a>.\r\n      Modelica'2008 Conference, March 3-4, 2008.<br>&nbsp;\r\n     </dd>\r\n\r\n<dt>Maraninchi F., R&eacute;mond, Y. (2002):</dt>\r\n<dd> <a href=\\\"http://dx.doi.org/10.1016/S0167-6423(02)00093-X\\\">Mode-Automata:\r\n     A New Domain-Specific Construct for the Development of Safe Critical Systems</a>.<br>&nbsp;\r\n     </dd>\r\n\r\n<dt>Mosterman P., Otter M., Elmqvist H. (1998):</dt>\r\n<dd><a href=\\\"https://www.modelica.org/papers/scsc98fp.pdf\\\">\r\n     Modeling Petri Nets as Local Constraint Equations for\r\n     Hybrid Systems using Modelica</a>.\r\n     SCSC'98, Reno, Nevada, USA,\r\n     Society for Computer Simulation International, pp. 314-319, 1998.<br>&nbsp;\r\n     </dd>\r\n\r\n<dt>Otter M., Malmheden M., Elmqvist H., Mattsson S.E., Johnsson C. (2009):</dt>\r\n<dd> <a href=\\\"https://ep.liu.se/ecp/043/041/ecp09430108.pdf\\\">\r\n     A New Formalism for Modeling of Reactive and Hybrid Systems</a>.\r\n      Modelica'2009 Conference, Como, Italy, Sept. 20-22, 2009.\r\n     </dd>\r\n</dl>\r\n\r\n</html>\"));\r\n  end ComparisonWithStateGraph2;\r\n\r\n  class ReleaseNotes \"Release notes\"\r\n    extends Modelica.Icons.ReleaseNotes;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<h4>Version 0.87, 2004-06-23</h4>\r\n<ul>\r\n<li> Included in Modelica standard library 2.0 Beta 1 with the new block connectors.\r\n     Changed all the references to the block connectors and the Logical library\r\n     correspondingly.</li>\r\n</ul>\r\n<h4>Version 0.86, 2004-06-20</h4>\r\n<ul>\r\n<li> New components \\\"Alternative\\\" and \\\"Parallel\\\" for alternative and\r\n     parallel execution paths.</li>\r\n<li> A step has now a vector of input and output connectors in order\r\n     that multiple connections to and from a step are possible</li>\r\n<li> Removed components \\\"AlternativeSplit\\\", \\\"AlternativeJoin\\\",\r\n     \\\"ParallelSplit\\\" and \\\"ParallelJoin\\\" since the newly introduced\r\n     components (\\\"Alternative\\\", \\\"Parallel\\\", vector connectors of steps)\r\n     have the same modeling power but are safer and more convenient.</li>\r\n<li> Removed the timer in a step (attach instead Logical.Timer to\r\n     the \\\"active\\\" port of a \\\"StepWithSignal\\\" component). Note, that in\r\n     most cases it is more convenient and more efficient to use the\r\n     built-in timer of a transition.</li>\r\n<li> Component \\\"StepInitial\\\" renamed to \\\"InitialStep\\\".</li>\r\n<li> New component \\\"Timer\\\" within sublibrary Logical.</li>\r\n<li> Updated and improved documentation of the library.</li>\r\n</ul>\r\n<h4>Version 0.85, 2004-06-17</h4>\r\n<ul>\r\n<li> Renamed \\\"MacroStep\\\" to \\\"CompositeStep\\\" and the ports of the MacroStep\r\n     from \\\"abort\\\" to \\\"suspend\\\" and \\\"history\\\" to \\\"resume\\\".</li>\r\n<li> Nested \\\"CompositeStep\\\" components are supported, based on the\r\n     experimental feature of nested inner/outer components\r\n     introduced by Dymola. This means that CompositeSteps can\r\n     be suspended and resumed at every level.</li>\r\n<li> New example \\\"Examples.ShowExceptions\\\" to demonstrate the new\r\n     feature of nested CompositeSteps.</li>\r\n<li> New package \\\"Logical\\\". It contains all components of\r\n     ModelicaAdditions.Blocks.Logical, but with new block connectors\r\n     and nicer icons. Additionally, logical blocks are also added.</li>\r\n<li> Improved icons for several components of the StateGraph library.</li>\r\n</ul>\r\n<h4>Version 0.83, 2004-05-21</h4>\r\n<ul>\r\n<li> The \\\"abort\\\" and \\\"history\\\" connectors are no longer visible in the\r\n     diagram layer of a CompositeStep since it is not allowed to connect\r\n     to them in a CompositeStep.</li>\r\n<li> Made the diagram/icon size of a CompositeStep smaller (from 200/-200 to\r\n     150/-150).</li>\r\n<li> Improved icons for \\\"SetBoolean/SetInteger/SetReal\\\" components.</li>\r\n<li> Renamed \\\"ParameterReal\\\" to \\\"SetRealParameter\\\".</li>\r\n</ul>\r\n<h4>Version 0.82, 2004-05-18</h4>\r\n<p>\r\nImplemented a first version that is provided to other people.\r\n</p>\r\n</html>\"));\r\n  end ReleaseNotes;\r\n\r\n  class Literature \"Literature\"\r\n    extends Modelica.Icons.References;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThe StateGraph library is based on the following references:\r\n</p>\r\n<dl>\r\n<dt>&Aring;rz&eacute;n K.-E. (2004):</dt>\r\n<dd> <strong>JGrafchart User Manual. Version 1.5</strong>.\r\n     Department of Automatic Control, Lund Institute of Technology,\r\n     Lund, Sweden, Feb. 13<br>&nbsp;</dd>\r\n<dt>Dressler I. (2004):</dt>\r\n<dd> <strong>Code Generation From JGrafchart to Modelica</strong>.\r\n     Master thesis, supervisor: Karl-Erik &Aring;rz&eacute;n,\r\n     Department of Automatic Control, Lund Institute of Technology,\r\n     Lund, Sweden, March 30<br>&nbsp;</dd>\r\n<dt>Elmqvist H., Mattsson S.E., Otter M. (2001):</dt>\r\n<dd> <strong>Object-Oriented and Hybrid Modeling in Modelica</strong>.\r\n     Journal Europeen des systemes automatises (JESA),\r\n     Volume 35 - n. 1.<br>&nbsp;</dd>\r\n<dt>Mosterman P., Otter M., Elmqvist H. (1998):</dt>\r\n<dd> <strong>Modeling Petri Nets as Local Constraint Equations for\r\n     Hybrid Systems using Modelica</strong>.\r\n     SCSC'98, Reno, Nevada, USA,\r\n     Society for Computer Simulation International, pp. 314-319.\r\n     </dd>\r\n</dl>\r\n</html>\"));\r\n\r\n  end Literature;\r\n\r\n  class Contact \"Contact\"\r\n    extends Modelica.Icons.Contact;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<h4>Main author</h4>\r\n\r\n<p>\r\n<a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\"><strong>Martin Otter</strong></a><br>\r\nDeutsches Zentrum f&uuml;r Luft- und Raumfahrt (DLR)<br>\r\nInstitut f&uuml;r Systemdynamik und Regelungstechnik (SR)<br>\r\nM&uuml;nchener Straße 20<br>\r\nD-82234 We&szlig;ling<br>\r\nGermany<br>\r\nemail: <a href=\\\"mailto:Martin.Otter@dlr.de\\\">Martin.Otter@dlr.de</a>\r\n</p>\r\n\r\n<h4>Acknowledgements</h4>\r\n\r\n<ul>\r\n<li> The development of this library was strongly motivated by the\r\n     master thesis of Isolde Dressler\r\n     (<a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Literature\\\">see literature</a>),\r\n     in which\r\n     a compiler from JGrafchart to Modelica was designed and\r\n     implemented. This project was supervised by Karl-Erik &Aring;rz&eacute;n\r\n     from Department of Automatic Control, Lund Institut of\r\n     Technology, Lund, Sweden.</li>\r\n<li> This library profits also from the experience gained\r\n     in the focused research program (Schwerpunktprogramm)\r\n     \\\"Continuous-Discrete Dynamic Systems\\\" (KONDISK), sponsored by the\r\n     Deutsche Forschungsgemeinschaft under grants OT174/1-2 and EN152/22-2.\r\n     This support is most gratefully acknowledged.\r\n </li>\r\n<li> The implementation of the basic components of this library by describing\r\n     finite state machines with equations is based on\r\n     (Elmqvist, Mattsson and Otter, 2001),\r\n     which in turn uses ideas from (Mosterman, Otter and Elmqvist, 1998),\r\n     see <a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Literature\\\">literature</a></li>\r\n</ul>\r\n</html>\"));\r\n\r\n  end Contact;\r\n\r\n  annotation (DocumentationClass=true, Documentation(info=\"<html>\r\n<p>\r\nLibrary <strong>StateGraph</strong> is a <strong>free</strong> Modelica package providing\r\ncomponents to model <strong>discrete event</strong> and <strong>reactive</strong>\r\nsystems in a convenient\r\nway. This package contains the <strong>User's Guide</strong> for\r\nthe library and has the following content:\r\n</p>\r\n<ol>\r\n<li><a href=\\\"modelica://Modelica.StateGraph.UsersGuide.OverView\\\">Overview of library</a>\r\n     gives an overview of the library.</li>\r\n<li> <a href=\\\"modelica://Modelica.StateGraph.UsersGuide.FirstExample\\\">A first example</a>\r\n     demonstrates at hand of a first example how to use this library.</li>\r\n<li> <a href=\\\"modelica://Modelica.StateGraph.UsersGuide.ApplicationExample\\\">An\r\n     application example</a> demonstrates varies features at hand of the\r\n     control of a two tank system.</li>\r\n<li> <a href=\\\"modelica://Modelica.StateGraph.UsersGuide.ComparisonWithStateGraph2\\\">Comparison\r\n     with StateGraph2</a> compares Modelica.StateGraph with the much improved version\r\n     Modelica_StateGraph2.</li>\r\n<li><a href=\\\"modelica://Modelica.StateGraph.UsersGuide.ReleaseNotes\\\">Release Notes</a>\r\n    summarizes the differences between different versions of this library.</li>\r\n<li><a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Literature\\\">Literature</a>\r\n    provides references that have been used to design and implement this\r\n    library.</li>\r\n<li><a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Contact\\\">Contact</a>\r\n    provides information about the authors of the library as well as\r\n    acknowledgments.</li>\r\n</ol>\r\n</html>\"));\r\nend UsersGuide;\r\n\r\npackage Examples\r\n    \"Examples to demonstrate the usage of the components of the StateGraph library\"\r\n  extends Modelica.Icons.ExamplesPackage;\r\n\r\n  model FirstExample \"A first simple StateGraph example\"\r\n    extends Modelica.Icons.Example;\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-48,0},\r\n                {-28,20}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n    Step step(nIn=1, nOut=1) annotation (Placement(transformation(extent={{10,0},{30,20}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n  equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-27.5,10},{-14,10}}));\r\n    connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-8.5,10},{9,10}}));\r\n    connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{30.5,10},{46,10}}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{51.5,10},{70,10},{70,32},{-62,32},{-62,10},{-49,10}}));\r\n    annotation (experiment(StopTime=5.5));\r\n  end FirstExample;\r\n\r\n  model FirstExample_Variant2\r\n      \"A variant of the first simple StateGraph example\"\r\n    extends Modelica.Icons.Example;\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-70,0},{-50,20}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-42,0},{-22,20}})));\r\n    StepWithSignal step(nIn=1, nOut=1)\r\n              annotation (Placement(transformation(extent={{-14,0},{6,20}})));\r\n    TransitionWithSignal transition2\r\n      annotation (Placement(transformation(extent={{52,0},{72,20}})));\r\n    Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(\r\n              extent={{6,-40},{26,-20}})));\r\n    Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqual(threshold=1)\r\n      annotation (Placement(transformation(extent={{36,-40},{56,-20}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n  equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}));\r\n\r\n    connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}));\r\n    connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-30},{4,\r\n              -30}}, color={255,0,255}));\r\n    connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{58,10}}));\r\n    connect(timer.y, greaterEqual.u)\r\n      annotation (Line(points={{27,-30},{34,-30}}, color={0,0,255}));\r\n    connect(greaterEqual.y, transition2.condition) annotation (Line(points={{57,\r\n              -30},{62,-30},{62,-2}}, color={255,0,255}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{63.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}));\r\n    annotation (experiment(StopTime=5.5));\r\n  end FirstExample_Variant2;\r\n\r\n  model FirstExample_Variant3\r\n      \"A variant of the first simple StateGraph example\"\r\n    extends Modelica.Icons.Example;\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-70,0},{-50,20}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-42,0},{-22,20}})));\r\n    StepWithSignal step(nIn=1, nOut=1)\r\n              annotation (Placement(transformation(extent={{-14,0},{6,20}})));\r\n    TransitionWithSignal transition2\r\n      annotation (Placement(transformation(extent={{56,0},{76,20}})));\r\n    Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(\r\n            origin={-4,-30},\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=270)));\r\n    Modelica.Blocks.Sources.BooleanExpression SetBoolean1(y=timer.y > 1) annotation (Placement(\r\n            transformation(extent={{28,-40},{60,-20}})));\r\n    Modelica.Blocks.Sources.BooleanExpression SetBoolean2(y=step.active) annotation (Placement(\r\n            transformation(extent={{-68,-40},{-36,-20}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n  equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}));\r\n\r\n    connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}));\r\n    connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-9.5},{\r\n              -4,-18},{-4,-18}}, color={255,0,255}));\r\n    connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{62,10}}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{67.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}));\r\n    connect(SetBoolean1.y, transition2.condition) annotation (Line(points={{\r\n              61.6,-30},{66,-30},{66,-2}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=5.5));\r\n  end FirstExample_Variant3;\r\n\r\n  model ExecutionPaths\r\n      \"Example to demonstrate parallel and alternative execution paths\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    InitialStep step0(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-140,-100},{-120,-80}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-100,-100},{-80,-80}})));\r\n    Step step1(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{90,-100},{110,-80}})));\r\n    Step step6(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{120,-100},{140,-80}})));\r\n    Step step2(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-98,40},{-78,60}})));\r\n    Transition transition3(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-42,80},{-22,100}})));\r\n    Transition transition4(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-42,40},{-22,60}})));\r\n    Step step3(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-8,80},{12,100}})));\r\n    Step step4(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-8,40},{12,60}})));\r\n    Transition transition5(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{26,80},{46,100}})));\r\n    Transition transition6(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{26,40},{46,60}})));\r\n    Step step5(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{80,40},{100,60}})));\r\n    Modelica.Blocks.Sources.RealExpression setReal(y=time)\r\n      annotation (Placement(transformation(extent={{21,-160},{41,-140}})));\r\n    TransitionWithSignal transition7 annotation (Placement(transformation(\r\n              extent={{9,-134},{-11,-114}})));\r\n    Modelica.Blocks.Sources.BooleanExpression setCondition(y=time >= 7)\r\n      annotation (Placement(transformation(extent={{-77,-160},{-19,-140}})));\r\n    Transition transition4a(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-42,0},{-22,20}})));\r\n    Step step4a(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-8,0},{12,20}})));\r\n    Transition transition6a(enableTimer=true, waitTime=2)\r\n      annotation (Placement(\r\n            transformation(extent={{26,0},{46,20}})));\r\n    Modelica.Blocks.Interaction.Show.RealValue NumericValue1(\r\n      significantDigits=3)\r\n      annotation (Placement(transformation(extent={{61,-160},{81,-140}})));\r\n    Alternative alternative(nBranches=3) annotation (Placement(transformation(\r\n              extent={{-70,-10},{72,110}})));\r\n    Parallel Parallel1 annotation (Placement(transformation(extent={{-154,-50},\r\n                {152,120}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-160,120},{-140,140}})));\r\n  equation\r\n    connect(transition3.outPort, step3.inPort[1])\r\n      annotation (Line(points={{-30.5,90},{-9,90}}));\r\n    connect(step3.outPort[1], transition5.inPort)\r\n      annotation (Line(points={{12.5,90},{32,90}}));\r\n    connect(transition4.outPort, step4.inPort[1])\r\n      annotation (Line(points={{-30.5,50},{-9,50}}));\r\n    connect(step4.outPort[1], transition6.inPort)\r\n      annotation (Line(points={{12.5,50},{32,50}}));\r\n    connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -2.5,-124},{-149,-124},{-149,-90},{-141,-90}}));\r\n    connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              140.5,-90},{150,-90},{150,-124},{3,-124}}));\r\n    connect(transition4a.outPort, step4a.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-9,10}}));\r\n    connect(step4a.outPort[1], transition6a.inPort)\r\n      annotation (Line(points={{12.5,10},{32,10}}));\r\n    connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -16.1,-150},{-1,-150},{-1,-136}}, color={255,0,255}));\r\n    connect(setReal.y, NumericValue1.numberPort) annotation (Line(\r\n          points={{42,-150},{59,-150}}, color={0,0,255}));\r\n    connect(transition3.inPort, alternative.split[1]) annotation (Line(points={{-36,90},\r\n              {-55.09,90}}));\r\n    connect(transition4.inPort, alternative.split[2]) annotation (Line(points={{-36,50},\r\n              {-55.09,50}}));\r\n    connect(transition4a.inPort, alternative.split[3]) annotation (Line(points={{-36,10},\r\n              {-45.0125,10},{-45.0125,10},{-55.09,10}}));\r\n    connect(transition5.outPort, alternative.join[1]) annotation (Line(points={{37.5,90},\r\n              {57.09,90}}));\r\n    connect(transition6.outPort, alternative.join[2]) annotation (Line(points={{37.5,50},\r\n              {57.09,50}}));\r\n    connect(transition6a.outPort, alternative.join[3]) annotation (Line(points={{37.5,10},\r\n              {46.7625,10},{46.7625,10},{57.09,10}}));\r\n    connect(step2.outPort[1], alternative.inPort) annotation (Line(points={{\r\n              -77.5,50},{-72.13,50}}));\r\n    connect(alternative.outPort, step5.inPort[1])\r\n      annotation (Line(points={{73.42,50},{79,50}}));\r\n    connect(step2.inPort[1], Parallel1.split[1]) annotation (Line(points={{-99,\r\n              50},{-118,50},{-118,78},{-119.575,78},{-119.575,77.5}}));\r\n    connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{10.5,\r\n              -30},{118,-30},{118,-7.5},{117.575,-7.5}}));\r\n    connect(step0.outPort[1], transition1.inPort) annotation (Line(points={{\r\n              -119.5,-90},{-94,-90}}));\r\n    connect(transition2.outPort, step6.inPort[1]) annotation (Line(points={{\r\n              101.5,-90},{119,-90}}));\r\n    connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{\r\n              -88.5,-90},{-70,-90},{-70,-64},{-174,-64},{-174,35},{-158.59,35}}));\r\n    connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{\r\n              155.06,35},{168,35},{168,-60},{80,-60},{80,-90},{96,-90}}));\r\n    connect(step5.outPort[1], Parallel1.join[1]) annotation (Line(points={{\r\n              100.5,50},{116,50},{116,77.5},{117.575,77.5}}));\r\n    connect(Parallel1.split[2], step1.inPort[1]) annotation (Line(points={{\r\n              -119.575,-7.5},{-118,-8},{-118,-30},{-11,-30}}));\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis is an example to demonstrate in which way <strong>parallel</strong> activities\r\ncan be modelled by a StateGraph. When transition1 fires\r\n(after 1 second), two branches are executed in parallel.\r\nAfter 6 seconds the two branches are synchronized in order to arrive\r\nat step6.\r\n</p>\r\n<p>\r\nBefore simulating the model, try to figure out whether which branch\r\nof the alternative sequence is executed. Note, that alternatives\r\nhave priorities according to the port index (alternative.split[1]\r\nhas a higher priority to fire as alternative.split[2]).\r\n</p>\r\n</html>\"),      experiment(StopTime=15.5),\r\n        Diagram(coordinateSystem(extent={{-200,-200},{200,200}})));\r\n  end ExecutionPaths;\r\n\r\n  model ShowCompositeStep\r\n      \"Example to demonstrate parallel activities described by a StateGraph\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Utilities.CompositeStep compositeStep\r\n                                     annotation (Placement(transformation(\r\n              extent={{-10,5},{20,35}})));\r\n    InitialStep step0(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-89,-10},{-69,10}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-59,-10},{-39,10}})));\r\n    Step step1(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-4,-30},{16,-10}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{45,-10},{65,10}})));\r\n    Step step6(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{71,-10},{91,10}})));\r\n    TransitionWithSignal transition7 annotation (Placement(transformation(\r\n              extent={{10,-70},{-10,-50}})));\r\n    Parallel Parallel1 annotation (Placement(transformation(extent={{-30,-40},{\r\n                36,40}})));\r\n    Modelica.Blocks.Sources.BooleanExpression setCondition(y=time >= 7)\r\n      annotation (Placement(transformation(extent={{-40,-90},{-10,-70}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-90,50},{-70,70}})));\r\n  equation\r\n    connect(step0.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-68.5,0},{-53,0}}));\r\n    connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -1.5,-60},{-98,-60},{-98,0},{-90,0}}));\r\n    connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              91.5,0},{96,0},{96,-60},{4,-60}}));\r\n    connect(transition2.outPort, step6.inPort[1]) annotation (Line(\r\n          points={{56.5,0},{70,0}}));\r\n    connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{-47.5,0},\r\n              {-30.99,0}}));\r\n    connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{36.66,0},\r\n              {51,0}}));\r\n    connect(compositeStep.inPort, Parallel1.split[1])\r\n                                                 annotation (Line(points={{-11,20},\r\n              {-22.575,20}}));\r\n    connect(compositeStep.outPort, Parallel1.join[1])\r\n                                                 annotation (Line(points={{20.5,20},\r\n              {28.575,20}}));\r\n    connect(step1.inPort[1], Parallel1.split[2]) annotation (Line(points={{-5,-20},\r\n              {-10,-20},{-10,-20},{-14,-20},{-14,-20},{-22.575,-20}}));\r\n    connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{16.5,\r\n              -20},{28.575,-20}}));\r\n    connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -8.5,-80},{0,-80},{0,-72}}, color={255,0,255}));\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis is the same example as \\\"ExecutionPaths\\\". The only difference\r\nis that the alternative paths are included in a \\\"CompositeStep\\\".\r\n</p>\r\n</html>\"), experiment(StopTime=15));\r\n  end ShowCompositeStep;\r\n\r\n  model ShowExceptions\r\n      \"Example to demonstrate how a hierarchically structured StateGraph can suspend and resume actions on different levels\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Utilities.CompositeStep1 compositeStep annotation (Placement(transformation(extent={{\r\n                -20,25},{10,55}})));\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-80,30},{-60,50}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-50,30},{-30,50}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{20,30},{40,50}})));\r\n    Transition transition3(enableTimer=true, waitTime=2)\r\n      annotation (Placement(\r\n            transformation(extent={{-55,-30},{-35,-10}})));\r\n    Step step1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-24,-30},{-4,-10}})));\r\n    Transition transition4(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{10,-30},{30,-10}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-90,-80},{-70,-60}})));\r\n  equation\r\n\r\n    connect(transition1.outPort, compositeStep.inPort)\r\n      annotation (Line(points={{-38.5,40},{-21,40}}));\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-59.5,40},{-44,40}}));\r\n    connect(compositeStep.outPort, transition2.inPort)\r\n      annotation (Line(points={{10.5,40},{26,40}}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{31.5,40},{46,40},{46,80},{-90,80},{-90,40},{-81,40}}));\r\n    connect(compositeStep.suspend[1], transition3.inPort)\r\n                                                  annotation (Line(points={{-12.5,\r\n              24.5},{-12.5,10},{-60,10},{-60,-20},{-49,-20}}));\r\n    connect(transition3.outPort, step1.inPort[1]) annotation (Line(points={{\r\n              -43.5,-20},{-25,-20}}));\r\n    connect(step1.outPort[1], transition4.inPort)\r\n      annotation (Line(points={{-3.5,-20},{16,-20}}));\r\n    connect(transition4.outPort, compositeStep.resume[1])\r\n                                                  annotation (Line(points={{21.5,\r\n              -20},{40,-20},{40,10},{2.5,10},{2.5,24}}));\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nCompositeStep \\\"compositeStep\\\" is a hierarchical StateGraph consisting of\r\ntwo other subgraphs. Whenever component \\\"compositeStep\\\" is suspended,\r\nall steps with in \\\"compositeStep\\\" are deactivated. By entering \\\"compositeStep\\\"\r\nvia its \\\"resume\\\" port, all steps within \\\"compositeStep\\\" are activated\r\naccording to their setting before leaving the \\\"compositeStep\\\" via its\r\n\\\"suspend\\\" port.\r\n</p>\r\n</html>\"),experiment(StopTime=20));\r\n  end ShowExceptions;\r\n\r\n  model ControlledTanks\r\n      \"Demonstrating the controller of a tank filling/emptying system\"\r\n    extends Modelica.Icons.Example;\r\n    Utilities.TankController tankController\r\n      annotation (Placement(transformation(extent={{-50,-20},{-10,20}})));\r\n    Modelica.Blocks.Sources.RadioButtonSource start(reset={stop.on,shut.on},\r\n        buttonTimeTable={1,13,15,19})\r\n      annotation (Placement(transformation(extent={{-90,20},{-70,40}})));\r\n    Modelica.Blocks.Sources.RadioButtonSource stop(reset={start.on,shut.on},\r\n        buttonTimeTable={13,15,19,21})\r\n      annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));\r\n    Modelica.Blocks.Sources.RadioButtonSource shut(reset={start.on,stop.on},\r\n        buttonTimeTable={21,100})\r\n      annotation (Placement(transformation(extent={{-90,-40},{-70,-20}})));\r\n\r\n    Utilities.Tank tank1 annotation (Placement(transformation(extent={{10,20},{\r\n                60,70}})));\r\n    Utilities.Tank tank2 annotation (Placement(transformation(extent={{34,-60},\r\n                {84,-10}})));\r\n    Utilities.valve valve1\r\n      annotation (Placement(transformation(\r\n            origin={22.5,72},\r\n            extent={{-5.5,-5.5},{5.5,5.5}},\r\n            rotation=270)));\r\n    Utilities.Source source annotation (Placement(transformation(extent={{12.5,\r\n                80.5},{32.5,100.5}})));\r\n    Utilities.valve valve2 annotation (Placement(transformation(\r\n            origin={46.5,13},\r\n            extent={{-7,-8},{7,8}},\r\n            rotation=270)));\r\n    Utilities.valve valve3\r\n      annotation (Placement(transformation(\r\n            origin={73.5,-77},\r\n            extent={{-7,-8},{7,8}},\r\n            rotation=270)));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-90,75},{-70,95}})));\r\n  equation\r\n    connect(tank1.outflow1, valve2.outflow1) annotation (Line(\r\n          points={{50,33.75},{50,26.875},{46.5,26.875},{46.5,16.5}},\r\n          thickness=0.5));\r\n    connect(tank2.inflow1, valve2.inflow1) annotation (Line(\r\n          points={{46.5,-18.75},{46.5,9.5}},\r\n          thickness=0.5));\r\n    connect(tank2.outflow1, valve3.outflow1) annotation (Line(\r\n          points={{74,-46.25},{74,-73.5},{73.5,-73.5}},\r\n          thickness=0.5));\r\n    connect(tank1.inflow1, valve1.inflow1) annotation (Line(\r\n          points={{22.5,61.25},{22.5,69.25}},\r\n          thickness=0.5));\r\n    connect(shut.on, tankController.shut) annotation (Line(points={{-69,-30},{\r\n              -62,-30},{-62,-12},{-52,-12}}, color={255,0,255}));\r\n    connect(stop.on, tankController.stop) annotation (Line(points={{-69,0},{-52,\r\n              0}}, color={255,0,255}));\r\n    connect(start.on, tankController.start) annotation (Line(points={{-69,30},{\r\n              -60,30},{-60,12},{-52,12}}, color={255,0,255}));\r\n    connect(tank1.levelSensor, tankController.level1) annotation (Line(points={\r\n              {17.25,40},{-30,40},{-30,60},{-97,60},{-97,-50},{-42,-50},{-42,\r\n              -22}}, color={0,0,255}));\r\n    connect(tank2.levelSensor, tankController.level2) annotation (Line(points={\r\n              {41.25,-40},{-18,-40},{-18,-22}}, color={0,0,255}));\r\n    connect(tankController.valve1, valve1.valveControl) annotation (Line(points=\r\n             {{-9,12},{10,12},{10,72},{18.1,72}}, color={255,0,255}));\r\n    connect(tankController.valve2, valve2.valveControl) annotation (Line(points={{-9,0},{\r\n              30,0},{30,13},{40.1,13}}, color={255,0,255}));\r\n    connect(tankController.valve3, valve3.valveControl) annotation (Line(points=\r\n             {{-9,-12},{23,-12},{23,-77},{67.1,-77}}, color={255,0,255}));\r\n\r\n    connect(source.outflow1, valve1.outflow1) annotation (Line(\r\n          points={{22.5,85.5},{22.5,74.75}},\r\n          thickness=0.5));\r\n\r\n    annotation (experiment(StopTime=100),\r\n      Documentation(info=\"<html>\r\n<p>\r\nWith this example the controller of a tank filling/emptying system\r\nis demonstrated. This example is from Dressler (2004),\r\nsee <a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Literature\\\">Literature</a>.\r\nThe basic operation is to fill and empty the two tanks:\r\n</p>\r\n<ol>\r\n<li> Valve 1 is opened and tank 1 is filled.</li>\r\n<li> When tank 1 reaches its fill level limit,\r\n     valve 1 is closed.</li>\r\n<li> After a waiting time, valve 2 is\r\n     opened and the fluid flows from tank 1 into tank 2.</li>\r\n<li> When tank 1 is empty, valve 2 is closed.</li>\r\n<li> After a waiting time, valve 3 is opened and\r\n     the fluid flows out of tank 2</li>\r\n<li> When tank 3 is empty, valve 3 is closed</li>\r\n</ol>\r\n<p>\r\nThe above \\\"normal\\\" process can be influenced by three\r\nbuttons:\r\n</p>\r\n<ul>\r\n<li> Button <strong>start</strong> starts the above process.\r\n     When this button is pressed after a \\\"stop\\\" or\r\n     \\\"shut\\\" operation, the process operation continues.\r\n     </li>\r\n<li> Button <strong>stop</strong> stops the above process by\r\n     closing all valves. Then, the controller waits for\r\n     further input (either \\\"start\\\" or \\\"shut\\\" operation).</li>\r\n<li> Button <strong>shut</strong> is used to shutdown the process,\r\n     by emptying at once both tanks. When this is achieved,\r\n     the process goes back to its start configuration.\r\n     Clicking on \\\"start\\\", restarts the process.</li>\r\n</ul>\r\n\r\n</html>\"));\r\n  end ControlledTanks;\r\n\r\n  package Utilities \"Utility components for the examples\"\r\n    extends Modelica.Icons.UtilitiesPackage;\r\n\r\n    model TankController \"Controller for tank system\"\r\n      extends StateGraph.Interfaces.PartialStateGraphIcon;\r\n      parameter Real limit=0.98 \"Limit level of tank 1\";\r\n      parameter SI.Time waitTime=3 \"Wait time\";\r\n\r\n      InitialStep s1(nIn=2, nOut=1)\r\n        annotation (Placement(transformation(extent={{-72,30},{-52,50}})));\r\n      MakeProduct makeProduct(limit=limit, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-20,25},{10,55}})));\r\n      Transition T1(condition=start)\r\n        annotation (Placement(transformation(extent={{-50,50},{-30,30}})));\r\n      Transition T2(condition=level2<0.001)\r\n        annotation (Placement(transformation(extent={{27,50},{47,30}})));\r\n      Transition T3(condition=stop)\r\n        annotation (Placement(transformation(\r\n              origin={-23,-1},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=270)));\r\n      Step s2(nIn=1, nOut=2)\r\n              annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));\r\n      Transition T4(condition=start)\r\n        annotation (Placement(transformation(\r\n              origin={10,-1},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Transition T5(condition=shut) annotation (Placement(transformation(extent=\r\n                 {{-6,-60},{14,-40}})));\r\n      Step emptyTanks(nIn=1, nOut=1) annotation (Placement(transformation(extent={{22,-60},{42,-40}})));\r\n      Transition T6(condition=level1+level2<0.001)\r\n        annotation (Placement(transformation(extent={{45,-60},{65,-40}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput start\r\n        annotation (Placement(transformation(extent={{-120,50},{-100,70}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput stop\r\n        annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput shut\r\n        annotation (Placement(transformation(extent={{-120,-70},{-100,-50}})));\r\n      Modelica.Blocks.Interfaces.RealInput level1\r\n        annotation (Placement(transformation(\r\n              origin={-60,-110},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Modelica.Blocks.Interfaces.RealInput level2\r\n        annotation (Placement(transformation(\r\n              origin={60,-110},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve1\r\n        annotation (Placement(transformation(extent={{100,55},{110,65}})));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve2\r\n        annotation (Placement(transformation(extent={{100,-5},{110,5}})));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve3\r\n        annotation (Placement(transformation(extent={{100,-65},{110,-55}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve1(y=makeProduct.fillTank1.active)\r\n        annotation (Placement(transformation(extent={{20,73},{80,92}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve2(y=makeProduct.fillTank2.active or emptyTanks.active)\r\n        annotation (Placement(transformation(extent={{-25,-89},{80,-68}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve3(y=makeProduct.emptyTank2.active or emptyTanks.active)\r\n        annotation (Placement(transformation(extent={{-26,-100},{80,-80}})));\r\n    equation\r\n\r\n      connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}));\r\n      connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}));\r\n      connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}));\r\n      connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}));\r\n      connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}));\r\n      connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}));\r\n      connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}));\r\n      connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}));\r\n      connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}));\r\n      connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}));\r\n      connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}));\r\n      connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}));\r\n      connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}));\r\n      connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}));\r\n      connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}));\r\n      connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}));\r\n      annotation (\r\n        Diagram(coordinateSystem(\r\n              preserveAspectRatio=true,\r\n              extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}})}),\r\n        Icon(coordinateSystem(\r\n              preserveAspectRatio=true,\r\n              extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-100,68},{-32,54}},\r\n                textString=\"start\"),\r\n              Text(\r\n                extent={{-100,6},{-32,-8}},\r\n                textString=\"stop\"),\r\n              Text(\r\n                extent={{-100,-54},{-32,-68}},\r\n                textString=\"shut\"),\r\n              Text(\r\n                extent={{-94,-82},{-18,-96}},\r\n                textString=\"level1\"),\r\n              Text(\r\n                extent={{24,-84},{96,-98}},\r\n                textString=\"level2\"),\r\n              Text(\r\n                extent={{31,68},{99,54}},\r\n                textString=\"valve1\"),\r\n              Text(\r\n                extent={{33,9},{101,-5}},\r\n                textString=\"valve2\"),\r\n              Text(\r\n                extent={{34,-53},{102,-67}},\r\n                textString=\"valve3\")}));\r\n    end TankController;\r\n\r\n    model MakeProduct\r\n        \"State machine defining the time instants when to fill or empty a tank\"\r\n      extends StateGraph.PartialCompositeStep;\r\n      parameter Real limit=0.98 \"Limit level of tank 1\";\r\n      parameter SI.Time waitTime=3 \"Wait time\";\r\n\r\n      Modelica.Blocks.Interfaces.RealInput level1\r\n        annotation (Placement(transformation(extent={{-190,-140},{-150,-100}})));\r\n      Step fillTank1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Transition T1(condition=level1 > limit)\r\n        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));\r\n      Step fillTank2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n      Transition T3(condition=level1 < 0.001)\r\n        annotation (Placement(transformation(extent={{20,-10},{40,10}})));\r\n      Step emptyTank2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{120,-10},{140,10}})));\r\n      Step wait1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n      Transition T2(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n      Step wait2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{54,-10},{74,10}})));\r\n      Transition T4(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{82,-10},{102,10}})));\r\n    equation\r\n      connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}));\r\n      connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}));\r\n      connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}));\r\n      connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}));\r\n      connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}));\r\n      connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}));\r\n      connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}));\r\n      connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}));\r\n      connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}));\r\n      connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}));\r\n    end MakeProduct;\r\n\r\n    connector Inflow1\r\n        \"Inflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      input SI.VolumeFlowRate Fi \"Inflow\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,-100},{0,100},{100,-100},{-100,-100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Inflow1;\r\n\r\n    connector Inflow2\r\n        \"Inflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      output SI.VolumeFlowRate Fi \"Inflow\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,-100},{0,100},{100,-100},{-100,-100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Inflow2;\r\n\r\n    connector Outflow1\r\n        \"Outflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      output SI.VolumeFlowRate Fo \"Outflow\";\r\n      input Boolean open \"Valve open\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,100},{0,-100},{100,100},{-100,100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Outflow1;\r\n\r\n    connector Outflow2\r\n        \"Outflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      input SI.VolumeFlowRate Fo \"Outflow\";\r\n      output Boolean open \"Valve open\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,100},{0,-100},{100,100},{-100,100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Outflow2;\r\n\r\n    model valve\r\n        \"Simple valve model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.Blocks.Interfaces.BooleanInput valveControl\r\n        annotation (Placement(transformation(\r\n              origin={0,-80},\r\n              extent={{-20,-20},{20,20}},\r\n              rotation=90)));\r\n      Modelica.StateGraph.Examples.Utilities.Inflow2 inflow1\r\n                     annotation (Placement(transformation(\r\n              origin={50,0},\r\n              extent={{-50,-50},{50,50}},\r\n              rotation=90)));\r\n      Modelica.StateGraph.Examples.Utilities.Outflow2 outflow1\r\n                       annotation (Placement(transformation(\r\n              origin={-50,0},\r\n              extent={{-50,-50},{50,50}},\r\n              rotation=90)));\r\n    equation\r\n      outflow1.Fo = inflow1.Fi;\r\n      outflow1.open = valveControl;\r\n      annotation (\r\n        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{0,-60},{0,0}}, color={255,0,255})}),\r\n        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n              Line(\r\n                points={{20,20},{20,20}},\r\n                thickness=0.5),\r\n              Text(\r\n                extent={{-131,125},{136,67}},\r\n                textColor={0,0,255},\r\n                textString=\"%name\"),\r\n              Line(\r\n                points={{0,0},{0,-60}},\r\n                color={255,0,255})}));\r\n    end valve;\r\n\r\n    model Tank\r\n        \"Simple tank model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.Blocks.Interfaces.RealOutput levelSensor\r\n        annotation (Placement(transformation(extent={{-61,-30},{-81,-10}})));\r\n\r\n      Modelica.StateGraph.Examples.Utilities.Inflow1 inflow1\r\n                     annotation (Placement(transformation(extent={{-55,60},{-45,\r\n                  70}})));\r\n      Modelica.StateGraph.Examples.Utilities.Outflow1 outflow1\r\n                       annotation (Placement(transformation(extent={{55,-50},{\r\n                  65,-40}})));\r\n      Real level(start=0,fixed=true) \"Tank level in % of max height\";\r\n      parameter SI.Area A=1 \"Ground area of tank\";\r\n      parameter SI.Area a=0.2 \"Area of drain hole\";\r\n      parameter SI.Height hmax=1 \"Max height of tank\";\r\n      constant Real g=Modelica.Constants.g_n;\r\n    equation\r\n      der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A);\r\n      if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a;\r\n      else\r\n        outflow1.Fo = 0;\r\n      end if;\r\n      levelSensor = level;\r\n\r\n      annotation (\r\n        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-122,-82},{88,-42}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255}),\r\n              Rectangle(\r\n                extent={{-60,60},{80,-40}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid),\r\n              Rectangle(\r\n                extent=DynamicSelect({{-60,-40},{-60,-40}}, {{-60,-40},{80,(-40\r\n                     + level*100)}}),\r\n                lineThickness=0.5,\r\n                fillPattern=FillPattern.HorizontalCylinder,\r\n                fillColor={191,0,95})}));\r\n    end Tank;\r\n\r\n    model Source\r\n        \"Simple source model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.StateGraph.Examples.Utilities.Outflow1 outflow1\r\n        annotation (Placement(transformation(extent={{-10,-60},{10,-40}})));\r\n      parameter Real maxflow=1 \"Maximal flow out of source\";\r\n    equation\r\n      if outflow1.open then\r\n        outflow1.Fo = maxflow;\r\n      else\r\n        outflow1.Fo = 0;\r\n      end if;\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                extent={{-80,40},{80,-40}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid), Text(\r\n                extent={{-144,54},{152,114}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n    end Source;\r\n\r\n    model CompositeStep\r\n        \"State machine demonstrating a composite step (used in StateGraph.Examples.ShowCompositeStep)\"\r\n      extends StateGraph.PartialCompositeStep;\r\n      Transition transition3(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,50},{-44,70}})));\r\n      Transition transition4(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,-10},{-44,10}})));\r\n      Step step3(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,50},{10,70}})));\r\n      Step step4(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,-10},{10,10}})));\r\n      Transition transition5(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,50},{56,70}})));\r\n      Transition transition6(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,-10},{56,10}})));\r\n      Transition transition4a(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,-70},{-44,-50}})));\r\n      Step step4a(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,-70},{10,-50}})));\r\n      Transition transition6a(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,-70},{56,-50}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{120,-10},{140,10}})));\r\n      Alternative Alternative1(nBranches=3) annotation (Placement(\r\n              transformation(extent={{-98,-90},{98,90}})));\r\n    equation\r\n      connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}));\r\n      connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}));\r\n      connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}));\r\n      connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}));\r\n      connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}));\r\n      connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}));\r\n      connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}));\r\n      connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}));\r\n      connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}));\r\n      connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}));\r\n      connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}));\r\n      connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}));\r\n      connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}));\r\n      connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}));\r\n    end CompositeStep;\r\n\r\n    model CompositeStep1\r\n        \"Composite step used to demonstrate exceptions (in StateGraph.Examples.ShowExceptions)\"\r\n      extends PartialCompositeStep;\r\n      Transition transition1(\r\n        enableTimer=false,\r\n        waitTime=0,\r\n        condition=time >= 8)\r\n        annotation (Placement(\r\n              transformation(extent={{-60,20},{-40,40}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{110,-10},{130,10}})));\r\n      CompositeStep2 compositeStep11(waitTime=3)\r\n                                           annotation (Placement(transformation(\r\n                extent={{-20,15},{10,45}})));\r\n      CompositeStep2 compositeStep12(waitTime=2)\r\n                                           annotation (Placement(transformation(\r\n                extent={{-20,-45},{10,-15}})));\r\n      Transition transition2(\r\n        condition=time >= 4,\r\n        enableTimer=false,\r\n        waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{-61,-40},{-41,-20}})));\r\n      Transition transition3(enableTimer=false, waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{29,20},{49,40}})));\r\n      Transition transition4(enableTimer=false, waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{29,-40},{49,-20}})));\r\n      Alternative Alternative1 annotation (Placement(transformation(extent={{\r\n                  -100,-60},{89,60}})));\r\n    equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}));\r\n      connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}));\r\n      connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}));\r\n      connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}));\r\n      connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}));\r\n      connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}));\r\n      connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}));\r\n      connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}));\r\n      connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}));\r\n      connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}));\r\n    end CompositeStep1;\r\n\r\n    model CompositeStep2\r\n        \"Composite step used to demonstrate exceptions (in StateGraph.Examples.ShowExceptions)\"\r\n      extends PartialCompositeStep;\r\n      Transition transition(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{110,-10},{130,10}})));\r\n      parameter SI.Time waitTime=2 \"Waiting time in this composite step\";\r\n    equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}));\r\n      connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}));\r\n    end CompositeStep2;\r\n\r\n  end Utilities;\r\nend Examples;\r\n\r\npackage Interfaces \"Connectors and partial models\"\r\n  extends Modelica.Icons.InterfacesPackage;\r\n\r\n  connector Step_in \"Input port of a step\"\r\n    output Boolean occupied \"= true, if step is active\" annotation (HideResult=true);\r\n    input Boolean set \"= true, if transition fires and step is activated\" annotation (HideResult=true);\r\n    annotation (\r\n   Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n              fillPattern=FillPattern.Solid)}),\r\n   Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{0,50},{100,0},{0,-50},{0,50}},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{-141,100},{100,60}},\r\n              textString=\"%name\")}));\r\n  end Step_in;\r\n\r\n  connector Step_out \"Output port of a step\"\r\n    output Boolean available \"= true, if step is active\" annotation (HideResult=true);\r\n\r\n    input Boolean reset \"= true, if transition fires and step is deactivated\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}),\r\n                              Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,50},{0,-50}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{-100,100},{186,58}},\r\n              textString=\"%name\")}));\r\n  end Step_out;\r\n\r\n  connector Transition_in \"Input port of a transition\"\r\n    input Boolean available\r\n        \"= true, if step connected to the transition input is active\"\r\n      annotation (HideResult=true);\r\n    output Boolean reset\r\n        \"= true, if transition fires and the step connected to the transition input is deactivated\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n              fillPattern=FillPattern.Solid)}),\r\n                                            Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{0,50},{100,0},{0,-50},{0,50}},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{-141,100},{100,60}},\r\n              textString=\"%name\")}));\r\n  end Transition_in;\r\n\r\n  connector Transition_out \"Output port of a transition\"\r\n    input Boolean occupied\r\n        \"= true, if step connected to the transition output is active\"\r\n      annotation (HideResult=true);\r\n    output Boolean set\r\n        \"= true, if transition fires and step connected to the transition output becomes active\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}),\r\n            Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Text(\r\n              extent={{-100,100},{146,60}},\r\n              textString=\"%name\"), Rectangle(\r\n              extent={{-100,50},{0,-50}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}));\r\n  end Transition_out;\r\n\r\n  connector CompositeStep_resume\r\n      \"Input port of a step (used for resume connector of a CompositeStep)\"\r\n    output Boolean occupied \"= true, if step is active\" annotation (HideResult=true);\r\n    input Boolean set \"= true, if transition fires and step is activated\"\r\n      annotation (HideResult=true);\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Polygon(\r\n              points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n              fillPattern=FillPattern.Solid)}));\r\n  end CompositeStep_resume;\r\n\r\n  connector CompositeStep_suspend\r\n      \"Output port of a step (used for suspend connector of a CompositeStep)\"\r\n\r\n    output Boolean available \"= true, if step is active\" annotation (HideResult=true);\r\n\r\n    input Boolean reset \"= true, if transition fires and step is deactivated\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}));\r\n  end CompositeStep_suspend;\r\n\r\n  connector CompositeStepStatePort_in\r\n      \"Communication port between a CompositeStep and the ordinary steps within the CompositeStep (suspend/resume are inputs)\"\r\n\r\n    input Boolean suspend\r\n        \"= true, if suspend transition of CompositeStep fires\";\r\n    input Boolean resume \"= true, if resume transition of CompositeStep fires\";\r\n    Real activeStepsDummy\r\n        \"Dummy variable in order that connector fulfills restriction of connector\" annotation(HideResult=true);\r\n    flow Real activeSteps \"Number of active steps in the CompositeStep\";\r\n  end CompositeStepStatePort_in;\r\n\r\n  connector CompositeStepStatePort_out\r\n      \"Communication port between a CompositeStep and the ordinary steps within the CompositeStep (suspend/resume are outputs)\"\r\n\r\n    output Boolean suspend\r\n        \"= true, if suspend transition of CompositeStep fires\";\r\n    output Boolean resume \"= true, if resume transition of CompositeStep fires\";\r\n    Real activeStepsDummy\r\n        \"Dummy variable in order that connector fulfills restriction of connector\" annotation(HideResult=true);\r\n    flow Real activeSteps \"Number of active steps in the CompositeStep\";\r\n  end CompositeStepStatePort_out;\r\n\r\n  partial block PartialStep\r\n      \"Partial step with one input and one output transition port\"\r\n\r\n    parameter Integer nIn(min=0) = 0 \"Number of input connections\" annotation(Dialog(connectorSizing=true), HideResult=true);\r\n    parameter Integer nOut(min=0) = 0 \"Number of output connections\" annotation(Dialog(connectorSizing=true), HideResult=true);\r\n\r\n    /* localActive is introduced since component 'Step' has Boolean variable 'active'\r\n     and component 'StepWithSignal' has connector instance 'active' defined\r\n     and both components inherit from PartialStep\r\n  */\r\n    output Boolean localActive\r\n        \"= true, if step is active, otherwise the step is not active\"\r\n      annotation (HideResult=true);\r\n    Interfaces.Step_in inPort[nIn] \"Vector of step input connectors\"\r\n      annotation (Placement(transformation(extent={{-120,10},{-100,-10}})));\r\n    Interfaces.Step_out outPort[nOut] \"Vector of step output connectors\"\r\n      annotation (Placement(transformation(extent={{100,5},{110,-5}})));\r\n    protected\r\n    outer Interfaces.CompositeStepState stateGraphRoot;\r\n    model OuterStatePort\r\n      CompositeStepStatePort_in subgraphStatePort;\r\n      input Boolean localActive;\r\n    equation\r\n      subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0;\r\n    end OuterStatePort;\r\n    OuterStatePort outerStatePort(localActive=localActive);\r\n\r\n    Boolean newActive \"Value of active in the next iteration\"\r\n      annotation (HideResult=true);\r\n    Boolean oldActive \"Value of active when CompositeStep was aborted\";\r\n  initial equation\r\n    pre(newActive) = pre(localActive);\r\n    pre(oldActive) = pre(localActive);\r\n  equation\r\n    connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort);\r\n\r\n    // Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\");\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\");\r\n    end for;\r\n\r\n    // set active state\r\n    localActive = pre(newActive);\r\n    newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend;\r\n\r\n    // Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive;\r\n    end when;\r\n\r\n    // Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set;\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset;\r\n    end for;\r\n\r\n    // Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false;\r\n      end if;\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false;\r\n      end if;\r\n    end for;\r\n  end PartialStep;\r\n\r\n  partial block PartialTransition\r\n      \"Partial transition with input and output connections\"\r\n    input Boolean localCondition \"= true, if transition may fire\"\r\n      annotation (HideResult=true);\r\n    parameter Boolean enableTimer=false \"= true, if timer is enabled\"\r\n      annotation (Evaluate=true, Dialog(group=\"Timer\"));\r\n    parameter SI.Time waitTime(min=0) = 0\r\n        \"Wait time before transition fires\"\r\n      annotation (Dialog(group=\"Timer\", enable=enableTimer));\r\n    output SI.Time t\r\n        \"Actual waiting time (transition will fire when t > waitTime)\";\r\n    output Boolean enableFire \"= true, if all firing conditions are true\";\r\n    output Boolean fire \"= true, if transition fires\" annotation (HideResult=true);\r\n\r\n    StateGraph.Interfaces.Transition_in inPort\r\n        \"Vector of transition input connectors\"\r\n      annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n    StateGraph.Interfaces.Transition_out outPort\r\n        \"Vector of transition output connectors\"\r\n      annotation (Placement(transformation(extent={{10,-5},{20,5}})));\r\n    protected\r\n    discrete SI.Time t_start\r\n        \"Time instant at which the transition would fire, if waitTime would be zero\";\r\n    Real t_dummy;\r\n  initial equation\r\n    pre(t_start) = time;\r\n    pre(enableFire) = false;\r\n  equation\r\n    assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\");\r\n    assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\");\r\n\r\n    // Handling of Timer\r\n    if enableTimer then\r\n      when enableFire then\r\n        t_start = time;\r\n      end when;\r\n      t_dummy = time - t_start;\r\n      t = if enableFire then t_dummy else 0;\r\n      fire = enableFire and time >= t_start + waitTime;\r\n    else\r\n      when false then\r\n        t_start = pre(t_start);\r\n      end when;\r\n      t_dummy = 0;\r\n      t = 0;\r\n      fire = enableFire;\r\n    end if;\r\n\r\n    // Determine fire setting and report it to the connected step\r\n    enableFire = localCondition and inPort.available and not outPort.occupied;\r\n    inPort.reset = fire;\r\n    outPort.set = fire;\r\n  end PartialTransition;\r\n\r\n  partial block PartialStateGraphIcon \"Icon for a StateGraph object\"\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{160,110},{-160,150}},\r\n              textString=\"%name\",\r\n              textColor={0,0,255})}));\r\n  end PartialStateGraphIcon;\r\n\r\n  model CompositeStepState\r\n      \"Communication channel between CompositeSteps and steps in the CompositeStep\"\r\n\r\n    output Boolean suspend = false \"= true, if suspend transition of CompositeStep fires\";\r\n    output Boolean resume =  false \"= true, if resume transition of CompositeStep fires\";\r\n    CompositeStepStatePort_out subgraphStatePort;\r\n\r\n  /*\r\n    missingInnerMessage=\"No \\\"stateGraphRoot\\\" component is defined on highest level\r\nof the StateGraph. A stateGraphRoot component is automatically introduced.\r\nIn order to get rid of this message, drag StateGraph.StateGraphRoot into the\r\ntop level your model.\");\r\n*/\r\n  equation\r\n    suspend = subgraphStatePort.suspend;\r\n    resume  = subgraphStatePort.resume;\r\n    subgraphStatePort.activeStepsDummy = 0;\r\n    annotation (\r\n      defaultComponentName=\"stateGraphRoot\",\r\n      defaultComponentPrefixes=\"inner\",\r\n      missingInnerMessage=\"A \\\"stateGraphRoot\\\" component was automatically introduced.\");\r\n  end CompositeStepState;\r\nend Interfaces;\r\n\r\nblock InitialStep \"Initial step (= step that is active when simulation starts)\"\r\n\r\n  output Boolean active\r\n      \"= true, if step is active, otherwise the step is not active\";\r\n\r\n  extends Interfaces.PartialStep;\r\n\r\ninitial equation\r\n  active = true;\r\nequation\r\n  active = localActive;\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Text(\r\n            extent={{-200,110},{200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor=DynamicSelect({255,255,255}, if active then {0,255,0} else {255,255,255}),\r\n            fillPattern=FillPattern.Solid),\r\n          Rectangle(extent={{-80,80},{80,-80}})}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}}), Rectangle(extent={{-80,80},{80,-80}})}));\r\nend InitialStep;\r\n\r\nblock InitialStepWithSignal\r\n    \"Initial step (= step that is active when simulation starts). Connector 'active' is true when the step is active\"\r\n\r\n  extends Interfaces.PartialStep;\r\n\r\n  Modelica.Blocks.Interfaces.BooleanOutput active\r\n    annotation (Placement(transformation(\r\n          origin={0,-110},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270)));\r\ninitial equation\r\n  active = true;\r\nequation\r\n  active = localActive;\r\n  annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n              -100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}}), Rectangle(extent={{-80,80},{80,-80}})}),\r\n       Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={\r\n          Text(\r\n            extent={{-200,110},{200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor=DynamicSelect({255,255,255}, if active then {0,255,0} else {255,255,255}),\r\n            fillPattern=FillPattern.Solid),\r\n          Text(\r\n            extent={{-92,-50},{94,-68}},\r\n            textString=\"active\"),\r\n          Rectangle(extent={{-80,80},{80,-80}})}));\r\nend InitialStepWithSignal;\r\n\r\nblock Step \"Ordinary step (= step that is not active when simulation starts)\"\r\n\r\n  output Boolean active\r\n      \"= true, if step is active, otherwise the step is not active\";\r\n\r\n  extends Interfaces.PartialStep;\r\n\r\ninitial equation\r\n  active = false;\r\nequation\r\n  active = localActive;\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Text(\r\n            extent={{-200,110},{200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}), Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor=DynamicSelect({255,255,255}, if active then {0,255,0} else {255,255,255}),\r\n            fillPattern=FillPattern.Solid)}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}})}));\r\nend Step;\r\n\r\nblock StepWithSignal\r\n    \"Ordinary step (= step that is not active when simulation starts). Connector 'active' is true when the step is active\"\r\n\r\n  extends Interfaces.PartialStep;\r\n\r\n  Modelica.Blocks.Interfaces.BooleanOutput active\r\n    annotation (Placement(transformation(\r\n          origin={0,-110},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270)));\r\ninitial equation\r\n  active = false;\r\nequation\r\n  active = localActive;\r\n  annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n              -100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}})}),\r\n       Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={\r\n          Text(\r\n            extent={{-200,110},{200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor=DynamicSelect({255,255,255}, if active then {0,255,0} else {255,255,255}),\r\n            fillPattern=FillPattern.Solid),\r\n          Text(\r\n            extent={{-92,-74},{94,-92}},\r\n            textString=\"active\")}));\r\nend StepWithSignal;\r\n\r\nblock Transition\r\n    \"Transition where the fire condition is set by a modification of variable condition\"\r\n\r\n  input Boolean condition=true\r\n      \"= true, if transition may fire (time varying expression)\"\r\n    annotation (Dialog(group=\"Fire condition\"));\r\n\r\n  extends Interfaces.PartialTransition(final localCondition=condition);\r\n\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Rectangle(\r\n            extent={{-10,100},{10,-100}},\r\n            fillColor=DynamicSelect({0,0,0}, if enableFire then {0,255,0} else {0,0,0}),\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-30,0},{-10,0}}),\r\n          Text(\r\n            extent={{200,110},{-200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Text(\r\n            visible=enableTimer,\r\n            extent={{20,20},{200,45}},\r\n            textString=\"%waitTime\"),\r\n          Text(\r\n            extent={{-200,-120},{200,-145}},\r\n            textColor=DynamicSelect({0,0,0}, if condition then {0,255,0} else {0,0,0}),\r\n            textString=\"%condition\")}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Line(points={{-31,0},{-11,0}}),\r\n            Rectangle(\r\n            extent={{-10,100},{10,-100}},\r\n            fillPattern=FillPattern.Solid)}));\r\n\r\nend Transition;\r\n\r\nblock TransitionWithSignal\r\n    \"Transition where the fire condition is set by a Boolean input signal\"\r\n\r\n  Modelica.Blocks.Interfaces.BooleanInput condition\r\n    annotation (Placement(transformation(\r\n          origin={0,-120},\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=90)));\r\n\r\n  extends Interfaces.PartialTransition(final localCondition=condition);\r\n\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Text(\r\n            visible=enableTimer,\r\n            extent={{20,20},{200,45}},\r\n            textString=\"%waitTime\"),\r\n          Rectangle(\r\n            extent={{-10,100},{10,-100}},\r\n            fillColor=DynamicSelect({0,0,0}, if enableFire then {0,255,0} else {0,0,0}),\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-30,0},{-10,0}}),\r\n          Text(\r\n            extent={{200,110},{-200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Ellipse(\r\n            extent={{7,-81},{-7,-95}},\r\n            lineColor=DynamicSelect({0,0,0}, if condition then {0,255,0} else {0,0,0}),\r\n            fillColor=DynamicSelect({0,0,0}, if condition then {0,255,0} else {0,0,0}),\r\n            fillPattern=FillPattern.Solid)}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Line(points={{-31,0},{-11,0}}),\r\n            Rectangle(\r\n            extent={{-10,100},{10,-100}},\r\n            fillPattern=FillPattern.Solid)}));\r\nend TransitionWithSignal;\r\n\r\nblock Alternative\r\n    \"Alternative splitting of execution path (use component between two steps)\"\r\n\r\n  parameter Integer nBranches(min=1)=2 \"Number of alternative branches\";\r\n  Interfaces.Transition_in inPort\r\n                            annotation (Placement(transformation(extent={{-106,\r\n              -3},{-100,3}})));\r\n  Interfaces.Transition_out outPort\r\n                              annotation (Placement(transformation(extent={{100,\r\n              -2},{104,2}})));\r\n  Step_in_forAlternative join[nBranches]\r\n                                    annotation (Placement(transformation(extent=\r\n             {{78,100},{80,-100}})));\r\n  Step_out_forAlternative split[nBranches]\r\n                                      annotation (Placement(transformation(\r\n            extent={{-78,100},{-80,-100}})));\r\n\r\n  protected\r\nconnector Step_in_forAlternative\r\n      \"Input port of a step (has special icon for usage in component 'Alternative')\"\r\n\r\n  output Boolean occupied \"= true, if step is active\"\r\n    annotation (HideResult=true);\r\n  input Boolean set \"= true, if transition fires and step is activated\"\r\n    annotation (HideResult=true);\r\n\r\n  annotation (Icon(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={175,175,175},\r\n              fillPattern=FillPattern.Solid)}),\r\n                                          Diagram(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={175,175,175},\r\n              fillPattern=FillPattern.Solid)}));\r\nend Step_in_forAlternative;\r\n\r\nconnector Step_out_forAlternative\r\n      \"Output port of a step (has special icon for usage in component 'Alternative')\"\r\n\r\n  output Boolean available \"= true, if step is active\"\r\n    annotation (HideResult=true);\r\n  input Boolean reset \"= true, if transition fires and step is deactivated\"\r\n    annotation (HideResult=true);\r\n\r\n  annotation (Icon(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={175,175,175},\r\n              fillPattern=FillPattern.Solid)}),\r\n                            Diagram(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={175,175,175},\r\n              fillPattern=FillPattern.Solid)}));\r\nend Step_out_forAlternative;\r\n\r\nequation\r\n  // Check connections of connectors\r\n\r\n  assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\");\r\n\r\n  assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\");\r\n\r\n  for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\");\r\n\r\n     assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\");\r\n\r\n  end for;\r\n\r\n  // Propagate flags between the connectors\r\n\r\n  for i in 1:nBranches loop\r\n     split[i].available = if i==1 then inPort.available else\r\n                                       split[i-1].available and not split[i-1].reset;\r\n\r\n  end for;\r\n  join.occupied = fill(outPort.occupied, nBranches);\r\n  inPort.reset  = Modelica.Math.BooleanVectors.anyTrue(split.reset);\r\n  outPort.set   = Modelica.Math.BooleanVectors.anyTrue(join.set);\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=false,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(\r\n            points={{-80,100},{80,100}},\r\n            pattern=LinePattern.Dot),\r\n          Line(\r\n            points={{-80,-100},{80,-100}},\r\n            pattern=LinePattern.Dot),\r\n          Line(points={{-100,0},{-80,0}}),\r\n          Line(points={{80,0},{100,0}})}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,0},{-80,0}}),\r\n            Line(points={{80,0},{100,0}})}));\r\nend Alternative;\r\n\r\nblock Parallel\r\n    \"Parallel splitting of execution path (use component between two transitions)\"\r\n\r\n  parameter Integer nBranches(min=1)=2\r\n      \"Number of parallel branches that are executed in parallel\";\r\n  Interfaces.Step_in inPort annotation (Placement(transformation(extent={{-106,\r\n              -3},{-100,3}})));\r\n  Interfaces.Step_out outPort annotation (Placement(transformation(extent={{100,\r\n              -2},{104,2}})));\r\n  Transition_in_forParallel join[nBranches]\r\n                                    annotation (Placement(transformation(extent=\r\n             {{75,100},{80,-100}})));\r\n  Transition_out_forParallel split[nBranches]\r\n                                      annotation (Placement(transformation(\r\n            extent={{-75,100},{-80,-100}})));\r\n\r\n  protected\r\nconnector Transition_in_forParallel\r\n      \"Input port of a transition (has special icon for usage in component 'Parallel')\"\r\n\r\n  input Boolean available\r\n        \"= true, if step connected to the transition input is active\"\r\n    annotation (HideResult=true);\r\n  output Boolean reset\r\n        \"= true, if transition fires and the step connected to the transition input is deactivated\"\r\n    annotation (HideResult=true);\r\n\r\n  annotation (Icon(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              lineColor={255,255,255},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Line(\r\n              points={{-100,100},{-100,-100}},\r\n              thickness=0.5),\r\n            Line(\r\n              points={{100,100},{100,-100}},\r\n              thickness=0.5)}), Diagram(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              lineColor={255,255,255},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Line(\r\n              points={{-100,100},{-100,-100}},\r\n              thickness=0.5),\r\n            Line(\r\n              points={{100,100},{100,-100}},\r\n              thickness=0.5)}));\r\nend Transition_in_forParallel;\r\n\r\nconnector Transition_out_forParallel\r\n      \"Output port of a transition (has special icon for usage in component 'Parallel')\"\r\n\r\n  input Boolean occupied\r\n        \"= true, if step connected to the transition output is active\"\r\n    annotation (HideResult=true);\r\n  output Boolean set\r\n        \"= true, if transition fires and step connected to the transition output becomes active\"\r\n    annotation (HideResult=true);\r\n\r\n  annotation (Icon(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              lineColor={255,255,255},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Line(\r\n              points={{-100,100},{-100,-100}},\r\n              thickness=0.5),\r\n            Line(\r\n              points={{100,100},{100,-100}},\r\n              thickness=0.5)}),\r\n                            Diagram(coordinateSystem(\r\n            extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              lineColor={255,255,255},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Line(\r\n              points={{-100,100},{-100,-100}},\r\n              thickness=0.5),\r\n            Line(\r\n              points={{100,100},{100,-100}},\r\n              thickness=0.5)}));\r\nend Transition_out_forParallel;\r\n\r\nequation\r\n  // Check connections of connectors\r\n\r\n  assert(cardinality(inPort) == 1,\r\n    \"Connector inPort is not connected to exactly one other connector\");\r\n\r\n  assert(cardinality(outPort) == 1,\r\n    \"Connector outPort is not connected to exactly one other connector\");\r\n\r\n  for i in 1:nBranches loop\r\n\r\n     assert(cardinality(split[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\");\r\n\r\n     assert(cardinality(join[i]) == 1,\r\n       \"Connector is not connected to exactly one other connector\");\r\n\r\n  end for;\r\n\r\n  // Propagate flags between the connectors\r\n  split.set  = fill(inPort.set, nBranches);\r\n  join.reset = fill(outPort.reset, nBranches);\r\n  inPort.occupied   = Modelica.Math.BooleanVectors.anyTrue(split.occupied);\r\n  outPort.available = Modelica.Math.BooleanVectors.andTrue(join.available);\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=false,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-100,0},{-80,0}}),\r\n          Line(points={{80,0},{100,0}}),\r\n          Line(\r\n            points={{-80,100},{80,100}},\r\n            pattern=LinePattern.Dot),\r\n          Line(\r\n            points={{-80,-100},{80,-100}},\r\n            pattern=LinePattern.Dot)}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Line(points={{-100,0},{-80,0}}),\r\n            Line(points={{80,0},{100,0}})}));\r\nend Parallel;\r\n\r\npartial model PartialCompositeStep\r\n    \"Superclass of a subgraph, i.e., a composite step that has internally a StateGraph\"\r\n\r\n  parameter Integer nSuspend = 1 \"Number of suspend ports\" annotation(Dialog(group=\"Exception connections\"));\r\n  parameter Integer nResume = 1 \"Number of resume ports\" annotation(Dialog(group=\"Exception connections\"));\r\n\r\n  /* The modification of stateGraphRoot is with respect to the \"inner\"\r\n     definition, i.e., it is reported to all components that are\r\n     within the CompositeStep\r\n  */\r\n  inner outer StateGraph.Interfaces.CompositeStepState stateGraphRoot(\r\n                  suspend = Modelica.Math.BooleanVectors.anyTrue(suspend.reset) or outerState.subgraphStatePort.suspend,\r\n                  resume  = Modelica.Math.BooleanVectors.anyTrue(resume.set) or outerState.subgraphStatePort.resume)\r\n      \"Communication port between the CompositeStep and the steps within the CompositeStep\";\r\n  output Boolean active\r\n      \"= true, if step is active, otherwise the step is not active\";\r\n  StateGraph.Interfaces.Step_in inPort annotation (Placement(transformation(\r\n            extent={{-170,10},{-150,-10}})));\r\n  StateGraph.Interfaces.Step_out outPort annotation (Placement(transformation(\r\n            extent={{150,5},{160,-5}})));\r\n  StateGraph.Interfaces.CompositeStep_suspend suspend[nSuspend]\r\n    annotation (Placement(transformation(\r\n          origin={-75,-155},\r\n          extent={{-5,5},{5,-5}},\r\n          rotation=270)));\r\n  StateGraph.Interfaces.CompositeStep_resume resume[nResume]\r\n    annotation (Placement(transformation(\r\n          origin={75,-160},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=90)));\r\n\r\n  model OuterState\r\n      \"Block containing the port that is connected to the outer stateGraphRoot\"\r\n    Interfaces.CompositeStepStatePort_in subgraphStatePort\r\n        \"Port connected to outer stateGraphRoot\";\r\n    input Boolean active;\r\n  equation\r\n    subgraphStatePort.activeSteps = if active then 1.0 else 0.0;\r\n  end OuterState;\r\n  OuterState outerState(active=active);\r\n\r\n  protected\r\n  model InnerState\r\n    outer Interfaces.CompositeStepState stateGraphRoot;\r\n  end InnerState;\r\n  InnerState innerState;\r\n\r\n  Boolean newActive \"Value of active in the next iteration\"\r\n    annotation (HideResult=true);\r\n  Integer activeSteps \"Number of active steps within the CompositeStep\";\r\ninitial equation\r\n  pre(newActive) = false;\r\n  // pre(active) = pre(newActive);\r\nequation\r\n  // connect to outer CompositeStep\r\n  connect(outerState.subgraphStatePort, stateGraphRoot.subgraphStatePort);\r\n\r\n  // set active flag  of CompositeStep\r\n  activeSteps = -integer(innerState.stateGraphRoot.subgraphStatePort.activeSteps);\r\n  active = pre(newActive);\r\n\r\n  /* The CompositeStep is active if\r\n     - at least one step within the CompositeStep is active, and\r\n     - the suspend transition does not fire, and\r\n     - the suspend transition of a higher level CompositeStep does not fire or\r\n     - no step within the CompositeStep is active, and\r\n     - the resume transition fires or the resume transition of\r\n       a higher level CompositeStep fires.\r\n  */\r\n  // newActive = activeSteps > 0 and not suspend.reset or resume.set;\r\n  newActive = activeSteps > 0 and not Modelica.Math.BooleanVectors.anyTrue(suspend.reset) and not\r\n              outerState.subgraphStatePort.suspend or\r\n              Modelica.Math.BooleanVectors.anyTrue(resume.set) or outerState.subgraphStatePort.resume;\r\n\r\n  // Report state to suspend and resume transitions\r\n\r\n  for i in 1:nResume loop\r\n    resume[i].occupied = if i == 1 then active else\r\n                                        resume[i-1].occupied or\r\n                                        resume[i-1].set;\r\n\r\n  end for;\r\n\r\n  for i in 1:nSuspend loop\r\n     suspend[i].available = if i == 1 then active else\r\n                                           suspend[i-1].available and not\r\n                                           suspend[i-1].reset;\r\n\r\n  end for;\r\n\r\n  /* Check that connections to the connectors are correct\r\n     and set appropriate defaults if necessary\r\n  */\r\n\r\n  for i in 1:nSuspend loop\r\n\r\n  assert(cardinality(suspend[i]) <= 1,\r\n\"Connector suspend[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\");\r\n\r\n    if cardinality(suspend[i]) == 0 then\r\n      suspend[i].reset = false;\r\n\r\n    end if;\r\n\r\n  end for;\r\n\r\n  for i in 1:nResume loop\r\n\r\n  assert(cardinality(resume[i]) <= 1,\r\n\"Connector resume[\" + String(i) + \"] of the CompositeStep is connected\r\nto more than one transition\");\r\n\r\n    if cardinality(resume[i]) == 0 then\r\n      resume[i].set = false;\r\n\r\n    end if;\r\n\r\n  end for;\r\n\r\n  /* Zero sized connectors are not yet fully supported in\r\n     Dymola. This requires to set the dimension of the connector\r\n     to 1, if it should have a dimension of zero. This requires\r\n     to set the connector variables to a default value in this case\r\n  */\r\n\r\n  if cardinality(inPort) < 2 then\r\n    inPort.occupied = false;\r\n    inPort.set = false;\r\n\r\n  end if;\r\n\r\n  if cardinality(outPort) < 2 then\r\n    outPort.available = false;\r\n    outPort.reset = false;\r\n\r\n  end if;\r\n\r\n  // Check inPort/outPort connections\r\n\r\n  assert(cardinality(inPort) <= 2,\r\n\"Connector inPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outside to the\r\ninPort and one connection to a step inside the CompositeStep.\");\r\n\r\n  assert(cardinality(outPort) <= 2,\r\n\"Connector outPort of the CompositeStep has more than 2 connections.\r\nIt should have only one connection from the outPort to the\r\noutside to the CompositeStep and one connection from a step\r\ninside the CompositeStep to the outPort connector.\");\r\n\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-150,-150},{150,150}}), graphics={\r\n          Text(\r\n            extent={{-250,160},{250,200}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-150,150},{150,-150}},\r\n            fillColor=DynamicSelect({255,255,255}, if active then {0,255,0} else {255,255,255}),\r\n            fillPattern=FillPattern.Solid),\r\n          Text(\r\n            extent={{4,-115},{145,-130}},\r\n            textString=\"resume\"),\r\n          Text(\r\n            extent={{-144,-114},{-3,-129}},\r\n            textString=\"suspend\")}),\r\n    Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-150,-150},{150,150}}), graphics={Rectangle(extent={{-150,150},{150,-150}})}));\r\nend PartialCompositeStep;\r\n\r\nmodel StateGraphRoot\r\n    \"Root of a StateGraph (has to be present on the highest level of a StateGraph)\"\r\n\r\n  extends StateGraph.Interfaces.CompositeStepState;\r\n  output Integer activeSteps \"Number of active steps within the stategraph\";\r\n\r\nequation\r\n  activeSteps = -integer(subgraphStatePort.activeSteps);\r\n  annotation (\r\n    defaultComponentName=\"stateGraphRoot\",\r\n    defaultComponentPrefixes=\"inner\",\r\n    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={\r\n          Text(\r\n            extent={{-200,110},{200,150}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}}),\r\n          Text(\r\n            extent={{-92,78},{96,34}},\r\n            textString=\"root\"),\r\n          Rectangle(extent={{-82,-6},{-44,-40}}),\r\n          Line(points={{0,10},{0,-60}}),\r\n          Rectangle(extent={{48,-6},{86,-40}}),\r\n          Polygon(\r\n            points={{-12,-16},{0,-22},{-12,-28},{-12,-16}},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-44,-22},{-12,-22}}),\r\n          Polygon(\r\n            points={{36,-16},{48,-22},{36,-28},{36,-16}},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{0,-22},{36,-22}})}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nOn the highest level of a StateGraph, an instance of StateGraphRoot\r\nhas to be present.\r\n</p>\r\n<p>\r\nThe StateGraphRoot object is needed, since all Step objects have\r\nan \\\"outer\\\" reference to communicate with the \\\"nearest\\\" CompositeStep\r\n(which inherits from PartialCompositeStep), especially to abort\r\na CompositeStep via the \\\"suspend\\\" port. Even if no \\\"CompositeStep\\\" is present,\r\non highest level a corresponding \\\"inner\\\" definition is needed\r\nand is provided by the StateGraphRoot object.\r\n</p>\r\n</html>\"));\r\nend StateGraphRoot;\r\n\r\nannotation (\r\n  Documentation(info=\"<html>\r\n<p>\r\nNote, there is a much improved version of this library called\r\n\\\"Modelica_StateGraph2\\\". If this library is not yet distributed with your\r\nModelica tool, you can download it from\r\n<a href=\\\"https://github.com/modelica/Modelica_StateGraph2\\\">https://github.com/modelica/Modelica_StateGraph2</a>.\r\nIn the\r\n<a href=\\\"modelica://Modelica.StateGraph.UsersGuide.ComparisonWithStateGraph2\\\">Users Guide</a>\r\na detailed comparison is given. It is highly recommended to use Modelica_StateGraph2 instead\r\nof Modelica.StateGraph.\r\n</p>\r\n\r\n<p>\r\nLibrary <strong>StateGraph</strong> is a <strong>free</strong> Modelica package providing\r\ncomponents to model <strong>discrete event</strong> and <strong>reactive</strong>\r\nsystems in a convenient\r\nway. It is based on the JGrafchart method and\r\ntakes advantage of Modelica features for\r\nthe \\\"action\\\" language. JGrafchart is a further development of\r\nGrafcet to include elements of StateCharts that are not present\r\nin Grafcet/Sequential Function Charts. Therefore, the StateGraph\r\nlibrary has a similar modeling power as StateCharts but avoids\r\nsome deficiencies of StateCharts.\r\n</p>\r\n<p>\r\nFor an introduction, have especially a look at:\r\n</p>\r\n<ul>\r\n<li> <a href=\\\"modelica://Modelica.StateGraph.UsersGuide\\\">StateGraph.UsersGuide</a>\r\n     discusses the most important aspects how to use this library.</li>\r\n<li> <a href=\\\"modelica://Modelica.StateGraph.Examples\\\">StateGraph.Examples</a>\r\n     contains examples that demonstrate the usage of this library.</li>\r\n</ul>\r\n<p>\r\nA typical model generated with this library is shown\r\nin the next figure where on the left hand side a two-tank\r\nsystem with a tank controller and on the right hand side the\r\ntop-level part of the tank controller as a StateGraph is shown:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/ControlledTanks1_small.png\\\">\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/StateGraph/UsersGuide/ControlledTanks2_small.png\\\">\r\n</div>\r\n\r\n<p>\r\nThe unique feature of the StateGraph library with respect to JGrafcharts,\r\nGrafcet, Sequential Function Charts, and StateCharts, is Modelica's\r\n\\\"single assignment rule\\\" that requires that every variable is defined\r\nby exactly one equation. This leads to a different \\\"action\\\" definition\r\nas in these formalisms. The advantage is that the translator can either\r\ndetermine a useful evaluation sequence by equation sorting or\r\nreports an error if this is not possible, e.g., because a model\r\nwould lead to a non-determinism or to a dead-lock. As a side effect,\r\nthis leads also to simpler and more easier to understand models and\r\nglobal variables are no longer needed (whereas in JGrafcharts,\r\nGrafcet, Sequential Function Charts and StateCharts global variables\r\nare nearly always needed).\r\n</p>\r\n\r\n<p>\r\nCopyright &copy; 1998-2025, Modelica Association and contributors\r\n</p>\r\n</html>\"), Icon(coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}}), graphics={\r\n      Rectangle(\r\n        origin={-70.0,-0.0},\r\n        fillColor={255,255,255},\r\n        extent={{-20.0,-20.0},{20.0,20.0}}),\r\n      Rectangle(\r\n        origin={70.0,-0.0},\r\n        fillColor={255,255,255},\r\n        extent={{-20.0,-20.0},{20.0,20.0}}),\r\n      Line(points={{0.0,50.0},{0.0,-50.0}}),\r\n      Polygon(\r\n        origin={-16.6667,0.0},\r\n        pattern=LinePattern.None,\r\n        fillPattern=FillPattern.Solid,\r\n        points={{-3.3333,10.0},{16.667,0.0},{-3.3333,-10.0}}),\r\n      Line(origin={-35.0,0.0}, points={{15.0,0.0},{-15.0,0.0}}),\r\n      Polygon(\r\n        origin={33.3333,0.0},\r\n        pattern=LinePattern.None,\r\n        fillPattern=FillPattern.Solid,\r\n        points={{-3.3333,10.0},{16.667,0.0},{-3.3333,-10.0}}),\r\n      Line(origin={15.0,-0.0},  points={{15.0,0.0},{-15.0,-0.0}})}));\r\nend StateGraph", "checksum": "3debc4744e0cd81ce4fd341c5f3ddf2ae8bd29a1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo:2-2815", "component_count": 22, "connection_count": 103, "variable_count": 85, "physical_quantity_count": 16, "parameter_count": 9, "equation_count": 211, "dependency_count": 141, "has_physical_interface": true, "interface_component_count": 10, "has_connections": true, "is_composite_model": true, "complexity_score": 568.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation activeSteps = -integer(subgraphStatePort.activeSteps)", "search_keywords": ["Boolean", "CompositeStepStatePort_in", "InnerState", "Interfaces.CompositeStepState", "OuterState", "OuterStatePort", "Real", "SI.VolumeFlowRate", "Time", "inPort", "inside", "nBranches", "nIn", "nOut", "system", "to"]}, "components": [{"name": "Fi", "type_name": "SI.VolumeFlowRate", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Inflow"}, {"name": "Fo", "type_name": "SI.VolumeFlowRate", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Outflow"}, {"name": "open", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Valve open"}, {"name": "level", "type_name": "Real", "prefixes": [], "modifications": {"start": "0", "fixed": "true"}, "condition": null, "array_dims": null, "comment": "Tank level in % of max height"}, {"name": "g", "type_name": "Real", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "resume", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "if", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "activeSteps", "type_name": "Real", "prefixes": ["flow"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Number of active steps in the CompositeStep"}, {"name": "subgraphStatePort", "type_name": "CompositeStepStatePort_in", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "localActive", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "outerStatePort", "type_name": "OuterStatePort", "prefixes": [], "modifications": {"localActive": "localActive"}, "condition": null, "array_dims": null, "comment": null}, {"name": "oldActive", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Value of active when CompositeStep was aborted"}, {"name": "enableFire", "type_name": "Boolean", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "t_dummy", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "suspend", "type_name": "Boolean", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "active", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "outerState", "type_name": "OuterState", "prefixes": [], "modifications": {"active": "active"}, "condition": null, "array_dims": null, "comment": null}, {"name": "stateGraphRoot", "type_name": "Interfaces.CompositeStepState", "prefixes": ["outer"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "innerState", "type_name": "InnerState", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "more", "type_name": "to", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "and", "type_name": "inPort", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "the", "type_name": "inside", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "initialStep.outPort[1]", "to_connector": "transition1.inPort", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "step.inPort[1]", "condition": null}, {"from_connector": "step.outPort[1]", "to_connector": "transition2.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "initialStep.inPort[1]", "condition": null}, {"from_connector": "step.active", "to_connector": "timer.u", "condition": null}, {"from_connector": "timer.y", "to_connector": "greaterEqual.u", "condition": null}, {"from_connector": "greaterEqual.y", "to_connector": "transition2.condition", "condition": null}, {"from_connector": "SetBoolean1.y", "to_connector": "transition2.condition", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "step3.inPort[1]", "condition": null}, {"from_connector": "step3.outPort[1]", "to_connector": "transition5.inPort", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "step4.inPort[1]", "condition": null}, {"from_connector": "step4.outPort[1]", "to_connector": "transition6.inPort", "condition": null}, {"from_connector": "transition7.outPort", "to_connector": "step0.inPort[1]", "condition": null}, {"from_connector": "step6.outPort[1]", "to_connector": "transition7.inPort", "condition": null}, {"from_connector": "transition4a.outPort", "to_connector": "step4a.inPort[1]", "condition": null}, {"from_connector": "step4a.outPort[1]", "to_connector": "transition6a.inPort", "condition": null}, {"from_connector": "setCondition.y", "to_connector": "transition7.condition", "condition": null}, {"from_connector": "setReal.y", "to_connector": "NumericValue1.numberPort", "condition": null}, {"from_connector": "transition3.inPort", "to_connector": "alternative.split[1]", "condition": null}, {"from_connector": "transition4.inPort", "to_connector": "alternative.split[2]", "condition": null}, {"from_connector": "transition4a.inPort", "to_connector": "alternative.split[3]", "condition": null}, {"from_connector": "transition5.outPort", "to_connector": "alternative.join[1]", "condition": null}, {"from_connector": "transition6.outPort", "to_connector": "alternative.join[2]", "condition": null}, {"from_connector": "transition6a.outPort", "to_connector": "alternative.join[3]", "condition": null}, {"from_connector": "step2.outPort[1]", "to_connector": "alternative.inPort", "condition": null}, {"from_connector": "alternative.outPort", "to_connector": "step5.inPort[1]", "condition": null}, {"from_connector": "step2.inPort[1]", "to_connector": "Parallel1.split[1]", "condition": null}, {"from_connector": "step1.outPort[1]", "to_connector": "Parallel1.join[2]", "condition": null}, {"from_connector": "step0.outPort[1]", "to_connector": "transition1.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "step6.inPort[1]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "Parallel1.inPort", "condition": null}, {"from_connector": "Parallel1.outPort", "to_connector": "transition2.inPort", "condition": null}, {"from_connector": "step5.outPort[1]", "to_connector": "Parallel1.join[1]", "condition": null}, {"from_connector": "Parallel1.split[2]", "to_connector": "step1.inPort[1]", "condition": null}, {"from_connector": "compositeStep.inPort", "to_connector": "Parallel1.split[1]", "condition": null}, {"from_connector": "compositeStep.outPort", "to_connector": "Parallel1.join[1]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "compositeStep.inPort", "condition": null}, {"from_connector": "compositeStep.outPort", "to_connector": "transition2.inPort", "condition": null}, {"from_connector": "compositeStep.suspend[1]", "to_connector": "transition3.inPort", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "step1.inPort[1]", "condition": null}, {"from_connector": "step1.outPort[1]", "to_connector": "transition4.inPort", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "compositeStep.resume[1]", "condition": null}, {"from_connector": "tank1.outflow1", "to_connector": "valve2.outflow1", "condition": null}, {"from_connector": "tank2.inflow1", "to_connector": "valve2.inflow1", "condition": null}, {"from_connector": "tank2.outflow1", "to_connector": "valve3.outflow1", "condition": null}, {"from_connector": "tank1.inflow1", "to_connector": "valve1.inflow1", "condition": null}, {"from_connector": "shut.on", "to_connector": "tankController.shut", "condition": null}, {"from_connector": "stop.on", "to_connector": "tankController.stop", "condition": null}, {"from_connector": "start.on", "to_connector": "tankController.start", "condition": null}, {"from_connector": "tank1.levelSensor", "to_connector": "tankController.level1", "condition": null}, {"from_connector": "tank2.levelSensor", "to_connector": "tankController.level2", "condition": null}, {"from_connector": "tankController.valve1", "to_connector": "valve1.valveControl", "condition": null}, {"from_connector": "tankController.valve2", "to_connector": "valve2.valveControl", "condition": null}, {"from_connector": "tankController.valve3", "to_connector": "valve3.valveControl", "condition": null}, {"from_connector": "source.outflow1", "to_connector": "valve1.outflow1", "condition": null}, {"from_connector": "s1.outPort[1]", "to_connector": "T1.inPort", "condition": null}, {"from_connector": "T1.outPort", "to_connector": "makeProduct.inPort", "condition": null}, {"from_connector": "makeProduct.outPort", "to_connector": "T2.inPort", "condition": null}, {"from_connector": "T5.outPort", "to_connector": "emptyTanks.inPort[1]", "condition": null}, {"from_connector": "emptyTanks.outPort[1]", "to_connector": "T6.inPort", "condition": null}, {"from_connector": "setValve1.y", "to_connector": "valve1", "condition": null}, {"from_connector": "setValve2.y", "to_connector": "valve2", "condition": null}, {"from_connector": "setValve3.y", "to_connector": "valve3", "condition": null}, {"from_connector": "makeProduct.suspend[1]", "to_connector": "T3.inPort", "condition": null}, {"from_connector": "T3.outPort", "to_connector": "s2.inPort[1]", "condition": null}, {"from_connector": "T4.outPort", "to_connector": "makeProduct.resume[1]", "condition": null}, {"from_connector": "level1", "to_connector": "makeProduct.level1", "condition": null}, {"from_connector": "s2.outPort[1]", "to_connector": "T5.inPort", "condition": null}, {"from_connector": "s2.outPort[2]", "to_connector": "T4.inPort", "condition": null}, {"from_connector": "T2.outPort", "to_connector": "s1.inPort[1]", "condition": null}, {"from_connector": "T6.outPort", "to_connector": "s1.inPort[2]", "condition": null}, {"from_connector": "fillTank1.inPort[1]", "to_connector": "inPort", "condition": null}, {"from_connector": "fillTank1.outPort[1]", "to_connector": "T1.inPort", "condition": null}, {"from_connector": "fillTank2.outPort[1]", "to_connector": "T3.inPort", "condition": null}, {"from_connector": "emptyTank2.outPort[1]", "to_connector": "outPort", "condition": null}, {"from_connector": "wait1.outPort[1]", "to_connector": "T2.inPort", "condition": null}, {"from_connector": "T2.outPort", "to_connector": "fillTank2.inPort[1]", "condition": null}, {"from_connector": "T1.outPort", "to_connector": "wait1.inPort[1]", "condition": null}, {"from_connector": "wait2.outPort[1]", "to_connector": "T4.inPort", "condition": null}, {"from_connector": "T3.outPort", "to_connector": "wait2.inPort[1]", "condition": null}, {"from_connector": "T4.outPort", "to_connector": "emptyTank2.inPort[1]", "condition": null}, {"from_connector": "initStep.inPort[1]", "to_connector": "inPort", "condition": null}, {"from_connector": "exitStep.outPort[1]", "to_connector": "outPort", "condition": null}, {"from_connector": "initStep.outPort[1]", "to_connector": "Alternative1.inPort", "condition": null}, {"from_connector": "Alternative1.outPort", "to_connector": "exitStep.inPort[1]", "condition": null}, {"from_connector": "transition3.inPort", "to_connector": "Alternative1.split[1]", "condition": null}, {"from_connector": "transition4.inPort", "to_connector": "Alternative1.split[2]", "condition": null}, {"from_connector": "transition4a.inPort", "to_connector": "Alternative1.split[3]", "condition": null}, {"from_connector": "transition5.outPort", "to_connector": "Alternative1.join[1]", "condition": null}, {"from_connector": "transition6.outPort", "to_connector": "Alternative1.join[2]", "condition": null}, {"from_connector": "transition6a.outPort", "to_connector": "Alternative1.join[3]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "compositeStep11.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "compositeStep12.inPort", "condition": null}, {"from_connector": "compositeStep11.outPort", "to_connector": "transition3.inPort", "condition": null}, {"from_connector": "compositeStep12.outPort", "to_connector": "transition4.inPort", "condition": null}, {"from_connector": "transition1.inPort", "to_connector": "Alternative1.split[1]", "condition": null}, {"from_connector": "transition2.inPort", "to_connector": "Alternative1.split[2]", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "Alternative1.join[1]", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "Alternative1.join[2]", "condition": null}, {"from_connector": "initStep.outPort[1]", "to_connector": "transition.inPort", "condition": null}, {"from_connector": "transition.outPort", "to_connector": "exitStep.inPort[1]", "condition": null}, {"from_connector": "outerStatePort.subgraphStatePort", "to_connector": "stateGraphRoot.subgraphStatePort", "condition": null}, {"from_connector": "outerState.subgraphStatePort", "to_connector": "stateGraphRoot.subgraphStatePort", "condition": null}], "variables": [{"name": "OverView", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FirstExample", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ApplicationExample", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ComparisonWithStateGraph2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ReleaseNotes", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Literature", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Contact", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "UsersGuide", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FirstExample_Variant2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FirstExample_Variant3", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ExecutionPaths", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ShowCompositeStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ShowExceptions", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ControlledTanks", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TankController", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MakeProduct", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fi", "type_name": "SI.VolumeFlowRate", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": null, "comment": "\"Inflow\""}, {"name": "Inflow1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Inflow2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fo", "type_name": "SI.VolumeFlowRate", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": "\"Outflow\""}, {"name": "open", "type_name": "Boolean", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": null, "comment": "\"Valve open\""}, {"name": "Outflow1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Outflow2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "valve", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "level", "type_name": "Real", "prefixes": [], "attributes": {"start": "0", "fixed": "true"}, "binding_equation": null, "comment": "\"Tank level in % of max height\""}, {"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "(inflow1.Fi - outflow1.Fo)/(hmax*A)", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Tank", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Source", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialCompositeStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Utilities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Examples", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Step_in", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Step_out", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Transition_in", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Transition_out", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep_resume", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep_suspend", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "suspend", "type_name": "equation", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "subgraphStatePort.suspend", "comment": "\"= true, if suspend transition of CompositeStep fires\""}, {"name": "resume", "type_name": "Boolean", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "false \"= true, if resume transition of CompositeStep fires\"", "comment": "\"= true, if resume transition of CompositeStep fires\""}, {"name": "activeSteps", "type_name": "equation", "prefixes": ["output", "flow"], "attributes": {}, "binding_equation": "-integer(subgraphStatePort.activeSteps)", "comment": "\"Number of active steps within the stategraph\""}, {"name": "CompositeStepStatePort_in", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStepStatePort_out", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "stateGraphRoot", "type_name": "Interfaces.CompositeStepState", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "subgraphStatePort", "type_name": "Interfaces.CompositeStepStatePort_in", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Port connected to outer stateGraphRoot\""}, {"name": "localActive", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "OuterStatePort", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "outerStatePort", "type_name": "OuterStatePort", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "oldActive", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Value of active when CompositeStep was aborted\""}, {"name": "connect", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cardinality", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "0 then\r\n      resume[i].set = false", "comment": null}, {"name": "PartialStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "t", "type_name": "SI.Time", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Actual waiting time (transition will fire when t > waitTime)\""}, {"name": "enableFire", "type_name": "Boolean", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= true, if all firing conditions are true\""}, {"name": "t_start", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Time instant at which the transition would fire, if waitTime would be zero\""}, {"name": "t_dummy", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "1,\r\n      \"Connector inPort is not connected to exactly one other connector\")", "comment": null}, {"name": "PartialTransition", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialStateGraphIcon", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStepState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Interfaces", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "active", "type_name": "Boolean", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": "localActive", "comment": "\"= true, if step is active, otherwise the step is not active\""}, {"name": "InitialStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "InitialStepWithSignal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Step", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "StepWithSignal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "condition", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "true\r\n      \"= true, if transition may fire (time varying expression)\"\r\n    \r\n\r\n  extends Interfaces.PartialTransition(final localCondition=condition)", "comment": null}, {"name": "Transition", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TransitionWithSignal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Step_in_forAlternative", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Step_out_forAlternative", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Alternative", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Transition_in_forParallel", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Transition_out_forParallel", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Parallel", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "OuterState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "outerState", "type_name": "OuterState", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "InnerState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "innerState", "type_name": "InnerState", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "StateGraphRoot", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "t", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "t_start", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "example", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "paths", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "StateGraph", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "levels", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "time", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "step", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "active", "unit": "nIn", "display_unit": null, "quantity": null, "nominal": null}, {"name": "connectors", "unit": "nOut", "display_unit": null, "quantity": null, "nominal": null}, {"name": "aborted", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "branches", "unit": "nBranches", "display_unit": null, "quantity": null, "nominal": null}, {"name": "connector", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "parallel", "unit": "nBranches", "display_unit": null, "quantity": null, "nominal": null}, {"name": "CompositeStep", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "transition", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Alternative1", "CompositeStep1", "ControlledTanks1", "ControlledTanks1_small", "ControlledTanks2", "ControlledTanks2_small", "E", "Examples", "FillPattern", "Interfaces", "LinePattern", "Logical", "Martin", "Modelica", "Modelica.Blocks", "Modelica.Blocks.Interaction.Show", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Logical", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Icons", "Modelica.Math.BooleanVectors", "Modelica.StateGraph", "Modelica.StateGraph.Examples.Utilities", "Modelica.StateGraph.UsersGuide", "Modelica.Units", "Modelica.Units.SI", "ModelicaAdditions.Blocks", "NumericValue1", "Parallel1", "Parallel2", "Parallel3", "S", "S.S", "SI", "SSMsemantics", "SetBoolean1", "StateGraph", "StateGraph.Examples", "StateGraph.Interfaces", "StepAndTransition1", "StepAndTransition2", "StepAndTransition3", "StepAndTransition4", "T1", "T2", "T3", "T4", "T5", "T6", "Utilities", "alternative", "compositeStep", "compositeStep11", "compositeStep12", "dlr", "dx.doi", "e", "ecp09430108", "emptyTank2", "emptyTanks", "ep.liu", "exitStep", "fillTank1", "fillTank2", "github", "greaterEqual", "i", "inPort", "inflow1", "initStep", "initialStep", "innerState.stateGraphRoot.subgraphStatePort", "join", "lup.lub.lu", "machines", "makeProduct", "makeProduct.emptyTank2", "makeProduct.fillTank1", "makeProduct.fillTank2", "outPort", "outerState", "outerState.subgraphStatePort", "outerStatePort", "outerStatePort.subgraphStatePort", "outflow1", "resume", "s1", "s2", "scsc98fp", "session3a3", "setCondition", "setReal", "setValve1", "setValve2", "setValve3", "shut", "source", "specification.modelica", "split", "start", "stateGraphRoot", "stateMachine", "stateMachine.superstate1.superstate2", "statecharts", "step", "step0", "step1", "step2", "step3", "step4", "step4a", "step5", "step6", "stop", "subgraphStatePort", "superstate1.superstate2.step1", "suspend", "tank1", "tank2", "tankController", "timer", "transition", "transition1", "transition2", "transition3", "transition4", "transition4a", "transition5", "transition6", "transition6a", "transition7", "valve1", "valve2", "valve3", "wait1", "wait2", "www.i3s.unice", "www.inf.ed.ac", "www.modelica", "www.robotic.dlr"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.Information", "Modelica.Icons.ReleaseNotes", "Modelica.Icons.References", "Modelica.Icons.Contact", "Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Icons.UtilitiesPackage", "StateGraph.Interfaces.PartialStateGraphIcon", "StateGraph.PartialCompositeStep", "PartialCompositeStep", "Modelica.Icons.InterfacesPackage", "Interfaces.PartialStep", "Interfaces.PartialTransition", "StateGraph.Interfaces.CompositeStepState"]}
{"fqn": "Modelica.StateGraph.Interfaces", "kind": "package", "name": "Interfaces", "package_path": ["Modelica", "StateGraph"], "extends": ["Modelica.Icons.InterfacesPackage"], "imports": [], "parameters": [{"name": "enableTimer", "type": "Boolean", "default": "false \"= true, if timer is enabled\" parameter SI.Time waitTime(min=0) = 0 \"Wait time before transition fires\" output SI.Time t \"Actual waiting time (transition will fire when t > w", "description": null}], "equations": [{"equations": ["equation\r\n    suspend = subgraphStatePort.suspend", "resume  = subgraphStatePort.resume", "subgraphStatePort.activeStepsDummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2049, "end_line": 2052, "start_col": 3, "end_col": 44}}, {"equations": ["suspend = subgraphStatePort.suspend", "resume  = subgraphStatePort.resume", "subgraphStatePort.activeStepsDummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2050, "end_line": 2052, "start_col": 5, "end_col": 44}}, {"equations": ["subgraphStatePort.activeStepsDummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2052, "end_line": 2052, "start_col": 5, "end_col": 43}}, {"equations": ["resume  = subgraphStatePort.resume"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2051, "end_line": 2051, "start_col": 5, "end_col": 39}}, {"equations": ["suspend = subgraphStatePort.suspend"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2050, "end_line": 2050, "start_col": 5, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2049, "end_line": 2049, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\")", "// Handling of Timer\r\n    if enableTimer then\r\n      when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime", "else\r\n      when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire", "end if", "// Determine fire setting and report it to the connected step\r\n    enableFire = localCondition and inPort.available and not outPort.occupied", "inPort.reset = fire", "outPort.set = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1995, "end_line": 2021, "start_col": 3, "end_col": 24}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\")", "assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\")", "// Handling of Timer\r\n    if enableTimer then\r\n      when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime", "else\r\n      when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire", "end if", "// Determine fire setting and report it to the connected step\r\n    enableFire = localCondition and inPort.available and not outPort.occupied", "inPort.reset = fire", "outPort.set = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1996, "end_line": 2021, "start_col": 5, "end_col": 24}}, {"equations": ["outPort.set = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2021, "end_line": 2021, "start_col": 5, "end_col": 23}}, {"equations": ["inPort.reset = fire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2020, "end_line": 2020, "start_col": 5, "end_col": 24}}, {"equations": ["enableFire = localCondition and inPort.available and not outPort.occupied"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2019, "end_line": 2019, "start_col": 5, "end_col": 78}}, {"equations": ["if enableTimer then\r\n      when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime", "else\r\n      when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2002, "end_line": 2016, "start_col": 5, "end_col": 11}}, {"equations": ["when false then\r\n        t_start = pre(t_start)", "end when", "t_dummy = 0", "t = 0", "fire = enableFire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2010, "end_line": 2015, "start_col": 7, "end_col": 25}}, {"equations": ["fire = enableFire"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2015, "end_line": 2015, "start_col": 7, "end_col": 24}}, {"equations": ["t = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2014, "end_line": 2014, "start_col": 7, "end_col": 12}}, {"equations": ["t_dummy = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2013, "end_line": 2013, "start_col": 7, "end_col": 18}}, {"equations": ["when false then\r\n        t_start = pre(t_start)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2010, "end_line": 2012, "start_col": 7, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2012, "end_line": 2012, "start_col": 11, "end_col": 15}}, {"equations": ["t_start = pre(t_start)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2011, "end_line": 2011, "start_col": 9, "end_col": 32}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2010, "end_line": 2010, "start_col": 7, "end_col": 11}}, {"equations": ["when enableFire then\r\n        t_start = time", "end when", "t_dummy = time - t_start", "t = if enableFire then t_dummy else 0", "fire = enableFire and time >= t_start + waitTime"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2003, "end_line": 2008, "start_col": 7, "end_col": 56}}, {"equations": ["fire = enableFire and time >= t_start + waitTime"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2008, "end_line": 2008, "start_col": 7, "end_col": 55}}, {"equations": ["t = if enableFire then t_dummy else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2007, "end_line": 2007, "start_col": 7, "end_col": 44}}, {"equations": ["t_dummy = time - t_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2006, "end_line": 2006, "start_col": 7, "end_col": 31}}, {"equations": ["when enableFire then\r\n        t_start = time", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2003, "end_line": 2005, "start_col": 7, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2005, "end_line": 2005, "start_col": 11, "end_col": 15}}, {"equations": ["t_start = time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2004, "end_line": 2004, "start_col": 9, "end_col": 24}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2003, "end_line": 2003, "start_col": 7, "end_col": 11}}, {"equations": ["assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1998, "end_line": 1999, "start_col": 5, "end_col": 75}}, {"equations": ["assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1996, "end_line": 1997, "start_col": 5, "end_col": 74}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1995, "end_line": 1995, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(t_start) = time", "pre(enableFire) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1992, "end_line": 1994, "start_col": 3, "end_col": 29}}, {"equations": ["pre(t_start) = time", "pre(enableFire) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1993, "end_line": 1994, "start_col": 5, "end_col": 29}}, {"equations": ["pre(enableFire) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1994, "end_line": 1994, "start_col": 5, "end_col": 28}}, {"equations": ["pre(t_start) = time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1993, "end_line": 1993, "start_col": 5, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1992, "end_line": 1992, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "// set active state\r\n    localActive = pre(newActive)", "newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend", "// Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when", "// Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for", "for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for", "// Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for", "for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1911, "end_line": 1965, "start_col": 3, "end_col": 13}}, {"equations": ["connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "// set active state\r\n    localActive = pre(newActive)", "newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend", "// Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when", "// Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for", "for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for", "// Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for", "for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1912, "end_line": 1965, "start_col": 5, "end_col": 13}}, {"equations": ["for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1961, "end_line": 1965, "start_col": 5, "end_col": 12}}, {"equations": ["if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1962, "end_line": 1964, "start_col": 7, "end_col": 14}}, {"equations": ["outPort[i].reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1963, "end_line": 1963, "start_col": 9, "end_col": 34}}, {"equations": ["for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1955, "end_line": 1959, "start_col": 5, "end_col": 12}}, {"equations": ["if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1956, "end_line": 1958, "start_col": 7, "end_col": 14}}, {"equations": ["inPort[i].set = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1957, "end_line": 1957, "start_col": 9, "end_col": 31}}, {"equations": ["for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1948, "end_line": 1952, "start_col": 5, "end_col": 12}}, {"equations": ["outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1949, "end_line": 1951, "start_col": 8, "end_col": 65}}, {"equations": ["for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1942, "end_line": 1946, "start_col": 5, "end_col": 12}}, {"equations": ["inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1943, "end_line": 1945, "start_col": 7, "end_col": 59}}, {"equations": ["when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1937, "end_line": 1939, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1939, "end_line": 1939, "start_col": 9, "end_col": 13}}, {"equations": ["oldActive = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1938, "end_line": 1938, "start_col": 7, "end_col": 31}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1937, "end_line": 1937, "start_col": 5, "end_col": 9}}, {"equations": ["newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1929, "end_line": 1934, "start_col": 5, "end_col": 70}}, {"equations": ["localActive = pre(newActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1928, "end_line": 1928, "start_col": 5, "end_col": 33}}, {"equations": ["for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1921, "end_line": 1925, "start_col": 5, "end_col": 12}}, {"equations": ["assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1923, "end_line": 1924, "start_col": 5, "end_col": 88}}, {"equations": ["for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1915, "end_line": 1919, "start_col": 5, "end_col": 12}}, {"equations": ["assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1917, "end_line": 1918, "start_col": 5, "end_col": 88}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1911, "end_line": 1911, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(newActive) = pre(localActive)", "pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1908, "end_line": 1910, "start_col": 3, "end_col": 39}}, {"equations": ["pre(newActive) = pre(localActive)", "pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1909, "end_line": 1910, "start_col": 5, "end_col": 39}}, {"equations": ["pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1910, "end_line": 1910, "start_col": 5, "end_col": 38}}, {"equations": ["pre(newActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1909, "end_line": 1909, "start_col": 5, "end_col": 38}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1908, "end_line": 1908, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n      subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1900, "end_line": 1901, "start_col": 5, "end_col": 72}}, {"equations": ["subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1901, "end_line": 1901, "start_col": 7, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1900, "end_line": 1900, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.InterfacesPackage | components: Boolean×6, Real×2, CompositeStepStatePort_in×1 | connections: 1 | params: enableTimer | units: s, s, nIn ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1741, "end_line": 2058, "start_col": 1, "end_col": 15}, "code_text": "package Interfaces \"Connectors and partial models\"\r\n  extends Modelica.Icons.InterfacesPackage;\r\n\r\n  connector Step_in \"Input port of a step\"\r\n    output Boolean occupied \"= true, if step is active\" annotation (HideResult=true);\r\n    input Boolean set \"= true, if transition fires and step is activated\" annotation (HideResult=true);\r\n    annotation (\r\n   Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n              fillPattern=FillPattern.Solid)}),\r\n   Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{0,50},{100,0},{0,-50},{0,50}},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{-141,100},{100,60}},\r\n              textString=\"%name\")}));\r\n  end Step_in;\r\n\r\n  connector Step_out \"Output port of a step\"\r\n    output Boolean available \"= true, if step is active\" annotation (HideResult=true);\r\n\r\n    input Boolean reset \"= true, if transition fires and step is deactivated\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}),\r\n                              Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,50},{0,-50}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{-100,100},{186,58}},\r\n              textString=\"%name\")}));\r\n  end Step_out;\r\n\r\n  connector Transition_in \"Input port of a transition\"\r\n    input Boolean available\r\n        \"= true, if step connected to the transition input is active\"\r\n      annotation (HideResult=true);\r\n    output Boolean reset\r\n        \"= true, if transition fires and the step connected to the transition input is deactivated\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n              fillPattern=FillPattern.Solid)}),\r\n                                            Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n              points={{0,50},{100,0},{0,-50},{0,50}},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{-141,100},{100,60}},\r\n              textString=\"%name\")}));\r\n  end Transition_in;\r\n\r\n  connector Transition_out \"Output port of a transition\"\r\n    input Boolean occupied\r\n        \"= true, if step connected to the transition output is active\"\r\n      annotation (HideResult=true);\r\n    output Boolean set\r\n        \"= true, if transition fires and step connected to the transition output becomes active\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}),\r\n            Diagram(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={Text(\r\n              extent={{-100,100},{146,60}},\r\n              textString=\"%name\"), Rectangle(\r\n              extent={{-100,50},{0,-50}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}));\r\n  end Transition_out;\r\n\r\n  connector CompositeStep_resume\r\n      \"Input port of a step (used for resume connector of a CompositeStep)\"\r\n    output Boolean occupied \"= true, if step is active\" annotation (HideResult=true);\r\n    input Boolean set \"= true, if transition fires and step is activated\"\r\n      annotation (HideResult=true);\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Polygon(\r\n              points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n              fillPattern=FillPattern.Solid)}));\r\n  end CompositeStep_resume;\r\n\r\n  connector CompositeStep_suspend\r\n      \"Output port of a step (used for suspend connector of a CompositeStep)\"\r\n\r\n    output Boolean available \"= true, if step is active\" annotation (HideResult=true);\r\n\r\n    input Boolean reset \"= true, if transition fires and step is deactivated\"\r\n      annotation (HideResult=true);\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid)}));\r\n  end CompositeStep_suspend;\r\n\r\n  connector CompositeStepStatePort_in\r\n      \"Communication port between a CompositeStep and the ordinary steps within the CompositeStep (suspend/resume are inputs)\"\r\n\r\n    input Boolean suspend\r\n        \"= true, if suspend transition of CompositeStep fires\";\r\n    input Boolean resume \"= true, if resume transition of CompositeStep fires\";\r\n    Real activeStepsDummy\r\n        \"Dummy variable in order that connector fulfills restriction of connector\" annotation(HideResult=true);\r\n    flow Real activeSteps \"Number of active steps in the CompositeStep\";\r\n  end CompositeStepStatePort_in;\r\n\r\n  connector CompositeStepStatePort_out\r\n      \"Communication port between a CompositeStep and the ordinary steps within the CompositeStep (suspend/resume are outputs)\"\r\n\r\n    output Boolean suspend\r\n        \"= true, if suspend transition of CompositeStep fires\";\r\n    output Boolean resume \"= true, if resume transition of CompositeStep fires\";\r\n    Real activeStepsDummy\r\n        \"Dummy variable in order that connector fulfills restriction of connector\" annotation(HideResult=true);\r\n    flow Real activeSteps \"Number of active steps in the CompositeStep\";\r\n  end CompositeStepStatePort_out;\r\n\r\n  partial block PartialStep\r\n      \"Partial step with one input and one output transition port\"\r\n\r\n    parameter Integer nIn(min=0) = 0 \"Number of input connections\" annotation(Dialog(connectorSizing=true), HideResult=true);\r\n    parameter Integer nOut(min=0) = 0 \"Number of output connections\" annotation(Dialog(connectorSizing=true), HideResult=true);\r\n\r\n    /* localActive is introduced since component 'Step' has Boolean variable 'active'\r\n     and component 'StepWithSignal' has connector instance 'active' defined\r\n     and both components inherit from PartialStep\r\n  */\r\n    output Boolean localActive\r\n        \"= true, if step is active, otherwise the step is not active\"\r\n      annotation (HideResult=true);\r\n    Interfaces.Step_in inPort[nIn] \"Vector of step input connectors\"\r\n      annotation (Placement(transformation(extent={{-120,10},{-100,-10}})));\r\n    Interfaces.Step_out outPort[nOut] \"Vector of step output connectors\"\r\n      annotation (Placement(transformation(extent={{100,5},{110,-5}})));\r\n    protected\r\n    outer Interfaces.CompositeStepState stateGraphRoot;\r\n    model OuterStatePort\r\n      CompositeStepStatePort_in subgraphStatePort;\r\n      input Boolean localActive;\r\n    equation\r\n      subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0;\r\n    end OuterStatePort;\r\n    OuterStatePort outerStatePort(localActive=localActive);\r\n\r\n    Boolean newActive \"Value of active in the next iteration\"\r\n      annotation (HideResult=true);\r\n    Boolean oldActive \"Value of active when CompositeStep was aborted\";\r\n  initial equation\r\n    pre(newActive) = pre(localActive);\r\n    pre(oldActive) = pre(localActive);\r\n  equation\r\n    connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort);\r\n\r\n    // Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\");\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\");\r\n    end for;\r\n\r\n    // set active state\r\n    localActive = pre(newActive);\r\n    newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend;\r\n\r\n    // Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive;\r\n    end when;\r\n\r\n    // Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set;\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset;\r\n    end for;\r\n\r\n    // Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false;\r\n      end if;\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false;\r\n      end if;\r\n    end for;\r\n  end PartialStep;\r\n\r\n  partial block PartialTransition\r\n      \"Partial transition with input and output connections\"\r\n    input Boolean localCondition \"= true, if transition may fire\"\r\n      annotation (HideResult=true);\r\n    parameter Boolean enableTimer=false \"= true, if timer is enabled\"\r\n      annotation (Evaluate=true, Dialog(group=\"Timer\"));\r\n    parameter SI.Time waitTime(min=0) = 0\r\n        \"Wait time before transition fires\"\r\n      annotation (Dialog(group=\"Timer\", enable=enableTimer));\r\n    output SI.Time t\r\n        \"Actual waiting time (transition will fire when t > waitTime)\";\r\n    output Boolean enableFire \"= true, if all firing conditions are true\";\r\n    output Boolean fire \"= true, if transition fires\" annotation (HideResult=true);\r\n\r\n    StateGraph.Interfaces.Transition_in inPort\r\n        \"Vector of transition input connectors\"\r\n      annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n    StateGraph.Interfaces.Transition_out outPort\r\n        \"Vector of transition output connectors\"\r\n      annotation (Placement(transformation(extent={{10,-5},{20,5}})));\r\n    protected\r\n    discrete SI.Time t_start\r\n        \"Time instant at which the transition would fire, if waitTime would be zero\";\r\n    Real t_dummy;\r\n  initial equation\r\n    pre(t_start) = time;\r\n    pre(enableFire) = false;\r\n  equation\r\n    assert(cardinality(inPort) == 1,\r\n      \"Connector inPort is not connected to exactly one other connector\");\r\n    assert(cardinality(outPort) == 1,\r\n      \"Connector outPort is not connected to exactly one other connector\");\r\n\r\n    // Handling of Timer\r\n    if enableTimer then\r\n      when enableFire then\r\n        t_start = time;\r\n      end when;\r\n      t_dummy = time - t_start;\r\n      t = if enableFire then t_dummy else 0;\r\n      fire = enableFire and time >= t_start + waitTime;\r\n    else\r\n      when false then\r\n        t_start = pre(t_start);\r\n      end when;\r\n      t_dummy = 0;\r\n      t = 0;\r\n      fire = enableFire;\r\n    end if;\r\n\r\n    // Determine fire setting and report it to the connected step\r\n    enableFire = localCondition and inPort.available and not outPort.occupied;\r\n    inPort.reset = fire;\r\n    outPort.set = fire;\r\n  end PartialTransition;\r\n\r\n  partial block PartialStateGraphIcon \"Icon for a StateGraph object\"\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,100},{100,-100}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid), Text(\r\n              extent={{160,110},{-160,150}},\r\n              textString=\"%name\",\r\n              textColor={0,0,255})}));\r\n  end PartialStateGraphIcon;\r\n\r\n  model CompositeStepState\r\n      \"Communication channel between CompositeSteps and steps in the CompositeStep\"\r\n\r\n    output Boolean suspend = false \"= true, if suspend transition of CompositeStep fires\";\r\n    output Boolean resume =  false \"= true, if resume transition of CompositeStep fires\";\r\n    CompositeStepStatePort_out subgraphStatePort;\r\n\r\n  /*\r\n    missingInnerMessage=\"No \\\"stateGraphRoot\\\" component is defined on highest level\r\nof the StateGraph. A stateGraphRoot component is automatically introduced.\r\nIn order to get rid of this message, drag StateGraph.StateGraphRoot into the\r\ntop level your model.\");\r\n*/\r\n  equation\r\n    suspend = subgraphStatePort.suspend;\r\n    resume  = subgraphStatePort.resume;\r\n    subgraphStatePort.activeStepsDummy = 0;\r\n    annotation (\r\n      defaultComponentName=\"stateGraphRoot\",\r\n      defaultComponentPrefixes=\"inner\",\r\n      missingInnerMessage=\"A \\\"stateGraphRoot\\\" component was automatically introduced.\");\r\n  end CompositeStepState;\r\nend Interfaces", "checksum": "ca35bffb8c06612c3cd89d226e4f3f0718871755", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo:1741-2058", "component_count": 11, "connection_count": 1, "variable_count": 31, "physical_quantity_count": 5, "parameter_count": 1, "equation_count": 67, "dependency_count": 13, "has_physical_interface": true, "interface_component_count": 6, "has_connections": true, "is_composite_model": true, "complexity_score": 92.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation suspend = subgraphStatePort.suspend", "search_keywords": ["Boolean", "CompositeStepStatePort_in", "OuterStatePort", "Real", "Time", "nIn", "nOut", "system", "top"]}, "components": [{"name": "resume", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "if", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "activeSteps", "type_name": "Real", "prefixes": ["flow"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Number of active steps in the CompositeStep"}, {"name": "subgraphStatePort", "type_name": "CompositeStepStatePort_in", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "localActive", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "outerStatePort", "type_name": "OuterStatePort", "prefixes": [], "modifications": {"localActive": "localActive"}, "condition": null, "array_dims": null, "comment": null}, {"name": "oldActive", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Value of active when CompositeStep was aborted"}, {"name": "enableFire", "type_name": "Boolean", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "t_dummy", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "suspend", "type_name": "Boolean", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "level", "type_name": "top", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "outerStatePort.subgraphStatePort", "to_connector": "stateGraphRoot.subgraphStatePort", "condition": null}], "variables": [{"name": "Step_in", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Step_out", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Transition_in", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Transition_out", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep_resume", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep_suspend", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "suspend", "type_name": "equation", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "subgraphStatePort.suspend", "comment": "\"= true, if suspend transition of CompositeStep fires\""}, {"name": "resume", "type_name": "Boolean", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "false \"= true, if resume transition of CompositeStep fires\"", "comment": "\"= true, if resume transition of CompositeStep fires\""}, {"name": "activeSteps", "type_name": "Real", "prefixes": ["flow"], "attributes": {}, "binding_equation": null, "comment": "\"Number of active steps in the CompositeStep\""}, {"name": "CompositeStepStatePort_in", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStepStatePort_out", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "stateGraphRoot", "type_name": "Interfaces.CompositeStepState", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "subgraphStatePort", "type_name": "CompositeStepStatePort_out", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "localActive", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "OuterStatePort", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "outerStatePort", "type_name": "OuterStatePort", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "oldActive", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Value of active when CompositeStep was aborted\""}, {"name": "connect", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cardinality", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "0 then\r\n        outPort[i].reset = false", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "t", "type_name": "SI.Time", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Actual waiting time (transition will fire when t > waitTime)\""}, {"name": "enableFire", "type_name": "Boolean", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"= true, if all firing conditions are true\""}, {"name": "t_start", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Time instant at which the transition would fire, if waitTime would be zero\""}, {"name": "t_dummy", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "1,\r\n      \"Connector inPort is not connected to exactly one other connector\")", "comment": null}, {"name": "PartialTransition", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialStateGraphIcon", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStepState", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "t", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "t_start", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "active", "unit": "nIn", "display_unit": null, "quantity": null, "nominal": null}, {"name": "connectors", "unit": "nOut", "display_unit": null, "quantity": null, "nominal": null}, {"name": "aborted", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Interfaces", "Modelica.Icons", "Modelica.Math.BooleanVectors", "SI", "StateGraph", "StateGraph.Interfaces", "inPort", "outPort", "outerStatePort", "outerStatePort.subgraphStatePort", "stateGraphRoot", "subgraphStatePort"], "inheritance_chain": ["Modelica.Icons.InterfacesPackage"]}
{"fqn": "Modelica.StateGraph.Examples", "kind": "package", "name": "Examples", "package_path": ["Modelica", "StateGraph"], "extends": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Icons.UtilitiesPackage", "StateGraph.Interfaces.PartialStateGraphIcon", "StateGraph.PartialCompositeStep", "PartialCompositeStep"], "imports": [], "parameters": [{"name": "limit", "type": "Real", "default": "0.98 \"Limit level of tank 1\"", "description": null}, {"name": "waitTime", "type": "SI.Time", "default": "2 \"Waiting time in this composite step\"", "description": null}, {"name": "A", "type": "SI.Area", "default": "1 \"Ground area of tank\"", "description": null}, {"name": "a", "type": "SI.Area", "default": "0.2 \"Area of drain hole\"", "description": null}, {"name": "hmax", "type": "SI.Height", "default": "1 \"Max height of tank\"", "description": null}, {"name": "maxflow", "type": "Real", "default": "1 \"Maximal flow out of source\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}))", "connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1727, "end_line": 1735, "start_col": 5, "end_col": 55}}, {"equations": ["connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}))", "connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1728, "end_line": 1735, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1727, "end_line": 1727, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}))", "connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}))", "connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}))", "connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}))", "connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}))", "connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}))", "connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}))", "connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1690, "end_line": 1716, "start_col": 5, "end_col": 64}}, {"equations": ["connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}))", "connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}))", "connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}))", "connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}))", "connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}))", "connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}))", "connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}))", "connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1691, "end_line": 1716, "start_col": 7, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1690, "end_line": 1690, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}))", "connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}))", "connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}))", "connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}))", "connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}))", "connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}))", "connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}))", "connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}))", "connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}))", "connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1624, "end_line": 1656, "start_col": 5, "end_col": 62}}, {"equations": ["connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}))", "connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}))", "connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}))", "connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}))", "connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}))", "connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}))", "connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}))", "connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}))", "connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}))", "connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1625, "end_line": 1656, "start_col": 7, "end_col": 62}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1624, "end_line": 1624, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      if outflow1.open then\r\n        outflow1.Fo = maxflow", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1576, "end_line": 1581, "start_col": 5, "end_col": 14}}, {"equations": ["if outflow1.open then\r\n        outflow1.Fo = maxflow", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1577, "end_line": 1581, "start_col": 7, "end_col": 14}}, {"equations": ["outflow1.Fo = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1580, "end_line": 1580, "start_col": 9, "end_col": 25}}, {"equations": ["outflow1.Fo = maxflow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1578, "end_line": 1578, "start_col": 9, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1576, "end_line": 1576, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)", "if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if", "levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1542, "end_line": 1549, "start_col": 5, "end_col": 27}}, {"equations": ["der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)", "if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if", "levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1543, "end_line": 1549, "start_col": 7, "end_col": 27}}, {"equations": ["levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1549, "end_line": 1549, "start_col": 7, "end_col": 26}}, {"equations": ["if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1544, "end_line": 1548, "start_col": 7, "end_col": 13}}, {"equations": ["outflow1.Fo = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1547, "end_line": 1547, "start_col": 9, "end_col": 25}}, {"equations": ["outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1545, "end_line": 1545, "start_col": 9, "end_col": 53}}, {"equations": ["der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1543, "end_line": 1543, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1542, "end_line": 1542, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      outflow1.Fo = inflow1.Fi", "outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1506, "end_line": 1508, "start_col": 5, "end_col": 36}}, {"equations": ["outflow1.Fo = inflow1.Fi", "outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1507, "end_line": 1508, "start_col": 7, "end_col": 36}}, {"equations": ["outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1508, "end_line": 1508, "start_col": 7, "end_col": 35}}, {"equations": ["outflow1.Fo = inflow1.Fi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1507, "end_line": 1507, "start_col": 7, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1506, "end_line": 1506, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}))", "connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}))", "connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}))", "connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}))", "connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}))", "connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}))", "connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}))", "connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}))", "connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}))", "connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1407, "end_line": 1435, "start_col": 5, "end_col": 28}}, {"equations": ["connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}))", "connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}))", "connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}))", "connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}))", "connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}))", "connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}))", "connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}))", "connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}))", "connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}))", "connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1408, "end_line": 1435, "start_col": 7, "end_col": 28}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1407, "end_line": 1407, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n\r\n      connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}))", "connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}))", "connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}))", "connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}))", "connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}))", "connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}))", "connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}))", "connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}))", "connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}))", "connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}))", "connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}))", "connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}))", "connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}))", "connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}))", "connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}))", "connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1312, "end_line": 1352, "start_col": 5, "end_col": 71}}, {"equations": ["connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}))", "connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}))", "connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}))", "connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}))", "connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}))", "connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}))", "connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}))", "connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}))", "connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}))", "connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}))", "connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}))", "connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}))", "connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}))", "connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}))", "connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}))", "connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1314, "end_line": 1352, "start_col": 7, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1312, "end_line": 1312, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n    connect(tank1.outflow1, valve2.outflow1) annotation (Line(\r\n          points={{50,33.75},{50,26.875},{46.5,26.875},{46.5,16.5}},\r\n          thickness=0.5))", "connect(tank2.inflow1, valve2.inflow1) annotation (Line(\r\n          points={{46.5,-18.75},{46.5,9.5}},\r\n          thickness=0.5))", "connect(tank2.outflow1, valve3.outflow1) annotation (Line(\r\n          points={{74,-46.25},{74,-73.5},{73.5,-73.5}},\r\n          thickness=0.5))", "connect(tank1.inflow1, valve1.inflow1) annotation (Line(\r\n          points={{22.5,61.25},{22.5,69.25}},\r\n          thickness=0.5))", "connect(shut.on, tankController.shut) annotation (Line(points={{-69,-30},{\r\n              -62,-30},{-62,-12},{-52,-12}}, color={255,0,255}))", "connect(stop.on, tankController.stop) annotation (Line(points={{-69,0},{-52,\r\n              0}}, color={255,0,255}))", "connect(start.on, tankController.start) annotation (Line(points={{-69,30},{\r\n              -60,30},{-60,12},{-52,12}}, color={255,0,255}))", "connect(tank1.levelSensor, tankController.level1) annotation (Line(points={\r\n              {17.25,40},{-30,40},{-30,60},{-97,60},{-97,-50},{-42,-50},{-42,\r\n              -22}}, color={0,0,255}))", "connect(tank2.levelSensor, tankController.level2) annotation (Line(points={\r\n              {41.25,-40},{-18,-40},{-18,-22}}, color={0,0,255}))", "connect(tankController.valve1, valve1.valveControl) annotation (Line(points=\r\n             {{-9,12},{10,12},{10,72},{18.1,72}}, color={255,0,255}))", "connect(tankController.valve2, valve2.valveControl) annotation (Line(points={{-9,0},{\r\n              30,0},{30,13},{40.1,13}}, color={255,0,255}))", "connect(tankController.valve3, valve3.valveControl) annotation (Line(points=\r\n             {{-9,-12},{23,-12},{23,-77},{67.1,-77}}, color={255,0,255}))", "connect(source.outflow1, valve1.outflow1) annotation (Line(\r\n          points={{22.5,85.5},{22.5,74.75}},\r\n          thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1176, "end_line": 1209, "start_col": 3, "end_col": 27}}, {"equations": ["connect(tank1.outflow1, valve2.outflow1) annotation (Line(\r\n          points={{50,33.75},{50,26.875},{46.5,26.875},{46.5,16.5}},\r\n          thickness=0.5))", "connect(tank2.inflow1, valve2.inflow1) annotation (Line(\r\n          points={{46.5,-18.75},{46.5,9.5}},\r\n          thickness=0.5))", "connect(tank2.outflow1, valve3.outflow1) annotation (Line(\r\n          points={{74,-46.25},{74,-73.5},{73.5,-73.5}},\r\n          thickness=0.5))", "connect(tank1.inflow1, valve1.inflow1) annotation (Line(\r\n          points={{22.5,61.25},{22.5,69.25}},\r\n          thickness=0.5))", "connect(shut.on, tankController.shut) annotation (Line(points={{-69,-30},{\r\n              -62,-30},{-62,-12},{-52,-12}}, color={255,0,255}))", "connect(stop.on, tankController.stop) annotation (Line(points={{-69,0},{-52,\r\n              0}}, color={255,0,255}))", "connect(start.on, tankController.start) annotation (Line(points={{-69,30},{\r\n              -60,30},{-60,12},{-52,12}}, color={255,0,255}))", "connect(tank1.levelSensor, tankController.level1) annotation (Line(points={\r\n              {17.25,40},{-30,40},{-30,60},{-97,60},{-97,-50},{-42,-50},{-42,\r\n              -22}}, color={0,0,255}))", "connect(tank2.levelSensor, tankController.level2) annotation (Line(points={\r\n              {41.25,-40},{-18,-40},{-18,-22}}, color={0,0,255}))", "connect(tankController.valve1, valve1.valveControl) annotation (Line(points=\r\n             {{-9,12},{10,12},{10,72},{18.1,72}}, color={255,0,255}))", "connect(tankController.valve2, valve2.valveControl) annotation (Line(points={{-9,0},{\r\n              30,0},{30,13},{40.1,13}}, color={255,0,255}))", "connect(tankController.valve3, valve3.valveControl) annotation (Line(points=\r\n             {{-9,-12},{23,-12},{23,-77},{67.1,-77}}, color={255,0,255}))", "connect(source.outflow1, valve1.outflow1) annotation (Line(\r\n          points={{22.5,85.5},{22.5,74.75}},\r\n          thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1177, "end_line": 1209, "start_col": 5, "end_col": 27}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1176, "end_line": 1176, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(transition1.outPort, compositeStep.inPort)\r\n      annotation (Line(points={{-38.5,40},{-21,40}}))", "connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-59.5,40},{-44,40}}))", "connect(compositeStep.outPort, transition2.inPort)\r\n      annotation (Line(points={{10.5,40},{26,40}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{31.5,40},{46,40},{46,80},{-90,80},{-90,40},{-81,40}}))", "connect(compositeStep.suspend[1], transition3.inPort)\r\n                                                  annotation (Line(points={{-12.5,\r\n              24.5},{-12.5,10},{-60,10},{-60,-20},{-49,-20}}))", "connect(transition3.outPort, step1.inPort[1]) annotation (Line(points={{\r\n              -43.5,-20},{-25,-20}}))", "connect(step1.outPort[1], transition4.inPort)\r\n      annotation (Line(points={{-3.5,-20},{16,-20}}))", "connect(transition4.outPort, compositeStep.resume[1])\r\n                                                  annotation (Line(points={{21.5,\r\n              -20},{40,-20},{40,10},{2.5,10},{2.5,24}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1106, "end_line": 1125, "start_col": 3, "end_col": 58}}, {"equations": ["connect(transition1.outPort, compositeStep.inPort)\r\n      annotation (Line(points={{-38.5,40},{-21,40}}))", "connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-59.5,40},{-44,40}}))", "connect(compositeStep.outPort, transition2.inPort)\r\n      annotation (Line(points={{10.5,40},{26,40}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{31.5,40},{46,40},{46,80},{-90,80},{-90,40},{-81,40}}))", "connect(compositeStep.suspend[1], transition3.inPort)\r\n                                                  annotation (Line(points={{-12.5,\r\n              24.5},{-12.5,10},{-60,10},{-60,-20},{-49,-20}}))", "connect(transition3.outPort, step1.inPort[1]) annotation (Line(points={{\r\n              -43.5,-20},{-25,-20}}))", "connect(step1.outPort[1], transition4.inPort)\r\n      annotation (Line(points={{-3.5,-20},{16,-20}}))", "connect(transition4.outPort, compositeStep.resume[1])\r\n                                                  annotation (Line(points={{21.5,\r\n              -20},{40,-20},{40,10},{2.5,10},{2.5,24}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1108, "end_line": 1125, "start_col": 5, "end_col": 58}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1106, "end_line": 1106, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step0.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-68.5,0},{-53,0}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -1.5,-60},{-98,-60},{-98,0},{-90,0}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              91.5,0},{96,0},{96,-60},{4,-60}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(\r\n          points={{56.5,0},{70,0}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{-47.5,0},\r\n              {-30.99,0}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{36.66,0},\r\n              {51,0}}))", "connect(compositeStep.inPort, Parallel1.split[1])\r\n                                                 annotation (Line(points={{-11,20},\r\n              {-22.575,20}}))", "connect(compositeStep.outPort, Parallel1.join[1])\r\n                                                 annotation (Line(points={{20.5,20},\r\n              {28.575,20}}))", "connect(step1.inPort[1], Parallel1.split[2]) annotation (Line(points={{-5,-20},\r\n              {-10,-20},{-10,-20},{-14,-20},{-14,-20},{-22.575,-20}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{16.5,\r\n              -20},{28.575,-20}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -8.5,-80},{0,-80},{0,-72}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1048, "end_line": 1072, "start_col": 3, "end_col": 63}}, {"equations": ["connect(step0.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-68.5,0},{-53,0}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -1.5,-60},{-98,-60},{-98,0},{-90,0}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              91.5,0},{96,0},{96,-60},{4,-60}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(\r\n          points={{56.5,0},{70,0}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{-47.5,0},\r\n              {-30.99,0}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{36.66,0},\r\n              {51,0}}))", "connect(compositeStep.inPort, Parallel1.split[1])\r\n                                                 annotation (Line(points={{-11,20},\r\n              {-22.575,20}}))", "connect(compositeStep.outPort, Parallel1.join[1])\r\n                                                 annotation (Line(points={{20.5,20},\r\n              {28.575,20}}))", "connect(step1.inPort[1], Parallel1.split[2]) annotation (Line(points={{-5,-20},\r\n              {-10,-20},{-10,-20},{-14,-20},{-14,-20},{-22.575,-20}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{16.5,\r\n              -20},{28.575,-20}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -8.5,-80},{0,-80},{0,-72}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1049, "end_line": 1072, "start_col": 5, "end_col": 63}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1048, "end_line": 1048, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(transition3.outPort, step3.inPort[1])\r\n      annotation (Line(points={{-30.5,90},{-9,90}}))", "connect(step3.outPort[1], transition5.inPort)\r\n      annotation (Line(points={{12.5,90},{32,90}}))", "connect(transition4.outPort, step4.inPort[1])\r\n      annotation (Line(points={{-30.5,50},{-9,50}}))", "connect(step4.outPort[1], transition6.inPort)\r\n      annotation (Line(points={{12.5,50},{32,50}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -2.5,-124},{-149,-124},{-149,-90},{-141,-90}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              140.5,-90},{150,-90},{150,-124},{3,-124}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-9,10}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n      annotation (Line(points={{12.5,10},{32,10}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -16.1,-150},{-1,-150},{-1,-136}}, color={255,0,255}))", "connect(setReal.y, NumericValue1.numberPort) annotation (Line(\r\n          points={{42,-150},{59,-150}}, color={0,0,255}))", "connect(transition3.inPort, alternative.split[1]) annotation (Line(points={{-36,90},\r\n              {-55.09,90}}))", "connect(transition4.inPort, alternative.split[2]) annotation (Line(points={{-36,50},\r\n              {-55.09,50}}))", "connect(transition4a.inPort, alternative.split[3]) annotation (Line(points={{-36,10},\r\n              {-45.0125,10},{-45.0125,10},{-55.09,10}}))", "connect(transition5.outPort, alternative.join[1]) annotation (Line(points={{37.5,90},\r\n              {57.09,90}}))", "connect(transition6.outPort, alternative.join[2]) annotation (Line(points={{37.5,50},\r\n              {57.09,50}}))", "connect(transition6a.outPort, alternative.join[3]) annotation (Line(points={{37.5,10},\r\n              {46.7625,10},{46.7625,10},{57.09,10}}))", "connect(step2.outPort[1], alternative.inPort) annotation (Line(points={{\r\n              -77.5,50},{-72.13,50}}))", "connect(alternative.outPort, step5.inPort[1])\r\n      annotation (Line(points={{73.42,50},{79,50}}))", "connect(step2.inPort[1], Parallel1.split[1]) annotation (Line(points={{-99,\r\n              50},{-118,50},{-118,78},{-119.575,78},{-119.575,77.5}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{10.5,\r\n              -30},{118,-30},{118,-7.5},{117.575,-7.5}}))", "connect(step0.outPort[1], transition1.inPort) annotation (Line(points={{\r\n              -119.5,-90},{-94,-90}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(points={{\r\n              101.5,-90},{119,-90}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{\r\n              -88.5,-90},{-70,-90},{-70,-64},{-174,-64},{-174,35},{-158.59,35}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{\r\n              155.06,35},{168,35},{168,-60},{80,-60},{80,-90},{96,-90}}))", "connect(step5.outPort[1], Parallel1.join[1]) annotation (Line(points={{\r\n              100.5,50},{116,50},{116,77.5},{117.575,77.5}}))", "connect(Parallel1.split[2], step1.inPort[1]) annotation (Line(points={{\r\n              -119.575,-7.5},{-118,-8},{-118,-30},{-11,-30}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 948, "end_line": 1000, "start_col": 3, "end_col": 64}}, {"equations": ["connect(transition3.outPort, step3.inPort[1])\r\n      annotation (Line(points={{-30.5,90},{-9,90}}))", "connect(step3.outPort[1], transition5.inPort)\r\n      annotation (Line(points={{12.5,90},{32,90}}))", "connect(transition4.outPort, step4.inPort[1])\r\n      annotation (Line(points={{-30.5,50},{-9,50}}))", "connect(step4.outPort[1], transition6.inPort)\r\n      annotation (Line(points={{12.5,50},{32,50}}))", "connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -2.5,-124},{-149,-124},{-149,-90},{-141,-90}}))", "connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              140.5,-90},{150,-90},{150,-124},{3,-124}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-9,10}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n      annotation (Line(points={{12.5,10},{32,10}}))", "connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -16.1,-150},{-1,-150},{-1,-136}}, color={255,0,255}))", "connect(setReal.y, NumericValue1.numberPort) annotation (Line(\r\n          points={{42,-150},{59,-150}}, color={0,0,255}))", "connect(transition3.inPort, alternative.split[1]) annotation (Line(points={{-36,90},\r\n              {-55.09,90}}))", "connect(transition4.inPort, alternative.split[2]) annotation (Line(points={{-36,50},\r\n              {-55.09,50}}))", "connect(transition4a.inPort, alternative.split[3]) annotation (Line(points={{-36,10},\r\n              {-45.0125,10},{-45.0125,10},{-55.09,10}}))", "connect(transition5.outPort, alternative.join[1]) annotation (Line(points={{37.5,90},\r\n              {57.09,90}}))", "connect(transition6.outPort, alternative.join[2]) annotation (Line(points={{37.5,50},\r\n              {57.09,50}}))", "connect(transition6a.outPort, alternative.join[3]) annotation (Line(points={{37.5,10},\r\n              {46.7625,10},{46.7625,10},{57.09,10}}))", "connect(step2.outPort[1], alternative.inPort) annotation (Line(points={{\r\n              -77.5,50},{-72.13,50}}))", "connect(alternative.outPort, step5.inPort[1])\r\n      annotation (Line(points={{73.42,50},{79,50}}))", "connect(step2.inPort[1], Parallel1.split[1]) annotation (Line(points={{-99,\r\n              50},{-118,50},{-118,78},{-119.575,78},{-119.575,77.5}}))", "connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{10.5,\r\n              -30},{118,-30},{118,-7.5},{117.575,-7.5}}))", "connect(step0.outPort[1], transition1.inPort) annotation (Line(points={{\r\n              -119.5,-90},{-94,-90}}))", "connect(transition2.outPort, step6.inPort[1]) annotation (Line(points={{\r\n              101.5,-90},{119,-90}}))", "connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{\r\n              -88.5,-90},{-70,-90},{-70,-64},{-174,-64},{-174,35},{-158.59,35}}))", "connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{\r\n              155.06,35},{168,35},{168,-60},{80,-60},{80,-90},{96,-90}}))", "connect(step5.outPort[1], Parallel1.join[1]) annotation (Line(points={{\r\n              100.5,50},{116,50},{116,77.5},{117.575,77.5}}))", "connect(Parallel1.split[2], step1.inPort[1]) annotation (Line(points={{\r\n              -119.575,-7.5},{-118,-8},{-118,-30},{-11,-30}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 949, "end_line": 1000, "start_col": 5, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 948, "end_line": 948, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-9.5},{\r\n              -4,-18},{-4,-18}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{62,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{67.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))", "connect(SetBoolean1.y, transition2.condition) annotation (Line(points={{\r\n              61.6,-30},{66,-30},{66,-2}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 871, "end_line": 885, "start_col": 3, "end_col": 64}}, {"equations": ["connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-9.5},{\r\n              -4,-18},{-4,-18}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{62,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{67.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))", "connect(SetBoolean1.y, transition2.condition) annotation (Line(points={{\r\n              61.6,-30},{66,-30},{66,-2}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 873, "end_line": 885, "start_col": 5, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 871, "end_line": 871, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-30},{4,\r\n              -30}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{58,10}}))", "connect(timer.y, greaterEqual.u)\r\n      annotation (Line(points={{27,-30},{34,-30}}, color={0,0,255}))", "connect(greaterEqual.y, transition2.condition) annotation (Line(points={{57,\r\n              -30},{62,-30},{62,-2}}, color={255,0,255}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{63.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 831, "end_line": 847, "start_col": 3, "end_col": 71}}, {"equations": ["connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}))", "connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-30},{4,\r\n              -30}}, color={255,0,255}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{58,10}}))", "connect(timer.y, greaterEqual.u)\r\n      annotation (Line(points={{27,-30},{34,-30}}, color={0,0,255}))", "connect(greaterEqual.y, transition2.condition) annotation (Line(points={{57,\r\n              -30},{62,-30},{62,-2}}, color={255,0,255}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{63.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 833, "end_line": 847, "start_col": 5, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 831, "end_line": 831, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-27.5,10},{-14,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-8.5,10},{9,10}}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{30.5,10},{46,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{51.5,10},{70,10},{70,32},{-62,32},{-62,10},{-49,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 802, "end_line": 811, "start_col": 3, "end_col": 71}}, {"equations": ["connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-27.5,10},{-14,10}}))", "connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-8.5,10},{9,10}}))", "connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{30.5,10},{46,10}}))", "connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{51.5,10},{70,10},{70,32},{-62,32},{-62,10},{-49,10}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 804, "end_line": 811, "start_col": 5, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 802, "end_line": 802, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.ExamplesPackage | components: SI.VolumeFlowRate×2, Real×2, Boolean×1 | connections: 101 | params: limit, waitTime, A | units: 1, 1, 2 | e", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 787, "end_line": 1739, "start_col": 1, "end_col": 13}, "code_text": "package Examples\r\n    \"Examples to demonstrate the usage of the components of the StateGraph library\"\r\n  extends Modelica.Icons.ExamplesPackage;\r\n\r\n  model FirstExample \"A first simple StateGraph example\"\r\n    extends Modelica.Icons.Example;\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-48,0},\r\n                {-28,20}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n    Step step(nIn=1, nOut=1) annotation (Placement(transformation(extent={{10,0},{30,20}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n  equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-27.5,10},{-14,10}}));\r\n    connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-8.5,10},{9,10}}));\r\n    connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{30.5,10},{46,10}}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{51.5,10},{70,10},{70,32},{-62,32},{-62,10},{-49,10}}));\r\n    annotation (experiment(StopTime=5.5));\r\n  end FirstExample;\r\n\r\n  model FirstExample_Variant2\r\n      \"A variant of the first simple StateGraph example\"\r\n    extends Modelica.Icons.Example;\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-70,0},{-50,20}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-42,0},{-22,20}})));\r\n    StepWithSignal step(nIn=1, nOut=1)\r\n              annotation (Placement(transformation(extent={{-14,0},{6,20}})));\r\n    TransitionWithSignal transition2\r\n      annotation (Placement(transformation(extent={{52,0},{72,20}})));\r\n    Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(\r\n              extent={{6,-40},{26,-20}})));\r\n    Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqual(threshold=1)\r\n      annotation (Placement(transformation(extent={{36,-40},{56,-20}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n  equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}));\r\n\r\n    connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}));\r\n    connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-30},{4,\r\n              -30}}, color={255,0,255}));\r\n    connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{58,10}}));\r\n    connect(timer.y, greaterEqual.u)\r\n      annotation (Line(points={{27,-30},{34,-30}}, color={0,0,255}));\r\n    connect(greaterEqual.y, transition2.condition) annotation (Line(points={{57,\r\n              -30},{62,-30},{62,-2}}, color={255,0,255}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{63.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}));\r\n    annotation (experiment(StopTime=5.5));\r\n  end FirstExample_Variant2;\r\n\r\n  model FirstExample_Variant3\r\n      \"A variant of the first simple StateGraph example\"\r\n    extends Modelica.Icons.Example;\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-70,0},{-50,20}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-42,0},{-22,20}})));\r\n    StepWithSignal step(nIn=1, nOut=1)\r\n              annotation (Placement(transformation(extent={{-14,0},{6,20}})));\r\n    TransitionWithSignal transition2\r\n      annotation (Placement(transformation(extent={{56,0},{76,20}})));\r\n    Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(\r\n            origin={-4,-30},\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=270)));\r\n    Modelica.Blocks.Sources.BooleanExpression SetBoolean1(y=timer.y > 1) annotation (Placement(\r\n            transformation(extent={{28,-40},{60,-20}})));\r\n    Modelica.Blocks.Sources.BooleanExpression SetBoolean2(y=step.active) annotation (Placement(\r\n            transformation(extent={{-68,-40},{-36,-20}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n  equation\r\n\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-49.5,10},{-36,10}}));\r\n\r\n    connect(transition1.outPort, step.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-15,10}}));\r\n    connect(step.active, timer.u) annotation (Line(points={{-4,-1},{-4,-9.5},{\r\n              -4,-18},{-4,-18}}, color={255,0,255}));\r\n    connect(step.outPort[1], transition2.inPort)\r\n      annotation (Line(points={{6.5,10},{62,10}}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{67.5,10},{82,10},{82,32},{-80,32},{-80,10},{-71,10}}));\r\n    connect(SetBoolean1.y, transition2.condition) annotation (Line(points={{\r\n              61.6,-30},{66,-30},{66,-2}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=5.5));\r\n  end FirstExample_Variant3;\r\n\r\n  model ExecutionPaths\r\n      \"Example to demonstrate parallel and alternative execution paths\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    InitialStep step0(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-140,-100},{-120,-80}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-100,-100},{-80,-80}})));\r\n    Step step1(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{90,-100},{110,-80}})));\r\n    Step step6(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{120,-100},{140,-80}})));\r\n    Step step2(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-98,40},{-78,60}})));\r\n    Transition transition3(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-42,80},{-22,100}})));\r\n    Transition transition4(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-42,40},{-22,60}})));\r\n    Step step3(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-8,80},{12,100}})));\r\n    Step step4(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-8,40},{12,60}})));\r\n    Transition transition5(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{26,80},{46,100}})));\r\n    Transition transition6(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{26,40},{46,60}})));\r\n    Step step5(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{80,40},{100,60}})));\r\n    Modelica.Blocks.Sources.RealExpression setReal(y=time)\r\n      annotation (Placement(transformation(extent={{21,-160},{41,-140}})));\r\n    TransitionWithSignal transition7 annotation (Placement(transformation(\r\n              extent={{9,-134},{-11,-114}})));\r\n    Modelica.Blocks.Sources.BooleanExpression setCondition(y=time >= 7)\r\n      annotation (Placement(transformation(extent={{-77,-160},{-19,-140}})));\r\n    Transition transition4a(enableTimer=true, waitTime=1)\r\n      annotation (Placement(transformation(extent={{-42,0},{-22,20}})));\r\n    Step step4a(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-8,0},{12,20}})));\r\n    Transition transition6a(enableTimer=true, waitTime=2)\r\n      annotation (Placement(\r\n            transformation(extent={{26,0},{46,20}})));\r\n    Modelica.Blocks.Interaction.Show.RealValue NumericValue1(\r\n      significantDigits=3)\r\n      annotation (Placement(transformation(extent={{61,-160},{81,-140}})));\r\n    Alternative alternative(nBranches=3) annotation (Placement(transformation(\r\n              extent={{-70,-10},{72,110}})));\r\n    Parallel Parallel1 annotation (Placement(transformation(extent={{-154,-50},\r\n                {152,120}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-160,120},{-140,140}})));\r\n  equation\r\n    connect(transition3.outPort, step3.inPort[1])\r\n      annotation (Line(points={{-30.5,90},{-9,90}}));\r\n    connect(step3.outPort[1], transition5.inPort)\r\n      annotation (Line(points={{12.5,90},{32,90}}));\r\n    connect(transition4.outPort, step4.inPort[1])\r\n      annotation (Line(points={{-30.5,50},{-9,50}}));\r\n    connect(step4.outPort[1], transition6.inPort)\r\n      annotation (Line(points={{12.5,50},{32,50}}));\r\n    connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -2.5,-124},{-149,-124},{-149,-90},{-141,-90}}));\r\n    connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              140.5,-90},{150,-90},{150,-124},{3,-124}}));\r\n    connect(transition4a.outPort, step4a.inPort[1])\r\n      annotation (Line(points={{-30.5,10},{-9,10}}));\r\n    connect(step4a.outPort[1], transition6a.inPort)\r\n      annotation (Line(points={{12.5,10},{32,10}}));\r\n    connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -16.1,-150},{-1,-150},{-1,-136}}, color={255,0,255}));\r\n    connect(setReal.y, NumericValue1.numberPort) annotation (Line(\r\n          points={{42,-150},{59,-150}}, color={0,0,255}));\r\n    connect(transition3.inPort, alternative.split[1]) annotation (Line(points={{-36,90},\r\n              {-55.09,90}}));\r\n    connect(transition4.inPort, alternative.split[2]) annotation (Line(points={{-36,50},\r\n              {-55.09,50}}));\r\n    connect(transition4a.inPort, alternative.split[3]) annotation (Line(points={{-36,10},\r\n              {-45.0125,10},{-45.0125,10},{-55.09,10}}));\r\n    connect(transition5.outPort, alternative.join[1]) annotation (Line(points={{37.5,90},\r\n              {57.09,90}}));\r\n    connect(transition6.outPort, alternative.join[2]) annotation (Line(points={{37.5,50},\r\n              {57.09,50}}));\r\n    connect(transition6a.outPort, alternative.join[3]) annotation (Line(points={{37.5,10},\r\n              {46.7625,10},{46.7625,10},{57.09,10}}));\r\n    connect(step2.outPort[1], alternative.inPort) annotation (Line(points={{\r\n              -77.5,50},{-72.13,50}}));\r\n    connect(alternative.outPort, step5.inPort[1])\r\n      annotation (Line(points={{73.42,50},{79,50}}));\r\n    connect(step2.inPort[1], Parallel1.split[1]) annotation (Line(points={{-99,\r\n              50},{-118,50},{-118,78},{-119.575,78},{-119.575,77.5}}));\r\n    connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{10.5,\r\n              -30},{118,-30},{118,-7.5},{117.575,-7.5}}));\r\n    connect(step0.outPort[1], transition1.inPort) annotation (Line(points={{\r\n              -119.5,-90},{-94,-90}}));\r\n    connect(transition2.outPort, step6.inPort[1]) annotation (Line(points={{\r\n              101.5,-90},{119,-90}}));\r\n    connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{\r\n              -88.5,-90},{-70,-90},{-70,-64},{-174,-64},{-174,35},{-158.59,35}}));\r\n    connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{\r\n              155.06,35},{168,35},{168,-60},{80,-60},{80,-90},{96,-90}}));\r\n    connect(step5.outPort[1], Parallel1.join[1]) annotation (Line(points={{\r\n              100.5,50},{116,50},{116,77.5},{117.575,77.5}}));\r\n    connect(Parallel1.split[2], step1.inPort[1]) annotation (Line(points={{\r\n              -119.575,-7.5},{-118,-8},{-118,-30},{-11,-30}}));\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis is an example to demonstrate in which way <strong>parallel</strong> activities\r\ncan be modelled by a StateGraph. When transition1 fires\r\n(after 1 second), two branches are executed in parallel.\r\nAfter 6 seconds the two branches are synchronized in order to arrive\r\nat step6.\r\n</p>\r\n<p>\r\nBefore simulating the model, try to figure out whether which branch\r\nof the alternative sequence is executed. Note, that alternatives\r\nhave priorities according to the port index (alternative.split[1]\r\nhas a higher priority to fire as alternative.split[2]).\r\n</p>\r\n</html>\"),      experiment(StopTime=15.5),\r\n        Diagram(coordinateSystem(extent={{-200,-200},{200,200}})));\r\n  end ExecutionPaths;\r\n\r\n  model ShowCompositeStep\r\n      \"Example to demonstrate parallel activities described by a StateGraph\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Utilities.CompositeStep compositeStep\r\n                                     annotation (Placement(transformation(\r\n              extent={{-10,5},{20,35}})));\r\n    InitialStep step0(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-89,-10},{-69,10}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-59,-10},{-39,10}})));\r\n    Step step1(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{-4,-30},{16,-10}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{45,-10},{65,10}})));\r\n    Step step6(nIn=1, nOut=1) annotation (Placement(\r\n            transformation(extent={{71,-10},{91,10}})));\r\n    TransitionWithSignal transition7 annotation (Placement(transformation(\r\n              extent={{10,-70},{-10,-50}})));\r\n    Parallel Parallel1 annotation (Placement(transformation(extent={{-30,-40},{\r\n                36,40}})));\r\n    Modelica.Blocks.Sources.BooleanExpression setCondition(y=time >= 7)\r\n      annotation (Placement(transformation(extent={{-40,-90},{-10,-70}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-90,50},{-70,70}})));\r\n  equation\r\n    connect(step0.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-68.5,0},{-53,0}}));\r\n    connect(transition7.outPort, step0.inPort[1]) annotation (Line(points={{\r\n              -1.5,-60},{-98,-60},{-98,0},{-90,0}}));\r\n    connect(step6.outPort[1], transition7.inPort) annotation (Line(points={{\r\n              91.5,0},{96,0},{96,-60},{4,-60}}));\r\n    connect(transition2.outPort, step6.inPort[1]) annotation (Line(\r\n          points={{56.5,0},{70,0}}));\r\n    connect(transition1.outPort, Parallel1.inPort) annotation (Line(points={{-47.5,0},\r\n              {-30.99,0}}));\r\n    connect(Parallel1.outPort, transition2.inPort) annotation (Line(points={{36.66,0},\r\n              {51,0}}));\r\n    connect(compositeStep.inPort, Parallel1.split[1])\r\n                                                 annotation (Line(points={{-11,20},\r\n              {-22.575,20}}));\r\n    connect(compositeStep.outPort, Parallel1.join[1])\r\n                                                 annotation (Line(points={{20.5,20},\r\n              {28.575,20}}));\r\n    connect(step1.inPort[1], Parallel1.split[2]) annotation (Line(points={{-5,-20},\r\n              {-10,-20},{-10,-20},{-14,-20},{-14,-20},{-22.575,-20}}));\r\n    connect(step1.outPort[1], Parallel1.join[2]) annotation (Line(points={{16.5,\r\n              -20},{28.575,-20}}));\r\n    connect(setCondition.y, transition7.condition) annotation (Line(points={{\r\n              -8.5,-80},{0,-80},{0,-72}}, color={255,0,255}));\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis is the same example as \\\"ExecutionPaths\\\". The only difference\r\nis that the alternative paths are included in a \\\"CompositeStep\\\".\r\n</p>\r\n</html>\"), experiment(StopTime=15));\r\n  end ShowCompositeStep;\r\n\r\n  model ShowExceptions\r\n      \"Example to demonstrate how a hierarchically structured StateGraph can suspend and resume actions on different levels\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Utilities.CompositeStep1 compositeStep annotation (Placement(transformation(extent={{\r\n                -20,25},{10,55}})));\r\n    InitialStep initialStep(nIn=1, nOut=1) annotation (\r\n          Placement(transformation(extent={{-80,30},{-60,50}})));\r\n    Transition transition1(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{-50,30},{-30,50}})));\r\n    Transition transition2(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{20,30},{40,50}})));\r\n    Transition transition3(enableTimer=true, waitTime=2)\r\n      annotation (Placement(\r\n            transformation(extent={{-55,-30},{-35,-10}})));\r\n    Step step1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-24,-30},{-4,-10}})));\r\n    Transition transition4(enableTimer=true, waitTime=1)\r\n      annotation (Placement(\r\n            transformation(extent={{10,-30},{30,-10}})));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-90,-80},{-70,-60}})));\r\n  equation\r\n\r\n    connect(transition1.outPort, compositeStep.inPort)\r\n      annotation (Line(points={{-38.5,40},{-21,40}}));\r\n    connect(initialStep.outPort[1], transition1.inPort)\r\n      annotation (Line(points={{-59.5,40},{-44,40}}));\r\n    connect(compositeStep.outPort, transition2.inPort)\r\n      annotation (Line(points={{10.5,40},{26,40}}));\r\n    connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points=\r\n             {{31.5,40},{46,40},{46,80},{-90,80},{-90,40},{-81,40}}));\r\n    connect(compositeStep.suspend[1], transition3.inPort)\r\n                                                  annotation (Line(points={{-12.5,\r\n              24.5},{-12.5,10},{-60,10},{-60,-20},{-49,-20}}));\r\n    connect(transition3.outPort, step1.inPort[1]) annotation (Line(points={{\r\n              -43.5,-20},{-25,-20}}));\r\n    connect(step1.outPort[1], transition4.inPort)\r\n      annotation (Line(points={{-3.5,-20},{16,-20}}));\r\n    connect(transition4.outPort, compositeStep.resume[1])\r\n                                                  annotation (Line(points={{21.5,\r\n              -20},{40,-20},{40,10},{2.5,10},{2.5,24}}));\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nCompositeStep \\\"compositeStep\\\" is a hierarchical StateGraph consisting of\r\ntwo other subgraphs. Whenever component \\\"compositeStep\\\" is suspended,\r\nall steps with in \\\"compositeStep\\\" are deactivated. By entering \\\"compositeStep\\\"\r\nvia its \\\"resume\\\" port, all steps within \\\"compositeStep\\\" are activated\r\naccording to their setting before leaving the \\\"compositeStep\\\" via its\r\n\\\"suspend\\\" port.\r\n</p>\r\n</html>\"),experiment(StopTime=20));\r\n  end ShowExceptions;\r\n\r\n  model ControlledTanks\r\n      \"Demonstrating the controller of a tank filling/emptying system\"\r\n    extends Modelica.Icons.Example;\r\n    Utilities.TankController tankController\r\n      annotation (Placement(transformation(extent={{-50,-20},{-10,20}})));\r\n    Modelica.Blocks.Sources.RadioButtonSource start(reset={stop.on,shut.on},\r\n        buttonTimeTable={1,13,15,19})\r\n      annotation (Placement(transformation(extent={{-90,20},{-70,40}})));\r\n    Modelica.Blocks.Sources.RadioButtonSource stop(reset={start.on,shut.on},\r\n        buttonTimeTable={13,15,19,21})\r\n      annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));\r\n    Modelica.Blocks.Sources.RadioButtonSource shut(reset={start.on,stop.on},\r\n        buttonTimeTable={21,100})\r\n      annotation (Placement(transformation(extent={{-90,-40},{-70,-20}})));\r\n\r\n    Utilities.Tank tank1 annotation (Placement(transformation(extent={{10,20},{\r\n                60,70}})));\r\n    Utilities.Tank tank2 annotation (Placement(transformation(extent={{34,-60},\r\n                {84,-10}})));\r\n    Utilities.valve valve1\r\n      annotation (Placement(transformation(\r\n            origin={22.5,72},\r\n            extent={{-5.5,-5.5},{5.5,5.5}},\r\n            rotation=270)));\r\n    Utilities.Source source annotation (Placement(transformation(extent={{12.5,\r\n                80.5},{32.5,100.5}})));\r\n    Utilities.valve valve2 annotation (Placement(transformation(\r\n            origin={46.5,13},\r\n            extent={{-7,-8},{7,8}},\r\n            rotation=270)));\r\n    Utilities.valve valve3\r\n      annotation (Placement(transformation(\r\n            origin={73.5,-77},\r\n            extent={{-7,-8},{7,8}},\r\n            rotation=270)));\r\n      inner StateGraphRoot stateGraphRoot\r\n        annotation (Placement(transformation(extent={{-90,75},{-70,95}})));\r\n  equation\r\n    connect(tank1.outflow1, valve2.outflow1) annotation (Line(\r\n          points={{50,33.75},{50,26.875},{46.5,26.875},{46.5,16.5}},\r\n          thickness=0.5));\r\n    connect(tank2.inflow1, valve2.inflow1) annotation (Line(\r\n          points={{46.5,-18.75},{46.5,9.5}},\r\n          thickness=0.5));\r\n    connect(tank2.outflow1, valve3.outflow1) annotation (Line(\r\n          points={{74,-46.25},{74,-73.5},{73.5,-73.5}},\r\n          thickness=0.5));\r\n    connect(tank1.inflow1, valve1.inflow1) annotation (Line(\r\n          points={{22.5,61.25},{22.5,69.25}},\r\n          thickness=0.5));\r\n    connect(shut.on, tankController.shut) annotation (Line(points={{-69,-30},{\r\n              -62,-30},{-62,-12},{-52,-12}}, color={255,0,255}));\r\n    connect(stop.on, tankController.stop) annotation (Line(points={{-69,0},{-52,\r\n              0}}, color={255,0,255}));\r\n    connect(start.on, tankController.start) annotation (Line(points={{-69,30},{\r\n              -60,30},{-60,12},{-52,12}}, color={255,0,255}));\r\n    connect(tank1.levelSensor, tankController.level1) annotation (Line(points={\r\n              {17.25,40},{-30,40},{-30,60},{-97,60},{-97,-50},{-42,-50},{-42,\r\n              -22}}, color={0,0,255}));\r\n    connect(tank2.levelSensor, tankController.level2) annotation (Line(points={\r\n              {41.25,-40},{-18,-40},{-18,-22}}, color={0,0,255}));\r\n    connect(tankController.valve1, valve1.valveControl) annotation (Line(points=\r\n             {{-9,12},{10,12},{10,72},{18.1,72}}, color={255,0,255}));\r\n    connect(tankController.valve2, valve2.valveControl) annotation (Line(points={{-9,0},{\r\n              30,0},{30,13},{40.1,13}}, color={255,0,255}));\r\n    connect(tankController.valve3, valve3.valveControl) annotation (Line(points=\r\n             {{-9,-12},{23,-12},{23,-77},{67.1,-77}}, color={255,0,255}));\r\n\r\n    connect(source.outflow1, valve1.outflow1) annotation (Line(\r\n          points={{22.5,85.5},{22.5,74.75}},\r\n          thickness=0.5));\r\n\r\n    annotation (experiment(StopTime=100),\r\n      Documentation(info=\"<html>\r\n<p>\r\nWith this example the controller of a tank filling/emptying system\r\nis demonstrated. This example is from Dressler (2004),\r\nsee <a href=\\\"modelica://Modelica.StateGraph.UsersGuide.Literature\\\">Literature</a>.\r\nThe basic operation is to fill and empty the two tanks:\r\n</p>\r\n<ol>\r\n<li> Valve 1 is opened and tank 1 is filled.</li>\r\n<li> When tank 1 reaches its fill level limit,\r\n     valve 1 is closed.</li>\r\n<li> After a waiting time, valve 2 is\r\n     opened and the fluid flows from tank 1 into tank 2.</li>\r\n<li> When tank 1 is empty, valve 2 is closed.</li>\r\n<li> After a waiting time, valve 3 is opened and\r\n     the fluid flows out of tank 2</li>\r\n<li> When tank 3 is empty, valve 3 is closed</li>\r\n</ol>\r\n<p>\r\nThe above \\\"normal\\\" process can be influenced by three\r\nbuttons:\r\n</p>\r\n<ul>\r\n<li> Button <strong>start</strong> starts the above process.\r\n     When this button is pressed after a \\\"stop\\\" or\r\n     \\\"shut\\\" operation, the process operation continues.\r\n     </li>\r\n<li> Button <strong>stop</strong> stops the above process by\r\n     closing all valves. Then, the controller waits for\r\n     further input (either \\\"start\\\" or \\\"shut\\\" operation).</li>\r\n<li> Button <strong>shut</strong> is used to shutdown the process,\r\n     by emptying at once both tanks. When this is achieved,\r\n     the process goes back to its start configuration.\r\n     Clicking on \\\"start\\\", restarts the process.</li>\r\n</ul>\r\n\r\n</html>\"));\r\n  end ControlledTanks;\r\n\r\n  package Utilities \"Utility components for the examples\"\r\n    extends Modelica.Icons.UtilitiesPackage;\r\n\r\n    model TankController \"Controller for tank system\"\r\n      extends StateGraph.Interfaces.PartialStateGraphIcon;\r\n      parameter Real limit=0.98 \"Limit level of tank 1\";\r\n      parameter SI.Time waitTime=3 \"Wait time\";\r\n\r\n      InitialStep s1(nIn=2, nOut=1)\r\n        annotation (Placement(transformation(extent={{-72,30},{-52,50}})));\r\n      MakeProduct makeProduct(limit=limit, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-20,25},{10,55}})));\r\n      Transition T1(condition=start)\r\n        annotation (Placement(transformation(extent={{-50,50},{-30,30}})));\r\n      Transition T2(condition=level2<0.001)\r\n        annotation (Placement(transformation(extent={{27,50},{47,30}})));\r\n      Transition T3(condition=stop)\r\n        annotation (Placement(transformation(\r\n              origin={-23,-1},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=270)));\r\n      Step s2(nIn=1, nOut=2)\r\n              annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));\r\n      Transition T4(condition=start)\r\n        annotation (Placement(transformation(\r\n              origin={10,-1},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Transition T5(condition=shut) annotation (Placement(transformation(extent=\r\n                 {{-6,-60},{14,-40}})));\r\n      Step emptyTanks(nIn=1, nOut=1) annotation (Placement(transformation(extent={{22,-60},{42,-40}})));\r\n      Transition T6(condition=level1+level2<0.001)\r\n        annotation (Placement(transformation(extent={{45,-60},{65,-40}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput start\r\n        annotation (Placement(transformation(extent={{-120,50},{-100,70}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput stop\r\n        annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput shut\r\n        annotation (Placement(transformation(extent={{-120,-70},{-100,-50}})));\r\n      Modelica.Blocks.Interfaces.RealInput level1\r\n        annotation (Placement(transformation(\r\n              origin={-60,-110},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Modelica.Blocks.Interfaces.RealInput level2\r\n        annotation (Placement(transformation(\r\n              origin={60,-110},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve1\r\n        annotation (Placement(transformation(extent={{100,55},{110,65}})));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve2\r\n        annotation (Placement(transformation(extent={{100,-5},{110,5}})));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve3\r\n        annotation (Placement(transformation(extent={{100,-65},{110,-55}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve1(y=makeProduct.fillTank1.active)\r\n        annotation (Placement(transformation(extent={{20,73},{80,92}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve2(y=makeProduct.fillTank2.active or emptyTanks.active)\r\n        annotation (Placement(transformation(extent={{-25,-89},{80,-68}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve3(y=makeProduct.emptyTank2.active or emptyTanks.active)\r\n        annotation (Placement(transformation(extent={{-26,-100},{80,-80}})));\r\n    equation\r\n\r\n      connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}));\r\n      connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}));\r\n      connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}));\r\n      connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}));\r\n      connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}));\r\n      connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}));\r\n      connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}));\r\n      connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}));\r\n      connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}));\r\n      connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}));\r\n      connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}));\r\n      connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}));\r\n      connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}));\r\n      connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}));\r\n      connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}));\r\n      connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}));\r\n      annotation (\r\n        Diagram(coordinateSystem(\r\n              preserveAspectRatio=true,\r\n              extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}})}),\r\n        Icon(coordinateSystem(\r\n              preserveAspectRatio=true,\r\n              extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-100,68},{-32,54}},\r\n                textString=\"start\"),\r\n              Text(\r\n                extent={{-100,6},{-32,-8}},\r\n                textString=\"stop\"),\r\n              Text(\r\n                extent={{-100,-54},{-32,-68}},\r\n                textString=\"shut\"),\r\n              Text(\r\n                extent={{-94,-82},{-18,-96}},\r\n                textString=\"level1\"),\r\n              Text(\r\n                extent={{24,-84},{96,-98}},\r\n                textString=\"level2\"),\r\n              Text(\r\n                extent={{31,68},{99,54}},\r\n                textString=\"valve1\"),\r\n              Text(\r\n                extent={{33,9},{101,-5}},\r\n                textString=\"valve2\"),\r\n              Text(\r\n                extent={{34,-53},{102,-67}},\r\n                textString=\"valve3\")}));\r\n    end TankController;\r\n\r\n    model MakeProduct\r\n        \"State machine defining the time instants when to fill or empty a tank\"\r\n      extends StateGraph.PartialCompositeStep;\r\n      parameter Real limit=0.98 \"Limit level of tank 1\";\r\n      parameter SI.Time waitTime=3 \"Wait time\";\r\n\r\n      Modelica.Blocks.Interfaces.RealInput level1\r\n        annotation (Placement(transformation(extent={{-190,-140},{-150,-100}})));\r\n      Step fillTank1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Transition T1(condition=level1 > limit)\r\n        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));\r\n      Step fillTank2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n      Transition T3(condition=level1 < 0.001)\r\n        annotation (Placement(transformation(extent={{20,-10},{40,10}})));\r\n      Step emptyTank2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{120,-10},{140,10}})));\r\n      Step wait1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n      Transition T2(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n      Step wait2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{54,-10},{74,10}})));\r\n      Transition T4(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{82,-10},{102,10}})));\r\n    equation\r\n      connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}));\r\n      connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}));\r\n      connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}));\r\n      connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}));\r\n      connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}));\r\n      connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}));\r\n      connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}));\r\n      connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}));\r\n      connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}));\r\n      connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}));\r\n    end MakeProduct;\r\n\r\n    connector Inflow1\r\n        \"Inflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      input SI.VolumeFlowRate Fi \"Inflow\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,-100},{0,100},{100,-100},{-100,-100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Inflow1;\r\n\r\n    connector Inflow2\r\n        \"Inflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      output SI.VolumeFlowRate Fi \"Inflow\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,-100},{0,100},{100,-100},{-100,-100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Inflow2;\r\n\r\n    connector Outflow1\r\n        \"Outflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      output SI.VolumeFlowRate Fo \"Outflow\";\r\n      input Boolean open \"Valve open\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,100},{0,-100},{100,100},{-100,100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Outflow1;\r\n\r\n    connector Outflow2\r\n        \"Outflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      input SI.VolumeFlowRate Fo \"Outflow\";\r\n      output Boolean open \"Valve open\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,100},{0,-100},{100,100},{-100,100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Outflow2;\r\n\r\n    model valve\r\n        \"Simple valve model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.Blocks.Interfaces.BooleanInput valveControl\r\n        annotation (Placement(transformation(\r\n              origin={0,-80},\r\n              extent={{-20,-20},{20,20}},\r\n              rotation=90)));\r\n      Modelica.StateGraph.Examples.Utilities.Inflow2 inflow1\r\n                     annotation (Placement(transformation(\r\n              origin={50,0},\r\n              extent={{-50,-50},{50,50}},\r\n              rotation=90)));\r\n      Modelica.StateGraph.Examples.Utilities.Outflow2 outflow1\r\n                       annotation (Placement(transformation(\r\n              origin={-50,0},\r\n              extent={{-50,-50},{50,50}},\r\n              rotation=90)));\r\n    equation\r\n      outflow1.Fo = inflow1.Fi;\r\n      outflow1.open = valveControl;\r\n      annotation (\r\n        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{0,-60},{0,0}}, color={255,0,255})}),\r\n        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n              Line(\r\n                points={{20,20},{20,20}},\r\n                thickness=0.5),\r\n              Text(\r\n                extent={{-131,125},{136,67}},\r\n                textColor={0,0,255},\r\n                textString=\"%name\"),\r\n              Line(\r\n                points={{0,0},{0,-60}},\r\n                color={255,0,255})}));\r\n    end valve;\r\n\r\n    model Tank\r\n        \"Simple tank model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.Blocks.Interfaces.RealOutput levelSensor\r\n        annotation (Placement(transformation(extent={{-61,-30},{-81,-10}})));\r\n\r\n      Modelica.StateGraph.Examples.Utilities.Inflow1 inflow1\r\n                     annotation (Placement(transformation(extent={{-55,60},{-45,\r\n                  70}})));\r\n      Modelica.StateGraph.Examples.Utilities.Outflow1 outflow1\r\n                       annotation (Placement(transformation(extent={{55,-50},{\r\n                  65,-40}})));\r\n      Real level(start=0,fixed=true) \"Tank level in % of max height\";\r\n      parameter SI.Area A=1 \"Ground area of tank\";\r\n      parameter SI.Area a=0.2 \"Area of drain hole\";\r\n      parameter SI.Height hmax=1 \"Max height of tank\";\r\n      constant Real g=Modelica.Constants.g_n;\r\n    equation\r\n      der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A);\r\n      if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a;\r\n      else\r\n        outflow1.Fo = 0;\r\n      end if;\r\n      levelSensor = level;\r\n\r\n      annotation (\r\n        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-122,-82},{88,-42}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255}),\r\n              Rectangle(\r\n                extent={{-60,60},{80,-40}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid),\r\n              Rectangle(\r\n                extent=DynamicSelect({{-60,-40},{-60,-40}}, {{-60,-40},{80,(-40\r\n                     + level*100)}}),\r\n                lineThickness=0.5,\r\n                fillPattern=FillPattern.HorizontalCylinder,\r\n                fillColor={191,0,95})}));\r\n    end Tank;\r\n\r\n    model Source\r\n        \"Simple source model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.StateGraph.Examples.Utilities.Outflow1 outflow1\r\n        annotation (Placement(transformation(extent={{-10,-60},{10,-40}})));\r\n      parameter Real maxflow=1 \"Maximal flow out of source\";\r\n    equation\r\n      if outflow1.open then\r\n        outflow1.Fo = maxflow;\r\n      else\r\n        outflow1.Fo = 0;\r\n      end if;\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                extent={{-80,40},{80,-40}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid), Text(\r\n                extent={{-144,54},{152,114}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n    end Source;\r\n\r\n    model CompositeStep\r\n        \"State machine demonstrating a composite step (used in StateGraph.Examples.ShowCompositeStep)\"\r\n      extends StateGraph.PartialCompositeStep;\r\n      Transition transition3(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,50},{-44,70}})));\r\n      Transition transition4(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,-10},{-44,10}})));\r\n      Step step3(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,50},{10,70}})));\r\n      Step step4(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,-10},{10,10}})));\r\n      Transition transition5(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,50},{56,70}})));\r\n      Transition transition6(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,-10},{56,10}})));\r\n      Transition transition4a(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,-70},{-44,-50}})));\r\n      Step step4a(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,-70},{10,-50}})));\r\n      Transition transition6a(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,-70},{56,-50}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{120,-10},{140,10}})));\r\n      Alternative Alternative1(nBranches=3) annotation (Placement(\r\n              transformation(extent={{-98,-90},{98,90}})));\r\n    equation\r\n      connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}));\r\n      connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}));\r\n      connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}));\r\n      connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}));\r\n      connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}));\r\n      connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}));\r\n      connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}));\r\n      connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}));\r\n      connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}));\r\n      connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}));\r\n      connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}));\r\n      connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}));\r\n      connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}));\r\n      connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}));\r\n    end CompositeStep;\r\n\r\n    model CompositeStep1\r\n        \"Composite step used to demonstrate exceptions (in StateGraph.Examples.ShowExceptions)\"\r\n      extends PartialCompositeStep;\r\n      Transition transition1(\r\n        enableTimer=false,\r\n        waitTime=0,\r\n        condition=time >= 8)\r\n        annotation (Placement(\r\n              transformation(extent={{-60,20},{-40,40}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{110,-10},{130,10}})));\r\n      CompositeStep2 compositeStep11(waitTime=3)\r\n                                           annotation (Placement(transformation(\r\n                extent={{-20,15},{10,45}})));\r\n      CompositeStep2 compositeStep12(waitTime=2)\r\n                                           annotation (Placement(transformation(\r\n                extent={{-20,-45},{10,-15}})));\r\n      Transition transition2(\r\n        condition=time >= 4,\r\n        enableTimer=false,\r\n        waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{-61,-40},{-41,-20}})));\r\n      Transition transition3(enableTimer=false, waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{29,20},{49,40}})));\r\n      Transition transition4(enableTimer=false, waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{29,-40},{49,-20}})));\r\n      Alternative Alternative1 annotation (Placement(transformation(extent={{\r\n                  -100,-60},{89,60}})));\r\n    equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}));\r\n      connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}));\r\n      connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}));\r\n      connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}));\r\n      connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}));\r\n      connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}));\r\n      connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}));\r\n      connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}));\r\n      connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}));\r\n      connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}));\r\n    end CompositeStep1;\r\n\r\n    model CompositeStep2\r\n        \"Composite step used to demonstrate exceptions (in StateGraph.Examples.ShowExceptions)\"\r\n      extends PartialCompositeStep;\r\n      Transition transition(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{110,-10},{130,10}})));\r\n      parameter SI.Time waitTime=2 \"Waiting time in this composite step\";\r\n    equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}));\r\n      connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}));\r\n    end CompositeStep2;\r\n\r\n  end Utilities;\r\nend Examples", "checksum": "eb19c9fdc18a9bae4373d594a72f9e2920cd3524", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo:787-1739", "component_count": 5, "connection_count": 101, "variable_count": 27, "physical_quantity_count": 6, "parameter_count": 6, "equation_count": 54, "dependency_count": 81, "has_physical_interface": true, "interface_component_count": 3, "has_connections": true, "is_composite_model": true, "complexity_score": 370.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(exitStep.outPort[1], outPort) annotation (Line(points={{130.5,0},{155,0}}))", "search_keywords": ["Boolean", "Real", "SI.VolumeFlowRate", "system"]}, "components": [{"name": "Fi", "type_name": "SI.VolumeFlowRate", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Inflow"}, {"name": "Fo", "type_name": "SI.VolumeFlowRate", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Outflow"}, {"name": "open", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Valve open"}, {"name": "level", "type_name": "Real", "prefixes": [], "modifications": {"start": "0", "fixed": "true"}, "condition": null, "array_dims": null, "comment": "Tank level in % of max height"}, {"name": "g", "type_name": "Real", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "initialStep.outPort[1]", "to_connector": "transition1.inPort", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "step.inPort[1]", "condition": null}, {"from_connector": "step.outPort[1]", "to_connector": "transition2.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "initialStep.inPort[1]", "condition": null}, {"from_connector": "step.active", "to_connector": "timer.u", "condition": null}, {"from_connector": "timer.y", "to_connector": "greaterEqual.u", "condition": null}, {"from_connector": "greaterEqual.y", "to_connector": "transition2.condition", "condition": null}, {"from_connector": "SetBoolean1.y", "to_connector": "transition2.condition", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "step3.inPort[1]", "condition": null}, {"from_connector": "step3.outPort[1]", "to_connector": "transition5.inPort", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "step4.inPort[1]", "condition": null}, {"from_connector": "step4.outPort[1]", "to_connector": "transition6.inPort", "condition": null}, {"from_connector": "transition7.outPort", "to_connector": "step0.inPort[1]", "condition": null}, {"from_connector": "step6.outPort[1]", "to_connector": "transition7.inPort", "condition": null}, {"from_connector": "transition4a.outPort", "to_connector": "step4a.inPort[1]", "condition": null}, {"from_connector": "step4a.outPort[1]", "to_connector": "transition6a.inPort", "condition": null}, {"from_connector": "setCondition.y", "to_connector": "transition7.condition", "condition": null}, {"from_connector": "setReal.y", "to_connector": "NumericValue1.numberPort", "condition": null}, {"from_connector": "transition3.inPort", "to_connector": "alternative.split[1]", "condition": null}, {"from_connector": "transition4.inPort", "to_connector": "alternative.split[2]", "condition": null}, {"from_connector": "transition4a.inPort", "to_connector": "alternative.split[3]", "condition": null}, {"from_connector": "transition5.outPort", "to_connector": "alternative.join[1]", "condition": null}, {"from_connector": "transition6.outPort", "to_connector": "alternative.join[2]", "condition": null}, {"from_connector": "transition6a.outPort", "to_connector": "alternative.join[3]", "condition": null}, {"from_connector": "step2.outPort[1]", "to_connector": "alternative.inPort", "condition": null}, {"from_connector": "alternative.outPort", "to_connector": "step5.inPort[1]", "condition": null}, {"from_connector": "step2.inPort[1]", "to_connector": "Parallel1.split[1]", "condition": null}, {"from_connector": "step1.outPort[1]", "to_connector": "Parallel1.join[2]", "condition": null}, {"from_connector": "step0.outPort[1]", "to_connector": "transition1.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "step6.inPort[1]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "Parallel1.inPort", "condition": null}, {"from_connector": "Parallel1.outPort", "to_connector": "transition2.inPort", "condition": null}, {"from_connector": "step5.outPort[1]", "to_connector": "Parallel1.join[1]", "condition": null}, {"from_connector": "Parallel1.split[2]", "to_connector": "step1.inPort[1]", "condition": null}, {"from_connector": "compositeStep.inPort", "to_connector": "Parallel1.split[1]", "condition": null}, {"from_connector": "compositeStep.outPort", "to_connector": "Parallel1.join[1]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "compositeStep.inPort", "condition": null}, {"from_connector": "compositeStep.outPort", "to_connector": "transition2.inPort", "condition": null}, {"from_connector": "compositeStep.suspend[1]", "to_connector": "transition3.inPort", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "step1.inPort[1]", "condition": null}, {"from_connector": "step1.outPort[1]", "to_connector": "transition4.inPort", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "compositeStep.resume[1]", "condition": null}, {"from_connector": "tank1.outflow1", "to_connector": "valve2.outflow1", "condition": null}, {"from_connector": "tank2.inflow1", "to_connector": "valve2.inflow1", "condition": null}, {"from_connector": "tank2.outflow1", "to_connector": "valve3.outflow1", "condition": null}, {"from_connector": "tank1.inflow1", "to_connector": "valve1.inflow1", "condition": null}, {"from_connector": "shut.on", "to_connector": "tankController.shut", "condition": null}, {"from_connector": "stop.on", "to_connector": "tankController.stop", "condition": null}, {"from_connector": "start.on", "to_connector": "tankController.start", "condition": null}, {"from_connector": "tank1.levelSensor", "to_connector": "tankController.level1", "condition": null}, {"from_connector": "tank2.levelSensor", "to_connector": "tankController.level2", "condition": null}, {"from_connector": "tankController.valve1", "to_connector": "valve1.valveControl", "condition": null}, {"from_connector": "tankController.valve2", "to_connector": "valve2.valveControl", "condition": null}, {"from_connector": "tankController.valve3", "to_connector": "valve3.valveControl", "condition": null}, {"from_connector": "source.outflow1", "to_connector": "valve1.outflow1", "condition": null}, {"from_connector": "s1.outPort[1]", "to_connector": "T1.inPort", "condition": null}, {"from_connector": "T1.outPort", "to_connector": "makeProduct.inPort", "condition": null}, {"from_connector": "makeProduct.outPort", "to_connector": "T2.inPort", "condition": null}, {"from_connector": "T5.outPort", "to_connector": "emptyTanks.inPort[1]", "condition": null}, {"from_connector": "emptyTanks.outPort[1]", "to_connector": "T6.inPort", "condition": null}, {"from_connector": "setValve1.y", "to_connector": "valve1", "condition": null}, {"from_connector": "setValve2.y", "to_connector": "valve2", "condition": null}, {"from_connector": "setValve3.y", "to_connector": "valve3", "condition": null}, {"from_connector": "makeProduct.suspend[1]", "to_connector": "T3.inPort", "condition": null}, {"from_connector": "T3.outPort", "to_connector": "s2.inPort[1]", "condition": null}, {"from_connector": "T4.outPort", "to_connector": "makeProduct.resume[1]", "condition": null}, {"from_connector": "level1", "to_connector": "makeProduct.level1", "condition": null}, {"from_connector": "s2.outPort[1]", "to_connector": "T5.inPort", "condition": null}, {"from_connector": "s2.outPort[2]", "to_connector": "T4.inPort", "condition": null}, {"from_connector": "T2.outPort", "to_connector": "s1.inPort[1]", "condition": null}, {"from_connector": "T6.outPort", "to_connector": "s1.inPort[2]", "condition": null}, {"from_connector": "fillTank1.inPort[1]", "to_connector": "inPort", "condition": null}, {"from_connector": "fillTank1.outPort[1]", "to_connector": "T1.inPort", "condition": null}, {"from_connector": "fillTank2.outPort[1]", "to_connector": "T3.inPort", "condition": null}, {"from_connector": "emptyTank2.outPort[1]", "to_connector": "outPort", "condition": null}, {"from_connector": "wait1.outPort[1]", "to_connector": "T2.inPort", "condition": null}, {"from_connector": "T2.outPort", "to_connector": "fillTank2.inPort[1]", "condition": null}, {"from_connector": "T1.outPort", "to_connector": "wait1.inPort[1]", "condition": null}, {"from_connector": "wait2.outPort[1]", "to_connector": "T4.inPort", "condition": null}, {"from_connector": "T3.outPort", "to_connector": "wait2.inPort[1]", "condition": null}, {"from_connector": "T4.outPort", "to_connector": "emptyTank2.inPort[1]", "condition": null}, {"from_connector": "initStep.inPort[1]", "to_connector": "inPort", "condition": null}, {"from_connector": "exitStep.outPort[1]", "to_connector": "outPort", "condition": null}, {"from_connector": "initStep.outPort[1]", "to_connector": "Alternative1.inPort", "condition": null}, {"from_connector": "Alternative1.outPort", "to_connector": "exitStep.inPort[1]", "condition": null}, {"from_connector": "transition3.inPort", "to_connector": "Alternative1.split[1]", "condition": null}, {"from_connector": "transition4.inPort", "to_connector": "Alternative1.split[2]", "condition": null}, {"from_connector": "transition4a.inPort", "to_connector": "Alternative1.split[3]", "condition": null}, {"from_connector": "transition5.outPort", "to_connector": "Alternative1.join[1]", "condition": null}, {"from_connector": "transition6.outPort", "to_connector": "Alternative1.join[2]", "condition": null}, {"from_connector": "transition6a.outPort", "to_connector": "Alternative1.join[3]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "compositeStep11.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "compositeStep12.inPort", "condition": null}, {"from_connector": "compositeStep11.outPort", "to_connector": "transition3.inPort", "condition": null}, {"from_connector": "compositeStep12.outPort", "to_connector": "transition4.inPort", "condition": null}, {"from_connector": "transition1.inPort", "to_connector": "Alternative1.split[1]", "condition": null}, {"from_connector": "transition2.inPort", "to_connector": "Alternative1.split[2]", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "Alternative1.join[1]", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "Alternative1.join[2]", "condition": null}, {"from_connector": "initStep.outPort[1]", "to_connector": "transition.inPort", "condition": null}, {"from_connector": "transition.outPort", "to_connector": "exitStep.inPort[1]", "condition": null}], "variables": [{"name": "FirstExample", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FirstExample_Variant2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FirstExample_Variant3", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ExecutionPaths", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ShowCompositeStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ShowExceptions", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ControlledTanks", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TankController", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MakeProduct", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fi", "type_name": "SI.VolumeFlowRate", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": null, "comment": "\"Inflow\""}, {"name": "Inflow1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Inflow2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fo", "type_name": "SI.VolumeFlowRate", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": "\"Outflow\""}, {"name": "open", "type_name": "Boolean", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": null, "comment": "\"Valve open\""}, {"name": "Outflow1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Outflow2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "valve", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "level", "type_name": "Real", "prefixes": [], "attributes": {"start": "0", "fixed": "true"}, "binding_equation": null, "comment": "\"Tank level in % of max height\""}, {"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "(inflow1.Fi - outflow1.Fo)/(hmax*A)", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Tank", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Source", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialCompositeStep", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Utilities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "example", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "paths", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "StateGraph", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "levels", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "time", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "step", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Alternative1", "FillPattern", "Modelica.Blocks.Interaction.Show", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Logical", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Icons", "Modelica.StateGraph.Examples.Utilities", "Modelica.StateGraph.UsersGuide", "NumericValue1", "Parallel1", "SI", "SetBoolean1", "StateGraph", "StateGraph.Examples", "StateGraph.Interfaces", "T1", "T2", "T3", "T4", "T5", "T6", "Utilities", "alternative", "compositeStep", "compositeStep11", "compositeStep12", "emptyTank2", "emptyTanks", "exitStep", "fillTank1", "fillTank2", "greaterEqual", "inflow1", "initStep", "initialStep", "makeProduct", "makeProduct.emptyTank2", "makeProduct.fillTank1", "makeProduct.fillTank2", "outflow1", "s1", "s2", "setCondition", "setReal", "setValve1", "setValve2", "setValve3", "shut", "source", "start", "step", "step0", "step1", "step2", "step3", "step4", "step4a", "step5", "step6", "stop", "tank1", "tank2", "tankController", "timer", "transition", "transition1", "transition2", "transition3", "transition4", "transition4a", "transition5", "transition6", "transition6a", "transition7", "valve1", "valve2", "valve3", "wait1", "wait2"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Icons.UtilitiesPackage", "StateGraph.Interfaces.PartialStateGraphIcon", "StateGraph.PartialCompositeStep", "PartialCompositeStep"]}
{"fqn": "Modelica.StateGraph.Examples.Utilities", "kind": "package", "name": "Utilities", "package_path": ["Modelica", "StateGraph", "Examples"], "extends": ["Modelica.Icons.UtilitiesPackage", "StateGraph.Interfaces.PartialStateGraphIcon", "StateGraph.PartialCompositeStep", "PartialCompositeStep"], "imports": [], "parameters": [{"name": "limit", "type": "Real", "default": "0.98 \"Limit level of tank 1\"", "description": null}, {"name": "waitTime", "type": "SI.Time", "default": "2 \"Waiting time in this composite step\"", "description": null}, {"name": "A", "type": "SI.Area", "default": "1 \"Ground area of tank\"", "description": null}, {"name": "a", "type": "SI.Area", "default": "0.2 \"Area of drain hole\"", "description": null}, {"name": "hmax", "type": "SI.Height", "default": "1 \"Max height of tank\"", "description": null}, {"name": "maxflow", "type": "Real", "default": "1 \"Maximal flow out of source\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}))", "connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1727, "end_line": 1735, "start_col": 5, "end_col": 55}}, {"equations": ["connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}))", "connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1728, "end_line": 1735, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1727, "end_line": 1727, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}))", "connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}))", "connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}))", "connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}))", "connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}))", "connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}))", "connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}))", "connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1690, "end_line": 1716, "start_col": 5, "end_col": 64}}, {"equations": ["connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}))", "connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}))", "connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}))", "connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}))", "connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}))", "connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}))", "connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}))", "connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1691, "end_line": 1716, "start_col": 7, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1690, "end_line": 1690, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}))", "connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}))", "connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}))", "connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}))", "connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}))", "connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}))", "connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}))", "connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}))", "connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}))", "connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1624, "end_line": 1656, "start_col": 5, "end_col": 62}}, {"equations": ["connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}))", "connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}))", "connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}))", "connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}))", "connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}))", "connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}))", "connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}))", "connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}))", "connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}))", "connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}))", "connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}))", "connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}))", "connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}))", "connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}))", "connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}))", "connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1625, "end_line": 1656, "start_col": 7, "end_col": 62}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1624, "end_line": 1624, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      if outflow1.open then\r\n        outflow1.Fo = maxflow", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1576, "end_line": 1581, "start_col": 5, "end_col": 14}}, {"equations": ["if outflow1.open then\r\n        outflow1.Fo = maxflow", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1577, "end_line": 1581, "start_col": 7, "end_col": 14}}, {"equations": ["outflow1.Fo = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1580, "end_line": 1580, "start_col": 9, "end_col": 25}}, {"equations": ["outflow1.Fo = maxflow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1578, "end_line": 1578, "start_col": 9, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1576, "end_line": 1576, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)", "if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if", "levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1542, "end_line": 1549, "start_col": 5, "end_col": 27}}, {"equations": ["der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)", "if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if", "levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1543, "end_line": 1549, "start_col": 7, "end_col": 27}}, {"equations": ["levelSensor = level"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1549, "end_line": 1549, "start_col": 7, "end_col": 26}}, {"equations": ["if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a", "else\r\n        outflow1.Fo = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1544, "end_line": 1548, "start_col": 7, "end_col": 13}}, {"equations": ["outflow1.Fo = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1547, "end_line": 1547, "start_col": 9, "end_col": 25}}, {"equations": ["outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1545, "end_line": 1545, "start_col": 9, "end_col": 53}}, {"equations": ["der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1543, "end_line": 1543, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1542, "end_line": 1542, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      outflow1.Fo = inflow1.Fi", "outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1506, "end_line": 1508, "start_col": 5, "end_col": 36}}, {"equations": ["outflow1.Fo = inflow1.Fi", "outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1507, "end_line": 1508, "start_col": 7, "end_col": 36}}, {"equations": ["outflow1.open = valveControl"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1508, "end_line": 1508, "start_col": 7, "end_col": 35}}, {"equations": ["outflow1.Fo = inflow1.Fi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1507, "end_line": 1507, "start_col": 7, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1506, "end_line": 1506, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}))", "connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}))", "connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}))", "connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}))", "connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}))", "connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}))", "connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}))", "connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}))", "connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}))", "connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1407, "end_line": 1435, "start_col": 5, "end_col": 28}}, {"equations": ["connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}))", "connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}))", "connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}))", "connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}))", "connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}))", "connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}))", "connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}))", "connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}))", "connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}))", "connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1408, "end_line": 1435, "start_col": 7, "end_col": 28}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1407, "end_line": 1407, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n\r\n      connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}))", "connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}))", "connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}))", "connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}))", "connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}))", "connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}))", "connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}))", "connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}))", "connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}))", "connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}))", "connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}))", "connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}))", "connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}))", "connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}))", "connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}))", "connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1312, "end_line": 1352, "start_col": 5, "end_col": 71}}, {"equations": ["connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}))", "connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}))", "connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}))", "connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}))", "connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}))", "connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}))", "connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}))", "connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}))", "connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}))", "connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}))", "connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}))", "connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}))", "connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}))", "connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}))", "connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}))", "connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1314, "end_line": 1352, "start_col": 7, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1312, "end_line": 1312, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.UtilitiesPackage | components: SI.VolumeFlowRate×2, Real×2, Boolean×1 | connections: 52 | params: limit, waitTime, A | units: 2, 1 | eq: ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1251, "end_line": 1738, "start_col": 3, "end_col": 16}, "code_text": "package Utilities \"Utility components for the examples\"\r\n    extends Modelica.Icons.UtilitiesPackage;\r\n\r\n    model TankController \"Controller for tank system\"\r\n      extends StateGraph.Interfaces.PartialStateGraphIcon;\r\n      parameter Real limit=0.98 \"Limit level of tank 1\";\r\n      parameter SI.Time waitTime=3 \"Wait time\";\r\n\r\n      InitialStep s1(nIn=2, nOut=1)\r\n        annotation (Placement(transformation(extent={{-72,30},{-52,50}})));\r\n      MakeProduct makeProduct(limit=limit, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-20,25},{10,55}})));\r\n      Transition T1(condition=start)\r\n        annotation (Placement(transformation(extent={{-50,50},{-30,30}})));\r\n      Transition T2(condition=level2<0.001)\r\n        annotation (Placement(transformation(extent={{27,50},{47,30}})));\r\n      Transition T3(condition=stop)\r\n        annotation (Placement(transformation(\r\n              origin={-23,-1},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=270)));\r\n      Step s2(nIn=1, nOut=2)\r\n              annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));\r\n      Transition T4(condition=start)\r\n        annotation (Placement(transformation(\r\n              origin={10,-1},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Transition T5(condition=shut) annotation (Placement(transformation(extent=\r\n                 {{-6,-60},{14,-40}})));\r\n      Step emptyTanks(nIn=1, nOut=1) annotation (Placement(transformation(extent={{22,-60},{42,-40}})));\r\n      Transition T6(condition=level1+level2<0.001)\r\n        annotation (Placement(transformation(extent={{45,-60},{65,-40}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput start\r\n        annotation (Placement(transformation(extent={{-120,50},{-100,70}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput stop\r\n        annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));\r\n      Modelica.Blocks.Interfaces.BooleanInput shut\r\n        annotation (Placement(transformation(extent={{-120,-70},{-100,-50}})));\r\n      Modelica.Blocks.Interfaces.RealInput level1\r\n        annotation (Placement(transformation(\r\n              origin={-60,-110},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Modelica.Blocks.Interfaces.RealInput level2\r\n        annotation (Placement(transformation(\r\n              origin={60,-110},\r\n              extent={{-10,-10},{10,10}},\r\n              rotation=90)));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve1\r\n        annotation (Placement(transformation(extent={{100,55},{110,65}})));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve2\r\n        annotation (Placement(transformation(extent={{100,-5},{110,5}})));\r\n      Modelica.Blocks.Interfaces.BooleanOutput valve3\r\n        annotation (Placement(transformation(extent={{100,-65},{110,-55}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve1(y=makeProduct.fillTank1.active)\r\n        annotation (Placement(transformation(extent={{20,73},{80,92}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve2(y=makeProduct.fillTank2.active or emptyTanks.active)\r\n        annotation (Placement(transformation(extent={{-25,-89},{80,-68}})));\r\n      Modelica.Blocks.Sources.BooleanExpression setValve3(y=makeProduct.emptyTank2.active or emptyTanks.active)\r\n        annotation (Placement(transformation(extent={{-26,-100},{80,-80}})));\r\n    equation\r\n\r\n      connect(s1.outPort[1], T1.inPort)\r\n                                     annotation (Line(\r\n            points={{-51.5,40},{-44,40}}));\r\n      connect(T1.outPort, makeProduct.inPort) annotation (Line(\r\n            points={{-38.5,40},{-21,40}}));\r\n      connect(makeProduct.outPort, T2.inPort) annotation (Line(\r\n            points={{10.5,40},{33,40}}));\r\n      connect(T5.outPort, emptyTanks.inPort[1])\r\n                                             annotation (Line(\r\n            points={{5.5,-50},{21,-50}}));\r\n      connect(emptyTanks.outPort[1], T6.inPort)\r\n                                             annotation (Line(\r\n            points={{42.5,-50},{51,-50}}));\r\n      connect(setValve1.y, valve1)\r\n        annotation (Line(points={{83,82.5},{90,82.5},{90,60},{105,60}}, color={\r\n                255,0,255}));\r\n      connect(setValve2.y, valve2)\r\n        annotation (Line(points={{85.25,-78.5},{90,-78.5},{90,0},{105,0}}, color={255,0,255}));\r\n      connect(setValve3.y, valve3) annotation (Line(points={{85.3,-90},{95,-90},\r\n                {95,-60},{105,-60}}, color={255,0,255}));\r\n      connect(makeProduct.suspend[1], T3.inPort)\r\n                                              annotation (Line(points={{-12.5,\r\n                24.5},{-12.5,12},{-23,12},{-23,3}}));\r\n      connect(T3.outPort, s2.inPort[1])\r\n                                     annotation (Line(points={{-23,-2.5},{-23,\r\n                -20},{-66,-20},{-66,-50},{-51,-50}}));\r\n      connect(T4.outPort, makeProduct.resume[1])\r\n                                              annotation (Line(points={{10,0.5},\r\n                {10,15},{2.5,15},{2.5,24}}));\r\n      connect(level1, makeProduct.level1) annotation (Line(points={{-60,-110},{\r\n                -60,-80},{-80,-80},{-80,20},{-30,20},{-30,28},{-22,28}}, color={0,0,255}));\r\n      connect(s2.outPort[1], T5.inPort) annotation (Line(points={{-29.5,-49.75},\r\n                {-30,-49.75},{-30,-50},{0,-50}}));\r\n      connect(s2.outPort[2], T4.inPort) annotation (Line(points={{-29.5,-50.25},\r\n                {-29,-50},{-8,-50},{-8,-25},{10,-25},{10,-5}}));\r\n      connect(T2.outPort, s1.inPort[1]) annotation (Line(points={{38.5,40},{70,\r\n                40},{70,70},{-84,70},{-84,40},{-73,40},{-73,40.5}}));\r\n      connect(T6.outPort, s1.inPort[2]) annotation (Line(points={{56.5,-50},{70,\r\n                -50},{70,70},{-84,70},{-84,40},{-74,40},{-73,39.5}}));\r\n      annotation (\r\n        Diagram(coordinateSystem(\r\n              preserveAspectRatio=true,\r\n              extent={{-100,-100},{100,100}}), graphics={Rectangle(extent={{-100,100},{100,-100}})}),\r\n        Icon(coordinateSystem(\r\n              preserveAspectRatio=true,\r\n              extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-100,68},{-32,54}},\r\n                textString=\"start\"),\r\n              Text(\r\n                extent={{-100,6},{-32,-8}},\r\n                textString=\"stop\"),\r\n              Text(\r\n                extent={{-100,-54},{-32,-68}},\r\n                textString=\"shut\"),\r\n              Text(\r\n                extent={{-94,-82},{-18,-96}},\r\n                textString=\"level1\"),\r\n              Text(\r\n                extent={{24,-84},{96,-98}},\r\n                textString=\"level2\"),\r\n              Text(\r\n                extent={{31,68},{99,54}},\r\n                textString=\"valve1\"),\r\n              Text(\r\n                extent={{33,9},{101,-5}},\r\n                textString=\"valve2\"),\r\n              Text(\r\n                extent={{34,-53},{102,-67}},\r\n                textString=\"valve3\")}));\r\n    end TankController;\r\n\r\n    model MakeProduct\r\n        \"State machine defining the time instants when to fill or empty a tank\"\r\n      extends StateGraph.PartialCompositeStep;\r\n      parameter Real limit=0.98 \"Limit level of tank 1\";\r\n      parameter SI.Time waitTime=3 \"Wait time\";\r\n\r\n      Modelica.Blocks.Interfaces.RealInput level1\r\n        annotation (Placement(transformation(extent={{-190,-140},{-150,-100}})));\r\n      Step fillTank1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Transition T1(condition=level1 > limit)\r\n        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));\r\n      Step fillTank2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n      Transition T3(condition=level1 < 0.001)\r\n        annotation (Placement(transformation(extent={{20,-10},{40,10}})));\r\n      Step emptyTank2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{120,-10},{140,10}})));\r\n      Step wait1(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n      Transition T2(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n      Step wait2(nIn=1, nOut=1) annotation (Placement(transformation(extent={{54,-10},{74,10}})));\r\n      Transition T4(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{82,-10},{102,10}})));\r\n    equation\r\n      connect(fillTank1.inPort[1], inPort)\r\n                                        annotation (Line(\r\n            points={{-141,0},{-160,0}}));\r\n      connect(fillTank1.outPort[1], T1.inPort)\r\n                                            annotation (Line(\r\n            points={{-119.5,0},{-104,0}}));\r\n      connect(fillTank2.outPort[1], T3.inPort)\r\n                                            annotation (Line(\r\n            points={{10.5,0},{26,0}}));\r\n      connect(emptyTank2.outPort[1], outPort)\r\n                                           annotation (Line(\r\n            points={{140.5,0},{155,0}}));\r\n      connect(wait1.outPort[1], T2.inPort)\r\n                                        annotation (Line(points={{-59.5,0},{-44,\r\n                0}}));\r\n      connect(T2.outPort, fillTank2.inPort[1])\r\n                                            annotation (Line(points={{-38.5,0},\r\n                {-11,0}}));\r\n      connect(T1.outPort, wait1.inPort[1])\r\n                                        annotation (Line(points={{-98.5,0},{-81,\r\n                0}}));\r\n      connect(wait2.outPort[1], T4.inPort)\r\n                                        annotation (Line(points={{74.5,0},{88,0}}));\r\n      connect(T3.outPort, wait2.inPort[1])\r\n        annotation (Line(points={{31.5,0},{53,0}}));\r\n      connect(T4.outPort,emptyTank2.inPort[1])\r\n                                             annotation (Line(points={{93.5,0},\r\n                {119,0}}));\r\n    end MakeProduct;\r\n\r\n    connector Inflow1\r\n        \"Inflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      input SI.VolumeFlowRate Fi \"Inflow\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,-100},{0,100},{100,-100},{-100,-100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Inflow1;\r\n\r\n    connector Inflow2\r\n        \"Inflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      output SI.VolumeFlowRate Fi \"Inflow\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,-100},{0,100},{100,-100},{-100,-100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Inflow2;\r\n\r\n    connector Outflow1\r\n        \"Outflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      output SI.VolumeFlowRate Fo \"Outflow\";\r\n      input Boolean open \"Valve open\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,100},{0,-100},{100,100},{-100,100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Outflow1;\r\n\r\n    connector Outflow2\r\n        \"Outflow connector (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      input SI.VolumeFlowRate Fo \"Outflow\";\r\n      output Boolean open \"Valve open\";\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Polygon(\r\n                points={{-100,100},{0,-100},{100,100},{-100,100}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid)}));\r\n    end Outflow2;\r\n\r\n    model valve\r\n        \"Simple valve model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.Blocks.Interfaces.BooleanInput valveControl\r\n        annotation (Placement(transformation(\r\n              origin={0,-80},\r\n              extent={{-20,-20},{20,20}},\r\n              rotation=90)));\r\n      Modelica.StateGraph.Examples.Utilities.Inflow2 inflow1\r\n                     annotation (Placement(transformation(\r\n              origin={50,0},\r\n              extent={{-50,-50},{50,50}},\r\n              rotation=90)));\r\n      Modelica.StateGraph.Examples.Utilities.Outflow2 outflow1\r\n                       annotation (Placement(transformation(\r\n              origin={-50,0},\r\n              extent={{-50,-50},{50,50}},\r\n              rotation=90)));\r\n    equation\r\n      outflow1.Fo = inflow1.Fi;\r\n      outflow1.open = valveControl;\r\n      annotation (\r\n        Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{0,-60},{0,0}}, color={255,0,255})}),\r\n        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n              Line(\r\n                points={{20,20},{20,20}},\r\n                thickness=0.5),\r\n              Text(\r\n                extent={{-131,125},{136,67}},\r\n                textColor={0,0,255},\r\n                textString=\"%name\"),\r\n              Line(\r\n                points={{0,0},{0,-60}},\r\n                color={255,0,255})}));\r\n    end valve;\r\n\r\n    model Tank\r\n        \"Simple tank model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.Blocks.Interfaces.RealOutput levelSensor\r\n        annotation (Placement(transformation(extent={{-61,-30},{-81,-10}})));\r\n\r\n      Modelica.StateGraph.Examples.Utilities.Inflow1 inflow1\r\n                     annotation (Placement(transformation(extent={{-55,60},{-45,\r\n                  70}})));\r\n      Modelica.StateGraph.Examples.Utilities.Outflow1 outflow1\r\n                       annotation (Placement(transformation(extent={{55,-50},{\r\n                  65,-40}})));\r\n      Real level(start=0,fixed=true) \"Tank level in % of max height\";\r\n      parameter SI.Area A=1 \"Ground area of tank\";\r\n      parameter SI.Area a=0.2 \"Area of drain hole\";\r\n      parameter SI.Height hmax=1 \"Max height of tank\";\r\n      constant Real g=Modelica.Constants.g_n;\r\n    equation\r\n      der(level) = (inflow1.Fi - outflow1.Fo)/(hmax*A);\r\n      if outflow1.open then\r\n        outflow1.Fo = sqrt(max(0,2*g*hmax*level))*a;\r\n      else\r\n        outflow1.Fo = 0;\r\n      end if;\r\n      levelSensor = level;\r\n\r\n      annotation (\r\n        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n              Text(\r\n                extent={{-122,-82},{88,-42}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255}),\r\n              Rectangle(\r\n                extent={{-60,60},{80,-40}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid),\r\n              Rectangle(\r\n                extent=DynamicSelect({{-60,-40},{-60,-40}}, {{-60,-40},{80,(-40\r\n                     + level*100)}}),\r\n                lineThickness=0.5,\r\n                fillPattern=FillPattern.HorizontalCylinder,\r\n                fillColor={191,0,95})}));\r\n    end Tank;\r\n\r\n    model Source\r\n        \"Simple source model (this is a copy from Isolde Dressler's master thesis project)\"\r\n\r\n      Modelica.StateGraph.Examples.Utilities.Outflow1 outflow1\r\n        annotation (Placement(transformation(extent={{-10,-60},{10,-40}})));\r\n      parameter Real maxflow=1 \"Maximal flow out of source\";\r\n    equation\r\n      if outflow1.open then\r\n        outflow1.Fo = maxflow;\r\n      else\r\n        outflow1.Fo = 0;\r\n      end if;\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                extent={{-80,40},{80,-40}},\r\n                lineThickness=0.5,\r\n                fillColor={255,255,255},\r\n                fillPattern=FillPattern.Solid), Text(\r\n                extent={{-144,54},{152,114}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n    end Source;\r\n\r\n    model CompositeStep\r\n        \"State machine demonstrating a composite step (used in StateGraph.Examples.ShowCompositeStep)\"\r\n      extends StateGraph.PartialCompositeStep;\r\n      Transition transition3(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,50},{-44,70}})));\r\n      Transition transition4(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,-10},{-44,10}})));\r\n      Step step3(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,50},{10,70}})));\r\n      Step step4(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,-10},{10,10}})));\r\n      Transition transition5(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,50},{56,70}})));\r\n      Transition transition6(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,-10},{56,10}})));\r\n      Transition transition4a(enableTimer=true, waitTime=1)\r\n        annotation (Placement(\r\n              transformation(extent={{-64,-70},{-44,-50}})));\r\n      Step step4a(nIn=1, nOut=1) annotation (\r\n            Placement(transformation(extent={{-10,-70},{10,-50}})));\r\n      Transition transition6a(enableTimer=true, waitTime=2)\r\n        annotation (Placement(\r\n              transformation(extent={{36,-70},{56,-50}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{120,-10},{140,10}})));\r\n      Alternative Alternative1(nBranches=3) annotation (Placement(\r\n              transformation(extent={{-98,-90},{98,90}})));\r\n    equation\r\n      connect(transition3.outPort, step3.inPort[1])\r\n        annotation (Line(points={{-52.5,60},{-11,60}}));\r\n      connect(step3.outPort[1], transition5.inPort)\r\n        annotation (Line(points={{10.5,60},{42,60}}));\r\n      connect(transition4.outPort, step4.inPort[1])\r\n        annotation (Line(points={{-52.5,0},{-11,0}}));\r\n      connect(step4.outPort[1], transition6.inPort)\r\n        annotation (Line(points={{10.5,0},{42,0}}));\r\n      connect(transition4a.outPort, step4a.inPort[1])\r\n        annotation (Line(points={{-52.5,-60},{-11,-60}}));\r\n      connect(step4a.outPort[1], transition6a.inPort)\r\n        annotation (Line(points={{10.5,-60},{42,-60}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{140.5,0},{155,0}}));\r\n      connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points={{-119.5,\r\n                0},{-100.94,0}}));\r\n      connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{99.96,0},{119,0}}));\r\n      connect(transition3.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-58,60},{-77.42,60}}));\r\n      connect(transition4.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-58,0},{-67.975,0},{-77.42,0}}));\r\n      connect(transition4a.inPort, Alternative1.split[3]) annotation (Line(\r\n              points={{-58,-60},{-67.975,-60},{-77.42,-60}}));\r\n      connect(transition5.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{47.5,60},{77.42,60}}));\r\n      connect(transition6.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{47.5,0},{60.725,0},{77.42,0}}));\r\n      connect(transition6a.outPort, Alternative1.join[3]) annotation (Line(\r\n              points={{47.5,-60},{60.725,-60},{77.42,-60}}));\r\n    end CompositeStep;\r\n\r\n    model CompositeStep1\r\n        \"Composite step used to demonstrate exceptions (in StateGraph.Examples.ShowExceptions)\"\r\n      extends PartialCompositeStep;\r\n      Transition transition1(\r\n        enableTimer=false,\r\n        waitTime=0,\r\n        condition=time >= 8)\r\n        annotation (Placement(\r\n              transformation(extent={{-60,20},{-40,40}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{110,-10},{130,10}})));\r\n      CompositeStep2 compositeStep11(waitTime=3)\r\n                                           annotation (Placement(transformation(\r\n                extent={{-20,15},{10,45}})));\r\n      CompositeStep2 compositeStep12(waitTime=2)\r\n                                           annotation (Placement(transformation(\r\n                extent={{-20,-45},{10,-15}})));\r\n      Transition transition2(\r\n        condition=time >= 4,\r\n        enableTimer=false,\r\n        waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{-61,-40},{-41,-20}})));\r\n      Transition transition3(enableTimer=false, waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{29,20},{49,40}})));\r\n      Transition transition4(enableTimer=false, waitTime=0)\r\n        annotation (Placement(\r\n              transformation(extent={{29,-40},{49,-20}})));\r\n      Alternative Alternative1 annotation (Placement(transformation(extent={{\r\n                  -100,-60},{89,60}})));\r\n    equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(transition1.outPort, compositeStep11.inPort)\r\n        annotation (Line(points={{-48.5,30},{-21,30}}));\r\n      connect(transition2.outPort, compositeStep12.inPort)\r\n                                                     annotation (Line(points={{\r\n                -49.5,-30},{-21,-30}}));\r\n      connect(compositeStep11.outPort, transition3.inPort)\r\n        annotation (Line(points={{10.5,30},{35,30}}));\r\n      connect(compositeStep12.outPort, transition4.inPort)\r\n                                                     annotation (Line(points={{\r\n                10.5,-30},{35,-30}}));\r\n      connect(initStep.outPort[1], Alternative1.inPort) annotation (Line(points=\r\n               {{-119.5,0},{-102.835,0}}));\r\n      connect(Alternative1.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{90.89,0},{109,0}}));\r\n      connect(transition1.inPort, Alternative1.split[1]) annotation (Line(\r\n              points={{-54,30},{-68,30},{-68,0},{-80.155,0}}));\r\n      connect(transition2.inPort, Alternative1.split[2]) annotation (Line(\r\n              points={{-55,-30},{-68,-30},{-68,0},{-80.155,0}}));\r\n      connect(transition3.outPort, Alternative1.join[1]) annotation (Line(\r\n              points={{40.5,30},{54,30},{54,0},{69.155,0}}));\r\n      connect(transition4.outPort, Alternative1.join[2]) annotation (Line(\r\n              points={{40.5,-30},{54,-30},{54,0},{69.155,0}}));\r\n    end CompositeStep1;\r\n\r\n    model CompositeStep2\r\n        \"Composite step used to demonstrate exceptions (in StateGraph.Examples.ShowExceptions)\"\r\n      extends PartialCompositeStep;\r\n      Transition transition(enableTimer=true, waitTime=waitTime)\r\n        annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));\r\n      Step initStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{-140,-10},{-120,10}})));\r\n      Step exitStep(nIn=1, nOut=1) annotation (Placement(transformation(extent={{110,-10},{130,10}})));\r\n      parameter SI.Time waitTime=2 \"Waiting time in this composite step\";\r\n    equation\r\n      connect(exitStep.outPort[1], outPort)\r\n        annotation (Line(points={{130.5,0},{155,0}}));\r\n      connect(initStep.inPort[1], inPort)\r\n        annotation (Line(points={{-141,0},{-160,0}}));\r\n      connect(initStep.outPort[1], transition.inPort)\r\n        annotation (Line(points={{-119.5,0},{-24,0}}));\r\n      connect(transition.outPort, exitStep.inPort[1])\r\n        annotation (Line(points={{-18.5,0},{109,0}}));\r\n    end CompositeStep2;\r\n\r\n  end Utilities", "checksum": "4c69049fef500ce5019e8321c364950febdaa0d5", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo:1251-1738", "component_count": 5, "connection_count": 52, "variable_count": 19, "physical_quantity_count": 2, "parameter_count": 6, "equation_count": 33, "dependency_count": 50, "has_physical_interface": true, "interface_component_count": 3, "has_connections": true, "is_composite_model": true, "complexity_score": 202.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(exitStep.outPort[1], outPort) annotation (Line(points={{130.5,0},{155,0}}))", "search_keywords": ["Boolean", "Real", "SI.VolumeFlowRate", "system"]}, "components": [{"name": "Fi", "type_name": "SI.VolumeFlowRate", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Inflow"}, {"name": "Fo", "type_name": "SI.VolumeFlowRate", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Outflow"}, {"name": "open", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Valve open"}, {"name": "level", "type_name": "Real", "prefixes": [], "modifications": {"start": "0", "fixed": "true"}, "condition": null, "array_dims": null, "comment": "Tank level in % of max height"}, {"name": "g", "type_name": "Real", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "s1.outPort[1]", "to_connector": "T1.inPort", "condition": null}, {"from_connector": "T1.outPort", "to_connector": "makeProduct.inPort", "condition": null}, {"from_connector": "makeProduct.outPort", "to_connector": "T2.inPort", "condition": null}, {"from_connector": "T5.outPort", "to_connector": "emptyTanks.inPort[1]", "condition": null}, {"from_connector": "emptyTanks.outPort[1]", "to_connector": "T6.inPort", "condition": null}, {"from_connector": "setValve1.y", "to_connector": "valve1", "condition": null}, {"from_connector": "setValve2.y", "to_connector": "valve2", "condition": null}, {"from_connector": "setValve3.y", "to_connector": "valve3", "condition": null}, {"from_connector": "makeProduct.suspend[1]", "to_connector": "T3.inPort", "condition": null}, {"from_connector": "T3.outPort", "to_connector": "s2.inPort[1]", "condition": null}, {"from_connector": "T4.outPort", "to_connector": "makeProduct.resume[1]", "condition": null}, {"from_connector": "level1", "to_connector": "makeProduct.level1", "condition": null}, {"from_connector": "s2.outPort[1]", "to_connector": "T5.inPort", "condition": null}, {"from_connector": "s2.outPort[2]", "to_connector": "T4.inPort", "condition": null}, {"from_connector": "T2.outPort", "to_connector": "s1.inPort[1]", "condition": null}, {"from_connector": "T6.outPort", "to_connector": "s1.inPort[2]", "condition": null}, {"from_connector": "fillTank1.inPort[1]", "to_connector": "inPort", "condition": null}, {"from_connector": "fillTank1.outPort[1]", "to_connector": "T1.inPort", "condition": null}, {"from_connector": "fillTank2.outPort[1]", "to_connector": "T3.inPort", "condition": null}, {"from_connector": "emptyTank2.outPort[1]", "to_connector": "outPort", "condition": null}, {"from_connector": "wait1.outPort[1]", "to_connector": "T2.inPort", "condition": null}, {"from_connector": "T2.outPort", "to_connector": "fillTank2.inPort[1]", "condition": null}, {"from_connector": "T1.outPort", "to_connector": "wait1.inPort[1]", "condition": null}, {"from_connector": "wait2.outPort[1]", "to_connector": "T4.inPort", "condition": null}, {"from_connector": "T3.outPort", "to_connector": "wait2.inPort[1]", "condition": null}, {"from_connector": "T4.outPort", "to_connector": "emptyTank2.inPort[1]", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "step3.inPort[1]", "condition": null}, {"from_connector": "step3.outPort[1]", "to_connector": "transition5.inPort", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "step4.inPort[1]", "condition": null}, {"from_connector": "step4.outPort[1]", "to_connector": "transition6.inPort", "condition": null}, {"from_connector": "transition4a.outPort", "to_connector": "step4a.inPort[1]", "condition": null}, {"from_connector": "step4a.outPort[1]", "to_connector": "transition6a.inPort", "condition": null}, {"from_connector": "initStep.inPort[1]", "to_connector": "inPort", "condition": null}, {"from_connector": "exitStep.outPort[1]", "to_connector": "outPort", "condition": null}, {"from_connector": "initStep.outPort[1]", "to_connector": "Alternative1.inPort", "condition": null}, {"from_connector": "Alternative1.outPort", "to_connector": "exitStep.inPort[1]", "condition": null}, {"from_connector": "transition3.inPort", "to_connector": "Alternative1.split[1]", "condition": null}, {"from_connector": "transition4.inPort", "to_connector": "Alternative1.split[2]", "condition": null}, {"from_connector": "transition4a.inPort", "to_connector": "Alternative1.split[3]", "condition": null}, {"from_connector": "transition5.outPort", "to_connector": "Alternative1.join[1]", "condition": null}, {"from_connector": "transition6.outPort", "to_connector": "Alternative1.join[2]", "condition": null}, {"from_connector": "transition6a.outPort", "to_connector": "Alternative1.join[3]", "condition": null}, {"from_connector": "transition1.outPort", "to_connector": "compositeStep11.inPort", "condition": null}, {"from_connector": "transition2.outPort", "to_connector": "compositeStep12.inPort", "condition": null}, {"from_connector": "compositeStep11.outPort", "to_connector": "transition3.inPort", "condition": null}, {"from_connector": "compositeStep12.outPort", "to_connector": "transition4.inPort", "condition": null}, {"from_connector": "transition1.inPort", "to_connector": "Alternative1.split[1]", "condition": null}, {"from_connector": "transition2.inPort", "to_connector": "Alternative1.split[2]", "condition": null}, {"from_connector": "transition3.outPort", "to_connector": "Alternative1.join[1]", "condition": null}, {"from_connector": "transition4.outPort", "to_connector": "Alternative1.join[2]", "condition": null}, {"from_connector": "initStep.outPort[1]", "to_connector": "transition.inPort", "condition": null}, {"from_connector": "transition.outPort", "to_connector": "exitStep.inPort[1]", "condition": null}], "variables": [{"name": "TankController", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MakeProduct", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fi", "type_name": "SI.VolumeFlowRate", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": null, "comment": "\"Inflow\""}, {"name": "Inflow1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Inflow2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Fo", "type_name": "SI.VolumeFlowRate", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": "\"Outflow\""}, {"name": "open", "type_name": "Boolean", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": null, "comment": "\"Valve open\""}, {"name": "Outflow1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Outflow2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "valve", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "level", "type_name": "Real", "prefixes": [], "attributes": {"start": "0", "fixed": "true"}, "binding_equation": null, "comment": "\"Tank level in % of max height\""}, {"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "(inflow1.Fi - outflow1.Fo)/(hmax*A)", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Tank", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Source", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialCompositeStep", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompositeStep2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "time", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "step", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Alternative1", "FillPattern", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Icons", "Modelica.StateGraph.Examples.Utilities", "SI", "StateGraph", "StateGraph.Examples", "StateGraph.Interfaces", "T1", "T2", "T3", "T4", "T5", "T6", "compositeStep11", "compositeStep12", "emptyTank2", "emptyTanks", "exitStep", "fillTank1", "fillTank2", "inflow1", "initStep", "makeProduct", "makeProduct.emptyTank2", "makeProduct.fillTank1", "makeProduct.fillTank2", "outflow1", "s1", "s2", "setValve1", "setValve2", "setValve3", "step3", "step4", "step4a", "transition", "transition1", "transition2", "transition3", "transition4", "transition4a", "transition5", "transition6", "transition6a", "wait1", "wait2"], "inheritance_chain": ["Modelica.Icons.UtilitiesPackage", "StateGraph.Interfaces.PartialStateGraphIcon", "StateGraph.PartialCompositeStep", "PartialCompositeStep"]}
{"fqn": "Modelica.Blocks.Continuous", "kind": "package", "name": "Continuous", "package_path": ["Modelica", "Blocks"], "extends": ["Modelica.Icons.Package", "Interfaces.SISO", "Modelica.Blocks.Interfaces.SVcontrol", "Interfaces.MIMO", "Modelica.Blocks.Interfaces.SISO", "Modelica.Icons.InternalPackage", "Modelica.Icons.Function"], "imports": ["Modelica.Blocks.Interfaces", "Modelica.Blocks.Types.Init", "Modelica.Blocks.Types.SimpleController", "Modelica.Constants.pi", "Modelica.Blocks.Continuous.Internal", "Modelica.Math.asinh", "Modelica.Utilities.Streams", "Modelica.Utilities.Streams.error", "Modelica"], "parameters": [{"name": "k", "type": "Real", "default": "1 \"Gain of controller", "description": null}, {"name": "use_reset", "type": "Boolean", "default": "false \"= true, if reset port enabled\" parameter Boolean use_set = false \"= true, if set port enabled and used as reinitialization value when reset\" parameter Init initType=Init.Ini", "description": null}, {"name": "outMin", "type": "Real", "default": "-outMax \"Lower limit of output\"", "description": null}, {"name": "initType", "type": "Modelica.Blocks.Types.Init", "default": "Modelica.Blocks.Types.Init.NoInit \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\" parameter Real x_start[n]=zeros(n) \"Initial or guess v", "description": null}, {"name": "zeroGain", "type": "Boolean", "default": "abs(k) < Modelica.Constants.eps", "description": null}, {"name": "yMin", "type": "Real", "default": "-yMax \"Lower limit of output\"", "description": null}, {"name": "withFeedForward", "type": "Boolean", "default": "false \"Use feed-forward input?\" parameter Real kFF=1 \"Gain of feed-forward input\" parameter Init initType = Init.InitialState \"Type of initialization (1: no init, 2: steady state, ", "description": null}, {"name": "na", "type": "Integer", "default": "size(a, 1) \"Size of Denominator of transfer function.\"", "description": null}, {"name": "nb", "type": "Integer", "default": "size(b, 1) \"Size of Numerator of transfer function.\"", "description": null}, {"name": "nx", "type": "Integer", "default": "size(A, 1) \"Number of states\"", "description": null}, {"name": "d", "type": "Real", "default": "bb[1]/a[1]", "description": null}, {"name": "a_end", "type": "Real", "default": "if a[end] > 100*Modelica.Constants.eps*sqrt(a*a) then a[end] else 1.0", "description": null}, {"name": "ny", "type": "Integer", "default": "size(C, 1) \"Number of outputs\"", "description": null}, {"name": "m", "type": "Integer", "default": "integer(n/2)", "description": null}, {"name": "evenOrder", "type": "Boolean", "default": "2*m == n", "description": null}, {"name": "w", "type": "Real", "default": "2*Modelica.Constants.pi*f/alpha", "description": null}, {"name": "n", "type": "Integer", "default": "2 \"Order of filter\"", "description": null}, {"name": "normalized", "type": "Boolean", "default": "true \"= true, if amplitude at f_cut is 3 dB, otherwise unmodified filter\"", "description": null}, {"name": "alpha", "type": "Real", "default": "if normalized then sqrt(2^(1/n) - 1) else 1.0 \"Frequency correction factor for normalized filter\"", "description": null}, {"name": "analogFilter", "type": "Modelica.Blocks.Types.AnalogFilter", "default": "Modelica.Blocks.Types.AnalogFilter.CriticalDamping \"Analog filter characteristics (CriticalDamping/Bessel/Butterworth/ChebyshevI)\"", "description": null}, {"name": "filterType", "type": "Modelica.Blocks.Types.FilterType", "default": "Modelica.Blocks.Types.FilterType.LowPass \"Type of filter (LowPass/HighPass/BandPass/BandStop)\"", "description": null}, {"name": "gain", "type": "Real", "default": "1.0 \"Gain (= amplitude of frequency response at zero frequency)\"", "description": null}, {"name": "f_min", "type": "SI.Frequency", "default": "0 \"Band of band pass/stop filter is f_min (A=-3db*gain) .. f_cut (A=-3db*gain)\" parameter Boolean normalized=true \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter", "description": null}, {"name": "init", "type": "Modelica.Blocks.Types.Init", "default": "Modelica.Blocks.Types.Init.SteadyState \"Type of initialization (no init/steady state/initial state/initial output)\" final parameter Integer nx = if filterType == Modelica.Blocks.Ty", "description": null}, {"name": "y_start", "type": "Real", "default": "0 \"Initial value of output\" parameter Real u_nominal = 1.0 \"Nominal value of input (used for scaling the states)\" Modelica.Blocks.Interfaces.RealOutput x[nx] \"Filter states\"", "description": null}, {"name": "ncr", "type": "Integer", "default": "if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then order else mod(order,2)", "description": null}, {"name": "nc0", "type": "Integer", "default": "if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then 0 else integer(order/2)", "description": null}, {"name": "nr", "type": "Integer", "default": "if filterType == Modelica.Blocks.Types.FilterType.BandPass or filterType == Modelica.Blocks.Types.FilterType.BandStop then 0 else if analogFilter == Modelica.Blocks.Types.AnalogFil", "description": null}, {"name": "outMax(start", "type": "Real", "default": "1) \"Upper limit of output\"", "description": null}, {"name": "T(start", "type": "SI.Time", "default": "1) \"Time Constant\"", "description": null}, {"name": "w(start", "type": "Real", "default": "1) \"Angular frequency\"", "description": null}, {"name": "D(start", "type": "Real", "default": "1) \"Damping\"", "description": null}, {"name": "must be non-zero\"", "type": "Real", "default": "", "description": null}, {"name": "yMax(start", "type": "Real", "default": "1) \"Upper limit of output\"", "description": null}, {"name": "bb[:]", "type": "Real", "default": "vector([zeros(max(0,na-nb),1);b])", "description": null}, {"name": "n(min", "type": "Integer", "default": "1) = 2 \"Order of filter\"", "description": null}, {"name": "f(start", "type": "SI.Frequency", "default": "1) \"Cut-off frequency\"", "description": null}, {"name": "order(min", "type": "Integer", "default": "1) = 2 \"Order of filter\"", "description": null}, {"name": "f_cut \"Cut-off frequency\"", "type": "SI.Frequency", "default": "", "description": null}, {"name": "cr[ncr](each fixed", "type": "Real", "default": "false)", "description": null}, {"name": "c0[nc0](each fixed", "type": "Real", "default": "false)", "description": null}, {"name": "c1[nc0](each fixed", "type": "Real", "default": "false)", "description": null}, {"name": "r[nr](each fixed", "type": "Real", "default": "false)", "description": null}, {"name": "a[na](each fixed", "type": "Real", "default": "false)", "description": null}, {"name": "b[na](each fixed", "type": "Real", "default": "false)", "description": null}, {"name": "ku[na](each fixed", "type": "Real", "default": "false)", "description": null}], "equations": [{"equations": ["algorithm\r\n          assert( a^2/4 - b <= 0,  \"Band pass transformation cannot be computed\")", "z :=solveOneNonlinearEquation(a, b, w, 0, 1)", "alpha := sqrt(z)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4370, "end_line": 4373, "start_col": 9, "end_col": 28}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4370, "end_line": 4370, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          // Check that f(u_min) and f(u_max) have different sign\r\n          fa := residue(aa,bb,ww,u_min)", "fb := residue(aa,bb,ww,u_max)", "fc := fb", "if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments u_min and u_max to solveOneNonlinearEquation(..)\\n\" +\r\n              \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  u_min  = \" + String(u_min) + \"\\n\" + \"  u_max  = \" + String(u_max)\r\n               + \"\\n\" + \"  fa = f(u_min) = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(u_max) = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\")", "end if", "// Initialize variables\r\n          c := a", "fc := fa", "e := b - a", "d := e", "// Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b", "b := c", "c := a", "fa := fb", "fb := fc", "fc := fa", "end if", "tol := 2*eps*abs(b) + tolerance", "m := (c - b)/2", "if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true", "u := b", "else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m", "d := e", "else\r\n                s := fb/fa", "if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "q := 1 - s", "else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc", "r := fb/fc", "p := s*(2*m*q*(q - r) - (b - a)*(r - 1))", "q := (q - 1)*(r - 1)*(s - 1)", "end if", "if p > 0 then\r\n                  q := -q", "else\r\n                  p := -p", "end if", "s := e", "e := d", "if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q", "else\r\n                  // use bi-section\r\n                  e := m", "d := e", "end if", "end if", "// Best guess value is defined as \"a\"\r\n              a := b", "fa := fb", "b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol)", "fb := residue(aa,bb,ww,b)", "if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a", "fc := fa", "e := b - a", "d := e", "end if", "end if", "end while"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4250, "end_line": 4340, "start_col": 9, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4250, "end_line": 4250, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n            res := z^2 + (a*w*z/(1+z))^2 - (2+b*w^2)*z + 1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4215, "end_line": 4216, "start_col": 11, "end_col": 60}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4215, "end_line": 4215, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm\r\n           // Find interval for alpha\r\n           (alpha_min, alpha_max) :=findInterval(c1, c2)", "// Compute alpha, so that abs(G(p)) = -3db\r\n           alpha :=solveOneNonlinearEquation(\r\n            c1,\r\n            c2,\r\n            alpha_min,\r\n            alpha_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4179, "end_line": 4188, "start_col": 9, "end_col": 24}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4179, "end_line": 4179, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          // Check that f(u_min) and f(u_max) have different sign\r\n          fa := normalizationResidue(c1,c2,u_min)", "fb := normalizationResidue(c1,c2,u_max)", "fc := fb", "if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments u_min and u_max to solveOneNonlinearEquation(..)\\n\" +\r\n              \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  u_min  = \" + String(u_min) + \"\\n\" + \"  u_max  = \" + String(u_max)\r\n               + \"\\n\" + \"  fa = f(u_min) = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(u_max) = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\")", "end if", "// Initialize variables\r\n          c := a", "fc := fa", "e := b - a", "d := e", "// Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b", "b := c", "c := a", "fa := fb", "fb := fc", "fc := fa", "end if", "tol := 2*eps*abs(b) + tolerance", "m := (c - b)/2", "if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true", "u := b", "else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m", "d := e", "else\r\n                s := fb/fa", "if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "q := 1 - s", "else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc", "r := fb/fc", "p := s*(2*m*q*(q - r) - (b - a)*(r - 1))", "q := (q - 1)*(r - 1)*(s - 1)", "end if", "if p > 0 then\r\n                  q := -q", "else\r\n                  p := -p", "end if", "s := e", "e := d", "if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q", "else\r\n                  // use bi-section\r\n                  e := m", "d := e", "end if", "end if", "// Best guess value is defined as \"a\"\r\n              a := b", "fa := fb", "b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol)", "fb := normalizationResidue(c1,c2,b)", "if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a", "fc := fa", "e := b - a", "d := e", "end if", "end if", "end while"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4059, "end_line": 4149, "start_col": 9, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4059, "end_line": 4059, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n            alpha_min :=0", "residue := normalizationResidue(c1, c2, alpha)", "if residue < 0 then\r\n               alpha_max :=alpha", "else\r\n               while residue >= 0 loop\r\n                  alpha := 1.1*alpha", "residue := normalizationResidue(c1, c2, alpha)", "end while", "alpha_max :=alpha", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4013, "end_line": 4024, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 4013, "end_line": 4013, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm\r\n            assert(size(c1,1) <= 1, \"Internal error 2 (should not occur)\")", "if size(c1, 1) == 1 then\r\n              cc1 := c1[1]*c1[1]", "p := 1 + cc1*alpha2", "A2 := A2*p", "end if", "for i in 1:size(c2, 1) loop\r\n              cc1 := c2[i, 2]*c2[i, 2] - 2*c2[i, 1]", "cc2 := c2[i, 1]*c2[i, 1]", "p := 1 + cc1*alpha2 + cc2*alpha4", "A2 := A2*p", "end for", "residue := 1/sqrt(A2) - beta"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3986, "end_line": 3999, "start_col": 11, "end_col": 42}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3986, "end_line": 3986, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm\r\n          for i in 1:size(den1, 1) loop\r\n            cr[i] := 1/den1[i]", "end for", "for i in 1:size(den2, 1) loop\r\n            c1[i] := den2[i, 2]/den2[i, 1]", "c0[i] := 1/den2[i, 1]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3942, "end_line": 3950, "start_col": 9, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 3942, "end_line": 3942, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n          if order == 1 then\r\n            alpha := 1.002377293007601", "c1[1] := 0.9976283451109835", "elseif order == 2 then\r\n            alpha := 0.7356641785819585", "c2[1, 1] := 0.6159132201783791", "c2[1, 2] := 1.359315879600889", "elseif order == 3 then\r\n            alpha := 0.5704770156982642", "c1[1] := 0.7548574865985343", "c2[1, 1] := 0.4756958028827457", "c2[1, 2] := 0.9980615136104388", "elseif order == 4 then\r\n            alpha := 0.4737978580281427", "c2[1, 1] := 0.4873729247240677", "c2[1, 2] := 1.337564170455762", "c2[2, 1] := 0.3877724315741958", "c2[2, 2] := 0.7730405590839861", "elseif order == 5 then\r\n            alpha := 0.4126226974763408", "c1[1] := 0.6645723262620757", "c2[1, 1] := 0.4115231900614016", "c2[1, 2] := 1.138349926728708", "c2[2, 1] := 0.3234938702877912", "c2[2, 2] := 0.6205992985771313", "elseif order == 6 then\r\n            alpha := 0.3705098000736233", "c2[1, 1] := 0.3874508649098960", "c2[1, 2] := 1.219740879520741", "c2[2, 1] := 0.3493298843155746", "c2[2, 2] := 0.9670265529381365", "c2[3, 1] := 0.2747419229514599", "c2[3, 2] := 0.5122165075105700", "elseif order == 7 then\r\n            alpha := 0.3393452623586350", "c1[1] := 0.5927147125821412", "c2[1, 1] := 0.3383379423919174", "c2[1, 2] := 1.092630816438030", "c2[2, 1] := 0.3001025788696046", "c2[2, 2] := 0.8289928256598656", "c2[3, 1] := 0.2372867471539579", "c2[3, 2] := 0.4325128641920154", "elseif order == 8 then\r\n            alpha := 0.3150267393795002", "c2[1, 1] := 0.3151115975207653", "c2[1, 2] := 1.109403015460190", "c2[2, 1] := 0.2969344839572762", "c2[2, 2] := 0.9737455812222699", "c2[3, 1] := 0.2612545921889538", "c2[3, 2] := 0.7190394712068573", "c2[4, 1] := 0.2080523342974281", "c2[4, 2] := 0.3721456473047434", "elseif order == 9 then\r\n            alpha := 0.2953310177184124", "c1[1] := 0.5377196679501422", "c2[1, 1] := 0.2824689124281034", "c2[1, 2] := 1.022646191567475", "c2[2, 1] := 0.2626824161383468", "c2[2, 2] := 0.8695626454762596", "c2[3, 1] := 0.2302781917677917", "c2[3, 2] := 0.6309047553448520", "c2[4, 1] := 0.1847991729757028", "c2[4, 2] := 0.3251978031287202", "elseif order == 10 then\r\n            alpha := 0.2789426890619463", "c2[1, 1] := 0.2640769908255582", "c2[1, 2] := 1.019788132875305", "c2[2, 1] := 0.2540802639216947", "c2[2, 2] := 0.9377020417760623", "c2[3, 1] := 0.2343577229427963", "c2[3, 2] := 0.7802229808216112", "c2[4, 1] := 0.2052193139338624", "c2[4, 2] := 0.5594176813008133", "c2[5, 1] := 0.1659546953748916", "c2[5, 2] := 0.2878349616233292", "elseif order == 11 then\r\n            alpha := 0.2650227766037203", "c1[1] := 0.4950265498954191", "c2[1, 1] := 0.2411858478546218", "c2[1, 2] := 0.9567800996387417", "c2[2, 1] := 0.2296849355380925", "c2[2, 2] := 0.8592523717113126", "c2[3, 1] := 0.2107851705677406", "c2[3, 2] := 0.7040216048898129", "c2[4, 1] := 0.1846461385164021", "c2[4, 2] := 0.5006729207276717", "c2[5, 1] := 0.1504217970817433", "c2[5, 2] := 0.2575070491320295", "elseif order == 12 then\r\n            alpha := 0.2530051198547209", "c2[1, 1] := 0.2268294941204543", "c2[1, 2] := 0.9473116570034053", "c2[2, 1] := 0.2207657387793729", "c2[2, 2] := 0.8933728946287606", "c2[3, 1] := 0.2087600700376653", "c2[3, 2] := 0.7886236252756229", "c2[4, 1] := 0.1909959101492760", "c2[4, 2] := 0.6389263649257017", "c2[5, 1] := 0.1675208146048472", "c2[5, 2] := 0.4517847275162215", "c2[6, 1] := 0.1374257286372761", "c2[6, 2] := 0.2324699157474680", "elseif order == 13 then\r\n            alpha := 0.2424910397561007", "c1[1] := 0.4608848369928040", "c2[1, 1] := 0.2099813050274780", "c2[1, 2] := 0.8992478823790660", "c2[2, 1] := 0.2027250423101359", "c2[2, 2] := 0.8328117484224146", "c2[3, 1] := 0.1907635894058731", "c2[3, 2] := 0.7257379204691213", "c2[4, 1] := 0.1742280397887686", "c2[4, 2] := 0.5830640944868014", "c2[5, 1] := 0.1530858190490478", "c2[5, 2] := 0.4106192089751885", "c2[6, 1] := 0.1264090712880446", "c2[6, 2] := 0.2114980230156001", "elseif order == 14 then\r\n            alpha := 0.2331902368695848", "c2[1, 1] := 0.1986162311411235", "c2[1, 2] := 0.8876961808055535", "c2[2, 1] := 0.1946683341271615", "c2[2, 2] := 0.8500754229171967", "c2[3, 1] := 0.1868331332895056", "c2[3, 2] := 0.7764629313723603", "c2[4, 1] := 0.1752118757862992", "c2[4, 2] := 0.6699720402924552", "c2[5, 1] := 0.1598906457908402", "c2[5, 2] := 0.5348446712848934", "c2[6, 1] := 0.1407810153019944", "c2[6, 2] := 0.3755841316563539", "c2[7, 1] := 0.1169627966707339", "c2[7, 2] := 0.1937088226304455", "elseif order == 15 then\r\n            alpha := 0.2248854870552422", "c1[1] := 0.4328492272335646", "c2[1, 1] := 0.1857292591004588", "c2[1, 2] := 0.8496337061962563", "c2[2, 1] := 0.1808644178280136", "c2[2, 2] := 0.8020517898136011", "c2[3, 1] := 0.1728264404199081", "c2[3, 2] := 0.7247449729331105", "c2[4, 1] := 0.1616970125901954", "c2[4, 2] := 0.6205369315943097", "c2[5, 1] := 0.1475257264578426", "c2[5, 2] := 0.4929612162355906", "c2[6, 1] := 0.1301861023357119", "c2[6, 2] := 0.3454770708040735", "c2[7, 1] := 0.1087810777120188", "c2[7, 2] := 0.1784526655428406", "elseif order == 16 then\r\n            alpha := 0.2174105053474761", "c2[1, 1] := 0.1765637967473151", "c2[1, 2] := 0.8377453068635511", "c2[2, 1] := 0.1738525357503125", "c2[2, 2] := 0.8102988957433199", "c2[3, 1] := 0.1684627004613343", "c2[3, 2] := 0.7563265923413258", "c2[4, 1] := 0.1604519074815815", "c2[4, 2] := 0.6776082294687619", "c2[5, 1] := 0.1498828607802206", "c2[5, 2] := 0.5766417034027680", "c2[6, 1] := 0.1367764717792823", "c2[6, 2] := 0.4563528264410489", "c2[7, 1] := 0.1209810465419295", "c2[7, 2] := 0.3193782657322374", "c2[8, 1] := 0.1016312648007554", "c2[8, 2] := 0.1652419227369036", "elseif order == 17 then\r\n            alpha := 0.2106355148193306", "c1[1] := 0.4093223608497299", "c2[1, 1] := 0.1664014345826274", "c2[1, 2] := 0.8067173752345952", "c2[2, 1] := 0.1629839591538256", "c2[2, 2] := 0.7712924931447541", "c2[3, 1] := 0.1573277802512491", "c2[3, 2] := 0.7134213666303411", "c2[4, 1] := 0.1494828185148637", "c2[4, 2] := 0.6347841731714884", "c2[5, 1] := 0.1394948812681826", "c2[5, 2] := 0.5375594414619047", "c2[6, 1] := 0.1273627583380806", "c2[6, 2] := 0.4241608926375478", "c2[7, 1] := 0.1129187258461290", "c2[7, 2] := 0.2965752009703245", "c2[8, 1] := 0.9533357359908857e-1", "c2[8, 2] := 0.1537041700889585", "elseif order == 18 then\r\n            alpha := 0.2044575288651841", "c2[1, 1] := 0.1588768571976356", "c2[1, 2] := 0.7951914263212913", "c2[2, 1] := 0.1569357024981854", "c2[2, 2] := 0.7744529690772538", "c2[3, 1] := 0.1530722206358810", "c2[3, 2] := 0.7335304425992080", "c2[4, 1] := 0.1473206710524167", "c2[4, 2] := 0.6735038935387268", "c2[5, 1] := 0.1397225420331520", "c2[5, 2] := 0.5959151542621590", "c2[6, 1] := 0.1303092459809849", "c2[6, 2] := 0.5026483447894845", "c2[7, 1] := 0.1190627367060072", "c2[7, 2] := 0.3956893824587150", "c2[8, 1] := 0.1058058030798994", "c2[8, 2] := 0.2765091830730650", "c2[9, 1] := 0.8974708108800873e-1", "c2[9, 2] := 0.1435505288284833", "elseif order == 19 then\r\n            alpha := 0.1987936248083529", "c1[1] := 0.3892259966869526", "c2[1, 1] := 0.1506640012172225", "c2[1, 2] := 0.7693121733774260", "c2[2, 1] := 0.1481728062796673", "c2[2, 2] := 0.7421133586741549", "c2[3, 1] := 0.1440444668388838", "c2[3, 2] := 0.6975075386214800", "c2[4, 1] := 0.1383101628540374", "c2[4, 2] := 0.6365464378910025", "c2[5, 1] := 0.1310032283190998", "c2[5, 2] := 0.5606211948462122", "c2[6, 1] := 0.1221431166405330", "c2[6, 2] := 0.4713530424221445", "c2[7, 1] := 0.1116991161103884", "c2[7, 2] := 0.3703717538617073", "c2[8, 1] := 0.9948917351196349e-1", "c2[8, 2] := 0.2587371155559744", "c2[9, 1] := 0.8475989238107367e-1", "c2[9, 2] := 0.1345537894555993", "elseif order == 20 then\r\n            alpha := 0.1935761760416219", "c2[1, 1] := 0.1443871348337404", "c2[1, 2] := 0.7584165598446141", "c2[2, 1] := 0.1429501891353184", "c2[2, 2] := 0.7423000962318863", "c2[3, 1] := 0.1400877384920004", "c2[3, 2] := 0.7104185332215555", "c2[4, 1] := 0.1358210369491446", "c2[4, 2] := 0.6634599783272630", "c2[5, 1] := 0.1301773703034290", "c2[5, 2] := 0.6024175491895959", "c2[6, 1] := 0.1231826501439148", "c2[6, 2] := 0.5285332736326852", "c2[7, 1] := 0.1148465498575254", "c2[7, 2] := 0.4431977385498628", "c2[8, 1] := 0.1051289462376788", "c2[8, 2] := 0.3477444062821162", "c2[9, 1] := 0.9384622797485121e-1", "c2[9, 2] := 0.2429038300327729", "c2[10, 1] := 0.8028211612831444e-1", "c2[10, 2] := 0.1265329974009533", "elseif order == 21 then\r\n            alpha := 0.1887494014766075", "c1[1] := 0.3718070668941645", "c2[1, 1] := 0.1376151928386445", "c2[1, 2] := 0.7364290859445481", "c2[2, 1] := 0.1357438914390695", "c2[2, 2] := 0.7150167318935022", "c2[3, 1] := 0.1326398453462415", "c2[3, 2] := 0.6798001808470175", "c2[4, 1] := 0.1283231214897678", "c2[4, 2] := 0.6314663440439816", "c2[5, 1] := 0.1228169159777534", "c2[5, 2] := 0.5709353626166905", "c2[6, 1] := 0.1161406100773184", "c2[6, 2] := 0.4993087153571335", "c2[7, 1] := 0.1082959649233524", "c2[7, 2] := 0.4177766148584385", "c2[8, 1] := 0.9923596957485723e-1", "c2[8, 2] := 0.3274257287232124", "c2[9, 1] := 0.8877776108724853e-1", "c2[9, 2] := 0.2287218166767916", "c2[10, 1] := 0.7624076527736326e-1", "c2[10, 2] := 0.1193423971506988", "elseif order == 22 then\r\n            alpha := 0.1842668221199706", "c2[1, 1] := 0.1323053462701543", "c2[1, 2] := 0.7262446126765204", "c2[2, 1] := 0.1312121721769772", "c2[2, 2] := 0.7134286088450949", "c2[3, 1] := 0.1290330911166814", "c2[3, 2] := 0.6880287870435514", "c2[4, 1] := 0.1257817990372067", "c2[4, 2] := 0.6505015800059301", "c2[5, 1] := 0.1214765261983008", "c2[5, 2] := 0.6015107185211451", "c2[6, 1] := 0.1161365140967959", "c2[6, 2] := 0.5418983553698413", "c2[7, 1] := 0.1097755171533100", "c2[7, 2] := 0.4726370779831614", "c2[8, 1] := 0.1023889478519956", "c2[8, 2] := 0.3947439506537486", "c2[9, 1] := 0.9392485861253800e-1", "c2[9, 2] := 0.3090996703083202", "c2[10, 1] := 0.8420273775456455e-1", "c2[10, 2] := 0.2159561978556017", "c2[11, 1] := 0.7257600023938262e-1", "c2[11, 2] := 0.1128633732721116", "elseif order == 23 then\r\n            alpha := 0.1800893554453722", "c1[1] := 0.3565232673929280", "c2[1, 1] := 0.1266275171652706", "c2[1, 2] := 0.7072778066734162", "c2[2, 1] := 0.1251865227648538", "c2[2, 2] := 0.6900676345785905", "c2[3, 1] := 0.1227944815236645", "c2[3, 2] := 0.6617011100576023", "c2[4, 1] := 0.1194647013077667", "c2[4, 2] := 0.6226432315773119", "c2[5, 1] := 0.1152132989252356", "c2[5, 2] := 0.5735222810625359", "c2[6, 1] := 0.1100558598478487", "c2[6, 2] := 0.5151027978024605", "c2[7, 1] := 0.1040013558214886", "c2[7, 2] := 0.4482410942032739", "c2[8, 1] := 0.9704014176512626e-1", "c2[8, 2] := 0.3738049984631116", "c2[9, 1] := 0.8911683905758054e-1", "c2[9, 2] := 0.2925028692588410", "c2[10, 1] := 0.8005438265072295e-1", "c2[10, 2] := 0.2044134600278901", "c2[11, 1] := 0.6923832296800832e-1", "c2[11, 2] := 0.1069984887283394", "elseif order == 24 then\r\n            alpha := 0.1761838665838427", "c2[1, 1] := 0.1220804912720132", "c2[1, 2] := 0.6978026874156063", "c2[2, 1] := 0.1212296762358897", "c2[2, 2] := 0.6874139794926736", "c2[3, 1] := 0.1195328372961027", "c2[3, 2] := 0.6667954259551859", "c2[4, 1] := 0.1169990987333593", "c2[4, 2] := 0.6362602049901176", "c2[5, 1] := 0.1136409040480130", "c2[5, 2] := 0.5962662188435553", "c2[6, 1] := 0.1094722001757955", "c2[6, 2] := 0.5474001634109253", "c2[7, 1] := 0.1045052832229087", "c2[7, 2] := 0.4903523180249535", "c2[8, 1] := 0.9874509806025907e-1", "c2[8, 2] := 0.4258751523524645", "c2[9, 1] := 0.9217799943472177e-1", "c2[9, 2] := 0.3547079765396403", "c2[10, 1] := 0.8474633796250476e-1", "c2[10, 2] := 0.2774145482392767", "c2[11, 1] := 0.7627722381240495e-1", "c2[11, 2] := 0.1939329108084139", "c2[12, 1] := 0.6618645465422745e-1", "c2[12, 2] := 0.1016670147947242", "elseif order == 25 then\r\n            alpha := 0.1725220521949266", "c1[1] := 0.3429735385896000", "c2[1, 1] := 0.1172525033170618", "c2[1, 2] := 0.6812327932576614", "c2[2, 1] := 0.1161194585333535", "c2[2, 2] := 0.6671566071153211", "c2[3, 1] := 0.1142375145794466", "c2[3, 2] := 0.6439167855053158", "c2[4, 1] := 0.1116157454252308", "c2[4, 2] := 0.6118378416180135", "c2[5, 1] := 0.1082654809459177", "c2[5, 2] := 0.5713609763370088", "c2[6, 1] := 0.1041985674230918", "c2[6, 2] := 0.5230289949762722", "c2[7, 1] := 0.9942439308123559e-1", "c2[7, 2] := 0.4674627926041906", "c2[8, 1] := 0.9394453593830893e-1", "c2[8, 2] := 0.4053226688298811", "c2[9, 1] := 0.8774221237222533e-1", "c2[9, 2] := 0.3372372276379071", "c2[10, 1] := 0.8075839512216483e-1", "c2[10, 2] := 0.2636485508005428", "c2[11, 1] := 0.7282483286646764e-1", "c2[11, 2] := 0.1843801345273085", "c2[12, 1] := 0.6338571166846652e-1", "c2[12, 2] := 0.9680153764737715e-1", "elseif order == 26 then\r\n            alpha := 0.1690795702796737", "c2[1, 1] := 0.1133168695796030", "c2[1, 2] := 0.6724297955493932", "c2[2, 1] := 0.1126417845769961", "c2[2, 2] := 0.6638709519790540", "c2[3, 1] := 0.1112948749545606", "c2[3, 2] := 0.6468652038763624", "c2[4, 1] := 0.1092823986944244", "c2[4, 2] := 0.6216337070799265", "c2[5, 1] := 0.1066130386697976", "c2[5, 2] := 0.5885011413992190", "c2[6, 1] := 0.1032969057045413", "c2[6, 2] := 0.5478864278297548", "c2[7, 1] := 0.9934388184210715e-1", "c2[7, 2] := 0.5002885306054287", "c2[8, 1] := 0.9476081523436283e-1", "c2[8, 2] := 0.4462644847551711", "c2[9, 1] := 0.8954648464575577e-1", "c2[9, 2] := 0.3863930785049522", "c2[10, 1] := 0.8368166847159917e-1", "c2[10, 2] := 0.3212074592527143", "c2[11, 1] := 0.7710664731701103e-1", "c2[11, 2] := 0.2510470347119383", "c2[12, 1] := 0.6965807988411425e-1", "c2[12, 2] := 0.1756419294111342", "c2[13, 1] := 0.6080674930548766e-1", "c2[13, 2] := 0.9234535279274277e-1", "elseif order == 27 then\r\n            alpha := 0.1658353543067995", "c1[1] := 0.3308543720638957", "c2[1, 1] := 0.1091618578712746", "c2[1, 2] := 0.6577977071169651", "c2[2, 1] := 0.1082549561495043", "c2[2, 2] := 0.6461121666520275", "c2[3, 1] := 0.1067479247890451", "c2[3, 2] := 0.6267937760991321", "c2[4, 1] := 0.1046471079537577", "c2[4, 2] := 0.6000750116745808", "c2[5, 1] := 0.1019605976654259", "c2[5, 2] := 0.5662734183049320", "c2[6, 1] := 0.9869726954433709e-1", "c2[6, 2] := 0.5257827234948534", "c2[7, 1] := 0.9486520934132483e-1", "c2[7, 2] := 0.4790595019077763", "c2[8, 1] := 0.9046906518775348e-1", "c2[8, 2] := 0.4266025862147336", "c2[9, 1] := 0.8550529998276152e-1", "c2[9, 2] := 0.3689188223512328", "c2[10, 1] := 0.7995282239306020e-1", "c2[10, 2] := 0.3064589322702932", "c2[11, 1] := 0.7375174596252882e-1", "c2[11, 2] := 0.2394754504667310", "c2[12, 1] := 0.6674377263329041e-1", "c2[12, 2] := 0.1676223546666024", "c2[13, 1] := 0.5842458027529246e-1", "c2[13, 2] := 0.8825044329219431e-1", "elseif order == 28 then\r\n            alpha := 0.1627710671942929", "c2[1, 1] := 0.1057232656113488", "c2[1, 2] := 0.6496161226860832", "c2[2, 1] := 0.1051786825724864", "c2[2, 2] := 0.6424661279909941", "c2[3, 1] := 0.1040917964935006", "c2[3, 2] := 0.6282470268918791", "c2[4, 1] := 0.1024670101953951", "c2[4, 2] := 0.6071189030701136", "c2[5, 1] := 0.1003105109519892", "c2[5, 2] := 0.5793175191747016", "c2[6, 1] := 0.9762969425430802e-1", "c2[6, 2] := 0.5451486608855443", "c2[7, 1] := 0.9443223803058400e-1", "c2[7, 2] := 0.5049796971628137", "c2[8, 1] := 0.9072460982036488e-1", "c2[8, 2] := 0.4592270546572523", "c2[9, 1] := 0.8650956423253280e-1", "c2[9, 2] := 0.4083368605952977", "c2[10, 1] := 0.8178165740374893e-1", "c2[10, 2] := 0.3527525188880655", "c2[11, 1] := 0.7651838885868020e-1", "c2[11, 2] := 0.2928534570013572", "c2[12, 1] := 0.7066010532447490e-1", "c2[12, 2] := 0.2288185204390681", "c2[13, 1] := 0.6405358596145789e-1", "c2[13, 2] := 0.1602396172588190", "c2[14, 1] := 0.5621780070227172e-1", "c2[14, 2] := 0.8447589564915071e-1", "elseif order == 29 then\r\n            alpha := 0.1598706626277596", "c1[1] := 0.3199314513011623", "c2[1, 1] := 0.1021101032532951", "c2[1, 2] := 0.6365758882240111", "c2[2, 1] := 0.1013729819392774", "c2[2, 2] := 0.6267495975736321", "c2[3, 1] := 0.1001476175660628", "c2[3, 2] := 0.6104876178266819", "c2[4, 1] := 0.9843854640428316e-1", "c2[4, 2] := 0.5879603139195113", "c2[5, 1] := 0.9625164534591696e-1", "c2[5, 2] := 0.5594012291050210", "c2[6, 1] := 0.9359356960417668e-1", "c2[6, 2] := 0.5251016150410664", "c2[7, 1] := 0.9047086748649986e-1", "c2[7, 2] := 0.4854024475590397", "c2[8, 1] := 0.8688856407189167e-1", "c2[8, 2] := 0.4406826457109709", "c2[9, 1] := 0.8284779224069856e-1", "c2[9, 2] := 0.3913408089298914", "c2[10, 1] := 0.7834154620997181e-1", "c2[10, 2] := 0.3377643999400627", "c2[11, 1] := 0.7334628941928766e-1", "c2[11, 2] := 0.2802710651919946", "c2[12, 1] := 0.6780290487362146e-1", "c2[12, 2] := 0.2189770008083379", "c2[13, 1] := 0.6156321231528423e-1", "c2[13, 2] := 0.1534235999306070", "c2[14, 1] := 0.5416797446761512e-1", "c2[14, 2] := 0.8098664736760292e-1", "elseif order == 30 then\r\n            alpha := 0.1571200296252450", "c2[1, 1] := 0.9908074847842124e-1", "c2[1, 2] := 0.6289618807831557", "c2[2, 1] := 0.9863509708328196e-1", "c2[2, 2] := 0.6229164525571278", "c2[3, 1] := 0.9774542692037148e-1", "c2[3, 2] := 0.6108853364240036", "c2[4, 1] := 0.9641490581986484e-1", "c2[4, 2] := 0.5929869253412513", "c2[5, 1] := 0.9464802912225441e-1", "c2[5, 2] := 0.5693960175547550", "c2[6, 1] := 0.9245027206218041e-1", "c2[6, 2] := 0.5403402396359503", "c2[7, 1] := 0.8982754584112941e-1", "c2[7, 2] := 0.5060948065875106", "c2[8, 1] := 0.8678535291732599e-1", "c2[8, 2] := 0.4669749797983789", "c2[9, 1] := 0.8332744242052199e-1", "c2[9, 2] := 0.4233249626334694", "c2[10, 1] := 0.7945356393775309e-1", "c2[10, 2] := 0.3755006094498054", "c2[11, 1] := 0.7515543969833788e-1", "c2[11, 2] := 0.3238400339292700", "c2[12, 1] := 0.7040879901685638e-1", "c2[12, 2] := 0.2686072427439079", "c2[13, 1] := 0.6515528854010540e-1", "c2[13, 2] := 0.2098650589782619", "c2[14, 1] := 0.5925168237177876e-1", "c2[14, 2] := 0.1471138832654873", "c2[15, 1] := 0.5225913954211672e-1", "c2[15, 2] := 0.7775248839507864e-1", "elseif order == 31 then\r\n            alpha := 0.1545067022920929", "c1[1] := 0.3100206996451866", "c2[1, 1] := 0.9591020358831668e-1", "c2[1, 2] := 0.6172474793293396", "c2[2, 1] := 0.9530301275601203e-1", "c2[2, 2] := 0.6088916323460413", "c2[3, 1] := 0.9429332655402368e-1", "c2[3, 2] := 0.5950511595503025", "c2[4, 1] := 0.9288445429894548e-1", "c2[4, 2] := 0.5758534119053522", "c2[5, 1] := 0.9108073420087422e-1", "c2[5, 2] := 0.5514734636081183", "c2[6, 1] := 0.8888719137536870e-1", "c2[6, 2] := 0.5221306199481831", "c2[7, 1] := 0.8630901440239650e-1", "c2[7, 2] := 0.4880834248148061", "c2[8, 1] := 0.8335074993373294e-1", "c2[8, 2] := 0.4496225358496770", "c2[9, 1] := 0.8001502494376102e-1", "c2[9, 2] := 0.4070602306679052", "c2[10, 1] := 0.7630041338037624e-1", "c2[10, 2] := 0.3607139804818122", "c2[11, 1] := 0.7219760885744920e-1", "c2[11, 2] := 0.3108783301229550", "c2[12, 1] := 0.6768185077153345e-1", "c2[12, 2] := 0.2577706252514497", "c2[13, 1] := 0.6269571766328638e-1", "c2[13, 2] := 0.2014081375889921", "c2[14, 1] := 0.5710081766945065e-1", "c2[14, 2] := 0.1412581515841926", "c2[15, 1] := 0.5047740914807019e-1", "c2[15, 2] := 0.7474725873250158e-1", "elseif order == 32 then\r\n            alpha := 0.1520196210848210", "c2[1, 1] := 0.9322163554339406e-1", "c2[1, 2] := 0.6101488690506050", "c2[2, 1] := 0.9285233997694042e-1", "c2[2, 2] := 0.6049832320721264", "c2[3, 1] := 0.9211494244473163e-1", "c2[3, 2] := 0.5946969295569034", "c2[4, 1] := 0.9101176786042449e-1", "c2[4, 2] := 0.5793791854364477", "c2[5, 1] := 0.8954614071360517e-1", "c2[5, 2] := 0.5591619969234026", "c2[6, 1] := 0.8772216763680164e-1", "c2[6, 2] := 0.5342177994699602", "c2[7, 1] := 0.8554440426912734e-1", "c2[7, 2] := 0.5047560942986598", "c2[8, 1] := 0.8301735302045588e-1", "c2[8, 2] := 0.4710187048140929", "c2[9, 1] := 0.8014469519188161e-1", "c2[9, 2] := 0.4332730387207936", "c2[10, 1] := 0.7692807528893225e-1", "c2[10, 2] := 0.3918021436411035", "c2[11, 1] := 0.7336507157284898e-1", "c2[11, 2] := 0.3468890521471250", "c2[12, 1] := 0.6944555312763458e-1", "c2[12, 2] := 0.2987898029050460", "c2[13, 1] := 0.6514446669420571e-1", "c2[13, 2] := 0.2476810747407199", "c2[14, 1] := 0.6040544477732702e-1", "c2[14, 2] := 0.1935412053397663", "c2[15, 1] := 0.5509478650672775e-1", "c2[15, 2] := 0.1358108994174911", "c2[16, 1] := 0.4881064725720192e-1", "c2[16, 2] := 0.7194819894416505e-1", "elseif order == 33 then\r\n            alpha := 0.1496489351138032", "c1[1] := 0.3009752799176432", "c2[1, 1] := 0.9041725460994505e-1", "c2[1, 2] := 0.5995521047364046", "c2[2, 1] := 0.8991117804113002e-1", "c2[2, 2] := 0.5923764112099496", "c2[3, 1] := 0.8906941547422532e-1", "c2[3, 2] := 0.5804822013853129", "c2[4, 1] := 0.8789442491445575e-1", "c2[4, 2] := 0.5639663528946501", "c2[5, 1] := 0.8638945831033775e-1", "c2[5, 2] := 0.5429623519607796", "c2[6, 1] := 0.8455834602616358e-1", "c2[6, 2] := 0.5176379938389326", "c2[7, 1] := 0.8240517431382334e-1", "c2[7, 2] := 0.4881921474066189", "c2[8, 1] := 0.7993380417355076e-1", "c2[8, 2] := 0.4548502528082586", "c2[9, 1] := 0.7714713890732801e-1", "c2[9, 2] := 0.4178579388038483", "c2[10, 1] := 0.7404596598181127e-1", "c2[10, 2] := 0.3774715722484659", "c2[11, 1] := 0.7062702339160462e-1", "c2[11, 2] := 0.3339432938810453", "c2[12, 1] := 0.6687952672391507e-1", "c2[12, 2] := 0.2874950693388235", "c2[13, 1] := 0.6277828912909767e-1", "c2[13, 2] := 0.2382680702894708", "c2[14, 1] := 0.5826808305383988e-1", "c2[14, 2] := 0.1862073169968455", "c2[15, 1] := 0.5321974125363517e-1", "c2[15, 2] := 0.1307323751236313", "c2[16, 1] := 0.4724820282032780e-1", "c2[16, 2] := 0.6933542082177094e-1", "elseif order == 34 then\r\n            alpha := 0.1473858373968463", "c2[1, 1] := 0.8801537152275983e-1", "c2[1, 2] := 0.5929204288972172", "c2[2, 1] := 0.8770594341007476e-1", "c2[2, 2] := 0.5884653382247518", "c2[3, 1] := 0.8708797598072095e-1", "c2[3, 2] := 0.5795895850253119", "c2[4, 1] := 0.8616320590689187e-1", "c2[4, 2] := 0.5663615383647170", "c2[5, 1] := 0.8493413175570858e-1", "c2[5, 2] := 0.5488825092350877", "c2[6, 1] := 0.8340387368687513e-1", "c2[6, 2] := 0.5272851839324592", "c2[7, 1] := 0.8157596213131521e-1", "c2[7, 2] := 0.5017313864372913", "c2[8, 1] := 0.7945402670834270e-1", "c2[8, 2] := 0.4724089864574216", "c2[9, 1] := 0.7704133559556429e-1", "c2[9, 2] := 0.4395276256463053", "c2[10, 1] := 0.7434009635219704e-1", "c2[10, 2] := 0.4033126590648964", "c2[11, 1] := 0.7135035113853376e-1", "c2[11, 2] := 0.3639961488919042", "c2[12, 1] := 0.6806813160738834e-1", "c2[12, 2] := 0.3218025212900124", "c2[13, 1] := 0.6448214312000864e-1", "c2[13, 2] := 0.2769235521088158", "c2[14, 1] := 0.6056719318430530e-1", "c2[14, 2] := 0.2294693573271038", "c2[15, 1] := 0.5626925196925040e-1", "c2[15, 2] := 0.1793564218840015", "c2[16, 1] := 0.5146352031547277e-1", "c2[16, 2] := 0.1259877129326412", "c2[17, 1] := 0.4578069074410591e-1", "c2[17, 2] := 0.6689147319568768e-1", "elseif order == 35 then\r\n            alpha := 0.1452224267615486", "c1[1] := 0.2926764667564367", "c2[1, 1] := 0.8551731299267280e-1", "c2[1, 2] := 0.5832758214629523", "c2[2, 1] := 0.8509109732853060e-1", "c2[2, 2] := 0.5770596582643844", "c2[3, 1] := 0.8438201446671953e-1", "c2[3, 2] := 0.5667497616665494", "c2[4, 1] := 0.8339191981579831e-1", "c2[4, 2] := 0.5524209816238369", "c2[5, 1] := 0.8212328610083385e-1", "c2[5, 2] := 0.5341766459916322", "c2[6, 1] := 0.8057906332198853e-1", "c2[6, 2] := 0.5121470053512750", "c2[7, 1] := 0.7876247299954955e-1", "c2[7, 2] := 0.4864870722254752", "c2[8, 1] := 0.7667670879950268e-1", "c2[8, 2] := 0.4573736721705665", "c2[9, 1] := 0.7432449556218945e-1", "c2[9, 2] := 0.4250013835198991", "c2[10, 1] := 0.7170742126011575e-1", "c2[10, 2] := 0.3895767735915445", "c2[11, 1] := 0.6882488171701314e-1", "c2[11, 2] := 0.3513097926737368", "c2[12, 1] := 0.6567231746957568e-1", "c2[12, 2] := 0.3103999917596611", "c2[13, 1] := 0.6223804362223595e-1", "c2[13, 2] := 0.2670123611280899", "c2[14, 1] := 0.5849696460782910e-1", "c2[14, 2] := 0.2212298104867592", "c2[15, 1] := 0.5439628409499822e-1", "c2[15, 2] := 0.1729443731341637", "c2[16, 1] := 0.4981540179136920e-1", "c2[16, 2] := 0.1215462157134930", "c2[17, 1] := 0.4439981033536435e-1", "c2[17, 2] := 0.6460098363520967e-1", "elseif order == 36 then\r\n            alpha := 0.1431515914458580", "c2[1, 1] := 0.8335881847130301e-1", "c2[1, 2] := 0.5770670512160201", "c2[2, 1] := 0.8309698922852212e-1", "c2[2, 2] := 0.5731929100172432", "c2[3, 1] := 0.8257400347039723e-1", "c2[3, 2] := 0.5654713811993058", "c2[4, 1] := 0.8179117911600136e-1", "c2[4, 2] := 0.5539556343603020", "c2[5, 1] := 0.8075042173126963e-1", "c2[5, 2] := 0.5387245649546684", "c2[6, 1] := 0.7945413151258206e-1", "c2[6, 2] := 0.5198817177723069", "c2[7, 1] := 0.7790506514288866e-1", "c2[7, 2] := 0.4975537629595409", "c2[8, 1] := 0.7610613635339480e-1", "c2[8, 2] := 0.4718884193866789", "c2[9, 1] := 0.7406012816626425e-1", "c2[9, 2] := 0.4430516443136726", "c2[10, 1] := 0.7176927060205631e-1", "c2[10, 2] := 0.4112237708115829", "c2[11, 1] := 0.6923460172504251e-1", "c2[11, 2] := 0.3765940116389730", "c2[12, 1] := 0.6645495833489556e-1", "c2[12, 2] := 0.3393522147815403", "c2[13, 1] := 0.6342528888937094e-1", "c2[13, 2] := 0.2996755899575573", "c2[14, 1] := 0.6013361864949449e-1", "c2[14, 2] := 0.2577053294053830", "c2[15, 1] := 0.5655503081322404e-1", "c2[15, 2] := 0.2135004731531631", "c2[16, 1] := 0.5263798119559069e-1", "c2[16, 2] := 0.1669320999865636", "c2[17, 1] := 0.4826589873626196e-1", "c2[17, 2] := 0.1173807590715484", "c2[18, 1] := 0.4309819397289806e-1", "c2[18, 2] := 0.6245036108880222e-1", "elseif order == 37 then\r\n            alpha := 0.1411669104782917", "c1[1] := 0.2850271036215707", "c2[1, 1] := 0.8111958235023328e-1", "c2[1, 2] := 0.5682412610563970", "c2[2, 1] := 0.8075727567979578e-1", "c2[2, 2] := 0.5628142923227016", "c2[3, 1] := 0.8015440554413301e-1", "c2[3, 2] := 0.5538087696879930", "c2[4, 1] := 0.7931239302677386e-1", "c2[4, 2] := 0.5412833323304460", "c2[5, 1] := 0.7823314328639347e-1", "c2[5, 2] := 0.5253190555393968", "c2[6, 1] := 0.7691895211595101e-1", "c2[6, 2] := 0.5060183741977191", "c2[7, 1] := 0.7537237072011853e-1", "c2[7, 2] := 0.4835036020049034", "c2[8, 1] := 0.7359601294804538e-1", "c2[8, 2] := 0.4579149413954837", "c2[9, 1] := 0.7159227884849299e-1", "c2[9, 2] := 0.4294078049978829", "c2[10, 1] := 0.6936295002846032e-1", "c2[10, 2] := 0.3981491350382047", "c2[11, 1] := 0.6690857785828917e-1", "c2[11, 2] := 0.3643121502867948", "c2[12, 1] := 0.6422751692085542e-1", "c2[12, 2] := 0.3280684291406284", "c2[13, 1] := 0.6131430866206096e-1", "c2[13, 2] := 0.2895750997170303", "c2[14, 1] := 0.5815677249570920e-1", "c2[14, 2] := 0.2489521814805720", "c2[15, 1] := 0.5473023527947980e-1", "c2[15, 2] := 0.2062377435955363", "c2[16, 1] := 0.5098441033167034e-1", "c2[16, 2] := 0.1612849131645336", "c2[17, 1] := 0.4680658811093562e-1", "c2[17, 2] := 0.1134672937045305", "c2[18, 1] := 0.4186928031694695e-1", "c2[18, 2] := 0.6042754777339966e-1", "elseif order == 38 then\r\n            alpha := 0.1392625697140030", "c2[1, 1] := 0.7916943373658329e-1", "c2[1, 2] := 0.5624158631591745", "c2[2, 1] := 0.7894592250257840e-1", "c2[2, 2] := 0.5590219398777304", "c2[3, 1] := 0.7849941672384930e-1", "c2[3, 2] := 0.5522551628416841", "c2[4, 1] := 0.7783093084875645e-1", "c2[4, 2] := 0.5421574325808380", "c2[5, 1] := 0.7694193770482690e-1", "c2[5, 2] := 0.5287909941093643", "c2[6, 1] := 0.7583430534712885e-1", "c2[6, 2] := 0.5122376814029880", "c2[7, 1] := 0.7451020436122948e-1", "c2[7, 2] := 0.4925978555548549", "c2[8, 1] := 0.7297197617673508e-1", "c2[8, 2] := 0.4699889739625235", "c2[9, 1] := 0.7122194706992953e-1", "c2[9, 2] := 0.4445436860615774", "c2[10, 1] := 0.6926216260386816e-1", "c2[10, 2] := 0.4164072786327193", "c2[11, 1] := 0.6709399961255503e-1", "c2[11, 2] := 0.3857341621868851", "c2[12, 1] := 0.6471757977022456e-1", "c2[12, 2] := 0.3526828388476838", "c2[13, 1] := 0.6213084287116965e-1", "c2[13, 2] := 0.3174082831364342", "c2[14, 1] := 0.5932799638550641e-1", "c2[14, 2] := 0.2800495563550299", "c2[15, 1] := 0.5629672408524944e-1", "c2[15, 2] := 0.2407078154782509", "c2[16, 1] := 0.5301264751544952e-1", "c2[16, 2] := 0.1994026830553859", "c2[17, 1] := 0.4942673259817896e-1", "c2[17, 2] := 0.1559719194038917", "c2[18, 1] := 0.4542996716979947e-1", "c2[18, 2] := 0.1097844277878470", "c2[19, 1] := 0.4070720755433961e-1", "c2[19, 2] := 0.5852181110523043e-1", "elseif order == 39 then\r\n            alpha := 0.1374332900196804", "c1[1] := 0.2779468246419593", "c2[1, 1] := 0.7715084161825772e-1", "c2[1, 2] := 0.5543001331300056", "c2[2, 1] := 0.7684028301163326e-1", "c2[2, 2] := 0.5495289890712267", "c2[3, 1] := 0.7632343924866024e-1", "c2[3, 2] := 0.5416083298429741", "c2[4, 1] := 0.7560141319808483e-1", "c2[4, 2] := 0.5305846713929198", "c2[5, 1] := 0.7467569064745969e-1", "c2[5, 2] := 0.5165224112570647", "c2[6, 1] := 0.7354807648551346e-1", "c2[6, 2] := 0.4995030679271456", "c2[7, 1] := 0.7222060351121389e-1", "c2[7, 2] := 0.4796242430956156", "c2[8, 1] := 0.7069540462458585e-1", "c2[8, 2] := 0.4569982440368368", "c2[9, 1] := 0.6897453353492381e-1", "c2[9, 2] := 0.4317502624832354", "c2[10, 1] := 0.6705970959388781e-1", "c2[10, 2] := 0.4040159353969854", "c2[11, 1] := 0.6495194541066725e-1", "c2[11, 2] := 0.3739379843169939", "c2[12, 1] := 0.6265098412417610e-1", "c2[12, 2] := 0.3416613843816217", "c2[13, 1] := 0.6015440984955930e-1", "c2[13, 2] := 0.3073260166338746", "c2[14, 1] := 0.5745615876877304e-1", "c2[14, 2] := 0.2710546723961181", "c2[15, 1] := 0.5454383762391338e-1", "c2[15, 2] := 0.2329316824061170", "c2[16, 1] := 0.5139340231935751e-1", "c2[16, 2] := 0.1929604256043231", "c2[17, 1] := 0.4795705862458131e-1", "c2[17, 2] := 0.1509655259246037", "c2[18, 1] := 0.4412933231935506e-1", "c2[18, 2] := 0.1063130748962878", "c2[19, 1] := 0.3960672309405603e-1", "c2[19, 2] := 0.5672356837211527e-1", "elseif order == 40 then\r\n            alpha := 0.1356742655825434", "c2[1, 1] := 0.7538038374294594e-1", "c2[1, 2] := 0.5488228264329617", "c2[2, 1] := 0.7518806529402738e-1", "c2[2, 2] := 0.5458297722483311", "c2[3, 1] := 0.7480383050347119e-1", "c2[3, 2] := 0.5398604576730540", "c2[4, 1] := 0.7422847031965465e-1", "c2[4, 2] := 0.5309482987446206", "c2[5, 1] := 0.7346313704205006e-1", "c2[5, 2] := 0.5191429845322307", "c2[6, 1] := 0.7250930053201402e-1", "c2[6, 2] := 0.5045099368431007", "c2[7, 1] := 0.7136868456879621e-1", "c2[7, 2] := 0.4871295553902607", "c2[8, 1] := 0.7004317764946634e-1", "c2[8, 2] := 0.4670962098860498", "c2[9, 1] := 0.6853470921527828e-1", "c2[9, 2] := 0.4445169164956202", "c2[10, 1] := 0.6684507689945471e-1", "c2[10, 2] := 0.4195095960479698", "c2[11, 1] := 0.6497570123412630e-1", "c2[11, 2] := 0.3922007419030645", "c2[12, 1] := 0.6292726794917847e-1", "c2[12, 2] := 0.3627221993494397", "c2[13, 1] := 0.6069918741663154e-1", "c2[13, 2] := 0.3312065181294388", "c2[14, 1] := 0.5828873983769410e-1", "c2[14, 2] := 0.2977798532686911", "c2[15, 1] := 0.5568964389813015e-1", "c2[15, 2] := 0.2625503293999835", "c2[16, 1] := 0.5288947816690705e-1", "c2[16, 2] := 0.2255872486520188", "c2[17, 1] := 0.4986456327645859e-1", "c2[17, 2] := 0.1868796731919594", "c2[18, 1] := 0.4656832613054458e-1", "c2[18, 2] := 0.1462410193532463", "c2[19, 1] := 0.4289867647614935e-1", "c2[19, 2] := 0.1030361558710747", "c2[20, 1] := 0.3856310684054106e-1", "c2[20, 2] := 0.5502423832293889e-1", "elseif order == 41 then\r\n            alpha := 0.1339811106984253", "c1[1] := 0.2713685065531391", "c2[1, 1] := 0.7355140275160984e-1", "c2[1, 2] := 0.5413274778282860", "c2[2, 1] := 0.7328319082267173e-1", "c2[2, 2] := 0.5371064088294270", "c2[3, 1] := 0.7283676160772547e-1", "c2[3, 2] := 0.5300963437270770", "c2[4, 1] := 0.7221298133014343e-1", "c2[4, 2] := 0.5203345998371490", "c2[5, 1] := 0.7141302173623395e-1", "c2[5, 2] := 0.5078728971879841", "c2[6, 1] := 0.7043831559982149e-1", "c2[6, 2] := 0.4927768111819803", "c2[7, 1] := 0.6929049381827268e-1", "c2[7, 2] := 0.4751250308594139", "c2[8, 1] := 0.6797129849758392e-1", "c2[8, 2] := 0.4550083840638406", "c2[9, 1] := 0.6648246325101609e-1", "c2[9, 2] := 0.4325285673076087", "c2[10, 1] := 0.6482554675958526e-1", "c2[10, 2] := 0.4077964789091151", "c2[11, 1] := 0.6300169683004558e-1", "c2[11, 2] := 0.3809299858742483", "c2[12, 1] := 0.6101130648543355e-1", "c2[12, 2] := 0.3520508315700898", "c2[13, 1] := 0.5885349417435808e-1", "c2[13, 2] := 0.3212801560701271", "c2[14, 1] := 0.5652528148656809e-1", "c2[14, 2] := 0.2887316252774887", "c2[15, 1] := 0.5402021575818373e-1", "c2[15, 2] := 0.2545001287790888", "c2[16, 1] := 0.5132588802608274e-1", "c2[16, 2] := 0.2186415296842951", "c2[17, 1] := 0.4841900639702602e-1", "c2[17, 2] := 0.1811322622296060", "c2[18, 1] := 0.4525419574485134e-1", "c2[18, 2] := 0.1417762065404688", "c2[19, 1] := 0.4173260173087802e-1", "c2[19, 2] := 0.9993834530966510e-1", "c2[20, 1] := 0.3757210572966463e-1", "c2[20, 2] := 0.5341611499960143e-1", "else\r\n            Streams.error(\"Input argument order (= \" + String(order) +\r\n              \") of Bessel filter is not in the range 1..41\")", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2898, "end_line": 3845, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2898, "end_line": 2898, "start_col": 9, "end_col": 18}}, {"equations": ["algorithm\r\n        // Get coefficients of band stop filter at f_cut\r\n        (cr, c0, c1) :=coefficients.bandStop(cr_in, c0_in, c1_in, f_min, f_max)", "// Transform coefficients in to roots\r\n        for i in 1:size(a,1) loop\r\n          a[i]  := -c1[i]/2", "bb    := c0[i] - a[i]*a[i]", "assert(bb >= 0, \"\\nNot possible to use band stop filter, since transformation results in\\n\"+\r\n                          \"system that does not have conjugate complex poles.\\n\" +\r\n                          \"Try to use another analog filter for the band stop filter.\\n\")", "b[i]  := sqrt(bb)", "ku[i] := c0[i]/b[i]", "k1[i] := 2*a[i]/ku[i]", "k2[i] := (c0[i] + a[i]^2 - b[i]^2)/(b[i]*ku[i])", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2816, "end_line": 2831, "start_col": 7, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2816, "end_line": 2816, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        // Get coefficients of band pass filter at f_cut\r\n        (cr, c0, c1, cn) :=coefficients.bandPass(cr_in, c0_in, c1_in, f_min, f_max)", "// Transform coefficients in to roots\r\n        for i in 1:size(a,1) loop\r\n          a[i]  := -c1[i]/2", "bb    := c0[i] - a[i]*a[i]", "assert(bb >= 0, \"\\nNot possible to use band pass filter, since transformation results in\\n\"+\r\n                          \"system that does not have conjugate complex poles.\\n\" +\r\n                          \"Try to use another analog filter for the band pass.\\n\")", "b[i]  := sqrt(bb)", "ku[i] := c0[i]/b[i]", "k1[i] := cn/ku[i]", "k2[i] := cn*a[i]/(b[i]*ku[i])", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2720, "end_line": 2735, "start_col": 7, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2720, "end_line": 2720, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        // Get coefficients of high pass filter at f_cut\r\n        (cr, c0, c1) :=coefficients.highPass(cr_in, c0_in, c1_in, f_cut)", "// Transform coefficients in to roots\r\n        for i in 1:size(cr_in,1) loop\r\n          r[i] :=-cr[i]", "end for", "for i in 1:size(c0_in,1) loop\r\n          a[i]  := -c1[i]/2", "b[i]  := sqrt(c0[i] - a[i]*a[i])", "ku[i] := c0[i]/b[i]", "k1[i] := 2*a[i]/ku[i]", "ba2   := (b[i]/a[i])^2", "k2[i] := (1-ba2)/(1+ba2)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2602, "end_line": 2618, "start_col": 7, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2602, "end_line": 2602, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        // Get coefficients of low pass filter at f_cut\r\n        (cr, c0, c1) :=coefficients.lowPass(cr_in, c0_in, c1_in, f_cut)", "// Transform coefficients in to root\r\n        for i in 1:size(cr_in,1) loop\r\n          r[i] :=-cr[i]", "end for", "for i in 1:size(c0_in,1) loop\r\n          a [i] :=-c1[i]/2", "b [i] :=sqrt(c0[i] - a[i]*a[i])", "ku[i] :=c0[i]/b[i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2497, "end_line": 2510, "start_col": 7, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2497, "end_line": 2497, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        assert(f_min > 0 and f_min < f_max, \"Band frequencies f_min and f_max are wrong\")", "/* The band pass filter is derived from the low pass filter by\r\n       the transformation new(s) = (s + 1/s)/w   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       1/(s + cr)         -> 1/((s/w + 1/s/w) + cr)\r\n                             = w*s / (s^2 + cr*w*s + 1)\r\n\r\n       1/(s^2 + c1*s + c0) -> 1/( (s+1/s)^2/w^2 + c1*(s + 1/s)/w + c0 )\r\n                              = 1 /( ( s^2 + 1/s^2 + 2)/w^2 + (s + 1/s)*c1/w + c0 )\r\n                              = w^2*s^2 / (s^4 + 2*s^2 + 1 + (s^3 + s)*c1*w + c0*w^2*s^2)\r\n                              = w^2*s^2 / (s^4 + c1*w*s^3 + (2+c0*w^2)*s^2 + c1*w*s + 1)\r\n\r\n                              Assume the following description with PT2:\r\n                              = w^2*s^2 /( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                           (s^2 + s*(c*alpha) + alpha^2) )\r\n                              = w^2*s^2 / ( s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                + c*(alpha + 1/alpha)*s + 1 )\r\n\r\n                              and therefore:\r\n                                c*(alpha + 1/alpha) = c1*w       -> c = c1*w / (alpha + 1/alpha)\r\n                                                                      = c1*w*alpha/(1+alpha^2)\r\n                                alpha^2 + 1/alpha^2 + c^2 = 2+c0*w^2 -> equation to determine alpha\r\n                                alpha^4 + 1 + c1^2*w^2*alpha^4/(1+alpha^2)^2 = (2+c0*w^2)*alpha^2\r\n                                or z = alpha^2\r\n                                z^2 + c^1^2*w^2*z^2/(1+z)^2 - (2+c0*w^2)*z + 1 = 0\r\n\r\n       The band stop filter is derived from the low pass filter by\r\n       the transformation new(s) = w/( (s + 1/s) )   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       cr/(s + cr)         -> 1/(( w/(s + 1/s) ) + cr)\r\n                              = (s^2 + 1) / (s^2 + (w/cr)*s + 1)\r\n\r\n       c0/(s^2 + c1*s + c0) -> c0/( w^2/(s + 1/s)^2 + c1*w/(s + 1/s) + c0 )\r\n                               = c0*(s^2 + 1)^2 / (s^4 + c1*w*s^3/c0 + (2+w^2/b)*s^2 + c1*w*s/c0 + 1)\r\n\r\n                               Assume the following description with PT2:\r\n                               = c0*(s^2 + 1)^2 / ( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                                    (s^2 + s*(c*alpha) + alpha^2) )\r\n                               = c0*(s^2 + 1)^2 / (  s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                         + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                         + c*(alpha + 1/alpha)*p + 1 )\r\n\r\n                            and therefore:\r\n                              c*(alpha + 1/alpha) = c1*w/b         -> c = c1*w/(c0*(alpha + 1/alpha))\r\n                              alpha^2 + 1/alpha^2 + c^2 = 2+w^2/c0 -> equation to determine alpha\r\n                              alpha^4 + 1 + (c1*w/c0*alpha^2)^2/(1+alpha^2)^2 = (2+w^2/c0)*alpha^2\r\n                              or z = alpha^2\r\n                              z^2 + (c1*w/c0*z)^2/(1+z)^2 - (2+w^2/c0)*z + 1 = 0\r\n\r\n                            same as:  ww = w/c0\r\n                              z^2 + (c1*ww*z)^2/(1+z)^2 - (2+c0*ww)*z + 1 = 0  -> same equation as for BandPass\r\n\r\n     Afterwards, change filter coefficients according to transformation new(s) = s/w_cut\r\n        c0*(s^2+1)(s^2 + c1*s + c0)  -> c0*((s/w)^2 + 1) / ((s/w)^2 + c1*(s/w) + c0 =\r\n                                        c0/w^2*(s^2 + w^2) / (s^2 + (c1*w)*s + (c0*w^2))/w^2) =\r\n                                        (s^2 + c0*w^2) / (s^2 + (c1*w)*s + (c0*w^2))\r\n    */\r\n          for i in 1:size(cr_in,1) loop\r\n             c1[i] := w_cut*w_band/cr_in[i]", "c0[i] := w_cut2", "end for", "for i in 1:size(c1_in,1) loop\r\n             ww      := w_band/c0_in[i]", "alpha :=\r\n              Modelica.Blocks.Continuous.Internal.Filter.Utilities.bandPassAlpha(\r\n                    c1_in[i],\r\n                    c0_in[i],\r\n                    ww)", "c       := c1_in[i]*ww / (alpha + 1/alpha)", "j       := size(cr_in,1) + 2*i - 1", "c1[j]   := w_cut*c/alpha", "c1[j+1] := w_cut*c*alpha", "c0[j]   := w_cut2/alpha^2", "c0[j+1] := w_cut2*alpha^2", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2391, "end_line": 2469, "start_col": 7, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2391, "end_line": 2391, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        assert(f_min > 0 and f_min < f_max, \"Band frequencies f_min and f_max are wrong\")", "/* The band pass filter is derived from the low pass filter by\r\n       the transformation new(s) = (s + 1/s)/w   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       1/(s + cr)         -> 1/((s/w + 1/s/w) + cr)\r\n                             = w*s / (s^2 + cr*w*s + 1)\r\n\r\n       1/(s^2 + c1*s + c0) -> 1/( (s+1/s)^2/w^2 + c1*(s + 1/s)/w + c0 )\r\n                              = 1 /( ( s^2 + 1/s^2 + 2)/w^2 + (s + 1/s)*c1/w + c0 )\r\n                              = w^2*s^2 / (s^4 + 2*s^2 + 1 + (s^3 + s)*c1*w + c0*w^2*s^2)\r\n                              = w^2*s^2 / (s^4 + c1*w*s^3 + (2+c0*w^2)*s^2 + c1*w*s + 1)\r\n\r\n                              Assume the following description with PT2:\r\n                              = w^2*s^2 /( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                           (s^2 + s*(c*alpha) + alpha^2) )\r\n                              = w^2*s^2 / ( s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                + c*(alpha + 1/alpha)*s + 1 )\r\n\r\n                              and therefore:\r\n                                c*(alpha + 1/alpha) = c1*w       -> c = c1*w / (alpha + 1/alpha)\r\n                                                                      = c1*w*alpha/(1+alpha^2)\r\n                                alpha^2 + 1/alpha^2 + c^2 = 2+c0*w^2 -> equation to determine alpha\r\n                                alpha^4 + 1 + c1^2*w^2*alpha^4/(1+alpha^2)^2 = (2+c0*w^2)*alpha^2\r\n                                or z = alpha^2\r\n                                z^2 + c^1^2*w^2*z^2/(1+z)^2 - (2+c0*w^2)*z + 1 = 0\r\n\r\n     Check whether roots remain conjugate complex\r\n        c0 - (c1/2)^2 > 0:    1/alpha^2 - (c/alpha)^2/4\r\n                              = 1/alpha^2*(1 - c^2/4)    -> not possible to figure this out\r\n\r\n     Afterwards, change filter coefficients according to transformation new(s) = s/w_cut\r\n        w_band*s/(s^2 + c1*s + c0)  -> w_band*(s/w)/((s/w)^2 + c1*(s/w) + c0 =\r\n                                       (w_band/w)*s/(s^2 + (c1*w)*s + (c0*w^2))/w^2) =\r\n                                       (w_band*w)*s/(s^2 + (c1*w)*s + (c0*w^2))\r\n    */\r\n          for i in 1:size(cr_in,1) loop\r\n             c1[i] := w_cut*cr_in[i]*w_band", "c0[i] := w_cut2", "end for", "for i in 1:size(c1_in,1) loop\r\n            alpha :=\r\n              Modelica.Blocks.Continuous.Internal.Filter.Utilities.bandPassAlpha(\r\n                    c1_in[i],\r\n                    c0_in[i],\r\n                    w_band)", "c       := c1_in[i]*w_band / (alpha + 1/alpha)", "j       := size(cr_in,1) + 2*i - 1", "c1[j]   := w_cut*c/alpha", "c1[j+1] := w_cut*c*alpha", "c0[j]   := w_cut2/alpha^2", "c0[j+1] := w_cut2*alpha^2", "end for", "cn :=w_band*w_cut"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2301, "end_line": 2358, "start_col": 7, "end_col": 29}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2301, "end_line": 2301, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        assert(f_cut > 0, \"Cut-off frequency f_cut must be positive\")", "/* Change filter coefficients according to transformation: new(s) = 1/s\r\n        1/(s + cr)          -> 1/(1/s + cr)                = (1/cr)*s / (s + (1/cr))\r\n        1/(s^2 + c1*s + c0) -> 1/((1/s)^2 + c1*(1/s) + c0) = (1/c0)*s^2 / (s^2 + (c1/c0)*s + 1/c0)\r\n\r\n     Check whether transformed roots are also conjugate complex:\r\n        c0 - c1^2/4 > 0  -> (1/c0) - (c1/c0)^2 / 4\r\n                            = (c0 - c1^2/4) / c0^2 > 0\r\n        It is therefore guaranteed that the roots remain conjugate complex\r\n\r\n     Change filter coefficients according to transformation new(s) = s/w_cut\r\n        s + 1/cr                -> (s/w) + 1/cr                   = (s + w/cr)/w\r\n        s^2 + (c1/c0)*s + 1/c0  -> (s/w)^2 + (c1/c0)*(s/w) + 1/c0 = (s^2 + (w*c1/c0)*s + (w^2/c0))/w^2\r\n  */\r\n        for i in 1:size(cr_in,1) loop\r\n           cr[i] := w_cut/cr_in[i]", "end for", "for i in 1:size(c0_in,1) loop\r\n           c0[i] := w_cut2/c0_in[i]", "c1[i] := w_cut*c1_in[i]/c0_in[i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2245, "end_line": 2268, "start_col": 7, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2245, "end_line": 2245, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        assert(f_cut > 0, \"Cut-off frequency f_cut must be positive\")", "/* Change filter coefficients according to transformation new(s) = s/w_cut\r\n     s + cr           -> (s/w) + cr              = (s + w*cr)/w\r\n     s^2 + c1*s + c0  -> (s/w)^2 + c1*(s/w) + c0 = (s^2 + (c1*w)*s + (c0*w^2))/w^2\r\n  */\r\n        cr := w_cut*cr_in", "c1 := w_cut*c1_in", "c0 := w_cut2*c0_in"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2209, "end_line": 2218, "start_col": 7, "end_col": 28}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2209, "end_line": 2209, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n          epsilon := sqrt(10^(A_ripple/10) - 1)", "fac := asinh(1/epsilon)/order", "den1 := fill(1/sinh(fac),size(den1,1))", "if size(cr,1) == 0 then\r\n             for i in 1:size(c0, 1) loop\r\n                den2[i,1] :=1/(cosh(fac)^2 - cos((2*i - 1)*pi/(2*order))^2)", "den2[i,2] :=2*den2[i, 1]*sinh(fac)*cos((2*i - 1)*pi/(2*order))", "end for", "else\r\n             for i in 1:size(c0, 1) loop\r\n                den2[i,1] :=1/(cosh(fac)^2 - cos(i*pi/order)^2)", "den2[i,2] :=2*den2[i, 1]*sinh(fac)*cos(i*pi/order)", "end for", "end if", "/* Transformation of filter transfer function with \"new(p) = alpha*p\"\r\n       in order that the filter transfer function has an amplitude of\r\n       -3 db at the cutoff frequency\r\n    */\r\n          if normalized then\r\n            alpha :=\r\n              Modelica.Blocks.Continuous.Internal.Filter.Utilities.normalizationFactor(\r\n              den1, den2)", "alpha2 := alpha*alpha", "for i in 1:size(c0, 1) loop\r\n              den2[i, 1] := den2[i, 1]*alpha2", "den2[i, 2] := den2[i, 2]*alpha", "end for", "den1 := den1*alpha", "end if", "// Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2144, "end_line": 2180, "start_col": 7, "end_col": 25}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2144, "end_line": 2144, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        for i in 1:size(c0, 1) loop\r\n          den2[i, 1] := 1.0", "den2[i, 2] := -2*Modelica.Math.cos(pi*(0.5 + (i - 0.5)/order))", "end for", "if size(cr,1) == 1 then\r\n          den1[1] := 1.0", "end if", "/* Transformation of filter transfer function with \"new(p) = alpha*p\"\r\n     in order that the filter transfer function has an amplitude of\r\n     -3 db at the cutoff frequency\r\n  */\r\n        /*\r\n    if normalized then\r\n      alpha := Internal.normalizationFactor(den1, den2)", "alpha2 := alpha*alpha", "for i in 1:size(c0, 1) loop\r\n        den2[i, 1] := den2[i, 1]*alpha2", "den2[i, 2] := den2[i, 2]*alpha", "end for", "if size(cr,1) == 1 then\r\n        den1[1] := den1[1]*alpha", "end if", "end if", "*/\r\n\r\n        // Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2085, "end_line": 2115, "start_col": 7, "end_col": 25}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2085, "end_line": 2085, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n          (den1,den2,alpha) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.BesselBaseCoefficients(\r\n            order)", "if not normalized then\r\n           alpha2 := alpha*alpha", "for i in 1:size(c0, 1) loop\r\n             den2[i, 1] := den2[i, 1]*alpha2", "den2[i, 2] := den2[i, 2]*alpha", "end for", "if size(cr,1) == 1 then\r\n             den1[1] := den1[1]*alpha", "end if", "end if", "// Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2043, "end_line": 2061, "start_col": 7, "end_col": 25}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2043, "end_line": 2043, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        if normalized then\r\n           // alpha := sqrt(2^(1/order) - 1)", "alpha := sqrt(10^(3/10/order)-1)", "else\r\n           alpha := 1.0", "end if", "for i in 1:order loop\r\n           den1[i] := alpha", "end for", "// Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2005, "end_line": 2020, "start_col": 7, "end_col": 25}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2005, "end_line": 2005, "start_col": 7, "end_col": 16}}, {"equations": ["equation\r\n     assert(u_nominal > 0, \"u_nominal > 0 required\")", "assert(filterType == Modelica.Blocks.Types.FilterType.LowPass or\r\n            filterType == Modelica.Blocks.Types.FilterType.HighPass or\r\n            f_min > 0, \"f_min > 0 required for band pass and band stop filter\")", "assert(A_ripple > 0, \"A_ripple > 0 required\")", "assert(f_cut > 0, \"f_cut > 0 required\")", "/* All filters have the same basic differential equations:\r\n        Real poles:\r\n           der(x) = r*x - r*u\r\n        Complex conjugate poles:\r\n           der(x1) = a*x1 - b*x2 + ku*u", "der(x2) = b*x1 + a*x2", "*/\r\n     uu[1] = u/u_nominal", "for i in 1:nr loop\r\n        der(x[i]) = r[i]*(x[i] - uu[i])", "end for", "for i in 1:na loop\r\n        der(x[nr+2*i-1]) = a[i]*x[nr+2*i-1] - b[i]*x[nr+2*i] + ku[i]*uu[nr+i]", "der(x[nr+2*i])   = b[i]*x[nr+2*i-1] + a[i]*x[nr+2*i]", "end for", "// The output equation is different for the different filter types\r\n     if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        /* Low pass filter\r\n           Real poles             :  y = x\r\n           Complex conjugate poles:  y = x2\r\n      */\r\n        for i in 1:nr loop\r\n           uu[i+1] = x[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        /* High pass filter\r\n           Real poles             :  y = -x + u", "Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "else\r\n        assert(false, \"filterType (= \" + String(filterType) + \") is unknown\")", "uu = zeros(na+nr+1)", "end if", "y = (gain*u_nominal)*uu[nr+na+1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1724, "end_line": 1794, "start_col": 3, "end_col": 39}}, {"equations": ["assert(u_nominal > 0, \"u_nominal > 0 required\")", "assert(filterType == Modelica.Blocks.Types.FilterType.LowPass or\r\n            filterType == Modelica.Blocks.Types.FilterType.HighPass or\r\n            f_min > 0, \"f_min > 0 required for band pass and band stop filter\")", "assert(A_ripple > 0, \"A_ripple > 0 required\")", "assert(f_cut > 0, \"f_cut > 0 required\")", "/* All filters have the same basic differential equations:\r\n        Real poles:\r\n           der(x) = r*x - r*u\r\n        Complex conjugate poles:\r\n           der(x1) = a*x1 - b*x2 + ku*u", "der(x2) = b*x1 + a*x2", "*/\r\n     uu[1] = u/u_nominal", "for i in 1:nr loop\r\n        der(x[i]) = r[i]*(x[i] - uu[i])", "end for", "for i in 1:na loop\r\n        der(x[nr+2*i-1]) = a[i]*x[nr+2*i-1] - b[i]*x[nr+2*i] + ku[i]*uu[nr+i]", "der(x[nr+2*i])   = b[i]*x[nr+2*i-1] + a[i]*x[nr+2*i]", "end for", "// The output equation is different for the different filter types\r\n     if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        /* Low pass filter\r\n           Real poles             :  y = x\r\n           Complex conjugate poles:  y = x2\r\n      */\r\n        for i in 1:nr loop\r\n           uu[i+1] = x[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        /* High pass filter\r\n           Real poles             :  y = -x + u", "Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "else\r\n        assert(false, \"filterType (= \" + String(filterType) + \") is unknown\")", "uu = zeros(na+nr+1)", "end if", "y = (gain*u_nominal)*uu[nr+na+1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1725, "end_line": 1794, "start_col": 6, "end_col": 39}}, {"equations": ["y = (gain*u_nominal)*uu[nr+na+1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1794, "end_line": 1794, "start_col": 6, "end_col": 38}}, {"equations": ["if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        /* Low pass filter\r\n           Real poles             :  y = x\r\n           Complex conjugate poles:  y = x2\r\n      */\r\n        for i in 1:nr loop\r\n           uu[i+1] = x[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        /* High pass filter\r\n           Real poles             :  y = -x + u", "Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "else\r\n        assert(false, \"filterType (= \" + String(filterType) + \") is unknown\")", "uu = zeros(na+nr+1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1749, "end_line": 1792, "start_col": 6, "end_col": 12}}, {"equations": ["assert(false, \"filterType (= \" + String(filterType) + \") is unknown\")", "uu = zeros(na+nr+1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1790, "end_line": 1791, "start_col": 9, "end_col": 29}}, {"equations": ["uu = zeros(na+nr+1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1791, "end_line": 1791, "start_col": 9, "end_col": 28}}, {"equations": ["assert(false, \"filterType (= \" + String(filterType) + \") is unknown\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1790, "end_line": 1790, "start_col": 9, "end_col": 78}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        /* High pass filter\r\n           Real poles             :  y = -x + u", "Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]", "end for", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1761, "end_line": 1787, "start_col": 6, "end_col": 17}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1781, "end_line": 1787, "start_col": 6, "end_col": 17}}, {"equations": ["for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1785, "end_line": 1787, "start_col": 9, "end_col": 17}}, {"equations": ["uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1786, "end_line": 1786, "start_col": 12, "end_col": 72}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2", "*/\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1773, "end_line": 1779, "start_col": 6, "end_col": 17}}, {"equations": ["for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1777, "end_line": 1779, "start_col": 9, "end_col": 17}}, {"equations": ["uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1778, "end_line": 1778, "start_col": 12, "end_col": 61}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        /* High pass filter\r\n           Real poles             :  y = -x + u", "Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "*/\r\n        for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1761, "end_line": 1771, "start_col": 6, "end_col": 17}}, {"equations": ["for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1766, "end_line": 1771, "start_col": 9, "end_col": 17}}, {"equations": ["for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1769, "end_line": 1771, "start_col": 9, "end_col": 16}}, {"equations": ["uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1770, "end_line": 1770, "start_col": 12, "end_col": 72}}, {"equations": ["for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1766, "end_line": 1768, "start_col": 9, "end_col": 16}}, {"equations": ["uu[i+1] = -x[i] + uu[i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1767, "end_line": 1767, "start_col": 12, "end_col": 36}}, {"equations": ["for i in 1:nr loop\r\n           uu[i+1] = x[i]", "end for", "for i in 1:na loop\r\n           uu[nr+i+1] = x[nr+2*i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1754, "end_line": 1759, "start_col": 9, "end_col": 17}}, {"equations": ["for i in 1:na loop\r\n           uu[nr+i+1] = x[nr+2*i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1757, "end_line": 1759, "start_col": 9, "end_col": 16}}, {"equations": ["uu[nr+i+1] = x[nr+2*i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1758, "end_line": 1758, "start_col": 12, "end_col": 35}}, {"equations": ["for i in 1:nr loop\r\n           uu[i+1] = x[i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1754, "end_line": 1756, "start_col": 9, "end_col": 16}}, {"equations": ["uu[i+1] = x[i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1755, "end_line": 1755, "start_col": 12, "end_col": 27}}, {"equations": ["for i in 1:na loop\r\n        der(x[nr+2*i-1]) = a[i]*x[nr+2*i-1] - b[i]*x[nr+2*i] + ku[i]*uu[nr+i]", "der(x[nr+2*i])   = b[i]*x[nr+2*i-1] + a[i]*x[nr+2*i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1743, "end_line": 1746, "start_col": 6, "end_col": 13}}, {"equations": ["der(x[nr+2*i-1]) = a[i]*x[nr+2*i-1] - b[i]*x[nr+2*i] + ku[i]*uu[nr+i]", "der(x[nr+2*i])   = b[i]*x[nr+2*i-1] + a[i]*x[nr+2*i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1744, "end_line": 1745, "start_col": 9, "end_col": 62}}, {"equations": ["der(x[nr+2*i])   = b[i]*x[nr+2*i-1] + a[i]*x[nr+2*i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1745, "end_line": 1745, "start_col": 9, "end_col": 61}}, {"equations": ["der(x[nr+2*i-1]) = a[i]*x[nr+2*i-1] - b[i]*x[nr+2*i] + ku[i]*uu[nr+i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1744, "end_line": 1744, "start_col": 9, "end_col": 78}}, {"equations": ["for i in 1:nr loop\r\n        der(x[i]) = r[i]*(x[i] - uu[i])", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1740, "end_line": 1742, "start_col": 6, "end_col": 13}}, {"equations": ["der(x[i]) = r[i]*(x[i] - uu[i])"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1741, "end_line": 1741, "start_col": 9, "end_col": 41}}, {"equations": ["uu[1] = u/u_nominal"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1739, "end_line": 1739, "start_col": 6, "end_col": 25}}, {"equations": ["assert(f_cut > 0, \"f_cut > 0 required\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1730, "end_line": 1730, "start_col": 6, "end_col": 45}}, {"equations": ["assert(A_ripple > 0, \"A_ripple > 0 required\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1729, "end_line": 1729, "start_col": 6, "end_col": 51}}, {"equations": ["assert(filterType == Modelica.Blocks.Types.FilterType.LowPass or\r\n            filterType == Modelica.Blocks.Types.FilterType.HighPass or\r\n            f_min > 0, \"f_min > 0 required for band pass and band stop filter\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1726, "end_line": 1728, "start_col": 6, "end_col": 80}}, {"equations": ["assert(u_nominal > 0, \"u_nominal > 0 required\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1725, "end_line": 1725, "start_col": 6, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1724, "end_line": 1724, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n     if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n        cr = Internal.Filter.base.CriticalDamping(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Bessel then\r\n        (cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Butterworth then\r\n        (cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)", "end if", "if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        (r,a,b,ku) = Internal.Filter.roots.lowPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        (r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut)", "end if", "if init == Modelica.Blocks.Types.Init.InitialState then\r\n        x = x_start", "elseif init == Modelica.Blocks.Types.Init.SteadyState then\r\n        der(x) = zeros(nx)", "elseif init == Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start", "if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1692, "end_line": 1722, "start_col": 3, "end_col": 13}}, {"equations": ["if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n        cr = Internal.Filter.base.CriticalDamping(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Bessel then\r\n        (cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Butterworth then\r\n        (cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)", "end if", "if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        (r,a,b,ku) = Internal.Filter.roots.lowPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        (r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut)", "end if", "if init == Modelica.Blocks.Types.Init.InitialState then\r\n        x = x_start", "elseif init == Modelica.Blocks.Types.Init.SteadyState then\r\n        der(x) = zeros(nx)", "elseif init == Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start", "if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1693, "end_line": 1722, "start_col": 6, "end_col": 13}}, {"equations": ["if init == Modelica.Blocks.Types.Init.InitialState then\r\n        x = x_start", "elseif init == Modelica.Blocks.Types.Init.SteadyState then\r\n        der(x) = zeros(nx)", "elseif init == Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start", "if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1713, "end_line": 1722, "start_col": 6, "end_col": 12}}, {"equations": ["elseif init == Modelica.Blocks.Types.Init.SteadyState then\r\n        der(x) = zeros(nx)", "elseif init == Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start", "if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1715, "end_line": 1721, "start_col": 6, "end_col": 16}}, {"equations": ["elseif init == Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start", "if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1717, "end_line": 1721, "start_col": 6, "end_col": 16}}, {"equations": ["y = y_start", "if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1718, "end_line": 1721, "start_col": 9, "end_col": 16}}, {"equations": ["if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1719, "end_line": 1721, "start_col": 9, "end_col": 15}}, {"equations": ["der(x[1:nx-1]) = zeros(nx-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1720, "end_line": 1720, "start_col": 12, "end_col": 41}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1718, "end_line": 1718, "start_col": 9, "end_col": 20}}, {"equations": ["elseif init == Modelica.Blocks.Types.Init.SteadyState then\r\n        der(x) = zeros(nx)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1715, "end_line": 1716, "start_col": 6, "end_col": 28}}, {"equations": ["der(x) = zeros(nx)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1716, "end_line": 1716, "start_col": 9, "end_col": 28}}, {"equations": ["x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1714, "end_line": 1714, "start_col": 9, "end_col": 21}}, {"equations": ["if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        (r,a,b,ku) = Internal.Filter.roots.lowPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        (r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1703, "end_line": 1711, "start_col": 6, "end_col": 12}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        (r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut)", "elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1705, "end_line": 1710, "start_col": 6, "end_col": 79}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1709, "end_line": 1710, "start_col": 6, "end_col": 79}}, {"equations": ["(a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1710, "end_line": 1710, "start_col": 9, "end_col": 79}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1707, "end_line": 1708, "start_col": 6, "end_col": 79}}, {"equations": ["(a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1708, "end_line": 1708, "start_col": 9, "end_col": 79}}, {"equations": ["elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        (r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1705, "end_line": 1706, "start_col": 6, "end_col": 75}}, {"equations": ["(r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1706, "end_line": 1706, "start_col": 9, "end_col": 75}}, {"equations": ["(r,a,b,ku) = Internal.Filter.roots.lowPass(cr,c0,c1,f_cut)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1704, "end_line": 1704, "start_col": 9, "end_col": 68}}, {"equations": ["if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n        cr = Internal.Filter.base.CriticalDamping(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Bessel then\r\n        (cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Butterworth then\r\n        (cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1693, "end_line": 1701, "start_col": 6, "end_col": 12}}, {"equations": ["elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Bessel then\r\n        (cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Butterworth then\r\n        (cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized)", "elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1695, "end_line": 1700, "start_col": 6, "end_col": 83}}, {"equations": ["elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1699, "end_line": 1700, "start_col": 6, "end_col": 83}}, {"equations": ["(cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1700, "end_line": 1700, "start_col": 9, "end_col": 83}}, {"equations": ["elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Butterworth then\r\n        (cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1697, "end_line": 1698, "start_col": 6, "end_col": 74}}, {"equations": ["(cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1698, "end_line": 1698, "start_col": 9, "end_col": 74}}, {"equations": ["elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Bessel then\r\n        (cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1695, "end_line": 1696, "start_col": 6, "end_col": 69}}, {"equations": ["(cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1696, "end_line": 1696, "start_col": 9, "end_col": 69}}, {"equations": ["cr = Internal.Filter.base.CriticalDamping(order, normalized)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1694, "end_line": 1694, "start_col": 9, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1692, "end_line": 1692, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    der(x[1]) = (u - x[1])*w", "for i in 2:n loop\r\n      der(x[i]) = (x[i - 1] - x[i])*w", "end for", "y = x[n]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1533, "end_line": 1538, "start_col": 3, "end_col": 14}}, {"equations": ["der(x[1]) = (u - x[1])*w", "for i in 2:n loop\r\n      der(x[i]) = (x[i - 1] - x[i])*w", "end for", "y = x[n]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1534, "end_line": 1538, "start_col": 5, "end_col": 14}}, {"equations": ["y = x[n]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1538, "end_line": 1538, "start_col": 5, "end_col": 13}}, {"equations": ["for i in 2:n loop\r\n      der(x[i]) = (x[i - 1] - x[i])*w", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1535, "end_line": 1537, "start_col": 5, "end_col": 12}}, {"equations": ["der(x[i]) = (x[i - 1] - x[i])*w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1536, "end_line": 1536, "start_col": 7, "end_col": 39}}, {"equations": ["der(x[1]) = (u - x[1])*w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1534, "end_line": 1534, "start_col": 5, "end_col": 29}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1533, "end_line": 1533, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = zeros(n)", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x[1:n-1]) = zeros(n-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1524, "end_line": 1532, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(x) = zeros(n)", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x[1:n-1]) = zeros(n-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1525, "end_line": 1532, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x[1:n-1]) = zeros(n-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1527, "end_line": 1531, "start_col": 5, "end_col": 34}}, {"equations": ["elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x[1:n-1]) = zeros(n-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1529, "end_line": 1531, "start_col": 5, "end_col": 34}}, {"equations": ["y = y_start", "der(x[1:n-1]) = zeros(n-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1530, "end_line": 1531, "start_col": 7, "end_col": 34}}, {"equations": ["der(x[1:n-1]) = zeros(n-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1531, "end_line": 1531, "start_col": 7, "end_col": 33}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1530, "end_line": 1530, "start_col": 7, "end_col": 18}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1527, "end_line": 1528, "start_col": 5, "end_col": 19}}, {"equations": ["x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1528, "end_line": 1528, "start_col": 7, "end_col": 19}}, {"equations": ["der(x) = zeros(n)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1526, "end_line": 1526, "start_col": 7, "end_col": 25}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1524, "end_line": 1524, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    k2 = ones(m)", "k1 = 1", "z[1] = u", "// calculate filter parameters\r\n    for i in 1:m loop\r\n      // poles of prototype lowpass\r\n      polereal[i] = Modelica.Math.cos(pi/2 + pi/n*(i - 0.5))", "poleimag[i] = Modelica.Math.sin(pi/2 + pi/n*(i - 0.5))", "// scaling and calculation of second order filter coefficients\r\n      w0[i] = (polereal[i]^2 + poleimag[i]^2)*w", "D[i] = -polereal[i]/w0[i]*w", "end for", "realpol = 1*w", "T = 1/realpol", "// calculate second order filters\r\n    for i in 1:m loop\r\n      der(x1[i]) = x2[i]", "der(x2[i]) = k2[i]*w0[i]^2*z[i] - 2*D[i]*w0[i]*x2[i] - w0[i]^2*x1[i]", "z[i + 1] = x1[i]", "end for", "// calculate first order filter if necessary\r\n    if evenOrder then\r\n      // even order\r\n      xr = 0", "y = z[m + 1]", "else\r\n      // uneven order\r\n      der(xr) = (k1*z[m + 1] - xr)/T", "y = xr", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1409, "end_line": 1442, "start_col": 3, "end_col": 12}}, {"equations": ["k2 = ones(m)", "k1 = 1", "z[1] = u", "// calculate filter parameters\r\n    for i in 1:m loop\r\n      // poles of prototype lowpass\r\n      polereal[i] = Modelica.Math.cos(pi/2 + pi/n*(i - 0.5))", "poleimag[i] = Modelica.Math.sin(pi/2 + pi/n*(i - 0.5))", "// scaling and calculation of second order filter coefficients\r\n      w0[i] = (polereal[i]^2 + poleimag[i]^2)*w", "D[i] = -polereal[i]/w0[i]*w", "end for", "realpol = 1*w", "T = 1/realpol", "// calculate second order filters\r\n    for i in 1:m loop\r\n      der(x1[i]) = x2[i]", "der(x2[i]) = k2[i]*w0[i]^2*z[i] - 2*D[i]*w0[i]*x2[i] - w0[i]^2*x1[i]", "z[i + 1] = x1[i]", "end for", "// calculate first order filter if necessary\r\n    if evenOrder then\r\n      // even order\r\n      xr = 0", "y = z[m + 1]", "else\r\n      // uneven order\r\n      der(xr) = (k1*z[m + 1] - xr)/T", "y = xr", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1410, "end_line": 1442, "start_col": 5, "end_col": 12}}, {"equations": ["if evenOrder then\r\n      // even order\r\n      xr = 0", "y = z[m + 1]", "else\r\n      // uneven order\r\n      der(xr) = (k1*z[m + 1] - xr)/T", "y = xr", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1434, "end_line": 1442, "start_col": 5, "end_col": 11}}, {"equations": ["der(xr) = (k1*z[m + 1] - xr)/T", "y = xr"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1440, "end_line": 1441, "start_col": 7, "end_col": 14}}, {"equations": ["y = xr"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1441, "end_line": 1441, "start_col": 7, "end_col": 13}}, {"equations": ["der(xr) = (k1*z[m + 1] - xr)/T"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1440, "end_line": 1440, "start_col": 7, "end_col": 37}}, {"equations": ["xr = 0", "y = z[m + 1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1436, "end_line": 1437, "start_col": 7, "end_col": 20}}, {"equations": ["y = z[m + 1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1437, "end_line": 1437, "start_col": 7, "end_col": 19}}, {"equations": ["xr = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1436, "end_line": 1436, "start_col": 7, "end_col": 13}}, {"equations": ["for i in 1:m loop\r\n      der(x1[i]) = x2[i]", "der(x2[i]) = k2[i]*w0[i]^2*z[i] - 2*D[i]*w0[i]*x2[i] - w0[i]^2*x1[i]", "z[i + 1] = x1[i]", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1427, "end_line": 1431, "start_col": 5, "end_col": 12}}, {"equations": ["der(x1[i]) = x2[i]", "der(x2[i]) = k2[i]*w0[i]^2*z[i] - 2*D[i]*w0[i]*x2[i] - w0[i]^2*x1[i]", "z[i + 1] = x1[i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1428, "end_line": 1430, "start_col": 7, "end_col": 24}}, {"equations": ["z[i + 1] = x1[i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1430, "end_line": 1430, "start_col": 7, "end_col": 23}}, {"equations": ["der(x2[i]) = k2[i]*w0[i]^2*z[i] - 2*D[i]*w0[i]*x2[i] - w0[i]^2*x1[i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1429, "end_line": 1429, "start_col": 7, "end_col": 75}}, {"equations": ["der(x1[i]) = x2[i]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1428, "end_line": 1428, "start_col": 7, "end_col": 25}}, {"equations": ["T = 1/realpol"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1424, "end_line": 1424, "start_col": 5, "end_col": 18}}, {"equations": ["realpol = 1*w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1423, "end_line": 1423, "start_col": 5, "end_col": 18}}, {"equations": ["for i in 1:m loop\r\n      // poles of prototype lowpass\r\n      polereal[i] = Modelica.Math.cos(pi/2 + pi/n*(i - 0.5))", "poleimag[i] = Modelica.Math.sin(pi/2 + pi/n*(i - 0.5))", "// scaling and calculation of second order filter coefficients\r\n      w0[i] = (polereal[i]^2 + poleimag[i]^2)*w", "D[i] = -polereal[i]/w0[i]*w", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1415, "end_line": 1422, "start_col": 5, "end_col": 12}}, {"equations": ["polereal[i] = Modelica.Math.cos(pi/2 + pi/n*(i - 0.5))", "poleimag[i] = Modelica.Math.sin(pi/2 + pi/n*(i - 0.5))", "// scaling and calculation of second order filter coefficients\r\n      w0[i] = (polereal[i]^2 + poleimag[i]^2)*w", "D[i] = -polereal[i]/w0[i]*w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1417, "end_line": 1421, "start_col": 7, "end_col": 35}}, {"equations": ["D[i] = -polereal[i]/w0[i]*w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1421, "end_line": 1421, "start_col": 7, "end_col": 34}}, {"equations": ["w0[i] = (polereal[i]^2 + poleimag[i]^2)*w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1420, "end_line": 1420, "start_col": 7, "end_col": 48}}, {"equations": ["poleimag[i] = Modelica.Math.sin(pi/2 + pi/n*(i - 0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1418, "end_line": 1418, "start_col": 7, "end_col": 61}}, {"equations": ["polereal[i] = Modelica.Math.cos(pi/2 + pi/n*(i - 0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1417, "end_line": 1417, "start_col": 7, "end_col": 61}}, {"equations": ["z[1] = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1412, "end_line": 1412, "start_col": 5, "end_col": 13}}, {"equations": ["k1 = 1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1411, "end_line": 1411, "start_col": 5, "end_col": 11}}, {"equations": ["k2 = ones(m)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1410, "end_line": 1410, "start_col": 5, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1409, "end_line": 1409, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x1) = zeros(m)", "der(x2) = zeros(m)", "if not evenOrder then\r\n        der(xr) = 0.0", "end if", "elseif initType == Init.InitialState then\r\n      x1 = x1_start", "x2 = x2_start", "if not evenOrder then\r\n        xr = xr_start", "end if", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x1) = zeros(m)", "if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if", "else\r\n        der(x1) = zeros(m)", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1385, "end_line": 1408, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(x1) = zeros(m)", "der(x2) = zeros(m)", "if not evenOrder then\r\n        der(xr) = 0.0", "end if", "elseif initType == Init.InitialState then\r\n      x1 = x1_start", "x2 = x2_start", "if not evenOrder then\r\n        xr = xr_start", "end if", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x1) = zeros(m)", "if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if", "else\r\n        der(x1) = zeros(m)", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1386, "end_line": 1408, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x1 = x1_start", "x2 = x2_start", "if not evenOrder then\r\n        xr = xr_start", "end if", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x1) = zeros(m)", "if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if", "else\r\n        der(x1) = zeros(m)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1392, "end_line": 1407, "start_col": 5, "end_col": 14}}, {"equations": ["elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x1) = zeros(m)", "if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if", "else\r\n        der(x1) = zeros(m)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1398, "end_line": 1407, "start_col": 5, "end_col": 14}}, {"equations": ["y = y_start", "der(x1) = zeros(m)", "if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if", "else\r\n        der(x1) = zeros(m)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1399, "end_line": 1407, "start_col": 7, "end_col": 14}}, {"equations": ["if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if", "else\r\n        der(x1) = zeros(m)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1401, "end_line": 1407, "start_col": 7, "end_col": 13}}, {"equations": ["der(x1) = zeros(m)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1406, "end_line": 1406, "start_col": 9, "end_col": 28}}, {"equations": ["if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1402, "end_line": 1404, "start_col": 9, "end_col": 16}}, {"equations": ["der(x2[1:m-1]) = zeros(m-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1403, "end_line": 1403, "start_col": 11, "end_col": 39}}, {"equations": ["der(x1) = zeros(m)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1400, "end_line": 1400, "start_col": 7, "end_col": 25}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1399, "end_line": 1399, "start_col": 7, "end_col": 18}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x1 = x1_start", "x2 = x2_start", "if not evenOrder then\r\n        xr = xr_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1392, "end_line": 1397, "start_col": 5, "end_col": 14}}, {"equations": ["x1 = x1_start", "x2 = x2_start", "if not evenOrder then\r\n        xr = xr_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1393, "end_line": 1397, "start_col": 7, "end_col": 14}}, {"equations": ["if not evenOrder then\r\n        xr = xr_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1395, "end_line": 1397, "start_col": 7, "end_col": 13}}, {"equations": ["xr = xr_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1396, "end_line": 1396, "start_col": 9, "end_col": 23}}, {"equations": ["x2 = x2_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1394, "end_line": 1394, "start_col": 7, "end_col": 20}}, {"equations": ["x1 = x1_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1393, "end_line": 1393, "start_col": 7, "end_col": 20}}, {"equations": ["der(x1) = zeros(m)", "der(x2) = zeros(m)", "if not evenOrder then\r\n        der(xr) = 0.0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1387, "end_line": 1391, "start_col": 7, "end_col": 14}}, {"equations": ["if not evenOrder then\r\n        der(xr) = 0.0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1389, "end_line": 1391, "start_col": 7, "end_col": 13}}, {"equations": ["der(xr) = 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1390, "end_line": 1390, "start_col": 9, "end_col": 23}}, {"equations": ["der(x2) = zeros(m)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1388, "end_line": 1388, "start_col": 7, "end_col": 25}}, {"equations": ["der(x1) = zeros(m)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1387, "end_line": 1387, "start_col": 7, "end_col": 25}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1385, "end_line": 1385, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = der(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1320, "end_line": 1321, "start_col": 3, "end_col": 16}}, {"equations": ["y = der(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1321, "end_line": 1321, "start_col": 5, "end_col": 16}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1320, "end_line": 1320, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    der(x) = A*x + B*u", "y = C*x + D*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1254, "end_line": 1256, "start_col": 3, "end_col": 19}}, {"equations": ["der(x) = A*x + B*u", "y = C*x + D*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1255, "end_line": 1256, "start_col": 5, "end_col": 19}}, {"equations": ["y = C*x + D*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1256, "end_line": 1256, "start_col": 5, "end_col": 18}}, {"equations": ["der(x) = A*x + B*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1255, "end_line": 1255, "start_col": 5, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1254, "end_line": 1254, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = zeros(nx)", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      x = Modelica.Math.Matrices.equalityLeastSquares(A, -B*u, C, y_start - D*u)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1246, "end_line": 1253, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(x) = zeros(nx)", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      x = Modelica.Math.Matrices.equalityLeastSquares(A, -B*u, C, y_start - D*u)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1247, "end_line": 1253, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      x = Modelica.Math.Matrices.equalityLeastSquares(A, -B*u, C, y_start - D*u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1249, "end_line": 1252, "start_col": 5, "end_col": 82}}, {"equations": ["elseif initType == Init.InitialOutput then\r\n      x = Modelica.Math.Matrices.equalityLeastSquares(A, -B*u, C, y_start - D*u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1251, "end_line": 1252, "start_col": 5, "end_col": 82}}, {"equations": ["x = Modelica.Math.Matrices.equalityLeastSquares(A, -B*u, C, y_start - D*u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1252, "end_line": 1252, "start_col": 7, "end_col": 82}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1249, "end_line": 1250, "start_col": 5, "end_col": 19}}, {"equations": ["x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1250, "end_line": 1250, "start_col": 7, "end_col": 19}}, {"equations": ["der(x) = zeros(nx)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1248, "end_line": 1248, "start_col": 7, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1246, "end_line": 1246, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    assert(size(b,1) <= size(a,1), \"Transfer function is not proper\")", "if nx == 0 then\r\n       y = d*u", "else\r\n       der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1]", "der(x_scaled[2:nx]) = x_scaled[1:nx-1]", "y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u", "x = x_scaled/a_end", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1159, "end_line": 1168, "start_col": 3, "end_col": 12}}, {"equations": ["assert(size(b,1) <= size(a,1), \"Transfer function is not proper\")", "if nx == 0 then\r\n       y = d*u", "else\r\n       der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1]", "der(x_scaled[2:nx]) = x_scaled[1:nx-1]", "y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u", "x = x_scaled/a_end", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1160, "end_line": 1168, "start_col": 5, "end_col": 12}}, {"equations": ["if nx == 0 then\r\n       y = d*u", "else\r\n       der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1]", "der(x_scaled[2:nx]) = x_scaled[1:nx-1]", "y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u", "x = x_scaled/a_end", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1161, "end_line": 1168, "start_col": 5, "end_col": 11}}, {"equations": ["der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1]", "der(x_scaled[2:nx]) = x_scaled[1:nx-1]", "y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u", "x = x_scaled/a_end"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1164, "end_line": 1167, "start_col": 8, "end_col": 27}}, {"equations": ["x = x_scaled/a_end"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1167, "end_line": 1167, "start_col": 8, "end_col": 26}}, {"equations": ["y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1166, "end_line": 1166, "start_col": 8, "end_col": 57}}, {"equations": ["der(x_scaled[2:nx]) = x_scaled[1:nx-1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1165, "end_line": 1165, "start_col": 8, "end_col": 46}}, {"equations": ["der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1164, "end_line": 1164, "start_col": 8, "end_col": 64}}, {"equations": ["y = d*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1162, "end_line": 1162, "start_col": 8, "end_col": 16}}, {"equations": ["assert(size(b,1) <= size(a,1), \"Transfer function is not proper\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1160, "end_line": 1160, "start_col": 5, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1159, "end_line": 1159, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x_scaled) = zeros(nx)", "elseif initType == Init.InitialState then\r\n      x_scaled = x_start*a_end", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x_scaled[2:nx]) = zeros(nx-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1150, "end_line": 1158, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(x_scaled) = zeros(nx)", "elseif initType == Init.InitialState then\r\n      x_scaled = x_start*a_end", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x_scaled[2:nx]) = zeros(nx-1)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1151, "end_line": 1158, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x_scaled = x_start*a_end", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x_scaled[2:nx]) = zeros(nx-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1153, "end_line": 1157, "start_col": 5, "end_col": 41}}, {"equations": ["elseif initType == Init.InitialOutput then\r\n      y = y_start", "der(x_scaled[2:nx]) = zeros(nx-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1155, "end_line": 1157, "start_col": 5, "end_col": 41}}, {"equations": ["y = y_start", "der(x_scaled[2:nx]) = zeros(nx-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1156, "end_line": 1157, "start_col": 7, "end_col": 41}}, {"equations": ["der(x_scaled[2:nx]) = zeros(nx-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1157, "end_line": 1157, "start_col": 7, "end_col": 40}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1156, "end_line": 1156, "start_col": 7, "end_col": 18}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x_scaled = x_start*a_end"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1153, "end_line": 1154, "start_col": 5, "end_col": 32}}, {"equations": ["x_scaled = x_start*a_end"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1154, "end_line": 1154, "start_col": 7, "end_col": 32}}, {"equations": ["der(x_scaled) = zeros(nx)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1152, "end_line": 1152, "start_col": 7, "end_col": 33}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 1150, "end_line": 1150, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    assert(abs(k) >= Modelica.Constants.small, \"Controller gain must be non-zero.\")", "if initType == Init.InitialOutput and (y_start < yMin or y_start > yMax) then\r\n        Modelica.Utilities.Streams.error(\"LimPID: Start value y_start (=\" + String(y_start) +\r\n           \") is outside of the limits of yMin (=\" + String(yMin) +\") and yMax (=\" + String(yMax) + \")\")", "end if", "connect(u_s, addP.u1) annotation (Line(points={{-120,0},{-96,0},{-96,56},{\r\n            -82,56}}, color={0,0,127}))", "connect(u_s, addD.u1) annotation (Line(points={{-120,0},{-96,0},{-96,6},{\r\n            -82,6}}, color={0,0,127}))", "connect(u_s, addI.u1) annotation (Line(points={{-120,0},{-96,0},{-96,-42},{\r\n            -82,-42}}, color={0,0,127}))", "connect(addP.y, P.u) annotation (Line(points={{-59,50},{-52,50}}, color={0,\r\n            0,127}))", "connect(addD.y, D.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(addI.y, I.u) annotation (Line(points={{-59,-50},{-52,-50}}, color={\r\n            0,0,127}))", "connect(P.y, addPID.u1) annotation (Line(points={{-29,50},{-20,50},{-20,8},{-12,\r\n            8}},     color={0,0,127}))", "connect(D.y, addPID.u2)\r\n      annotation (Line(points={{-29,0},{-12,0}},color={0,0,127}))", "connect(I.y, addPID.u3) annotation (Line(points={{-29,-50},{-20,-50},{-20,-8},\r\n            {-12,-8}},    color={0,0,127}))", "connect(limiter.y, addSat.u1) annotation (Line(points={{91,0},{94,0},{94,\r\n            -20},{86,-20},{86,-38}}, color={0,0,127}))", "connect(limiter.y, y)\r\n      annotation (Line(points={{91,0},{110,0}}, color={0,0,127}))", "connect(addSat.y, gainTrack.u) annotation (Line(points={{80,-61},{80,-70},{2,-70}},\r\n                      color={0,0,127}))", "connect(gainTrack.y, addI.u3) annotation (Line(points={{-21,-70},{-88,-70},{-88,\r\n            -58},{-82,-58}},     color={0,0,127}))", "connect(u_m, addP.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,44},{-82,44}}, color={0,0,127}))", "connect(u_m, addD.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,-6},{-82,-6}}, color={0,0,127}))", "connect(u_m, addI.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,-50},{-82,-50}}, color={0,0,127}))", "connect(Dzero.y, addPID.u2) annotation (Line(points={{-29.5,25},{-24,25},{-24,\r\n            0},{-12,0}},    color={0,0,127}))", "connect(Izero.y, addPID.u3) annotation (Line(points={{-10.5,-50},{-20,-50},{-20,\r\n            -8},{-12,-8}},    color={0,0,127}))", "connect(addPID.y, gainPID.u)\r\n      annotation (Line(points={{11,0},{18,0}}, color={0,0,127}))", "connect(addFF.y, limiter.u)\r\n      annotation (Line(points={{60.6,0},{68,0}}, color={0,0,127}))", "connect(gainPID.y, addFF.u1) annotation (Line(points={{41,0},{44,0},{44,3.6},\r\n            {46.8,3.6}},color={0,0,127}))", "connect(FFzero.y, addFF.u2) annotation (Line(points={{40.5,-30},{44,-30},{44,\r\n            -3.6},{46.8,-3.6}},\r\n                          color={0,0,127}))", "connect(addFF.u2, u_ff) annotation (Line(points={{46.8,-3.6},{44,-3.6},{44,\r\n            -92},{60,-92},{60,-120}},\r\n                                 color={0,0,127}))", "connect(addFF.y, addSat.u2) annotation (Line(points={{60.6,0},{64,0},{64,-20},\r\n            {74,-20},{74,-38}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 883, "end_line": 936, "start_col": 3, "end_col": 51}}, {"equations": ["assert(abs(k) >= Modelica.Constants.small, \"Controller gain must be non-zero.\")", "if initType == Init.InitialOutput and (y_start < yMin or y_start > yMax) then\r\n        Modelica.Utilities.Streams.error(\"LimPID: Start value y_start (=\" + String(y_start) +\r\n           \") is outside of the limits of yMin (=\" + String(yMin) +\") and yMax (=\" + String(yMax) + \")\")", "end if", "connect(u_s, addP.u1) annotation (Line(points={{-120,0},{-96,0},{-96,56},{\r\n            -82,56}}, color={0,0,127}))", "connect(u_s, addD.u1) annotation (Line(points={{-120,0},{-96,0},{-96,6},{\r\n            -82,6}}, color={0,0,127}))", "connect(u_s, addI.u1) annotation (Line(points={{-120,0},{-96,0},{-96,-42},{\r\n            -82,-42}}, color={0,0,127}))", "connect(addP.y, P.u) annotation (Line(points={{-59,50},{-52,50}}, color={0,\r\n            0,127}))", "connect(addD.y, D.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(addI.y, I.u) annotation (Line(points={{-59,-50},{-52,-50}}, color={\r\n            0,0,127}))", "connect(P.y, addPID.u1) annotation (Line(points={{-29,50},{-20,50},{-20,8},{-12,\r\n            8}},     color={0,0,127}))", "connect(D.y, addPID.u2)\r\n      annotation (Line(points={{-29,0},{-12,0}},color={0,0,127}))", "connect(I.y, addPID.u3) annotation (Line(points={{-29,-50},{-20,-50},{-20,-8},\r\n            {-12,-8}},    color={0,0,127}))", "connect(limiter.y, addSat.u1) annotation (Line(points={{91,0},{94,0},{94,\r\n            -20},{86,-20},{86,-38}}, color={0,0,127}))", "connect(limiter.y, y)\r\n      annotation (Line(points={{91,0},{110,0}}, color={0,0,127}))", "connect(addSat.y, gainTrack.u) annotation (Line(points={{80,-61},{80,-70},{2,-70}},\r\n                      color={0,0,127}))", "connect(gainTrack.y, addI.u3) annotation (Line(points={{-21,-70},{-88,-70},{-88,\r\n            -58},{-82,-58}},     color={0,0,127}))", "connect(u_m, addP.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,44},{-82,44}}, color={0,0,127}))", "connect(u_m, addD.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,-6},{-82,-6}}, color={0,0,127}))", "connect(u_m, addI.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,-50},{-82,-50}}, color={0,0,127}))", "connect(Dzero.y, addPID.u2) annotation (Line(points={{-29.5,25},{-24,25},{-24,\r\n            0},{-12,0}},    color={0,0,127}))", "connect(Izero.y, addPID.u3) annotation (Line(points={{-10.5,-50},{-20,-50},{-20,\r\n            -8},{-12,-8}},    color={0,0,127}))", "connect(addPID.y, gainPID.u)\r\n      annotation (Line(points={{11,0},{18,0}}, color={0,0,127}))", "connect(addFF.y, limiter.u)\r\n      annotation (Line(points={{60.6,0},{68,0}}, color={0,0,127}))", "connect(gainPID.y, addFF.u1) annotation (Line(points={{41,0},{44,0},{44,3.6},\r\n            {46.8,3.6}},color={0,0,127}))", "connect(FFzero.y, addFF.u2) annotation (Line(points={{40.5,-30},{44,-30},{44,\r\n            -3.6},{46.8,-3.6}},\r\n                          color={0,0,127}))", "connect(addFF.u2, u_ff) annotation (Line(points={{46.8,-3.6},{44,-3.6},{44,\r\n            -92},{60,-92},{60,-120}},\r\n                                 color={0,0,127}))", "connect(addFF.y, addSat.u2) annotation (Line(points={{60.6,0},{64,0},{64,-20},\r\n            {74,-20},{74,-38}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 884, "end_line": 936, "start_col": 5, "end_col": 51}}, {"equations": ["if initType == Init.InitialOutput and (y_start < yMin or y_start > yMax) then\r\n        Modelica.Utilities.Streams.error(\"LimPID: Start value y_start (=\" + String(y_start) +\r\n           \") is outside of the limits of yMin (=\" + String(yMin) +\") and yMax (=\" + String(yMax) + \")\")", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 885, "end_line": 888, "start_col": 5, "end_col": 11}}, {"equations": ["Modelica.Utilities.Streams.error(\"LimPID: Start value y_start (=\" + String(y_start) +\r\n           \") is outside of the limits of yMin (=\" + String(yMin) +\") and yMax (=\" + String(yMax) + \")\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 886, "end_line": 887, "start_col": 9, "end_col": 106}}, {"equations": ["assert(abs(k) >= Modelica.Constants.small, \"Controller gain must be non-zero.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 884, "end_line": 884, "start_col": 5, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 883, "end_line": 883, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType==Init.InitialOutput then\r\n      gainPID.y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 879, "end_line": 882, "start_col": 3, "end_col": 12}}, {"equations": ["if initType==Init.InitialOutput then\r\n      gainPID.y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 880, "end_line": 882, "start_col": 5, "end_col": 12}}, {"equations": ["gainPID.y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 881, "end_line": 881, "start_col": 7, "end_col": 27}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 879, "end_line": 879, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    connect(u, P.u) annotation (Line(points={{-120,0},{-80,0},{-80,80},{-64,80}}, color={0,0,127}))", "connect(u, I.u)\r\n      annotation (Line(points={{-120,0},{-64,0}}, color={0,0,127}))", "connect(u, D.u) annotation (Line(points={{-120,0},{-80,0},{-80,-80},{-64,-80}},\r\n                   color={0,0,127}))", "connect(P.y, Add.u1) annotation (Line(points={{-18,80},{0,80},{0,8},{18,8}}, color={0,0,127}))", "connect(I.y, Add.u2)\r\n      annotation (Line(points={{-18,0},{18,0}}, color={0,0,127}))", "connect(D.y, Add.u3) annotation (Line(points={{-18,-80},{0,-80},{0,-8},{18,-8}},\r\n                  color={0,0,127}))", "connect(Add.y, Gain.u)\r\n      annotation (Line(points={{41,0},{58,0}}, color={0,0,127}))", "connect(Gain.y, y)\r\n      annotation (Line(points={{81,0},{110,0}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 652, "end_line": 666, "start_col": 3, "end_col": 67}}, {"equations": ["connect(u, P.u) annotation (Line(points={{-120,0},{-80,0},{-80,80},{-64,80}}, color={0,0,127}))", "connect(u, I.u)\r\n      annotation (Line(points={{-120,0},{-64,0}}, color={0,0,127}))", "connect(u, D.u) annotation (Line(points={{-120,0},{-80,0},{-80,-80},{-64,-80}},\r\n                   color={0,0,127}))", "connect(P.y, Add.u1) annotation (Line(points={{-18,80},{0,80},{0,8},{18,8}}, color={0,0,127}))", "connect(I.y, Add.u2)\r\n      annotation (Line(points={{-18,0},{18,0}}, color={0,0,127}))", "connect(D.y, Add.u3) annotation (Line(points={{-18,-80},{0,-80},{0,-8},{18,-8}},\r\n                  color={0,0,127}))", "connect(Add.y, Gain.u)\r\n      annotation (Line(points={{41,0},{58,0}}, color={0,0,127}))", "connect(Gain.y, y)\r\n      annotation (Line(points={{81,0},{110,0}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 653, "end_line": 666, "start_col": 5, "end_col": 67}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 652, "end_line": 652, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType==Init.InitialOutput then\r\n       y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 647, "end_line": 650, "start_col": 3, "end_col": 12}}, {"equations": ["if initType==Init.InitialOutput then\r\n       y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 648, "end_line": 650, "start_col": 5, "end_col": 12}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 649, "end_line": 649, "start_col": 8, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 647, "end_line": 647, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    der(x) = u/T", "y = k*(x + u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 534, "end_line": 536, "start_col": 3, "end_col": 19}}, {"equations": ["der(x) = u/T", "y = k*(x + u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 535, "end_line": 536, "start_col": 5, "end_col": 19}}, {"equations": ["y = k*(x + u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 536, "end_line": 536, "start_col": 5, "end_col": 18}}, {"equations": ["der(x) = u/T"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 535, "end_line": 535, "start_col": 5, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 534, "end_line": 534, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = 0", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 526, "end_line": 533, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(x) = 0", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 527, "end_line": 533, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 529, "end_line": 532, "start_col": 5, "end_col": 19}}, {"equations": ["elseif initType == Init.InitialOutput then\r\n      y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 531, "end_line": 532, "start_col": 5, "end_col": 19}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 532, "end_line": 532, "start_col": 7, "end_col": 19}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 529, "end_line": 530, "start_col": 5, "end_col": 19}}, {"equations": ["x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 530, "end_line": 530, "start_col": 7, "end_col": 19}}, {"equations": ["der(x) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 528, "end_line": 528, "start_col": 7, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 526, "end_line": 526, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    der(y) = yd", "der(yd) = w*(w*(k*u - y) - 2*D*yd)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 450, "end_line": 452, "start_col": 3, "end_col": 40}}, {"equations": ["der(y) = yd", "der(yd) = w*(w*(k*u - y) - 2*D*yd)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 451, "end_line": 452, "start_col": 5, "end_col": 40}}, {"equations": ["der(yd) = w*(w*(k*u - y) - 2*D*yd)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 452, "end_line": 452, "start_col": 5, "end_col": 39}}, {"equations": ["der(y) = yd"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 451, "end_line": 451, "start_col": 5, "end_col": 16}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 450, "end_line": 450, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(y) = 0", "der(yd) = 0", "elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start", "yd = yd_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 442, "end_line": 449, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(y) = 0", "der(yd) = 0", "elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start", "yd = yd_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 443, "end_line": 449, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start", "yd = yd_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 446, "end_line": 448, "start_col": 5, "end_col": 21}}, {"equations": ["y = y_start", "yd = yd_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 447, "end_line": 448, "start_col": 7, "end_col": 21}}, {"equations": ["yd = yd_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 448, "end_line": 448, "start_col": 7, "end_col": 20}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 447, "end_line": 447, "start_col": 7, "end_col": 18}}, {"equations": ["der(y) = 0", "der(yd) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 444, "end_line": 445, "start_col": 7, "end_col": 19}}, {"equations": ["der(yd) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 445, "end_line": 445, "start_col": 7, "end_col": 18}}, {"equations": ["der(y) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 444, "end_line": 444, "start_col": 7, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 442, "end_line": 442, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    der(y) = (k*u - y)/T"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 369, "end_line": 370, "start_col": 3, "end_col": 26}}, {"equations": ["der(y) = (k*u - y)/T"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 370, "end_line": 370, "start_col": 5, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 369, "end_line": 369, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(y) = 0", "elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 363, "end_line": 368, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(y) = 0", "elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 364, "end_line": 368, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 366, "end_line": 367, "start_col": 5, "end_col": 19}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 367, "end_line": 367, "start_col": 7, "end_col": 19}}, {"equations": ["der(y) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 365, "end_line": 365, "start_col": 7, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 363, "end_line": 363, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    der(x) = if zeroGain then 0 else (u - x)/T", "y = if zeroGain then 0 else (k/T)*(u - x)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 298, "end_line": 300, "start_col": 3, "end_col": 47}}, {"equations": ["der(x) = if zeroGain then 0 else (u - x)/T", "y = if zeroGain then 0 else (k/T)*(u - x)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 299, "end_line": 300, "start_col": 5, "end_col": 47}}, {"equations": ["y = if zeroGain then 0 else (k/T)*(u - x)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 300, "end_line": 300, "start_col": 5, "end_col": 46}}, {"equations": ["der(x) = if zeroGain then 0 else (u - x)/T"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 299, "end_line": 299, "start_col": 5, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 298, "end_line": 298, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = 0", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      if zeroGain then\r\n         x = u", "else\r\n         y = y_start", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 286, "end_line": 297, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n      der(x) = 0", "elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      if zeroGain then\r\n         x = u", "else\r\n         y = y_start", "end if", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 287, "end_line": 297, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start", "elseif initType == Init.InitialOutput then\r\n      if zeroGain then\r\n         x = u", "else\r\n         y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 289, "end_line": 296, "start_col": 5, "end_col": 14}}, {"equations": ["elseif initType == Init.InitialOutput then\r\n      if zeroGain then\r\n         x = u", "else\r\n         y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 291, "end_line": 296, "start_col": 5, "end_col": 14}}, {"equations": ["if zeroGain then\r\n         x = u", "else\r\n         y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 292, "end_line": 296, "start_col": 7, "end_col": 14}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 295, "end_line": 295, "start_col": 10, "end_col": 22}}, {"equations": ["x = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 293, "end_line": 293, "start_col": 10, "end_col": 16}}, {"equations": ["elseif initType == Init.InitialState then\r\n      x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 289, "end_line": 290, "start_col": 5, "end_col": 19}}, {"equations": ["x = x_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 290, "end_line": 290, "start_col": 7, "end_col": 19}}, {"equations": ["der(x) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 288, "end_line": 288, "start_col": 7, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 286, "end_line": 286, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    if use_reset then\r\n      connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set)", "end when", "else\r\n      local_reset = false", "local_set = 0", "end if", "if initial() and not limitsAtInit then\r\n       der(y) = k*u", "assert(y >= outMin - 0.001*abs(outMax-outMin) and y <= outMax + 0.001*abs(outMax-outMin),\r\n            \"LimIntegrator: During initialization the limits have been ignored.\\n\"\r\n          + \"However, the result is that the output y is not within the required limits:\\n\"\r\n          + \"  y = \" + String(y) + \", outMin = \" + String(outMin) + \", outMax = \" + String(outMax))", "elseif strict then\r\n       der(y) = noEvent(if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u)", "else\r\n       der(y) = if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 169, "end_line": 194, "start_col": 3, "end_col": 12}}, {"equations": ["if use_reset then\r\n      connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set)", "end when", "else\r\n      local_reset = false", "local_set = 0", "end if", "if initial() and not limitsAtInit then\r\n       der(y) = k*u", "assert(y >= outMin - 0.001*abs(outMax-outMin) and y <= outMax + 0.001*abs(outMax-outMin),\r\n            \"LimIntegrator: During initialization the limits have been ignored.\\n\"\r\n          + \"However, the result is that the output y is not within the required limits:\\n\"\r\n          + \"  y = \" + String(y) + \", outMin = \" + String(outMin) + \", outMax = \" + String(outMax))", "elseif strict then\r\n       der(y) = noEvent(if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u)", "else\r\n       der(y) = if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 170, "end_line": 194, "start_col": 5, "end_col": 12}}, {"equations": ["if initial() and not limitsAtInit then\r\n       der(y) = k*u", "assert(y >= outMin - 0.001*abs(outMax-outMin) and y <= outMax + 0.001*abs(outMax-outMin),\r\n            \"LimIntegrator: During initialization the limits have been ignored.\\n\"\r\n          + \"However, the result is that the output y is not within the required limits:\\n\"\r\n          + \"  y = \" + String(y) + \", outMin = \" + String(outMin) + \", outMax = \" + String(outMax))", "elseif strict then\r\n       der(y) = noEvent(if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u)", "else\r\n       der(y) = if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 184, "end_line": 194, "start_col": 5, "end_col": 11}}, {"equations": ["der(y) = if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 193, "end_line": 193, "start_col": 8, "end_col": 85}}, {"equations": ["elseif strict then\r\n       der(y) = noEvent(if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 190, "end_line": 191, "start_col": 5, "end_col": 94}}, {"equations": ["der(y) = noEvent(if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 191, "end_line": 191, "start_col": 8, "end_col": 94}}, {"equations": ["der(y) = k*u", "assert(y >= outMin - 0.001*abs(outMax-outMin) and y <= outMax + 0.001*abs(outMax-outMin),\r\n            \"LimIntegrator: During initialization the limits have been ignored.\\n\"\r\n          + \"However, the result is that the output y is not within the required limits:\\n\"\r\n          + \"  y = \" + String(y) + \", outMin = \" + String(outMin) + \", outMax = \" + String(outMax))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 185, "end_line": 189, "start_col": 8, "end_col": 101}}, {"equations": ["assert(y >= outMin - 0.001*abs(outMax-outMin) and y <= outMax + 0.001*abs(outMax-outMin),\r\n            \"LimIntegrator: During initialization the limits have been ignored.\\n\"\r\n          + \"However, the result is that the output y is not within the required limits:\\n\"\r\n          + \"  y = \" + String(y) + \", outMin = \" + String(outMin) + \", outMax = \" + String(outMax))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 186, "end_line": 189, "start_col": 8, "end_col": 100}}, {"equations": ["der(y) = k*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 185, "end_line": 185, "start_col": 8, "end_col": 20}}, {"equations": ["if use_reset then\r\n      connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set)", "end when", "else\r\n      local_reset = false", "local_set = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 170, "end_line": 183, "start_col": 5, "end_col": 11}}, {"equations": ["local_reset = false", "local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 181, "end_line": 182, "start_col": 7, "end_col": 21}}, {"equations": ["local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 182, "end_line": 182, "start_col": 7, "end_col": 20}}, {"equations": ["local_reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 181, "end_line": 181, "start_col": 7, "end_col": 26}}, {"equations": ["connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 171, "end_line": 179, "start_col": 7, "end_col": 16}}, {"equations": ["when local_reset then\r\n        reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 177, "end_line": 179, "start_col": 7, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 179, "end_line": 179, "start_col": 11, "end_col": 15}}, {"equations": ["reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 178, "end_line": 178, "start_col": 9, "end_col": 107}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 177, "end_line": 177, "start_col": 7, "end_col": 11}}, {"equations": ["if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 172, "end_line": 176, "start_col": 7, "end_col": 13}}, {"equations": ["local_set = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 175, "end_line": 175, "start_col": 9, "end_col": 29}}, {"equations": ["connect(set, local_set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 173, "end_line": 173, "start_col": 9, "end_col": 33}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 169, "end_line": 169, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n       der(y) = 0", "elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 162, "end_line": 168, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n       der(y) = 0", "elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 163, "end_line": 168, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 165, "end_line": 167, "start_col": 5, "end_col": 19}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 167, "end_line": 167, "start_col": 7, "end_col": 19}}, {"equations": ["der(y) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 164, "end_line": 164, "start_col": 8, "end_col": 19}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 162, "end_line": 162, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    if use_reset then\r\n      connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, local_set)", "end when", "else\r\n      local_reset = false", "local_set = 0", "end if", "der(y) = k*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 46, "end_line": 61, "start_col": 3, "end_col": 18}}, {"equations": ["if use_reset then\r\n      connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, local_set)", "end when", "else\r\n      local_reset = false", "local_set = 0", "end if", "der(y) = k*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 47, "end_line": 61, "start_col": 5, "end_col": 18}}, {"equations": ["der(y) = k*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 61, "end_line": 61, "start_col": 5, "end_col": 17}}, {"equations": ["if use_reset then\r\n      connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, local_set)", "end when", "else\r\n      local_reset = false", "local_set = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 47, "end_line": 60, "start_col": 5, "end_col": 11}}, {"equations": ["local_reset = false", "local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 58, "end_line": 59, "start_col": 7, "end_col": 21}}, {"equations": ["local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 59, "end_line": 59, "start_col": 7, "end_col": 20}}, {"equations": ["local_reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 58, "end_line": 58, "start_col": 7, "end_col": 26}}, {"equations": ["connect(reset, local_reset)", "if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if", "when local_reset then\r\n        reinit(y, local_set)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 48, "end_line": 56, "start_col": 7, "end_col": 16}}, {"equations": ["when local_reset then\r\n        reinit(y, local_set)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 54, "end_line": 56, "start_col": 7, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 56, "end_line": 56, "start_col": 11, "end_col": 15}}, {"equations": ["reinit(y, local_set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 55, "end_line": 55, "start_col": 9, "end_col": 30}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 54, "end_line": 54, "start_col": 7, "end_col": 11}}, {"equations": ["if use_set then\r\n        connect(set, local_set)", "else\r\n        local_set = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 49, "end_line": 53, "start_col": 7, "end_col": 13}}, {"equations": ["local_set = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 52, "end_line": 52, "start_col": 9, "end_col": 29}}, {"equations": ["connect(set, local_set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 50, "end_line": 50, "start_col": 9, "end_col": 33}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 46, "end_line": 46, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    if initType == Init.SteadyState then\r\n       der(y) = 0", "elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 39, "end_line": 45, "start_col": 3, "end_col": 12}}, {"equations": ["if initType == Init.SteadyState then\r\n       der(y) = 0", "elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 40, "end_line": 45, "start_col": 5, "end_col": 12}}, {"equations": ["elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 42, "end_line": 44, "start_col": 5, "end_col": 19}}, {"equations": ["y = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 44, "end_line": 44, "start_col": 7, "end_col": 19}}, {"equations": ["der(y) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 41, "end_line": 41, "start_col": 8, "end_col": 19}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 39, "end_line": 39, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.Package | components: Real×60, Integer×2, SI.Frequency×2 | connections: 34 | params: k, use_reset, outMin | units: Hz, rad/s, Hz | eq: al", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo", "start_line": 2, "end_line": 4542, "start_col": 1, "end_col": 15}, "code_text": "package Continuous \"Library of continuous control blocks with internal states\"\r\n\r\n  import Modelica.Blocks.Interfaces;\r\n\r\n  extends Modelica.Icons.Package;\r\n\r\n  block Integrator \"Output the integral of the input signal with optional reset\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real k=1 \"Integrator gain\";\r\n    parameter Boolean use_reset = false \"= true, if reset port enabled\"\r\n      annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Boolean use_set = false \"= true, if set port enabled and used as reinitialization value when reset\"\r\n      annotation(Dialog(enable=use_reset), Evaluate=true, HideResult=true, choices(checkBox=true));\r\n\r\n    /* InitialState is the default, because it was the default in Modelica 2.2\r\n     and therefore this setting is backward compatible\r\n  */\r\n    parameter Init initType=Init.InitialState\r\n      \"Type of initialization (1: no init, 2: steady state, 3,4: initial output)\" annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0 \"Initial or guess value of output (= state)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    extends Interfaces.SISO;\r\n    Modelica.Blocks.Interfaces.BooleanInput reset if use_reset \"Optional connector of reset signal\" annotation(Placement(\r\n      transformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=90,\r\n        origin={60,-120})));\r\n    Modelica.Blocks.Interfaces.RealInput set if use_reset and use_set \"Optional connector of set signal\" annotation(Placement(\r\n      transformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=270,\r\n        origin={60,120})));\r\n  protected\r\n    Modelica.Blocks.Interfaces.BooleanOutput local_reset annotation(HideResult=true);\r\n    Modelica.Blocks.Interfaces.RealOutput local_set annotation(HideResult=true);\r\n\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n       der(y) = 0;\r\n    elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start;\r\n    end if;\r\n  equation\r\n    if use_reset then\r\n      connect(reset, local_reset);\r\n      if use_set then\r\n        connect(set, local_set);\r\n      else\r\n        local_set = y_start;\r\n      end if;\r\n      when local_reset then\r\n        reinit(y, local_set);\r\n      end when;\r\n    else\r\n      local_reset = false;\r\n      local_set = 0;\r\n    end if;\r\n    der(y) = k*u;\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks computes output <strong>y</strong> as\r\n<em>integral</em> of the input <strong>u</strong> multiplied with\r\nthe gain <em>k</em>:\r\n</p>\r\n<blockquote><pre>\r\n    k\r\ny = - u\r\n    s\r\n</pre></blockquote>\r\n\r\n<p>\r\nIt might be difficult to initialize the integrator in steady state.\r\nThis is discussed in the description of package\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous#info\\\">Continuous</a>.\r\n</p>\r\n\r\n<p>\r\nIf the <em>reset</em> port is enabled, then the output <strong>y</strong> is reset to <em>set</em>\r\nor to <em>y_start</em> (if the <em>set</em> port is not enabled), whenever the <em>reset</em>\r\nport has a rising edge.\r\n</p>\r\n</html>\"), Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100.0,-100.0},{100.0,100.0}}),\r\n          graphics={\r\n            Line(\r\n              points={{-80.0,78.0},{-80.0,-90.0}},\r\n              color={192,192,192}),\r\n            Polygon(\r\n              lineColor={192,192,192},\r\n              fillColor={192,192,192},\r\n              fillPattern=FillPattern.Solid,\r\n              points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n            Line(\r\n              points={{-90.0,-80.0},{82.0,-80.0}},\r\n              color={192,192,192}),\r\n            Polygon(\r\n              lineColor={192,192,192},\r\n              fillColor={192,192,192},\r\n              fillPattern=FillPattern.Solid,\r\n              points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n            Text(\r\n              textColor={192,192,192},\r\n              extent={{0.0,-70.0},{60.0,-10.0}},\r\n              textString=\"I\"),\r\n            Text(\r\n              extent={{-150.0,-150.0},{150.0,-110.0}},\r\n              textString=\"k=%k\"),\r\n            Line(\r\n              points=DynamicSelect({{-80.0,-80.0},{80.0,80.0}}, if use_reset then {{-80.0,-80.0},{60.0,60.0},{60.0,-80.0},{80.0,-60.0}} else {{-80.0,-80.0},{80.0,80.0}}),\r\n              color={0,0,127}),\r\n            Line(\r\n              visible=use_reset,\r\n              points={{60,-100},{60,-80}},\r\n              color={255,0,255},\r\n              pattern=LinePattern.Dot),\r\n            Text(\r\n              visible=use_reset,\r\n              extent={{-28,-62},{94,-86}},\r\n              textString=\"reset\")}));\r\n  end Integrator;\r\n\r\n  block LimIntegrator \"Integrator with limited value of the output and optional reset\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real k=1 \"Integrator gain\";\r\n    parameter Real outMax(start=1) \"Upper limit of output\";\r\n    parameter Real outMin=-outMax \"Lower limit of output\";\r\n    parameter Boolean use_reset = false \"= true, if reset port enabled\"\r\n      annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Boolean use_set = false \"= true, if set port enabled and used as reinitialization value when reset\"\r\n      annotation(Dialog(enable=use_reset), Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Init initType=Init.InitialState\r\n      \"Type of initialization (1: no init, 2: steady state, 3/4: initial output)\"\r\n      annotation(Evaluate=true, Dialog(group=\"Initialization\"));\r\n    parameter Boolean limitsAtInit = true\r\n      \"= false, if limits are ignored during initialization (i.e., der(y)=k*u)\"\r\n      annotation(Evaluate=true, Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0\r\n      \"Initial or guess value of output (must be in the limits outMin .. outMax)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Boolean strict=false \"= true, if strict limits with noEvent(..)\"\r\n      annotation (Evaluate=true, choices(checkBox=true), Dialog(tab=\"Advanced\"));\r\n    extends Interfaces.SISO;\r\n    Modelica.Blocks.Interfaces.BooleanInput reset if use_reset \"Optional connector of reset signal\" annotation(Placement(\r\n      transformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=90,\r\n        origin={60,-120})));\r\n    Modelica.Blocks.Interfaces.RealInput set if use_reset and use_set \"Optional connector of set signal\" annotation(Placement(\r\n      transformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=270,\r\n        origin={60,120})));\r\n  protected\r\n    Modelica.Blocks.Interfaces.BooleanOutput local_reset annotation(HideResult=true);\r\n    Modelica.Blocks.Interfaces.RealOutput local_set annotation(HideResult=true);\r\n\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n       der(y) = 0;\r\n    elseif initType == Init.InitialState or\r\n           initType == Init.InitialOutput then\r\n      y = y_start;\r\n    end if;\r\n  equation\r\n    if use_reset then\r\n      connect(reset, local_reset);\r\n      if use_set then\r\n        connect(set, local_set);\r\n      else\r\n        local_set = y_start;\r\n      end if;\r\n      when local_reset then\r\n        reinit(y, if local_set < outMin then outMin elseif local_set > outMax then outMax else local_set);\r\n      end when;\r\n    else\r\n      local_reset = false;\r\n      local_set = 0;\r\n    end if;\r\n    if initial() and not limitsAtInit then\r\n       der(y) = k*u;\r\n       assert(y >= outMin - 0.001*abs(outMax-outMin) and y <= outMax + 0.001*abs(outMax-outMin),\r\n            \"LimIntegrator: During initialization the limits have been ignored.\\n\"\r\n          + \"However, the result is that the output y is not within the required limits:\\n\"\r\n          + \"  y = \" + String(y) + \", outMin = \" + String(outMin) + \", outMax = \" + String(outMax));\r\n    elseif strict then\r\n       der(y) = noEvent(if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u);\r\n    else\r\n       der(y) = if y < outMin and k*u < 0 or y > outMax and k*u > 0 then 0 else k*u;\r\n    end if;\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks computes <strong>y</strong> as <em>integral</em>\r\nof the input <strong>u</strong> multiplied with the gain <em>k</em>. If the\r\nintegral reaches a given upper or lower <em>limit</em> and the\r\ninput will drive the integral outside of this bound, the\r\nintegration is halted and only restarted if the input drives\r\nthe integral away from the bounds.\r\n</p>\r\n\r\n<p>\r\nIt might be difficult to initialize the integrator in steady state.\r\nThis is discussed in the description of package\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous#info\\\">Continuous</a>.\r\n</p>\r\n\r\n<p>\r\nIf parameter <strong>limitsAtInit</strong> = <strong>false</strong>, the limits of the\r\nintegrator are removed from the initialization problem which\r\nleads to a much simpler equation system. After initialization has been\r\nperformed, it is checked via an assert whether the output is in the\r\ndefined limits. For backward compatibility reasons\r\n<strong>limitsAtInit</strong> = <strong>true</strong>. In most cases it is best\r\nto use <strong>limitsAtInit</strong> = <strong>false</strong>.\r\n</p>\r\n<p>\r\nIf the <em>reset</em> port is enabled, then the output <strong>y</strong> is reset to <em>set</em>\r\nor to <em>y_start</em> (if the <em>set</em> port is not enabled), whenever the <em>reset</em>\r\nport has a rising edge.\r\n</p>\r\n</html>\"), Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-80,78},{-80,-90}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{-80,90},{-88,68},{-72,68},{-80,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-90,-80},{82,-80}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{90,-80},{68,-72},{68,-88},{90,-80}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(\r\n            points=DynamicSelect({{-80,-80},{20,20},{80,20}}, if use_reset then {{-80,-80},{20,20},{60,20},{60,-80},{80,-60}} else {{-80,-80},{20,20},{80,20}}),\r\n            color={0,0,127}),\r\n          Text(\r\n            extent={{0,-10},{60,-70}},\r\n            textColor={192,192,192},\r\n            textString=\"I\"),\r\n          Text(\r\n            extent={{-150,-150},{150,-110}},\r\n            textString=\"k=%k\"),\r\n          Line(\r\n            visible=strict,\r\n            points=DynamicSelect({{20,20},{80,20}}, if use_reset then {{20,20},{60,20}} else {{20,20},{80,20}}),\r\n            color={255,0,0}),\r\n          Line(\r\n            visible=use_reset,\r\n            points={{60,-100},{60,-80}},\r\n            color={255,0,255},\r\n            pattern=LinePattern.Dot),\r\n          Text(\r\n            visible=use_reset,\r\n            extent={{-28,-62},{94,-86}},\r\n            textString=\"reset\")}));\r\n  end LimIntegrator;\r\n\r\n  block Derivative \"Approximated derivative block\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real k=1 \"Gains\";\r\n    parameter SI.Time T(min=Modelica.Constants.small) = 0.01\r\n      \"Time constants (T>0 required; T=0 is ideal derivative block)\";\r\n    parameter Init initType=Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                                                                      annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real x_start=0 \"Initial or guess value of state\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0 \"Initial value of output (= state)\"\r\n      annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n    extends Interfaces.SISO;\r\n\r\n    output Real x(start=x_start) \"State of block\";\r\n\r\n  protected\r\n    parameter Boolean zeroGain = abs(k) < Modelica.Constants.eps;\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = 0;\r\n    elseif initType == Init.InitialState then\r\n      x = x_start;\r\n    elseif initType == Init.InitialOutput then\r\n      if zeroGain then\r\n         x = u;\r\n      else\r\n         y = y_start;\r\n      end if;\r\n    end if;\r\n  equation\r\n    der(x) = if zeroGain then 0 else (u - x)/T;\r\n    y = if zeroGain then 0 else (k/T)*(u - x);\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks defines the transfer function between the\r\ninput u and the output y\r\nas <em>approximated derivative</em>:\r\n</p>\r\n<blockquote><pre>\r\n        k * s\r\ny = ------------ * u\r\n       T * s + 1\r\n</pre></blockquote>\r\n<p>\r\nIf you would like to be able to change easily between different\r\ntransfer functions (FirstOrder, SecondOrder, ... ) by changing\r\nparameters, use the general block <strong>TransferFunction</strong> instead\r\nand model a derivative block with parameters<br>\r\nb = {k,0}, a = {T, 1}.\r\n</p>\r\n\r\n<p>\r\nIf k=0, the block reduces to y=0.\r\n</p>\r\n</html>\"), Icon(\r\n      coordinateSystem(preserveAspectRatio=true,\r\n          extent={{-100.0,-100.0},{100.0,100.0}}),\r\n        graphics={\r\n      Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n        color={192,192,192}),\r\n    Polygon(lineColor={192,192,192},\r\n      fillColor={192,192,192},\r\n      fillPattern=FillPattern.Solid,\r\n      points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n    Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n      color={192,192,192}),\r\n    Polygon(lineColor={192,192,192},\r\n      fillColor={192,192,192},\r\n      fillPattern=FillPattern.Solid,\r\n      points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n    Line(origin = {-24.667,-27.333},\r\n      points = {{-55.333,87.333},{-19.333,-40.667},{86.667,-52.667}},\r\n      color = {0,0,127},\r\n      smooth = Smooth.Bezier),\r\n    Text(textColor={192,192,192},\r\n      extent={{-30.0,14.0},{86.0,60.0}},\r\n      textString=\"DT1\"),\r\n    Text(extent={{-150.0,-150.0},{150.0,-110.0}},\r\n      textString=\"k=%k\")}));\r\n  end Derivative;\r\n\r\n  block FirstOrder \"First order transfer function block (= 1 pole)\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real k=1 \"Gain\";\r\n    parameter SI.Time T(start=1) \"Time Constant\";\r\n    parameter Init initType=Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3/4: initial output)\" annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0 \"Initial or guess value of output (= state)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n\r\n    extends Interfaces.SISO(y(start=y_start));\r\n\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(y) = 0;\r\n    elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start;\r\n    end if;\r\n  equation\r\n    der(y) = (k*u - y)/T;\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks defines the transfer function between the input u\r\nand the output y as <em>first order</em> system:\r\n</p>\r\n<blockquote><pre>\r\n          k\r\ny = ------------ * u\r\n       T * s + 1\r\n</pre></blockquote>\r\n<p>\r\nIf you would like to be able to change easily between different\r\ntransfer functions (FirstOrder, SecondOrder, ... ) by changing\r\nparameters, use the general block <strong>TransferFunction</strong> instead\r\nand model a first order SISO system with parameters<br>\r\nb = {k}, a = {T, 1}.\r\n</p>\r\n<blockquote><pre>\r\nExample:\r\n   parameter: k = 0.3, T = 0.4\r\n   results in:\r\n             0.3\r\n      y = ----------- * u\r\n          0.4 s + 1.0\r\n</pre></blockquote>\r\n\r\n</html>\"), Icon(\r\n    coordinateSystem(preserveAspectRatio=true,\r\n        extent={{-100.0,-100.0},{100.0,100.0}}),\r\n      graphics={\r\n    Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n      color={192,192,192}),\r\n    Polygon(lineColor={192,192,192},\r\n      fillColor={192,192,192},\r\n      fillPattern=FillPattern.Solid,\r\n      points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n    Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n      color={192,192,192}),\r\n    Polygon(lineColor={192,192,192},\r\n      fillColor={192,192,192},\r\n      fillPattern=FillPattern.Solid,\r\n      points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n    Line(origin = {-26.667,6.667},\r\n        points = {{106.667,43.333},{-13.333,29.333},{-53.333,-86.667}},\r\n        color = {0,0,127},\r\n        smooth = Smooth.Bezier),\r\n    Text(textColor={192,192,192},\r\n      extent={{0.0,-60.0},{60.0,0.0}},\r\n      textString=\"PT1\"),\r\n    Text(extent={{-150.0,-150.0},{150.0,-110.0}},\r\n      textString=\"T=%T\")}));\r\n  end FirstOrder;\r\n\r\n  block SecondOrder \"Second order transfer function block (= 2 poles)\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real k=1 \"Gain\";\r\n    parameter Real w(start=1) \"Angular frequency\";\r\n    parameter Real D(start=1) \"Damping\";\r\n    parameter Init initType=Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3/4: initial output)\" annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0 \"Initial or guess value of output (= state)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real yd_start=0\r\n      \"Initial or guess value of derivative of output (= state)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n\r\n    extends Interfaces.SISO(y(start=y_start));\r\n    output Real yd(start=yd_start) \"Derivative of y\";\r\n\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(y) = 0;\r\n      der(yd) = 0;\r\n    elseif initType == Init.InitialState or initType == Init.InitialOutput then\r\n      y = y_start;\r\n      yd = yd_start;\r\n    end if;\r\n  equation\r\n    der(y) = yd;\r\n    der(yd) = w*(w*(k*u - y) - 2*D*yd);\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks defines the transfer function between the input u and\r\nthe output y as <em>second order</em> system:\r\n</p>\r\n<blockquote><pre>\r\n                    k\r\ny = --------------------------------- * u\r\n     ( s / w )^2 + 2*D*( s / w ) + 1\r\n</pre></blockquote>\r\n<p>\r\nIf you would like to be able to change easily between different\r\ntransfer functions (FirstOrder, SecondOrder, ... ) by changing\r\nparameters, use the general model class <strong>TransferFunction</strong>\r\ninstead and model a second order SISO system with parameters<br>\r\nb = {k}, a = {1/w^2, 2*D/w, 1}.\r\n</p>\r\n<blockquote><pre>\r\nExample:\r\n\r\n   parameter: k =  0.3,  w = 0.5,  D = 0.4\r\n   results in:\r\n                  0.3\r\n      y = ------------------- * u\r\n          4.0 s^2 + 1.6 s + 1\r\n</pre></blockquote>\r\n\r\n</html>\"), Icon(\r\n        coordinateSystem(preserveAspectRatio=true,\r\n              extent={{-100.0,-100.0},{100.0,100.0}}),\r\n            graphics={\r\n        Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n            color={192,192,192}),\r\n      Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n      Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n          color={192,192,192}),\r\n      Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n      Line(origin = {-1.939,-1.816},\r\n          points = {{81.939,36.056},{65.362,36.056},{14.39,-26.199},{-29.966,113.485},{-65.374,-61.217},{-78.061,-78.184}},\r\n          color = {0,0,127},\r\n          smooth = Smooth.Bezier),\r\n      Text(textColor={192,192,192},\r\n          extent={{0.0,-70.0},{60.0,-10.0}},\r\n          textString=\"PT2\"),\r\n      Text(extent={{-150.0,-150.0},{150.0,-110.0}},\r\n          textString=\"w=%w\")}));\r\n  end SecondOrder;\r\n\r\n  block PI \"Proportional-Integral controller\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real k=1 \"Gain\";\r\n    parameter SI.Time T(start=1,min=Modelica.Constants.small)\r\n      \"Time Constant (T>0 required)\";\r\n    parameter Init initType=Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                                                              annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real x_start=0 \"Initial or guess value of state\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0 \"Initial value of output\"\r\n      annotation(Dialog(enable=initType == Init.SteadyState or initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n\r\n    extends Interfaces.SISO;\r\n    output Real x(start=x_start) \"State of block\";\r\n\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = 0;\r\n    elseif initType == Init.InitialState then\r\n      x = x_start;\r\n    elseif initType == Init.InitialOutput then\r\n      y = y_start;\r\n    end if;\r\n  equation\r\n    der(x) = u/T;\r\n    y = k*(x + u);\r\n    annotation (defaultComponentName=\"PI\",\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks defines the transfer function between the input u and\r\nthe output y as <em>PI</em> system:\r\n</p>\r\n<blockquote><pre>\r\n              1\r\ny = k * (1 + ---) * u\r\n             T*s\r\n        T*s + 1\r\n  = k * ------- * u\r\n          T*s\r\n</pre></blockquote>\r\n<p>\r\nIf you would like to be able to change easily between different\r\ntransfer functions (FirstOrder, SecondOrder, ... ) by changing\r\nparameters, use the general model class <strong>TransferFunction</strong>\r\ninstead and model a PI SISO system with parameters<br>\r\nb = {k*T, k}, a = {T, 0}.\r\n</p>\r\n<blockquote><pre>\r\nExample:\r\n\r\n   parameter: k = 0.3,  T = 0.4\r\n\r\n   results in:\r\n               0.4 s + 1\r\n      y = 0.3 ----------- * u\r\n                 0.4 s\r\n</pre></blockquote>\r\n\r\n<p>\r\nIt might be difficult to initialize the PI component in steady state\r\ndue to the integrator part.\r\nThis is discussed in the description of package\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous#info\\\">Continuous</a>.\r\n</p>\r\n\r\n</html>\"), Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-80,78},{-80,-90}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{-80,90},{-88,68},{-72,68},{-80,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-90,-80},{82,-80}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{90,-80},{68,-72},{68,-88},{90,-80}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points = {{-80.0,-80.0},{-80.0,-20.0},{60.0,80.0}}, color = {0,0,127}),\r\n          Text(\r\n            extent={{0,6},{60,-56}},\r\n            textColor={192,192,192},\r\n            textString=\"PI\"),\r\n          Text(\r\n            extent={{-150,-150},{150,-110}},\r\n            textString=\"T=%T\")}));\r\n  end PI;\r\n\r\n  block PID \"PID controller in additive description form\"\r\n    import Modelica.Blocks.Types.Init;\r\n    extends Interfaces.SISO;\r\n\r\n    parameter Real k=1 \"Gain\";\r\n    parameter SI.Time Ti(min=Modelica.Constants.small, start=0.5)\r\n      \"Time Constant of Integrator\";\r\n    parameter SI.Time Td(min=0, start=0.1)\r\n      \"Time Constant of Derivative block\";\r\n    parameter Real Nd(min=Modelica.Constants.small) = 10\r\n      \"The higher Nd, the more ideal the derivative block\";\r\n    parameter Init initType= Init.InitialState\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                       annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real xi_start=0\r\n      \"Initial or guess value for integrator output (= integrator state)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real xd_start=0\r\n      \"Initial or guess value for state of derivative block\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0 \"Initial value of output\"\r\n      annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n    constant SI.Time unitTime=1 annotation(HideResult=true);\r\n\r\n    Blocks.Math.Gain P(k=1) \"Proportional part of PID controller\"\r\n      annotation (Placement(transformation(extent={{-60,60},{-20,100}})));\r\n    Blocks.Continuous.Integrator I(k=unitTime/Ti, y_start=xi_start,\r\n      initType=if initType==Init.SteadyState then\r\n                  Init.SteadyState else\r\n               if initType==Init.InitialState then\r\n                  Init.InitialState else Init.NoInit)\r\n      \"Integral part of PID controller\"\r\n      annotation (Placement(transformation(extent={{-60,-20},{-20,20}})));\r\n    Blocks.Continuous.Derivative D(k=Td/unitTime, T=max([Td/Nd, 100*Modelica.\r\n          Constants.eps]), x_start=xd_start,\r\n      initType=if initType==Init.SteadyState or\r\n                  initType==Init.InitialOutput then Init.SteadyState else\r\n               if initType==Init.InitialState then Init.InitialState else\r\n                  Init.NoInit) \"Derivative part of PID controller\"\r\n      annotation (Placement(transformation(extent={{-60,-100},{-20,-60}})));\r\n    Blocks.Math.Gain Gain(k=k) \"Gain of PID controller\"\r\n      annotation (Placement(transformation(extent={{60,-10},{80,10}})));\r\n    Blocks.Math.Add3 Add annotation (Placement(transformation(extent={{20,-10},\r\n              {40,10}})));\r\n  initial equation\r\n    if initType==Init.InitialOutput then\r\n       y = y_start;\r\n    end if;\r\n\r\n  equation\r\n    connect(u, P.u) annotation (Line(points={{-120,0},{-80,0},{-80,80},{-64,80}}, color={0,0,127}));\r\n    connect(u, I.u)\r\n      annotation (Line(points={{-120,0},{-64,0}}, color={0,0,127}));\r\n    connect(u, D.u) annotation (Line(points={{-120,0},{-80,0},{-80,-80},{-64,-80}},\r\n                   color={0,0,127}));\r\n    connect(P.y, Add.u1) annotation (Line(points={{-18,80},{0,80},{0,8},{18,8}}, color={0,0,127}));\r\n    connect(I.y, Add.u2)\r\n      annotation (Line(points={{-18,0},{18,0}}, color={0,0,127}));\r\n    connect(D.y, Add.u3) annotation (Line(points={{-18,-80},{0,-80},{0,-8},{18,-8}},\r\n                  color={0,0,127}));\r\n    connect(Add.y, Gain.u)\r\n      annotation (Line(points={{41,0},{58,0}}, color={0,0,127}));\r\n    connect(Gain.y, y)\r\n      annotation (Line(points={{81,0},{110,0}}, color={0,0,127}));\r\n    annotation (defaultComponentName=\"PID\",\r\n      Icon(\r\n          coordinateSystem(preserveAspectRatio=true,\r\n              extent={{-100.0,-100.0},{100.0,100.0}}),\r\n              graphics={\r\n          Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n              color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid,\r\n            points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n        Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n            color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid,\r\n            points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n        Line(points = {{-80,-80},{-80,-20},{60,80}}, color = {0,0,127}),\r\n        Text(textColor={192,192,192},\r\n            extent={{-20.0,-60.0},{80.0,-20.0}},\r\n            textString=\"PID\"),\r\n        Text(extent={{-150.0,-150.0},{150.0,-110.0}},\r\n            textString=\"Ti=%Ti\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis is the text-book version of a PID controller.\r\nFor a more practically useful PID controller, use\r\nblock LimPID.\r\n</p>\r\n\r\n<p>\r\nThe PID block can be initialized in different\r\nways controlled by parameter <strong>initType</strong>. The possible\r\nvalues of initType are defined in\r\n<a href=\\\"modelica://Modelica.Blocks.Types.Init\\\">Modelica.Blocks.Types.Init</a>.\r\n</p>\r\n\r\n<p>\r\nBased on the setting of initType, the integrator (I) and derivative (D)\r\nblocks inside the PID controller are initialized according to the following table:\r\n</p>\r\n\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>initType</strong></td>\r\n      <td><strong>I.initType</strong></td>\r\n      <td><strong>D.initType</strong></td></tr>\r\n\r\n  <tr><td><strong>NoInit</strong></td>\r\n      <td>NoInit</td>\r\n      <td>NoInit</td></tr>\r\n\r\n  <tr><td><strong>SteadyState</strong></td>\r\n      <td>SteadyState</td>\r\n      <td>SteadyState</td></tr>\r\n\r\n  <tr><td><strong>InitialState</strong></td>\r\n      <td>InitialState</td>\r\n      <td>InitialState</td></tr>\r\n\r\n  <tr><td><strong>InitialOutput</strong><br>\r\n          and initial equation: y = y_start</td>\r\n      <td>NoInit</td>\r\n      <td>SteadyState</td></tr>\r\n</table>\r\n\r\n<p>\r\nIn many cases, the most useful initial condition is\r\n<strong>SteadyState</strong> because initial transients are then no longer\r\npresent. If initType = Init.SteadyState, then in some\r\ncases difficulties might occur. The reason is the\r\nequation of the integrator:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>der</strong>(y) = k*u;\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe steady state equation \\\"der(x)=0\\\" leads to the condition that the input u to the\r\nintegrator is zero. If the input u is already (directly or indirectly) defined\r\nby another initial condition, then the initialization problem is <strong>singular</strong>\r\n(has none or infinitely many solutions). This situation occurs often\r\nfor mechanical systems, where, e.g., u = desiredSpeed - measuredSpeed and\r\nsince speed is both a state and a derivative, it is natural to\r\ninitialize it with zero. As sketched this is, however, not possible.\r\nThe solution is to not initialize u or the variable that is used\r\nto compute u by an algebraic equation.\r\n</p>\r\n\r\n</html>\"));\r\n  end PID;\r\n\r\n  block LimPID\r\n    \"P, PI, PD, and PID controller with limited output, anti-windup compensation, setpoint weighting and optional feed-forward\"\r\n    import Modelica.Blocks.Types.Init;\r\n    import Modelica.Blocks.Types.SimpleController;\r\n    extends Modelica.Blocks.Interfaces.SVcontrol;\r\n    output Real controlError = u_s - u_m\r\n      \"Control error (set point - measurement)\";\r\n    parameter .Modelica.Blocks.Types.SimpleController controllerType=\r\n           .Modelica.Blocks.Types.SimpleController.PID \"Type of controller\";\r\n    parameter Real k = 1 \"Gain of controller, must be non-zero\";\r\n    parameter SI.Time Ti(min=Modelica.Constants.small)=0.5\r\n      \"Time constant of Integrator block\" annotation (Dialog(enable=\r\n            controllerType == .Modelica.Blocks.Types.SimpleController.PI or\r\n            controllerType == .Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter SI.Time Td(min=0)=0.1\r\n      \"Time constant of Derivative block\" annotation (Dialog(enable=\r\n            controllerType == .Modelica.Blocks.Types.SimpleController.PD or\r\n            controllerType == .Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter Real yMax(start=1) \"Upper limit of output\";\r\n    parameter Real yMin=-yMax \"Lower limit of output\";\r\n    parameter Real wp(min=0) = 1\r\n      \"Set-point weight for Proportional block (0..1)\";\r\n    parameter Real wd(min=0) = 0 \"Set-point weight for Derivative block (0..1)\"\r\n       annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or\r\n                                  controllerType==.Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter Real Ni(min=100*Modelica.Constants.eps) = 0.9\r\n      \"Ni*Ti is time constant of anti-windup compensation\"\r\n       annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PI or\r\n                                controllerType==.Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter Real Nd(min=100*Modelica.Constants.eps) = 10\r\n      \"The higher Nd, the more ideal the derivative block\"\r\n       annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or\r\n                                  controllerType==.Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter Boolean withFeedForward=false \"Use feed-forward input?\"\r\n      annotation(Evaluate=true, choices(checkBox=true));\r\n    parameter Real kFF=1 \"Gain of feed-forward input\"\r\n      annotation(Dialog(enable=withFeedForward));\r\n    parameter Init initType = Init.InitialState\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n      annotation(Evaluate=true, Dialog(group=\"Initialization\"));\r\n    parameter Real xi_start=0\r\n      \"Initial or guess value for integrator output (= integrator state)\"\r\n      annotation (Dialog(group=\"Initialization\",\r\n                  enable=controllerType==.Modelica.Blocks.Types.SimpleController.PI or\r\n                         controllerType==.Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter Real xd_start=0\r\n      \"Initial or guess value for state of derivative block\"\r\n      annotation (Dialog(group=\"Initialization\",\r\n                           enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or\r\n                                  controllerType==.Modelica.Blocks.Types.SimpleController.PID));\r\n    parameter Real y_start=0 \"Initial value of output\"\r\n      annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n    parameter Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear\r\n      \"Simplified model for homotopy-based initialization\"\r\n      annotation (Evaluate=true, Dialog(group=\"Initialization\"));\r\n    parameter Boolean strict=false \"= true, if strict limits with noEvent(..)\"\r\n      annotation (Evaluate=true, choices(checkBox=true), Dialog(tab=\"Advanced\"));\r\n    constant SI.Time unitTime=1 annotation (HideResult=true);\r\n    Modelica.Blocks.Interfaces.RealInput u_ff if withFeedForward\r\n      \"Optional connector of feed-forward input signal\"\r\n     annotation (Placement(\r\n          transformation(\r\n          origin={60,-120},\r\n          extent={{20,-20},{-20,20}},\r\n          rotation=270)));\r\n    Modelica.Blocks.Math.Add addP(k1=wp, k2=-1)\r\n      annotation (Placement(transformation(extent={{-80,40},{-60,60}})));\r\n    Modelica.Blocks.Math.Add addD(k1=wd, k2=-1) if with_D\r\n      annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n    Modelica.Blocks.Math.Gain P(k=1)\r\n      annotation (Placement(transformation(extent={{-50,40},{-30,60}})));\r\n    Modelica.Blocks.Continuous.Integrator I(\r\n      k=unitTime/Ti,\r\n      y_start=xi_start,\r\n      initType=if initType == Init.SteadyState then Init.SteadyState else if\r\n          initType == Init.InitialState\r\n           then Init.InitialState else Init.NoInit) if with_I\r\n      annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));\r\n    Modelica.Blocks.Continuous.Derivative D(\r\n      k=Td/unitTime,\r\n      T=max([Td/Nd,1.e-14]),\r\n      x_start=xd_start,\r\n      initType=if initType == Init.SteadyState or initType == Init.InitialOutput\r\n           then Init.SteadyState else if initType == Init.InitialState then\r\n          Init.InitialState else Init.NoInit) if with_D\r\n      annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n    Modelica.Blocks.Math.Gain gainPID(k=k)\r\n      annotation (Placement(transformation(extent={{20,-10},{40,10}})));\r\n    Modelica.Blocks.Math.Add3 addPID\r\n      annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n    Modelica.Blocks.Math.Add3 addI(k2=-1) if with_I\r\n      annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));\r\n    Modelica.Blocks.Math.Add addSat(k1=+1, k2=-1) if with_I annotation (Placement(\r\n          transformation(\r\n          origin={80,-50},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270)));\r\n    Modelica.Blocks.Math.Gain gainTrack(k=1/(k*Ni)) if with_I\r\n      annotation (Placement(transformation(extent={{0,-80},{-20,-60}})));\r\n    Modelica.Blocks.Nonlinear.Limiter limiter(\r\n      uMax=yMax,\r\n      uMin=yMin,\r\n      strict=strict,\r\n      homotopyType=homotopyType)\r\n      annotation (Placement(transformation(extent={{70,-10},{90,10}})));\r\n  protected\r\n    parameter Boolean with_I = controllerType==SimpleController.PI or\r\n                               controllerType==SimpleController.PID annotation(Evaluate=true, HideResult=true);\r\n    parameter Boolean with_D = controllerType==SimpleController.PD or\r\n                               controllerType==SimpleController.PID annotation(Evaluate=true, HideResult=true);\r\n  public\r\n    Modelica.Blocks.Sources.Constant Dzero(k=0) if not with_D\r\n      annotation (Placement(transformation(extent={{-40,20},{-30,30}})));\r\n    Modelica.Blocks.Sources.Constant Izero(k=0) if not with_I\r\n      annotation (Placement(transformation(extent={{0,-55},{-10,-45}})));\r\n    Modelica.Blocks.Sources.Constant FFzero(k=0) if not withFeedForward\r\n      annotation (Placement(transformation(extent={{30,-35},{40,-25}})));\r\n    Modelica.Blocks.Math.Add addFF(k1=1, k2=kFF)\r\n      annotation (Placement(transformation(extent={{48,-6},{60,6}})));\r\n  initial equation\r\n    if initType==Init.InitialOutput then\r\n      gainPID.y = y_start;\r\n    end if;\r\n  equation\r\n    assert(abs(k) >= Modelica.Constants.small, \"Controller gain must be non-zero.\");\r\n    if initType == Init.InitialOutput and (y_start < yMin or y_start > yMax) then\r\n        Modelica.Utilities.Streams.error(\"LimPID: Start value y_start (=\" + String(y_start) +\r\n           \") is outside of the limits of yMin (=\" + String(yMin) +\") and yMax (=\" + String(yMax) + \")\");\r\n    end if;\r\n\r\n    connect(u_s, addP.u1) annotation (Line(points={{-120,0},{-96,0},{-96,56},{\r\n            -82,56}}, color={0,0,127}));\r\n    connect(u_s, addD.u1) annotation (Line(points={{-120,0},{-96,0},{-96,6},{\r\n            -82,6}}, color={0,0,127}));\r\n    connect(u_s, addI.u1) annotation (Line(points={{-120,0},{-96,0},{-96,-42},{\r\n            -82,-42}}, color={0,0,127}));\r\n    connect(addP.y, P.u) annotation (Line(points={{-59,50},{-52,50}}, color={0,\r\n            0,127}));\r\n    connect(addD.y, D.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}));\r\n    connect(addI.y, I.u) annotation (Line(points={{-59,-50},{-52,-50}}, color={\r\n            0,0,127}));\r\n    connect(P.y, addPID.u1) annotation (Line(points={{-29,50},{-20,50},{-20,8},{-12,\r\n            8}},     color={0,0,127}));\r\n    connect(D.y, addPID.u2)\r\n      annotation (Line(points={{-29,0},{-12,0}},color={0,0,127}));\r\n    connect(I.y, addPID.u3) annotation (Line(points={{-29,-50},{-20,-50},{-20,-8},\r\n            {-12,-8}},    color={0,0,127}));\r\n    connect(limiter.y, addSat.u1) annotation (Line(points={{91,0},{94,0},{94,\r\n            -20},{86,-20},{86,-38}}, color={0,0,127}));\r\n    connect(limiter.y, y)\r\n      annotation (Line(points={{91,0},{110,0}}, color={0,0,127}));\r\n    connect(addSat.y, gainTrack.u) annotation (Line(points={{80,-61},{80,-70},{2,-70}},\r\n                      color={0,0,127}));\r\n    connect(gainTrack.y, addI.u3) annotation (Line(points={{-21,-70},{-88,-70},{-88,\r\n            -58},{-82,-58}},     color={0,0,127}));\r\n    connect(u_m, addP.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,44},{-82,44}}, color={0,0,127}));\r\n    connect(u_m, addD.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,-6},{-82,-6}}, color={0,0,127}));\r\n    connect(u_m, addI.u2) annotation (Line(points={{0,-120},{0,-92},{-92,-92},{-92,-50},{-82,-50}}, color={0,0,127}));\r\n    connect(Dzero.y, addPID.u2) annotation (Line(points={{-29.5,25},{-24,25},{-24,\r\n            0},{-12,0}},    color={0,0,127}));\r\n    connect(Izero.y, addPID.u3) annotation (Line(points={{-10.5,-50},{-20,-50},{-20,\r\n            -8},{-12,-8}},    color={0,0,127}));\r\n    connect(addPID.y, gainPID.u)\r\n      annotation (Line(points={{11,0},{18,0}}, color={0,0,127}));\r\n    connect(addFF.y, limiter.u)\r\n      annotation (Line(points={{60.6,0},{68,0}}, color={0,0,127}));\r\n    connect(gainPID.y, addFF.u1) annotation (Line(points={{41,0},{44,0},{44,3.6},\r\n            {46.8,3.6}},color={0,0,127}));\r\n    connect(FFzero.y, addFF.u2) annotation (Line(points={{40.5,-30},{44,-30},{44,\r\n            -3.6},{46.8,-3.6}},\r\n                          color={0,0,127}));\r\n    connect(addFF.u2, u_ff) annotation (Line(points={{46.8,-3.6},{44,-3.6},{44,\r\n            -92},{60,-92},{60,-120}},\r\n                                 color={0,0,127}));\r\n    connect(addFF.y, addSat.u2) annotation (Line(points={{60.6,0},{64,0},{64,-20},\r\n            {74,-20},{74,-38}}, color={0,0,127}));\r\n    annotation (defaultComponentName=\"PID\",\r\n      Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-80,78},{-80,-90}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{-80,90},{-88,68},{-72,68},{-80,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-90,-80},{82,-80}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{90,-80},{68,-72},{68,-88},{90,-80}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),\r\n          Text(\r\n            extent={{-20,-20},{80,-60}},\r\n            textColor={192,192,192},\r\n            textString=\"%controllerType\"),\r\n          Line(\r\n            visible=strict,\r\n            points={{30,60},{81,60}},\r\n            color={255,0,0})}),\r\n      Diagram(graphics={Text(\r\n              extent={{79,-112},{129,-102}},\r\n              textColor={0,0,255},\r\n            textString=\" (feed-forward)\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nVia parameter <strong>controllerType</strong> either <strong>P</strong>, <strong>PI</strong>, <strong>PD</strong>,\r\nor <strong>PID</strong> can be selected. If, e.g., PI is selected, all components belonging to the\r\nD-part are removed from the block (via conditional declarations).\r\nThe example model\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.PID_Controller\\\">Modelica.Blocks.Examples.PID_Controller</a>\r\ndemonstrates the usage of this controller.\r\nSeveral practical aspects of PID controller design are incorporated\r\naccording to chapter 3 of the book:\r\n</p>\r\n\r\n<dl>\r\n<dt>&Aring;str&ouml;m K.J., and H&auml;gglund T.:</dt>\r\n<dd> <strong>PID Controllers: Theory, Design, and Tuning</strong>.\r\n     Instrument Society of America, 2nd edition, 1995.\r\n</dd>\r\n</dl>\r\n\r\n<p>\r\nBesides the additive <strong>proportional, integral</strong> and <strong>derivative</strong>\r\npart of this controller, the following features are present:\r\n</p>\r\n<ul>\r\n<li> The output of this controller is limited. If the controller is\r\n     in its limits, anti-windup compensation is activated to drive\r\n     the integrator state to zero.</li>\r\n<li> The high-frequency gain of the derivative part is limited\r\n     to avoid excessive amplification of measurement noise.</li>\r\n<li> Setpoint weighting is present, which allows to weight\r\n     the setpoint in the proportional and the derivative part\r\n     independently from the measurement. The controller will respond\r\n     to load disturbances and measurement noise independently of this setting\r\n     (parameters wp, wd). However, setpoint changes will depend on this\r\n     setting. For example, it is useful to set the setpoint weight wd\r\n     for the derivative part to zero, if steps may occur in the\r\n     setpoint signal.</li>\r\n<li> Optional feed-forward. It is possible to add a feed-forward signal.\r\n     The feed-forward signal is added before limitation.</li>\r\n</ul>\r\n\r\n<p>\r\nThe parameters of the controller can be manually adjusted by performing\r\nsimulations of the closed loop system (= controller + plant connected\r\ntogether) and using the following strategy:\r\n</p>\r\n\r\n<ol>\r\n<li> Set very large limits, e.g., yMax = Modelica.Constants.inf</li>\r\n<li> Select a <strong>P</strong> controller and manually enlarge parameter <strong>k</strong>\r\n     (the total gain of the controller) until the closed-loop response\r\n     cannot be improved any more.</li>\r\n<li> Select a <strong>PI</strong> controller and manually adjust parameters\r\n     <strong>k</strong> and <strong>Ti</strong> (the time constant of the integrator).\r\n     The first value of Ti can be selected, such that it is in the\r\n     order of the time constant of the oscillations occurring with\r\n     the P controller. If, e.g., vibrations in the order of T=10 ms\r\n     occur in the previous step, start with Ti=0.01 s.</li>\r\n<li> If you want to make the reaction of the control loop faster\r\n     (but probably less robust against disturbances and measurement noise)\r\n     select a <strong>PID</strong> controller and manually adjust parameters\r\n     <strong>k</strong>, <strong>Ti</strong>, <strong>Td</strong> (time constant of derivative block).</li>\r\n<li> Set the limits yMax and yMin according to your specification.</li>\r\n<li> Perform simulations such that the output of the PID controller\r\n     goes in its limits. Tune <strong>Ni</strong> (Ni*Ti is the time constant of\r\n     the anti-windup compensation) such that the input to the limiter\r\n     block (= limiter.u) goes quickly enough back to its limits.\r\n     If Ni is decreased, this happens faster. If Ni=infinity, the\r\n     anti-windup compensation is switched off and the controller works bad.</li>\r\n</ol>\r\n\r\n<p>\r\n<strong>Initialization</strong>\r\n</p>\r\n\r\n<p>\r\nThis block can be initialized in different\r\nways controlled by parameter <strong>initType</strong>. The possible\r\nvalues of initType are defined in\r\n<a href=\\\"modelica://Modelica.Blocks.Types.Init\\\">Modelica.Blocks.Types.Init</a>.\r\n</p>\r\n\r\n<p>\r\nBased on the setting of initType, the integrator (I) and derivative (D)\r\nblocks inside the PID controller are initialized according to the following table:\r\n</p>\r\n\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>initType</strong></td>\r\n      <td><strong>I.initType</strong></td>\r\n      <td><strong>D.initType</strong></td></tr>\r\n\r\n  <tr><td><strong>NoInit</strong></td>\r\n      <td>NoInit</td>\r\n      <td>NoInit</td></tr>\r\n\r\n  <tr><td><strong>SteadyState</strong></td>\r\n      <td>SteadyState</td>\r\n      <td>SteadyState</td></tr>\r\n\r\n  <tr><td><strong>InitialState</strong></td>\r\n      <td>InitialState</td>\r\n      <td>InitialState</td></tr>\r\n\r\n  <tr><td><strong>InitialOutput</strong><br>\r\n          and initial equation: y = y_start</td>\r\n      <td>NoInit</td>\r\n      <td>SteadyState</td></tr>\r\n</table>\r\n\r\n<p>\r\nIn many cases, the most useful initial condition is\r\n<strong>SteadyState</strong> because initial transients are then no longer\r\npresent. If initType = Init.SteadyState, then in some\r\ncases difficulties might occur. The reason is the\r\nequation of the integrator:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>der</strong>(y) = k*u;\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe steady state equation \\\"der(x)=0\\\" leads to the condition that the input u to the\r\nintegrator is zero. If the input u is already (directly or indirectly) defined\r\nby another initial condition, then the initialization problem is <strong>singular</strong>\r\n(has none or infinitely many solutions). This situation occurs often\r\nfor mechanical systems, where, e.g., u = desiredSpeed - measuredSpeed and\r\nsince speed is both a state and a derivative, it is natural to\r\ninitialize it with zero. As sketched this is, however, not possible.\r\nThe solution is to not initialize u_m or the variable that is used\r\nto compute u_m by an algebraic equation.\r\n</p>\r\n\r\n<p>\r\nWhen initializing in steady-state, homotopy-based initialization can help the convergence of the solver,\r\nby using a simplified model a the beginning of the solution process. Different options are available.\r\n</p>\r\n\r\n<ul>\r\n<li><strong>homotopyType=Linear</strong> (default): the limitations are removed from the simplified model,\r\nmaking it linear. Use this if you know that the controller will not be saturated at steady state.</li>\r\n<li><strong>homotopyType=UpperLimit</strong>: if it is known a priori the controller will be stuck at the upper\r\nlimit yMax, this option assumes y = yMax as a simplified model.</li>\r\n<li><strong>homotopyType=LowerLimit</strong>: if it is known a priori the controller will be stuck at the lower\r\nlimit yMin, this option assumes y = yMin as a simplified model.</li>\r\n<li><strong>homotopyType=NoHomotopy</strong>: this option does not apply any simplification and keeps the\r\nlimiter active throughout the homotopy transformation. Use this if it is unknown whether the controller\r\nis saturated or not at initialization and if the limitations on the output must be enforced throughout\r\nthe entire homotopy transformation.</li>\r\n</ul>\r\n</html>\"));\r\n  end LimPID;\r\n\r\n  block TransferFunction \"Linear transfer function\"\r\n    import Modelica.Blocks.Types.Init;\r\n    extends Interfaces.SISO;\r\n\r\n    parameter Real b[:]={1}\r\n      \"Numerator coefficients of transfer function (e.g., 2*s+3 is specified as {2,3})\";\r\n    parameter Real a[:]={1}\r\n      \"Denominator coefficients of transfer function (e.g., 5*s+6 is specified as {5,6})\";\r\n    parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                       annotation(Evaluate=true, Dialog(group=\r\n            \"Initialization\"));\r\n    parameter Real x_start[size(a, 1) - 1]=zeros(nx)\r\n      \"Initial or guess values of states\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0\r\n      \"Initial value of output (derivatives of y are zero up to nx-1-th derivative)\"\r\n      annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n    output Real x[size(a, 1) - 1](start=x_start)\r\n      \"State of transfer function from controller canonical form\";\r\n  protected\r\n    parameter Integer na=size(a, 1) \"Size of Denominator of transfer function.\";\r\n    parameter Integer nb=size(b, 1) \"Size of Numerator of transfer function.\";\r\n    parameter Integer nx=size(a, 1) - 1;\r\n    parameter Real bb[:] = vector([zeros(max(0,na-nb),1);b]);\r\n    parameter Real d = bb[1]/a[1];\r\n    parameter Real a_end = if a[end] > 100*Modelica.Constants.eps*sqrt(a*a) then a[end] else 1.0;\r\n    Real x_scaled[size(x,1)] \"Scaled vector x\";\r\n\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x_scaled) = zeros(nx);\r\n    elseif initType == Init.InitialState then\r\n      x_scaled = x_start*a_end;\r\n    elseif initType == Init.InitialOutput then\r\n      y = y_start;\r\n      der(x_scaled[2:nx]) = zeros(nx-1);\r\n    end if;\r\n  equation\r\n    assert(size(b,1) <= size(a,1), \"Transfer function is not proper\");\r\n    if nx == 0 then\r\n       y = d*u;\r\n    else\r\n       der(x_scaled[1])    = (-a[2:na]*x_scaled + a_end*u)/a[1];\r\n       der(x_scaled[2:nx]) = x_scaled[1:nx-1];\r\n       y = ((bb[2:na] - d*a[2:na])*x_scaled)/a_end + d*u;\r\n       x = x_scaled/a_end;\r\n    end if;\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis block defines the transfer function between the input\r\nu and the output y\r\nas (nb = dimension of b, na = dimension of a):\r\n</p>\r\n<blockquote><pre>\r\n        b[1]*s^[nb-1] + b[2]*s^[nb-2] + ... + b[nb]\r\ny(s) = --------------------------------------------- * u(s)\r\n        a[1]*s^[na-1] + a[2]*s^[na-2] + ... + a[na]\r\n</pre></blockquote>\r\n<p>\r\nState variables <strong>x</strong> are defined according to <strong>controller canonical</strong>\r\nform. Internally, vector <strong>x</strong> is scaled to improve the numerics (the states in versions before version 3.0 of the Modelica Standard Library have been not scaled). This scaling is\r\nnot visible from the outside of this block because the non-scaled vector <strong>x</strong>\r\nis provided as output signal and the start value is with respect to the non-scaled\r\nvector <strong>x</strong>.\r\nInitial values of the states <strong>x</strong> can be set via parameter <strong>x_start</strong>.\r\n</p>\r\n\r\n<p>\r\nExample:\r\n</p>\r\n<blockquote><pre>\r\nTransferFunction g(b = {2,4}, a = {1,3});\r\n</pre></blockquote>\r\n<p>\r\nresults in the following transfer function:\r\n</p>\r\n<blockquote><pre>\r\n     2*s + 4\r\ny = --------- * u\r\n      s + 3\r\n</pre></blockquote>\r\n</html>\"),\r\n      Icon(\r\n          coordinateSystem(preserveAspectRatio=true,\r\n            extent={{-100.0,-100.0},{100.0,100.0}}),\r\n            graphics={\r\n          Line(points={{-80.0,0.0},{80.0,0.0}},\r\n            color={0,0,127}),\r\n        Text(textColor={0,0,127},\r\n          extent={{-90.0,10.0},{90.0,90.0}},\r\n          textString=\"b(s)\"),\r\n        Text(textColor={0,0,127},\r\n          extent={{-90.0,-90.0},{90.0,-10.0}},\r\n          textString=\"a(s)\")}));\r\n  end TransferFunction;\r\n\r\n  block StateSpace \"Linear state space system\"\r\n    import Modelica.Blocks.Types.Init;\r\n    parameter Real A[:, size(A, 1)]=[1, 0; 0, 1]\r\n      \"Matrix A of state space model (e.g., A=[1, 0; 0, 1])\";\r\n    parameter Real B[size(A, 1), :]=[1; 1]\r\n      \"Matrix B of state space model (e.g., B=[1; 1])\";\r\n    parameter Real C[:, size(A, 1)]=[1, 1]\r\n      \"Matrix C of state space model (e.g., C=[1, 1])\";\r\n    parameter Real D[size(C, 1), size(B, 2)]=zeros(size(C, 1), size(B, 2))\r\n      \"Matrix D of state space model\";\r\n    parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                                                                      annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real x_start[nx]=zeros(nx) \"Initial or guess values of states\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start[ny]=zeros(ny)\r\n      \"Initial values of outputs (remaining states are in steady state if possible)\"\r\n      annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n\r\n    extends Interfaces.MIMO(final nin=size(B, 2), final nout=size(C, 1));\r\n    output Real x[size(A, 1)](start=x_start) \"State vector\";\r\n\r\n  protected\r\n    parameter Integer nx = size(A, 1) \"Number of states\";\r\n    parameter Integer ny = size(C, 1) \"Number of outputs\";\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = zeros(nx);\r\n    elseif initType == Init.InitialState then\r\n      x = x_start;\r\n    elseif initType == Init.InitialOutput then\r\n      x = Modelica.Math.Matrices.equalityLeastSquares(A, -B*u, C, y_start - D*u);\r\n    end if;\r\n  equation\r\n    der(x) = A*x + B*u;\r\n    y = C*x + D*u;\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe State Space block defines the relation\r\nbetween the input u and the output\r\ny in state space form:\r\n</p>\r\n<blockquote><pre>\r\nder(x) = A * x + B * u\r\n    y  = C * x + D * u\r\n</pre></blockquote>\r\n<p>\r\nThe input is a vector of length nu, the output is a vector\r\nof length ny and nx is the number of states. Accordingly\r\n</p>\r\n<blockquote><pre>\r\nA has the dimension: A(nx,nx),\r\nB has the dimension: B(nx,nu),\r\nC has the dimension: C(ny,nx),\r\nD has the dimension: D(ny,nu)\r\n</pre></blockquote>\r\n<p>\r\nExample:\r\n</p>\r\n<blockquote><pre>\r\nparameter: A = [0.12, 2;3, 1.5]\r\nparameter: B = [2, 7;3, 1]\r\nparameter: C = [0.1, 2]\r\nparameter: D = zeros(ny,nu)\r\n\r\nresults in the following equations:\r\n  [der(x[1])]   [0.12  2.00] [x[1]]   [2.0  7.0] [u[1]]\r\n  [         ] = [          ]*[    ] + [        ]*[    ]\r\n  [der(x[2])]   [3.00  1.50] [x[2]]   [0.1  2.0] [u[2]]\r\n                             [x[1]]            [u[1]]\r\n       y[1]   = [0.1  2.0] * [    ] + [0  0] * [    ]\r\n                             [x[2]]            [u[2]]\r\n</pre></blockquote>\r\n</html>\"), Icon(\r\n      coordinateSystem(preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}),\r\n        graphics={\r\n      Text(extent={{-90,10},{-10,90}},\r\n        textString=\"A\",\r\n        textColor={0,0,127}),\r\n      Text(extent={{10,10},{90,90}},\r\n        textString=\"B\",\r\n        textColor={0,0,127}),\r\n      Text(extent={{-90,-10},{-10,-90}},\r\n        textString=\"C\",\r\n        textColor={0,0,127}),\r\n      Text(extent={{10,-10},{90,-90}},\r\n        textString=\"D\",\r\n        textColor={0,0,127}),\r\n      Line(points={{0,-90},{0,90}},\r\n        color={192,192,192}),\r\n      Line(points={{-90,0},{90,0}},\r\n        color={192,192,192})}));\r\n  end StateSpace;\r\n\r\n  block Der \"Derivative of input (= analytic differentiations)\"\r\n      extends Interfaces.SISO;\r\n\r\n  equation\r\n    y = der(u);\r\n      annotation (defaultComponentName=\"der1\",\r\n   Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),\r\n          graphics={Text(\r\n            extent={{-96,28},{94,-24}},\r\n            textString=\"der()\",\r\n            textColor={0,0,127})}),\r\n          Documentation(info=\"<html>\r\n<p>\r\nDefines that the output y is the <em>derivative</em>\r\nof the input u. Note, that Modelica.Blocks.Continuous.Derivative\r\ncomputes the derivative in an approximate sense, where as this block computes\r\nthe derivative exactly. This requires that the input u is differentiated\r\nby the Modelica translator, if this derivative is not yet present in\r\nthe model.\r\n</p>\r\n</html>\"));\r\n  end Der;\r\n\r\n  block LowpassButterworth\r\n    \"Output the input signal filtered with a low pass Butterworth filter of any order\"\r\n\r\n    import Modelica.Blocks.Types.Init;\r\n    import Modelica.Constants.pi;\r\n\r\n    extends Modelica.Blocks.Interfaces.SISO;\r\n\r\n    parameter Integer n(min=1) = 2 \"Order of filter\";\r\n    parameter SI.Frequency f(start=1) \"Cut-off frequency\";\r\n    parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                                                                      annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real x1_start[m]=zeros(m)\r\n      \"Initial or guess values of states 1 (der(x1)=x2)\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real x2_start[m]=zeros(m) \"Initial or guess values of states 2\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real xr_start=0.0\r\n      \"Initial or guess value of real pole for uneven order otherwise dummy\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0.0\r\n      \"Initial value of output (states are initialized in steady state if possible)\"\r\n       annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n\r\n    output Real x1[m](start=x1_start)\r\n      \"States 1 of second order filters (der(x1) = x2)\";\r\n    output Real x2[m](start=x2_start) \"States 2 of second order filters\";\r\n    output Real xr(start=xr_start)\r\n      \"State of real pole for uneven order otherwise dummy\";\r\n  protected\r\n    parameter Integer m=integer(n/2);\r\n    parameter Boolean evenOrder = 2*m == n;\r\n    parameter Real w=2*pi*f;\r\n    Real z[m + 1];\r\n    Real polereal[m];\r\n    Real poleimag[m];\r\n    Real realpol;\r\n    Real k2[m];\r\n    Real D[m];\r\n    Real w0[m];\r\n    Real k1;\r\n    Real T;\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x1) = zeros(m);\r\n      der(x2) = zeros(m);\r\n      if not evenOrder then\r\n        der(xr) = 0.0;\r\n      end if;\r\n    elseif initType == Init.InitialState then\r\n      x1 = x1_start;\r\n      x2 = x2_start;\r\n      if not evenOrder then\r\n        xr = xr_start;\r\n      end if;\r\n    elseif initType == Init.InitialOutput then\r\n      y = y_start;\r\n      der(x1) = zeros(m);\r\n      if evenOrder then\r\n        if m > 1 then\r\n          der(x2[1:m-1]) = zeros(m-1);\r\n        end if;\r\n      else\r\n        der(x1) = zeros(m);\r\n      end if;\r\n    end if;\r\n  equation\r\n    k2 = ones(m);\r\n    k1 = 1;\r\n    z[1] = u;\r\n\r\n    // calculate filter parameters\r\n    for i in 1:m loop\r\n      // poles of prototype lowpass\r\n      polereal[i] = Modelica.Math.cos(pi/2 + pi/n*(i - 0.5));\r\n      poleimag[i] = Modelica.Math.sin(pi/2 + pi/n*(i - 0.5));\r\n      // scaling and calculation of second order filter coefficients\r\n      w0[i] = (polereal[i]^2 + poleimag[i]^2)*w;\r\n      D[i] = -polereal[i]/w0[i]*w;\r\n    end for;\r\n    realpol = 1*w;\r\n    T = 1/realpol;\r\n\r\n    // calculate second order filters\r\n    for i in 1:m loop\r\n      der(x1[i]) = x2[i];\r\n      der(x2[i]) = k2[i]*w0[i]^2*z[i] - 2*D[i]*w0[i]*x2[i] - w0[i]^2*x1[i];\r\n      z[i + 1] = x1[i];\r\n    end for;\r\n\r\n    // calculate first order filter if necessary\r\n    if evenOrder then\r\n      // even order\r\n      xr = 0;\r\n      y = z[m + 1];\r\n    else\r\n      // uneven order\r\n      der(xr) = (k1*z[m + 1] - xr)/T;\r\n      y = xr;\r\n    end if;\r\n    annotation (\r\n      Icon(\r\n          coordinateSystem(preserveAspectRatio=true,\r\n              extent={{-100.0,-100.0},{100.0,100.0}}),\r\n              graphics={\r\n          Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n              color={192,192,192}),\r\n          Polygon(lineColor={192,192,192},\r\n              fillColor={192,192,192},\r\n              fillPattern=FillPattern.Solid,\r\n              points={{-79.5584,91.817},{-87.5584,69.817},{-71.5584,69.817},{-79.5584,91.817}}),\r\n          Line(origin = {-1.939,-1.816},\r\n              points = {{81.939,36.056},{65.362,36.056},{14.39,-26.199},{-29.966,113.485},{-65.374,-61.217},{-78.061,-78.184}},\r\n              color = {0,0,127},\r\n              smooth = Smooth.Bezier),\r\n          Line(points={{-90.9779,-80.7697},{81.0221,-80.7697}},\r\n              color={192,192,192}),\r\n          Polygon(lineColor={192,192,192},\r\n              fillColor={192,192,192},\r\n              fillPattern=FillPattern.Solid,\r\n              points={{91.3375,-79.8233},{69.3375,-71.8233},{69.3375,-87.8233},{91.3375,-79.8233}}),\r\n          Text(textColor={192,192,192},\r\n              extent={{-45.1735,-68.0},{92.0,-11.47}},\r\n              textString=\"LowpassButterworthFilter\"),\r\n          Text(extent={{8.0,-146.0},{8.0,-106.0}},\r\n              textString=\"f=%f\"),\r\n          Text(textColor={192,192,192},\r\n              extent={{-2.0,48.0},{94.0,94.0}},\r\n              textString=\"%n\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis block defines the transfer function between the input u\r\nand the output y as an n-th order low pass filter with <em>Butterworth</em>\r\ncharacteristics and cut-off frequency f. It is implemented as\r\na series of second order filters and a first order filter.\r\nButterworth filters have the feature that the amplitude at the\r\ncut-off frequency f is 1/sqrt(2) (= 3 dB), i.e., they are\r\nalways \\\"normalized\\\". Step responses of the Butterworth filter of\r\ndifferent orders are shown in the next figure:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/Butterworth.png\\\"\r\n     alt=\\\"Butterworth.png\\\">\r\n</div>\r\n\r\n<p>\r\nIf transients at the simulation start shall be avoided, the filter\r\nshould be initialized in steady state (e.g., using option\r\ninitType=Modelica.Blocks.Types.Init.SteadyState).\r\n</p>\r\n\r\n</html>\"));\r\n  end LowpassButterworth;\r\n\r\n  block CriticalDamping\r\n    \"Output the input signal filtered with an n-th order filter with critical damping\"\r\n\r\n    import Modelica.Blocks.Types.Init;\r\n    extends Modelica.Blocks.Interfaces.SISO;\r\n\r\n    parameter Integer n=2 \"Order of filter\";\r\n    parameter SI.Frequency f(start=1) \"Cut-off frequency\";\r\n    parameter Boolean normalized = true\r\n      \"= true, if amplitude at f_cut is 3 dB, otherwise unmodified filter\";\r\n    parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit\r\n      \"Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)\"\r\n                                                                                      annotation(Evaluate=true,\r\n        Dialog(group=\"Initialization\"));\r\n    parameter Real x_start[n]=zeros(n) \"Initial or guess values of states\"\r\n      annotation (Dialog(group=\"Initialization\"));\r\n    parameter Real y_start=0.0\r\n      \"Initial value of output (remaining states are in steady state)\"\r\n      annotation(Dialog(enable=initType == Init.InitialOutput, group=\r\n            \"Initialization\"));\r\n\r\n    output Real x[n](start=x_start) \"Filter states\";\r\n  protected\r\n    parameter Real alpha=if normalized then sqrt(2^(1/n) - 1) else 1.0\r\n      \"Frequency correction factor for normalized filter\";\r\n    parameter Real w=2*Modelica.Constants.pi*f/alpha;\r\n  initial equation\r\n    if initType == Init.SteadyState then\r\n      der(x) = zeros(n);\r\n    elseif initType == Init.InitialState then\r\n      x = x_start;\r\n    elseif initType == Init.InitialOutput then\r\n      y = y_start;\r\n      der(x[1:n-1]) = zeros(n-1);\r\n    end if;\r\n  equation\r\n    der(x[1]) = (u - x[1])*w;\r\n    for i in 2:n loop\r\n      der(x[i]) = (x[i - 1] - x[i])*w;\r\n    end for;\r\n    y = x[n];\r\n    annotation (\r\n      Icon(\r\n          coordinateSystem(preserveAspectRatio=true,\r\n            extent={{-100.0,-100.0},{100.0,100.0}}),\r\n            graphics={\r\n          Line(points={{-80.6897,77.6256},{-80.6897,-90.3744}},\r\n            color={192,192,192}),\r\n          Polygon(lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid,\r\n            points={{-79.7044,90.6305},{-87.7044,68.6305},{-71.7044,68.6305},{-79.7044,90.6305}}),\r\n          Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n            color={192,192,192}),\r\n          Polygon(lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid,\r\n            points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n          Text(textColor={192,192,192},\r\n            extent={{0.0,-60.0},{60.0,0.0}},\r\n            textString=\"PTn\"),\r\n          Line(origin = {-17.976,-6.521},\r\n            points = {{96.962,55.158},{16.42,50.489},{-18.988,18.583},{-32.024,-53.479},{-62.024,-73.479}},\r\n            color = {0,0,127},\r\n            smooth = Smooth.Bezier),\r\n          Text(textColor={192,192,192},\r\n            extent={{-70.0,48.0},{26.0,94.0}},\r\n            textString=\"%n\"),\r\n          Text(extent={{8.0,-146.0},{8.0,-106.0}},\r\n            textString=\"f=%f\")}),\r\n      Documentation(info=\"<html>\r\n<p>This block defines the transfer function between the\r\ninput u and the output y\r\nas an n-th order filter with <em>critical damping</em>\r\ncharacteristics and cut-off frequency f. It is\r\nimplemented as a series of first order filters.\r\nThis filter type is especially useful to filter the input of an\r\ninverse model, since the filter does not introduce any transients.\r\n</p>\r\n\r\n<p>\r\nIf parameter <strong>normalized</strong> = <strong>true</strong> (default), the filter\r\nis normalized such that the amplitude of the filter transfer function\r\nat the cut-off frequency f is 1/sqrt(2) (= 3 dB). Otherwise, the filter\r\nis not normalized, i.e., it is unmodified. A normalized filter is usually\r\nmuch better for applications, since filters of different orders are\r\n\\\"comparable\\\", whereas non-normalized filters usually require to adapt the\r\ncut-off frequency, when the order of the filter is changed.\r\nFigures of the filter step responses are shown below.\r\nNote, in versions before version 3.0 of the Modelica Standard library,\r\nthe CriticalDamping filter was provided only in non-normalized form.\r\n</p>\r\n\r\n<p>If transients at the simulation start shall be avoided, the filter\r\nshould be initialized in steady state (e.g., using option\r\ninitType=Modelica.Blocks.Types.Init.SteadyState).\r\n</p>\r\n\r\n<p>\r\nThe critical damping filter is defined as\r\n</p>\r\n\r\n<blockquote><pre>\r\n&alpha; = <strong>if</strong> normalized <strong>then</strong> <strong>sqrt</strong>(2^(1/n) - 1) <strong>else</strong> 1 // frequency correction factor\r\n&omega; = 2*&pi;*f/&alpha;\r\n          1\r\ny = ------------- * u\r\n     (s/w + 1)^n\r\n\r\n</pre></blockquote>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/CriticalDampingNormalized.png\\\"\r\n     alt=\\\"CriticalDampingNormalized.png\\\">\r\n</div>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/CriticalDampingNonNormalized.png\\\"\r\n     alt=\\\"CriticalDampingNonNormalized.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n  end CriticalDamping;\r\n\r\n  block Filter\r\n    \"Continuous low pass, high pass, band pass or band stop IIR-filter of type CriticalDamping, Bessel, Butterworth or ChebyshevI\"\r\n    import Modelica.Blocks.Continuous.Internal;\r\n\r\n    extends Modelica.Blocks.Interfaces.SISO;\r\n\r\n    parameter Modelica.Blocks.Types.AnalogFilter analogFilter=Modelica.Blocks.Types.AnalogFilter.CriticalDamping\r\n      \"Analog filter characteristics (CriticalDamping/Bessel/Butterworth/ChebyshevI)\";\r\n    parameter Modelica.Blocks.Types.FilterType filterType=Modelica.Blocks.Types.FilterType.LowPass\r\n      \"Type of filter (LowPass/HighPass/BandPass/BandStop)\";\r\n    parameter Integer order(min=1) = 2 \"Order of filter\";\r\n    parameter SI.Frequency f_cut \"Cut-off frequency\";\r\n    parameter Real gain=1.0\r\n      \"Gain (= amplitude of frequency response at zero frequency)\";\r\n    parameter Real A_ripple(unit=\"dB\") = 0.5\r\n      \"Pass band ripple for Chebyshev filter (otherwise not used); > 0 required\"\r\n      annotation(Dialog(enable=analogFilter==Modelica.Blocks.Types.AnalogFilter.ChebyshevI));\r\n    parameter SI.Frequency f_min=0\r\n      \"Band of band pass/stop filter is f_min (A=-3db*gain) .. f_cut (A=-3db*gain)\"\r\n      annotation(Dialog(enable=filterType == Modelica.Blocks.Types.FilterType.BandPass or\r\n                               filterType == Modelica.Blocks.Types.FilterType.BandStop));\r\n    parameter Boolean normalized=true\r\n      \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n    parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.SteadyState\r\n      \"Type of initialization (no init/steady state/initial state/initial output)\"\r\n      annotation(Evaluate=true, Dialog(tab=\"Advanced\"));\r\n    final parameter Integer nx = if filterType == Modelica.Blocks.Types.FilterType.LowPass or\r\n                                    filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n                                    order else 2*order;\r\n    parameter Real x_start[nx] = zeros(nx) \"Initial or guess values of states\"\r\n      annotation(Dialog(tab=\"Advanced\"));\r\n    parameter Real y_start = 0 \"Initial value of output\"\r\n      annotation(Dialog(tab=\"Advanced\"));\r\n    parameter Real u_nominal = 1.0\r\n      \"Nominal value of input (used for scaling the states)\"\r\n    annotation(Dialog(tab=\"Advanced\"));\r\n    Modelica.Blocks.Interfaces.RealOutput x[nx] \"Filter states\";\r\n\r\n  protected\r\n    parameter Integer ncr = if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n                               order else mod(order,2);\r\n    parameter Integer nc0 = if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n                               0 else integer(order/2);\r\n    parameter Integer na = if filterType == Modelica.Blocks.Types.FilterType.BandPass or\r\n                              filterType == Modelica.Blocks.Types.FilterType.BandStop then order else\r\n                           if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n                              0 else integer(order/2);\r\n    parameter Integer nr = if filterType == Modelica.Blocks.Types.FilterType.BandPass or\r\n                              filterType == Modelica.Blocks.Types.FilterType.BandStop then 0 else\r\n                           if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n                              order else mod(order,2);\r\n\r\n    // Coefficients of prototype base filter (low pass filter with w_cut = 1 rad/s)\r\n    parameter Real cr[ncr](each fixed=false);\r\n    parameter Real c0[nc0](each fixed=false);\r\n    parameter Real c1[nc0](each fixed=false);\r\n\r\n    // Coefficients for differential equations.\r\n    parameter Real r[nr](each fixed=false);\r\n    parameter Real a[na](each fixed=false);\r\n    parameter Real b[na](each fixed=false);\r\n    parameter Real ku[na](each fixed=false);\r\n    parameter Real k1[if filterType == Modelica.Blocks.Types.FilterType.LowPass then 0 else na](\r\n                   each fixed = false);\r\n    parameter Real k2[if filterType == Modelica.Blocks.Types.FilterType.LowPass then 0 else na](\r\n                   each fixed = false);\r\n\r\n    // Auxiliary variables\r\n    Real uu[na+nr+1];\r\n\r\n  initial equation\r\n     if analogFilter == Modelica.Blocks.Types.AnalogFilter.CriticalDamping then\r\n        cr = Internal.Filter.base.CriticalDamping(order, normalized);\r\n     elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Bessel then\r\n        (cr,c0,c1) = Internal.Filter.base.Bessel(order, normalized);\r\n     elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.Butterworth then\r\n        (cr,c0,c1) = Internal.Filter.base.Butterworth(order, normalized);\r\n     elseif analogFilter == Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized);\r\n     end if;\r\n\r\n     if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        (r,a,b,ku) = Internal.Filter.roots.lowPass(cr,c0,c1,f_cut);\r\n     elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        (r,a,b,ku,k1,k2) = Internal.Filter.roots.highPass(cr,c0,c1,f_cut);\r\n     elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandPass(cr,c0,c1,f_min,f_cut);\r\n     elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        (a,b,ku,k1,k2) = Internal.Filter.roots.bandStop(cr,c0,c1,f_min,f_cut);\r\n     end if;\r\n\r\n     if init == Modelica.Blocks.Types.Init.InitialState then\r\n        x = x_start;\r\n     elseif init == Modelica.Blocks.Types.Init.SteadyState then\r\n        der(x) = zeros(nx);\r\n     elseif init == Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start;\r\n        if nx > 1 then\r\n           der(x[1:nx-1]) = zeros(nx-1);\r\n        end if;\r\n     end if;\r\n\r\n  equation\r\n     assert(u_nominal > 0, \"u_nominal > 0 required\");\r\n     assert(filterType == Modelica.Blocks.Types.FilterType.LowPass or\r\n            filterType == Modelica.Blocks.Types.FilterType.HighPass or\r\n            f_min > 0, \"f_min > 0 required for band pass and band stop filter\");\r\n     assert(A_ripple > 0, \"A_ripple > 0 required\");\r\n     assert(f_cut > 0, \"f_cut > 0 required\");\r\n\r\n     /* All filters have the same basic differential equations:\r\n        Real poles:\r\n           der(x) = r*x - r*u\r\n        Complex conjugate poles:\r\n           der(x1) = a*x1 - b*x2 + ku*u;\r\n           der(x2) = b*x1 + a*x2;\r\n   */\r\n     uu[1] = u/u_nominal;\r\n     for i in 1:nr loop\r\n        der(x[i]) = r[i]*(x[i] - uu[i]);\r\n     end for;\r\n     for i in 1:na loop\r\n        der(x[nr+2*i-1]) = a[i]*x[nr+2*i-1] - b[i]*x[nr+2*i] + ku[i]*uu[nr+i];\r\n        der(x[nr+2*i])   = b[i]*x[nr+2*i-1] + a[i]*x[nr+2*i];\r\n     end for;\r\n\r\n     // The output equation is different for the different filter types\r\n     if filterType == Modelica.Blocks.Types.FilterType.LowPass then\r\n        /* Low pass filter\r\n           Real poles             :  y = x\r\n           Complex conjugate poles:  y = x2\r\n      */\r\n        for i in 1:nr loop\r\n           uu[i+1] = x[i];\r\n        end for;\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = x[nr+2*i];\r\n        end for;\r\n\r\n     elseif filterType == Modelica.Blocks.Types.FilterType.HighPass then\r\n        /* High pass filter\r\n           Real poles             :  y = -x + u;\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u;\r\n      */\r\n        for i in 1:nr loop\r\n           uu[i+1] = -x[i] + uu[i];\r\n        end for;\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i];\r\n        end for;\r\n\r\n     elseif filterType == Modelica.Blocks.Types.FilterType.BandPass then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2;\r\n      */\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i];\r\n        end for;\r\n\r\n     elseif filterType == Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u;\r\n      */\r\n        for i in 1:na loop\r\n           uu[nr+i+1] = k1[i]*x[nr+2*i-1] + k2[i]*x[nr+2*i] + uu[nr+i];\r\n        end for;\r\n\r\n     else\r\n        assert(false, \"filterType (= \" + String(filterType) + \") is unknown\");\r\n        uu = zeros(na+nr+1);\r\n     end if;\r\n\r\n     y = (gain*u_nominal)*uu[nr+na+1];\r\n\r\n    annotation (\r\n      Icon(\r\n        coordinateSystem(preserveAspectRatio=true,\r\n          extent={{-100.0,-100.0},{100.0,100.0}}),\r\n          graphics={\r\n        Line(points={{-80.0,80.0},{-80.0,-88.0}},\r\n          color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{-80.0,92.0},{-88.0,70.0},{-72.0,70.0},{-80.0,92.0}}),\r\n        Line(points={{-90.0,-78.0},{82.0,-78.0}},\r\n          color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{90.0,-78.0},{68.0,-70.0},{68.0,-86.0},{90.0,-78.0}}),\r\n        Text(textColor={192,192,192},\r\n          extent={{-66.0,52.0},{88.0,90.0}},\r\n          textString=\"%order\"),\r\n        Text(\r\n          extent={{-138.0,-140.0},{162.0,-110.0}},\r\n          textString=\"f_cut=%f_cut\"),\r\n        Rectangle(lineColor={160,160,164},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Backward,\r\n          extent={{-80.0,-78.0},{22.0,10.0}}),\r\n        Line(origin = {3.333,-6.667}, points = {{-83.333,34.667},{24.667,34.667},{42.667,-71.333}}, color = {0,0,127}, smooth = Smooth.Bezier)}),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis blocks models various types of filters:\r\n</p>\r\n\r\n<blockquote>\r\n<strong>low pass, high pass, band pass, and band stop filters</strong>\r\n</blockquote>\r\n\r\n<p>\r\nusing various filter characteristics:\r\n</p>\r\n\r\n<blockquote>\r\n<strong>CriticalDamping, Bessel, Butterworth, Chebyshev Type I filters</strong>\r\n</blockquote>\r\n\r\n<p>\r\nBy default, a filter block is initialized in <strong>steady-state</strong>, in order to\r\navoid unwanted oscillations at the beginning. In special cases, it might be\r\nuseful to select one of the other initialization options under tab\r\n\\\"Advanced\\\".\r\n</p>\r\n\r\n<p>\r\nTypical frequency responses for the 4 supported low pass filter types\r\nare shown in the next figure:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/LowPassOrder4Filters.png\\\"\r\n     alt=\\\"LowPassOrder4Filters.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe step responses of the same low pass filters are shown in the next figure,\r\nstarting from a steady state initial filter with initial input = 0.2:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/LowPassOrder4FiltersStepResponse.png\\\"\r\n     alt=\\\"LowPassOrder4FiltersStepResponse.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nObviously, the frequency responses give a somewhat wrong impression\r\nof the filter characteristics: Although Butterworth and Chebyshev\r\nfilters have a significantly steeper magnitude as the\r\nCriticalDamping and Bessel filters, the step responses of\r\nthe latter ones are much better. This means for example, that\r\na CriticalDamping or a Bessel filter should be selected,\r\nif a filter is mainly used to make a non-linear inverse model\r\nrealizable.\r\n</p>\r\n\r\n<p>\r\nTypical frequency responses for the 4 supported high pass filter types\r\nare shown in the next figure:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/HighPassOrder4Filters.png\\\"\r\n     alt=\\\"HighPassOrder4Filters.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe corresponding step responses of these high pass filters are\r\nshown in the next figure:\r\n</p>\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/HighPassOrder4FiltersStepResponse.png\\\"\r\n     alt=\\\"HighPassOrder4FiltersStepResponse.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nAll filters are available in <strong>normalized</strong> (default) and non-normalized form.\r\nIn the normalized form, the amplitude of the filter transfer function\r\nat the cut-off frequency f_cut is -3 dB (= 10^(-3/20) = 0.70794..).\r\nNote, when comparing the filters of this function with other software systems,\r\nthe setting of \\\"normalized\\\" has to be selected appropriately. For example, the signal processing\r\ntoolbox of MATLAB provides the filters in non-normalized form and\r\ntherefore a comparison makes only sense, if normalized = <strong>false</strong>\r\nis set. A normalized filter is usually better suited for applications,\r\nsince filters of different orders are \\\"comparable\\\",\r\nwhereas non-normalized filters usually require to adapt the\r\ncut-off frequency, when the order of the filter is changed.\r\nSee a comparison of \\\"normalized\\\" and \\\"non-normalized\\\" filters at hand of\r\nCriticalDamping filters of order 1,2,3:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/CriticalDampingNormalized.png\\\"\r\n     alt=\\\"CriticalDampingNormalized.png\\\">\r\n</blockquote>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Continuous/CriticalDampingNonNormalized.png\\\"\r\n     alt=\\\"CriticalDampingNonNormalized.png\\\">\r\n</blockquote>\r\n\r\n<h4>Implementation</h4>\r\n\r\n<p>\r\nThe filters are implemented in the following, reliable way:\r\n</p>\r\n\r\n<ol>\r\n<li> A prototype low pass filter with a cut-off angular frequency of 1 rad/s is constructed\r\n     from the desired analogFilter and the desired normalization.</li>\r\n\r\n<li> This prototype low pass filter is transformed to the desired filterType and the\r\n     desired cut-off frequency f_cut using a transformation on the Laplace variable \\\"s\\\".</li>\r\n\r\n<li> The resulting first and second order transfer functions are implemented in\r\n     state space form, using the \\\"eigen value\\\" representation of a transfer function:\r\n     <blockquote><pre>\r\n// second order block with eigen values: a +/- jb\r\n<strong>der</strong>(x1) = a*x1 - b*x2 + (a^2 + b^2)/b*u;\r\n<strong>der</strong>(x2) = b*x1 + a*x2;\r\n     y  = x2;\r\n     </pre></blockquote>\r\n     The dc-gain from the input to the output of this block is one and the selected\r\n     states are in the order of the input (if \\\"u\\\" is in the order of \\\"one\\\", then the\r\n     states are also in the order of \\\"one\\\"). In the \\\"Advanced\\\" tab, a \\\"nominal\\\" value for\r\n     the input \\\"u\\\" can be given. If appropriately selected, the states are in the order of \\\"one\\\" and\r\n     then step-size control is always appropriate.</li>\r\n</ol>\r\n\r\n<h4>References</h4>\r\n\r\n<dl>\r\n<dt>Tietze U., and Schenk C. (2002):</dt>\r\n<dd> <strong>Halbleiter-Schaltungstechnik</strong>.\r\n     Springer Verlag, 12. Auflage, pp. 815-852.</dd>\r\n</dl>\r\n\r\n</html>\", revisions=\"<html>\r\n<dl>\r\n  <dt><strong>Main Author:</strong></dt>\r\n  <dd><a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>,\r\n      DLR Oberpfaffenhofen.</dd>\r\n</dl>\r\n\r\n<h4>Acknowledgement</h4>\r\n\r\n<p>\r\nThe development of this block was partially funded by BMBF within the\r\nITEA <a href=\\\"https://itea4.org/project/eurosyslib.html\\\">EUROSYSLIB</a> research project.\r\n</p>\r\n\r\n</html>\"));\r\n  end Filter;\r\n\r\n  package Internal\r\n    \"Internal utility functions and blocks that should not be directly utilized by the user\"\r\n      extends Modelica.Icons.InternalPackage;\r\n    package Filter\r\n      \"Internal utility functions for filters that should not be directly used\"\r\n        extends Modelica.Icons.InternalPackage;\r\n      package base\r\n        \"Prototype low pass filters with cut-off frequency of 1 rad/s (other filters are derived by transformation from these base filters)\"\r\n          extends Modelica.Icons.InternalPackage;\r\n      function CriticalDamping\r\n          \"Return base filter coefficients of CriticalDamping filter (= low pass filter with w_cut = 1 rad/s)\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Integer order(min=1) \"Order of filter\";\r\n        input Boolean normalized=true\r\n            \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n\r\n        output Real cr[order] \"Coefficients of real poles\";\r\n        protected\r\n        Real alpha=1.0 \"Frequency correction factor\";\r\n        Real alpha2 \"= alpha*alpha\";\r\n        Real den1[order]\r\n            \"[p] coefficients of denominator first order polynomials (a*p + 1)\";\r\n        Real den2[0,2]\r\n            \"[p^2, p] coefficients of denominator second order polynomials (b*p^2 + a*p + 1)\";\r\n        Real c0[0] \"Coefficients of s^0 term if conjugate complex pole\";\r\n        Real c1[0] \"Coefficients of s^1 term if conjugate complex pole\";\r\n      algorithm\r\n        if normalized then\r\n           // alpha := sqrt(2^(1/order) - 1);\r\n           alpha := sqrt(10^(3/10/order)-1);\r\n        else\r\n           alpha := 1.0;\r\n        end if;\r\n\r\n        for i in 1:order loop\r\n           den1[i] := alpha;\r\n        end for;\r\n\r\n        // Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2);\r\n      end CriticalDamping;\r\n\r\n      function Bessel\r\n          \"Return base filter coefficients of Bessel filter (= low pass filter with w_cut = 1 rad/s)\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Integer order(min=1) \"Order of filter\";\r\n        input Boolean normalized=true\r\n            \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n\r\n        output Real cr[mod(order, 2)] \"Coefficient of real pole\";\r\n        output Real c0[integer(order/2)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[integer(order/2)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        protected\r\n        Real alpha=1.0 \"Frequency correction factor\";\r\n        Real alpha2 \"= alpha*alpha\";\r\n        Real den1[size(cr,1)]\r\n            \"[p] coefficients of denominator first order polynomials (a*p + 1)\";\r\n        Real den2[size(c0, 1),2]\r\n            \"[p^2, p] coefficients of denominator second order polynomials (b*p^2 + a*p + 1)\";\r\n      algorithm\r\n          (den1,den2,alpha) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.BesselBaseCoefficients(\r\n            order);\r\n        if not normalized then\r\n           alpha2 := alpha*alpha;\r\n           for i in 1:size(c0, 1) loop\r\n             den2[i, 1] := den2[i, 1]*alpha2;\r\n             den2[i, 2] := den2[i, 2]*alpha;\r\n           end for;\r\n           if size(cr,1) == 1 then\r\n             den1[1] := den1[1]*alpha;\r\n           end if;\r\n           end if;\r\n\r\n        // Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2);\r\n      end Bessel;\r\n\r\n      function Butterworth\r\n          \"Return base filter coefficients of Butterworth filter (= low pass filter with w_cut = 1 rad/s)\"\r\n        import Modelica.Constants.pi;\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Integer order(min=1) \"Order of filter\";\r\n        input Boolean normalized=true\r\n            \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n\r\n        output Real cr[mod(order, 2)] \"Coefficient of real pole\";\r\n        output Real c0[integer(order/2)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[integer(order/2)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        protected\r\n        Real alpha=1.0 \"Frequency correction factor\";\r\n        Real alpha2 \"= alpha*alpha\";\r\n        Real den1[size(cr,1)]\r\n            \"[p] coefficients of denominator first order polynomials (a*p + 1)\";\r\n        Real den2[size(c0, 1),2]\r\n            \"[p^2, p] coefficients of denominator second order polynomials (b*p^2 + a*p + 1)\";\r\n      algorithm\r\n        for i in 1:size(c0, 1) loop\r\n          den2[i, 1] := 1.0;\r\n          den2[i, 2] := -2*Modelica.Math.cos(pi*(0.5 + (i - 0.5)/order));\r\n        end for;\r\n        if size(cr,1) == 1 then\r\n          den1[1] := 1.0;\r\n        end if;\r\n\r\n        /* Transformation of filter transfer function with \"new(p) = alpha*p\"\r\n     in order that the filter transfer function has an amplitude of\r\n     -3 db at the cutoff frequency\r\n  */\r\n        /*\r\n    if normalized then\r\n      alpha := Internal.normalizationFactor(den1, den2);\r\n      alpha2 := alpha*alpha;\r\n      for i in 1:size(c0, 1) loop\r\n        den2[i, 1] := den2[i, 1]*alpha2;\r\n        den2[i, 2] := den2[i, 2]*alpha;\r\n      end for;\r\n      if size(cr,1) == 1 then\r\n        den1[1] := den1[1]*alpha;\r\n      end if;\r\n    end if;\r\n  */\r\n\r\n        // Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2);\r\n      end Butterworth;\r\n\r\n      function ChebyshevI\r\n          \"Return base filter coefficients of Chebyshev I filter (= low pass filter with w_cut = 1 rad/s)\"\r\n        import Modelica.Math.asinh;\r\n        import Modelica.Constants.pi;\r\n\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Integer order(min=1) \"Order of filter\";\r\n        input Real A_ripple = 0.5 \"Pass band ripple in [dB]\";\r\n        input Boolean normalized=true\r\n            \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n\r\n        output Real cr[mod(order, 2)] \"Coefficient of real pole\";\r\n        output Real c0[integer(order/2)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[integer(order/2)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        protected\r\n        Real epsilon;\r\n        Real fac;\r\n        Real alpha=1.0 \"Frequency correction factor\";\r\n        Real alpha2 \"= alpha*alpha\";\r\n        Real den1[size(cr,1)]\r\n            \"[p] coefficients of denominator first order polynomials (a*p + 1)\";\r\n        Real den2[size(c0, 1),2]\r\n            \"[p^2, p] coefficients of denominator second order polynomials (b*p^2 + a*p + 1)\";\r\n      algorithm\r\n          epsilon := sqrt(10^(A_ripple/10) - 1);\r\n          fac := asinh(1/epsilon)/order;\r\n\r\n          den1 := fill(1/sinh(fac),size(den1,1));\r\n          if size(cr,1) == 0 then\r\n             for i in 1:size(c0, 1) loop\r\n                den2[i,1] :=1/(cosh(fac)^2 - cos((2*i - 1)*pi/(2*order))^2);\r\n                den2[i,2] :=2*den2[i, 1]*sinh(fac)*cos((2*i - 1)*pi/(2*order));\r\n             end for;\r\n          else\r\n             for i in 1:size(c0, 1) loop\r\n                den2[i,1] :=1/(cosh(fac)^2 - cos(i*pi/order)^2);\r\n                den2[i,2] :=2*den2[i, 1]*sinh(fac)*cos(i*pi/order);\r\n             end for;\r\n          end if;\r\n\r\n          /* Transformation of filter transfer function with \"new(p) = alpha*p\"\r\n       in order that the filter transfer function has an amplitude of\r\n       -3 db at the cutoff frequency\r\n    */\r\n          if normalized then\r\n            alpha :=\r\n              Modelica.Blocks.Continuous.Internal.Filter.Utilities.normalizationFactor(\r\n              den1, den2);\r\n            alpha2 := alpha*alpha;\r\n            for i in 1:size(c0, 1) loop\r\n              den2[i, 1] := den2[i, 1]*alpha2;\r\n              den2[i, 2] := den2[i, 2]*alpha;\r\n            end for;\r\n            den1 := den1*alpha;\r\n          end if;\r\n\r\n        // Determine polynomials with highest power of s equal to one\r\n          (cr,c0,c1) :=\r\n            Modelica.Blocks.Continuous.Internal.Filter.Utilities.toHighestPowerOne(\r\n            den1, den2);\r\n      end ChebyshevI;\r\n      end base;\r\n\r\n      package coefficients \"Filter coefficients\"\r\n          extends Modelica.Icons.InternalPackage;\r\n      function lowPass\r\n          \"Return low pass filter coefficients at given cut-off frequency\"\r\n        import Modelica.Constants.pi;\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        input SI.Frequency f_cut \"Cut-off frequency\";\r\n\r\n        output Real cr[size(cr_in,1)] \"Coefficient of real pole\";\r\n        output Real c0[size(c0_in,1)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n\r\n        protected\r\n        SI.AngularVelocity w_cut=2*pi*f_cut\r\n            \"Cut-off angular frequency\";\r\n        Real w_cut2=w_cut*w_cut;\r\n\r\n      algorithm\r\n        assert(f_cut > 0, \"Cut-off frequency f_cut must be positive\");\r\n\r\n        /* Change filter coefficients according to transformation new(s) = s/w_cut\r\n     s + cr           -> (s/w) + cr              = (s + w*cr)/w\r\n     s^2 + c1*s + c0  -> (s/w)^2 + c1*(s/w) + c0 = (s^2 + (c1*w)*s + (c0*w^2))/w^2\r\n  */\r\n        cr := w_cut*cr_in;\r\n        c1 := w_cut*c1_in;\r\n        c0 := w_cut2*c0_in;\r\n\r\n      end lowPass;\r\n\r\n      function highPass\r\n          \"Return high pass filter coefficients at given cut-off frequency\"\r\n        import Modelica.Constants.pi;\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        input SI.Frequency f_cut \"Cut-off frequency\";\r\n\r\n        output Real cr[size(cr_in,1)] \"Coefficient of real pole\";\r\n        output Real c0[size(c0_in,1)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n\r\n        protected\r\n        SI.AngularVelocity w_cut=2*pi*f_cut\r\n            \"Cut-off angular frequency\";\r\n        Real w_cut2=w_cut*w_cut;\r\n\r\n      algorithm\r\n        assert(f_cut > 0, \"Cut-off frequency f_cut must be positive\");\r\n\r\n        /* Change filter coefficients according to transformation: new(s) = 1/s\r\n        1/(s + cr)          -> 1/(1/s + cr)                = (1/cr)*s / (s + (1/cr))\r\n        1/(s^2 + c1*s + c0) -> 1/((1/s)^2 + c1*(1/s) + c0) = (1/c0)*s^2 / (s^2 + (c1/c0)*s + 1/c0)\r\n\r\n     Check whether transformed roots are also conjugate complex:\r\n        c0 - c1^2/4 > 0  -> (1/c0) - (c1/c0)^2 / 4\r\n                            = (c0 - c1^2/4) / c0^2 > 0\r\n        It is therefore guaranteed that the roots remain conjugate complex\r\n\r\n     Change filter coefficients according to transformation new(s) = s/w_cut\r\n        s + 1/cr                -> (s/w) + 1/cr                   = (s + w/cr)/w\r\n        s^2 + (c1/c0)*s + 1/c0  -> (s/w)^2 + (c1/c0)*(s/w) + 1/c0 = (s^2 + (w*c1/c0)*s + (w^2/c0))/w^2\r\n  */\r\n        for i in 1:size(cr_in,1) loop\r\n           cr[i] := w_cut/cr_in[i];\r\n        end for;\r\n\r\n        for i in 1:size(c0_in,1) loop\r\n           c0[i] := w_cut2/c0_in[i];\r\n           c1[i] := w_cut*c1_in[i]/c0_in[i];\r\n        end for;\r\n\r\n      end highPass;\r\n\r\n      function bandPass\r\n          \"Return band pass filter coefficients at given cut-off frequency\"\r\n        import Modelica.Constants.pi;\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        input SI.Frequency f_min\r\n            \"Band of band pass filter is f_min (A=-3db) .. f_max (A=-3db)\";\r\n        input SI.Frequency f_max \"Upper band frequency\";\r\n\r\n        output Real cr[0] \"Coefficient of real pole\";\r\n        output Real c0[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        output Real cn \"Numerator coefficient of the PT2 terms\";\r\n        protected\r\n        SI.Frequency f0 = sqrt(f_min*f_max);\r\n        SI.AngularVelocity w_cut=2*pi*f0\r\n            \"Cut-off angular frequency\";\r\n        Real w_band = (f_max - f_min) / f0;\r\n        Real w_cut2=w_cut*w_cut;\r\n        Real c;\r\n        Real alpha;\r\n        Integer j;\r\n      algorithm\r\n        assert(f_min > 0 and f_min < f_max, \"Band frequencies f_min and f_max are wrong\");\r\n\r\n          /* The band pass filter is derived from the low pass filter by\r\n       the transformation new(s) = (s + 1/s)/w   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       1/(s + cr)         -> 1/((s/w + 1/s/w) + cr)\r\n                             = w*s / (s^2 + cr*w*s + 1)\r\n\r\n       1/(s^2 + c1*s + c0) -> 1/( (s+1/s)^2/w^2 + c1*(s + 1/s)/w + c0 )\r\n                              = 1 /( ( s^2 + 1/s^2 + 2)/w^2 + (s + 1/s)*c1/w + c0 )\r\n                              = w^2*s^2 / (s^4 + 2*s^2 + 1 + (s^3 + s)*c1*w + c0*w^2*s^2)\r\n                              = w^2*s^2 / (s^4 + c1*w*s^3 + (2+c0*w^2)*s^2 + c1*w*s + 1)\r\n\r\n                              Assume the following description with PT2:\r\n                              = w^2*s^2 /( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                           (s^2 + s*(c*alpha) + alpha^2) )\r\n                              = w^2*s^2 / ( s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                + c*(alpha + 1/alpha)*s + 1 )\r\n\r\n                              and therefore:\r\n                                c*(alpha + 1/alpha) = c1*w       -> c = c1*w / (alpha + 1/alpha)\r\n                                                                      = c1*w*alpha/(1+alpha^2)\r\n                                alpha^2 + 1/alpha^2 + c^2 = 2+c0*w^2 -> equation to determine alpha\r\n                                alpha^4 + 1 + c1^2*w^2*alpha^4/(1+alpha^2)^2 = (2+c0*w^2)*alpha^2\r\n                                or z = alpha^2\r\n                                z^2 + c^1^2*w^2*z^2/(1+z)^2 - (2+c0*w^2)*z + 1 = 0\r\n\r\n     Check whether roots remain conjugate complex\r\n        c0 - (c1/2)^2 > 0:    1/alpha^2 - (c/alpha)^2/4\r\n                              = 1/alpha^2*(1 - c^2/4)    -> not possible to figure this out\r\n\r\n     Afterwards, change filter coefficients according to transformation new(s) = s/w_cut\r\n        w_band*s/(s^2 + c1*s + c0)  -> w_band*(s/w)/((s/w)^2 + c1*(s/w) + c0 =\r\n                                       (w_band/w)*s/(s^2 + (c1*w)*s + (c0*w^2))/w^2) =\r\n                                       (w_band*w)*s/(s^2 + (c1*w)*s + (c0*w^2))\r\n    */\r\n          for i in 1:size(cr_in,1) loop\r\n             c1[i] := w_cut*cr_in[i]*w_band;\r\n             c0[i] := w_cut2;\r\n          end for;\r\n\r\n          for i in 1:size(c1_in,1) loop\r\n            alpha :=\r\n              Modelica.Blocks.Continuous.Internal.Filter.Utilities.bandPassAlpha(\r\n                    c1_in[i],\r\n                    c0_in[i],\r\n                    w_band);\r\n             c       := c1_in[i]*w_band / (alpha + 1/alpha);\r\n             j       := size(cr_in,1) + 2*i - 1;\r\n             c1[j]   := w_cut*c/alpha;\r\n             c1[j+1] := w_cut*c*alpha;\r\n             c0[j]   := w_cut2/alpha^2;\r\n             c0[j+1] := w_cut2*alpha^2;\r\n          end for;\r\n\r\n          cn :=w_band*w_cut;\r\n\r\n      end bandPass;\r\n\r\n      function bandStop\r\n          \"Return band stop filter coefficients at given cut-off frequency\"\r\n        import Modelica.Constants.pi;\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        input SI.Frequency f_min\r\n            \"Band of band stop filter is f_min (A=-3db) .. f_max (A=-3db)\";\r\n        input SI.Frequency f_max \"Upper band frequency\";\r\n\r\n        output Real cr[0] \"Coefficient of real pole\";\r\n        output Real c0[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Coefficients of s^0 term if conjugate complex pole\";\r\n        output Real c1[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Coefficients of s^1 term if conjugate complex pole\";\r\n        protected\r\n        SI.Frequency f0 = sqrt(f_min*f_max);\r\n        SI.AngularVelocity w_cut=2*pi*f0\r\n            \"Cut-off angular frequency\";\r\n        Real w_band = (f_max - f_min) / f0;\r\n        Real w_cut2=w_cut*w_cut;\r\n        Real c;\r\n        Real ww;\r\n        Real alpha;\r\n        Integer j;\r\n      algorithm\r\n        assert(f_min > 0 and f_min < f_max, \"Band frequencies f_min and f_max are wrong\");\r\n\r\n          /* The band pass filter is derived from the low pass filter by\r\n       the transformation new(s) = (s + 1/s)/w   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       1/(s + cr)         -> 1/((s/w + 1/s/w) + cr)\r\n                             = w*s / (s^2 + cr*w*s + 1)\r\n\r\n       1/(s^2 + c1*s + c0) -> 1/( (s+1/s)^2/w^2 + c1*(s + 1/s)/w + c0 )\r\n                              = 1 /( ( s^2 + 1/s^2 + 2)/w^2 + (s + 1/s)*c1/w + c0 )\r\n                              = w^2*s^2 / (s^4 + 2*s^2 + 1 + (s^3 + s)*c1*w + c0*w^2*s^2)\r\n                              = w^2*s^2 / (s^4 + c1*w*s^3 + (2+c0*w^2)*s^2 + c1*w*s + 1)\r\n\r\n                              Assume the following description with PT2:\r\n                              = w^2*s^2 /( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                           (s^2 + s*(c*alpha) + alpha^2) )\r\n                              = w^2*s^2 / ( s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                + c*(alpha + 1/alpha)*s + 1 )\r\n\r\n                              and therefore:\r\n                                c*(alpha + 1/alpha) = c1*w       -> c = c1*w / (alpha + 1/alpha)\r\n                                                                      = c1*w*alpha/(1+alpha^2)\r\n                                alpha^2 + 1/alpha^2 + c^2 = 2+c0*w^2 -> equation to determine alpha\r\n                                alpha^4 + 1 + c1^2*w^2*alpha^4/(1+alpha^2)^2 = (2+c0*w^2)*alpha^2\r\n                                or z = alpha^2\r\n                                z^2 + c^1^2*w^2*z^2/(1+z)^2 - (2+c0*w^2)*z + 1 = 0\r\n\r\n       The band stop filter is derived from the low pass filter by\r\n       the transformation new(s) = w/( (s + 1/s) )   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       cr/(s + cr)         -> 1/(( w/(s + 1/s) ) + cr)\r\n                              = (s^2 + 1) / (s^2 + (w/cr)*s + 1)\r\n\r\n       c0/(s^2 + c1*s + c0) -> c0/( w^2/(s + 1/s)^2 + c1*w/(s + 1/s) + c0 )\r\n                               = c0*(s^2 + 1)^2 / (s^4 + c1*w*s^3/c0 + (2+w^2/b)*s^2 + c1*w*s/c0 + 1)\r\n\r\n                               Assume the following description with PT2:\r\n                               = c0*(s^2 + 1)^2 / ( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                                    (s^2 + s*(c*alpha) + alpha^2) )\r\n                               = c0*(s^2 + 1)^2 / (  s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                         + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                         + c*(alpha + 1/alpha)*p + 1 )\r\n\r\n                            and therefore:\r\n                              c*(alpha + 1/alpha) = c1*w/b         -> c = c1*w/(c0*(alpha + 1/alpha))\r\n                              alpha^2 + 1/alpha^2 + c^2 = 2+w^2/c0 -> equation to determine alpha\r\n                              alpha^4 + 1 + (c1*w/c0*alpha^2)^2/(1+alpha^2)^2 = (2+w^2/c0)*alpha^2\r\n                              or z = alpha^2\r\n                              z^2 + (c1*w/c0*z)^2/(1+z)^2 - (2+w^2/c0)*z + 1 = 0\r\n\r\n                            same as:  ww = w/c0\r\n                              z^2 + (c1*ww*z)^2/(1+z)^2 - (2+c0*ww)*z + 1 = 0  -> same equation as for BandPass\r\n\r\n     Afterwards, change filter coefficients according to transformation new(s) = s/w_cut\r\n        c0*(s^2+1)(s^2 + c1*s + c0)  -> c0*((s/w)^2 + 1) / ((s/w)^2 + c1*(s/w) + c0 =\r\n                                        c0/w^2*(s^2 + w^2) / (s^2 + (c1*w)*s + (c0*w^2))/w^2) =\r\n                                        (s^2 + c0*w^2) / (s^2 + (c1*w)*s + (c0*w^2))\r\n    */\r\n          for i in 1:size(cr_in,1) loop\r\n             c1[i] := w_cut*w_band/cr_in[i];\r\n             c0[i] := w_cut2;\r\n          end for;\r\n\r\n          for i in 1:size(c1_in,1) loop\r\n             ww      := w_band/c0_in[i];\r\n            alpha :=\r\n              Modelica.Blocks.Continuous.Internal.Filter.Utilities.bandPassAlpha(\r\n                    c1_in[i],\r\n                    c0_in[i],\r\n                    ww);\r\n             c       := c1_in[i]*ww / (alpha + 1/alpha);\r\n             j       := size(cr_in,1) + 2*i - 1;\r\n             c1[j]   := w_cut*c/alpha;\r\n             c1[j+1] := w_cut*c*alpha;\r\n             c0[j]   := w_cut2/alpha^2;\r\n             c0[j+1] := w_cut2*alpha^2;\r\n          end for;\r\n\r\n      end bandStop;\r\n      end coefficients;\r\n\r\n      package roots \"Filter roots and gain as needed for block implementations\"\r\n          extends Modelica.Icons.InternalPackage;\r\n      function lowPass\r\n          \"Return low pass filter roots as needed for block for given cut-off frequency\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles of base filter\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term of base filter if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term of base filter if conjugate complex pole\";\r\n        input SI.Frequency f_cut \"Cut-off frequency\";\r\n\r\n        output Real r[size(cr_in,1)] \"Real eigenvalues\";\r\n        output Real a[size(c0_in,1)]\r\n            \"Real parts of complex conjugate eigenvalues\";\r\n        output Real b[size(c0_in,1)]\r\n            \"Imaginary parts of complex conjugate eigenvalues\";\r\n        output Real ku[size(c0_in,1)] \"Input gain\";\r\n        protected\r\n        Real c0[size(c0_in,1)];\r\n        Real c1[size(c0_in,1)];\r\n        Real cr[size(cr_in,1)];\r\n      algorithm\r\n        // Get coefficients of low pass filter at f_cut\r\n        (cr, c0, c1) :=coefficients.lowPass(cr_in, c0_in, c1_in, f_cut);\r\n\r\n        // Transform coefficients in to root\r\n        for i in 1:size(cr_in,1) loop\r\n          r[i] :=-cr[i];\r\n        end for;\r\n\r\n        for i in 1:size(c0_in,1) loop\r\n          a [i] :=-c1[i]/2;\r\n          b [i] :=sqrt(c0[i] - a[i]*a[i]);\r\n          ku[i] :=c0[i]/b[i];\r\n        end for;\r\n\r\n        annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThe goal is to implement the filter in the following form:\r\n</p>\r\n\r\n<blockquote><pre>\r\n// real pole:\r\n der(x) = r*x - r*u\r\n     y  = x\r\n\r\n// complex conjugate poles:\r\nder(x1) = a*x1 - b*x2 + ku*u;\r\nder(x2) = b*x1 + a*x2;\r\n     y  = x2;\r\n\r\n          ku = (a^2 + b^2)/b\r\n</pre></blockquote>\r\n<p>\r\nThis representation has the following transfer function:\r\n</p>\r\n<blockquote><pre>\r\n// real pole:\r\n    s*y = r*y - r*u\r\n  or\r\n    (s-r)*y = -r*u\r\n  or\r\n    y = -r/(s-r)*u\r\n\r\n  comparing coefficients with\r\n    y = cr/(s + cr)*u  ->  r = -cr      // r is the real eigenvalue\r\n\r\n// complex conjugate poles\r\n    s*x2 =  a*x2 + b*x1\r\n    s*x1 = -b*x2 + a*x1 + ku*u\r\n  or\r\n    (s-a)*x2               = b*x1  ->  x2 = b/(s-a)*x1\r\n    (s + b^2/(s-a) - a)*x1 = ku*u  ->  (s(s-a) + b^2 - a*(s-a))*x1  = ku*(s-a)*u\r\n                                   ->  (s^2 - 2*a*s + a^2 + b^2)*x1 = ku*(s-a)*u\r\n  or\r\n    x1 = ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    x2 = b/(s-a)*ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n       = b*ku/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    y  = x2\r\n\r\n  comparing coefficients with\r\n    y = c0/(s^2 + c1*s + c0)*u  ->  a  = -c1/2\r\n                                    b  = sqrt(c0 - a^2)\r\n                                    ku = c0/b\r\n                                       = (a^2 + b^2)/b\r\n\r\n  comparing with eigenvalue representation:\r\n    (s - (a+jb))*(s - (a-jb)) = s^2 -2*a*s + a^2 + b^2\r\n  shows that:\r\n    a: real part of eigenvalue\r\n    b: imaginary part of eigenvalue\r\n\r\n  time -> infinity:\r\n    y(s=0) = x2(s=0) = 1\r\n             x1(s=0) = -ku*a/(a^2 + b^2)*u\r\n                     = -(a/b)*u\r\n</pre></blockquote>\r\n\r\n</html>\"));\r\n      end lowPass;\r\n\r\n      function highPass\r\n          \"Return high pass filter roots as needed for block for given cut-off frequency\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles of base filter\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term of base filter if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term of base filter if conjugate complex pole\";\r\n        input SI.Frequency f_cut \"Cut-off frequency\";\r\n\r\n        output Real r[size(cr_in,1)] \"Real eigenvalues\";\r\n        output Real a[size(c0_in,1)]\r\n            \"Real parts of complex conjugate eigenvalues\";\r\n        output Real b[size(c0_in,1)]\r\n            \"Imaginary parts of complex conjugate eigenvalues\";\r\n        output Real ku[size(c0_in,1)] \"Gains of input terms\";\r\n        output Real k1[size(c0_in,1)] \"Gains of y = k1*x1 + k2*x + u\";\r\n        output Real k2[size(c0_in,1)] \"Gains of y = k1*x1 + k2*x + u\";\r\n        protected\r\n        Real c0[size(c0_in,1)];\r\n        Real c1[size(c0_in,1)];\r\n        Real cr[size(cr_in,1)];\r\n        Real ba2;\r\n      algorithm\r\n        // Get coefficients of high pass filter at f_cut\r\n        (cr, c0, c1) :=coefficients.highPass(cr_in, c0_in, c1_in, f_cut);\r\n\r\n        // Transform coefficients in to roots\r\n        for i in 1:size(cr_in,1) loop\r\n          r[i] :=-cr[i];\r\n        end for;\r\n\r\n        for i in 1:size(c0_in,1) loop\r\n          a[i]  := -c1[i]/2;\r\n          b[i]  := sqrt(c0[i] - a[i]*a[i]);\r\n          ku[i] := c0[i]/b[i];\r\n          k1[i] := 2*a[i]/ku[i];\r\n          ba2   := (b[i]/a[i])^2;\r\n          k2[i] := (1-ba2)/(1+ba2);\r\n        end for;\r\n\r\n        annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThe goal is to implement the filter in the following form:\r\n</p>\r\n\r\n<blockquote><pre>\r\n// real pole:\r\n der(x) = r*x - r*u\r\n     y  = -x + u\r\n\r\n// complex conjugate poles:\r\nder(x1) = a*x1 - b*x2 + ku*u;\r\nder(x2) = b*x1 + a*x2;\r\n     y  = k1*x1 + k2*x2 + u;\r\n\r\n          ku = (a^2 + b^2)/b\r\n          k1 = 2*a/ku\r\n          k2 = (a^2 - b^2) / (b*ku)\r\n             = (a^2 - b^2) / (a^2 + b^2)\r\n             = (1 - (b/a)^2) / (1 + (b/a)^2)\r\n</pre></blockquote>\r\n<p>\r\nThis representation has the following transfer function:\r\n</p>\r\n<blockquote><pre>\r\n// real pole:\r\n    s*x = r*x - r*u\r\n  or\r\n    (s-r)*x = -r*u   -> x = -r/(s-r)*u\r\n  or\r\n    y = r/(s-r)*u + (s-r)/(s-r)*u\r\n      = (r+s-r)/(s-r)*u\r\n      = s/(s-r)*u\r\n\r\n// comparing coefficients with\r\n    y = s/(s + cr)*u  ->  r = -cr      // r is the real eigenvalue\r\n\r\n// complex conjugate poles\r\n    s*x2 =  a*x2 + b*x1\r\n    s*x1 = -b*x2 + a*x1 + ku*u\r\n  or\r\n    (s-a)*x2               = b*x1  ->  x2 = b/(s-a)*x1\r\n    (s + b^2/(s-a) - a)*x1 = ku*u  ->  (s(s-a) + b^2 - a*(s-a))*x1  = ku*(s-a)*u\r\n                                   ->  (s^2 - 2*a*s + a^2 + b^2)*x1 = ku*(s-a)*u\r\n  or\r\n    x1 = ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    x2 = b/(s-a)*ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n       = b*ku/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    y  = k1*x1 + k2*x2 + u\r\n       = (k1*ku*(s-a) + k2*b*ku +  s^2 - 2*a*s + a^2 + b^2) /\r\n         (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (s^2 + (k1*ku - 2*a)*s + k2*b*ku - k1*ku*a + a^2 + b^2) /\r\n         (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (s^2 + (2*a-2*a)*s + a^2 - b^2 - 2*a^2 + a^2 + b^2) /\r\n         (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = s^2 / (s^2 - 2*a*s + a^2 + b^2)*u\r\n\r\n// comparing coefficients with\r\n    y = s^2/(s^2 + c1*s + c0)*u  ->  a = -c1/2\r\n                                     b = sqrt(c0 - a^2)\r\n\r\n// comparing with eigenvalue representation:\r\n    (s - (a+jb))*(s - (a-jb)) = s^2 -2*a*s + a^2 + b^2\r\n// shows that:\r\n//   a: real part of eigenvalue\r\n//   b: imaginary part of eigenvalue\r\n</pre></blockquote>\r\n\r\n</html>\"));\r\n      end highPass;\r\n\r\n      function bandPass\r\n          \"Return band pass filter roots as needed for block for given cut-off frequency\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles of base filter\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term of base filter if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term of base filter if conjugate complex pole\";\r\n        input SI.Frequency f_min\r\n            \"Band of band pass filter is f_min (A=-3db) .. f_max (A=-3db)\";\r\n        input SI.Frequency f_max \"Upper band frequency\";\r\n\r\n        output Real a[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Real parts of complex conjugate eigenvalues\";\r\n        output Real b[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Imaginary parts of complex conjugate eigenvalues\";\r\n        output Real ku[size(cr_in,1) + 2*size(c0_in,1)] \"Gains of input terms\";\r\n        output Real k1[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Gains of y = k1*x1 + k2*x\";\r\n        output Real k2[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Gains of y = k1*x1 + k2*x\";\r\n        protected\r\n        Real cr[0];\r\n        Real c0[size(a,1)];\r\n        Real c1[size(a,1)];\r\n        Real cn;\r\n        Real bb;\r\n      algorithm\r\n        // Get coefficients of band pass filter at f_cut\r\n        (cr, c0, c1, cn) :=coefficients.bandPass(cr_in, c0_in, c1_in, f_min, f_max);\r\n\r\n        // Transform coefficients in to roots\r\n        for i in 1:size(a,1) loop\r\n          a[i]  := -c1[i]/2;\r\n          bb    := c0[i] - a[i]*a[i];\r\n          assert(bb >= 0, \"\\nNot possible to use band pass filter, since transformation results in\\n\"+\r\n                          \"system that does not have conjugate complex poles.\\n\" +\r\n                          \"Try to use another analog filter for the band pass.\\n\");\r\n          b[i]  := sqrt(bb);\r\n          ku[i] := c0[i]/b[i];\r\n          k1[i] := cn/ku[i];\r\n          k2[i] := cn*a[i]/(b[i]*ku[i]);\r\n        end for;\r\n\r\n        annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThe goal is to implement the filter in the following form:\r\n</p>\r\n\r\n<blockquote><pre>\r\n// complex conjugate poles:\r\nder(x1) = a*x1 - b*x2 + ku*u;\r\nder(x2) = b*x1 + a*x2;\r\n     y  = k1*x1 + k2*x2;\r\n\r\n          ku = (a^2 + b^2)/b\r\n          k1 = cn/ku\r\n          k2 = cn*a/(b*ku)\r\n</pre></blockquote>\r\n<p>\r\nThis representation has the following transfer function:\r\n</p>\r\n<blockquote><pre>\r\n// complex conjugate poles\r\n    s*x2 =  a*x2 + b*x1\r\n    s*x1 = -b*x2 + a*x1 + ku*u\r\n  or\r\n    (s-a)*x2               = b*x1  ->  x2 = b/(s-a)*x1\r\n    (s + b^2/(s-a) - a)*x1 = ku*u  ->  (s(s-a) + b^2 - a*(s-a))*x1  = ku*(s-a)*u\r\n                                   ->  (s^2 - 2*a*s + a^2 + b^2)*x1 = ku*(s-a)*u\r\n  or\r\n    x1 = ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    x2 = b/(s-a)*ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n       = b*ku/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    y  = k1*x1 + k2*x2\r\n       = (k1*ku*(s-a) + k2*b*ku) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (k1*ku*s + k2*b*ku - k1*ku*a) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (cn*s + cn*a - cn*a) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = cn*s / (s^2 - 2*a*s + a^2 + b^2)*u\r\n\r\n  comparing coefficients with\r\n    y = cn*s / (s^2 + c1*s + c0)*u  ->  a = -c1/2\r\n                                        b = sqrt(c0 - a^2)\r\n\r\n  comparing with eigenvalue representation:\r\n    (s - (a+jb))*(s - (a-jb)) = s^2 -2*a*s + a^2 + b^2\r\n  shows that:\r\n    a: real part of eigenvalue\r\n    b: imaginary part of eigenvalue\r\n</pre></blockquote>\r\n\r\n</html>\"));\r\n      end bandPass;\r\n\r\n      function bandStop\r\n          \"Return band stop filter roots as needed for block for given cut-off frequency\"\r\n        extends Modelica.Icons.Function;\r\n\r\n        input Real cr_in[:] \"Coefficients of real poles of base filter\";\r\n        input Real c0_in[:]\r\n            \"Coefficients of s^0 term of base filter if conjugate complex pole\";\r\n        input Real c1_in[size(c0_in,1)]\r\n            \"Coefficients of s^1 term of base filter if conjugate complex pole\";\r\n        input SI.Frequency f_min\r\n            \"Band of band stop filter is f_min (A=-3db) .. f_max (A=-3db)\";\r\n        input SI.Frequency f_max \"Upper band frequency\";\r\n\r\n        output Real a[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Real parts of complex conjugate eigenvalues\";\r\n        output Real b[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Imaginary parts of complex conjugate eigenvalues\";\r\n        output Real ku[size(cr_in,1) + 2*size(c0_in,1)] \"Gains of input terms\";\r\n        output Real k1[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Gains of y = k1*x1 + k2*x\";\r\n        output Real k2[size(cr_in,1) + 2*size(c0_in,1)]\r\n            \"Gains of y = k1*x1 + k2*x\";\r\n        protected\r\n        Real cr[0];\r\n        Real c0[size(a,1)];\r\n        Real c1[size(a,1)];\r\n        Real cn;\r\n        Real bb;\r\n      algorithm\r\n        // Get coefficients of band stop filter at f_cut\r\n        (cr, c0, c1) :=coefficients.bandStop(cr_in, c0_in, c1_in, f_min, f_max);\r\n\r\n        // Transform coefficients in to roots\r\n        for i in 1:size(a,1) loop\r\n          a[i]  := -c1[i]/2;\r\n          bb    := c0[i] - a[i]*a[i];\r\n          assert(bb >= 0, \"\\nNot possible to use band stop filter, since transformation results in\\n\"+\r\n                          \"system that does not have conjugate complex poles.\\n\" +\r\n                          \"Try to use another analog filter for the band stop filter.\\n\");\r\n          b[i]  := sqrt(bb);\r\n          ku[i] := c0[i]/b[i];\r\n          k1[i] := 2*a[i]/ku[i];\r\n          k2[i] := (c0[i] + a[i]^2 - b[i]^2)/(b[i]*ku[i]);\r\n        end for;\r\n\r\n        annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThe goal is to implement the filter in the following form:\r\n</p>\r\n\r\n<blockquote><pre>\r\n// complex conjugate poles:\r\nder(x1) = a*x1 - b*x2 + ku*u;\r\nder(x2) = b*x1 + a*x2;\r\n     y  = k1*x1 + k2*x2 + u;\r\n\r\n          ku = (a^2 + b^2)/b\r\n          k1 = 2*a/ku\r\n          k2 = (c0 + a^2 - b^2)/(b*ku)\r\n</pre></blockquote>\r\n<p>\r\nThis representation has the following transfer function:\r\n</p>\r\n<blockquote><pre>\r\n// complex conjugate poles\r\n    s*x2 =  a*x2 + b*x1\r\n    s*x1 = -b*x2 + a*x1 + ku*u\r\n  or\r\n    (s-a)*x2               = b*x1  ->  x2 = b/(s-a)*x1\r\n    (s + b^2/(s-a) - a)*x1 = ku*u  ->  (s(s-a) + b^2 - a*(s-a))*x1  = ku*(s-a)*u\r\n                                   ->  (s^2 - 2*a*s + a^2 + b^2)*x1 = ku*(s-a)*u\r\n  or\r\n    x1 = ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    x2 = b/(s-a)*ku*(s-a)/(s^2 - 2*a*s + a^2 + b^2)*u\r\n       = b*ku/(s^2 - 2*a*s + a^2 + b^2)*u\r\n    y  = k1*x1 + k2*x2 + u\r\n       = (k1*ku*(s-a) + k2*b*ku + s^2 - 2*a*s + a^2 + b^2) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (s^2 + (k1*ku-2*a)*s + k2*b*ku - k1*ku*a + a^2 + b^2) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (s^2 + c0 + a^2 - b^2 - 2*a^2 + a^2 + b^2) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n       = (s^2 + c0) / (s^2 - 2*a*s + a^2 + b^2)*u\r\n\r\n  comparing coefficients with\r\n    y = (s^2 + c0) / (s^2 + c1*s + c0)*u  ->  a = -c1/2\r\n                                              b = sqrt(c0 - a^2)\r\n\r\n  comparing with eigenvalue representation:\r\n    (s - (a+jb))*(s - (a-jb)) = s^2 -2*a*s + a^2 + b^2\r\n  shows that:\r\n    a: real part of eigenvalue\r\n    b: imaginary part of eigenvalue\r\n</pre></blockquote>\r\n\r\n</html>\"));\r\n      end bandStop;\r\n      end roots;\r\n\r\n      package Utilities \"Utility functions for filter computations\"\r\n          extends Modelica.Icons.InternalPackage;\r\n        function BesselBaseCoefficients\r\n          \"Return coefficients of normalized low pass Bessel filter (= gain at cut-off frequency 1 rad/s is decreased 3dB)\"\r\n          extends Modelica.Icons.Function;\r\n\r\n          import Modelica.Utilities.Streams;\r\n          input Integer order \"Order of filter in the range 1..41\";\r\n          output Real c1[mod(order, 2)]\r\n            \"[p] coefficients of Bessel denominator polynomials (a*p + 1)\";\r\n          output Real c2[integer(order/2),2]\r\n            \"[p^2, p] coefficients of Bessel denominator polynomials (b2*p^2 + b1*p + 1)\";\r\n          output Real alpha \"Normalization factor\";\r\n        algorithm\r\n          if order == 1 then\r\n            alpha := 1.002377293007601;\r\n            c1[1] := 0.9976283451109835;\r\n          elseif order == 2 then\r\n            alpha := 0.7356641785819585;\r\n            c2[1, 1] := 0.6159132201783791;\r\n            c2[1, 2] := 1.359315879600889;\r\n          elseif order == 3 then\r\n            alpha := 0.5704770156982642;\r\n            c1[1] := 0.7548574865985343;\r\n            c2[1, 1] := 0.4756958028827457;\r\n            c2[1, 2] := 0.9980615136104388;\r\n          elseif order == 4 then\r\n            alpha := 0.4737978580281427;\r\n            c2[1, 1] := 0.4873729247240677;\r\n            c2[1, 2] := 1.337564170455762;\r\n            c2[2, 1] := 0.3877724315741958;\r\n            c2[2, 2] := 0.7730405590839861;\r\n          elseif order == 5 then\r\n            alpha := 0.4126226974763408;\r\n            c1[1] := 0.6645723262620757;\r\n            c2[1, 1] := 0.4115231900614016;\r\n            c2[1, 2] := 1.138349926728708;\r\n            c2[2, 1] := 0.3234938702877912;\r\n            c2[2, 2] := 0.6205992985771313;\r\n          elseif order == 6 then\r\n            alpha := 0.3705098000736233;\r\n            c2[1, 1] := 0.3874508649098960;\r\n            c2[1, 2] := 1.219740879520741;\r\n            c2[2, 1] := 0.3493298843155746;\r\n            c2[2, 2] := 0.9670265529381365;\r\n            c2[3, 1] := 0.2747419229514599;\r\n            c2[3, 2] := 0.5122165075105700;\r\n          elseif order == 7 then\r\n            alpha := 0.3393452623586350;\r\n            c1[1] := 0.5927147125821412;\r\n            c2[1, 1] := 0.3383379423919174;\r\n            c2[1, 2] := 1.092630816438030;\r\n            c2[2, 1] := 0.3001025788696046;\r\n            c2[2, 2] := 0.8289928256598656;\r\n            c2[3, 1] := 0.2372867471539579;\r\n            c2[3, 2] := 0.4325128641920154;\r\n          elseif order == 8 then\r\n            alpha := 0.3150267393795002;\r\n            c2[1, 1] := 0.3151115975207653;\r\n            c2[1, 2] := 1.109403015460190;\r\n            c2[2, 1] := 0.2969344839572762;\r\n            c2[2, 2] := 0.9737455812222699;\r\n            c2[3, 1] := 0.2612545921889538;\r\n            c2[3, 2] := 0.7190394712068573;\r\n            c2[4, 1] := 0.2080523342974281;\r\n            c2[4, 2] := 0.3721456473047434;\r\n          elseif order == 9 then\r\n            alpha := 0.2953310177184124;\r\n            c1[1] := 0.5377196679501422;\r\n            c2[1, 1] := 0.2824689124281034;\r\n            c2[1, 2] := 1.022646191567475;\r\n            c2[2, 1] := 0.2626824161383468;\r\n            c2[2, 2] := 0.8695626454762596;\r\n            c2[3, 1] := 0.2302781917677917;\r\n            c2[3, 2] := 0.6309047553448520;\r\n            c2[4, 1] := 0.1847991729757028;\r\n            c2[4, 2] := 0.3251978031287202;\r\n          elseif order == 10 then\r\n            alpha := 0.2789426890619463;\r\n            c2[1, 1] := 0.2640769908255582;\r\n            c2[1, 2] := 1.019788132875305;\r\n            c2[2, 1] := 0.2540802639216947;\r\n            c2[2, 2] := 0.9377020417760623;\r\n            c2[3, 1] := 0.2343577229427963;\r\n            c2[3, 2] := 0.7802229808216112;\r\n            c2[4, 1] := 0.2052193139338624;\r\n            c2[4, 2] := 0.5594176813008133;\r\n            c2[5, 1] := 0.1659546953748916;\r\n            c2[5, 2] := 0.2878349616233292;\r\n          elseif order == 11 then\r\n            alpha := 0.2650227766037203;\r\n            c1[1] := 0.4950265498954191;\r\n            c2[1, 1] := 0.2411858478546218;\r\n            c2[1, 2] := 0.9567800996387417;\r\n            c2[2, 1] := 0.2296849355380925;\r\n            c2[2, 2] := 0.8592523717113126;\r\n            c2[3, 1] := 0.2107851705677406;\r\n            c2[3, 2] := 0.7040216048898129;\r\n            c2[4, 1] := 0.1846461385164021;\r\n            c2[4, 2] := 0.5006729207276717;\r\n            c2[5, 1] := 0.1504217970817433;\r\n            c2[5, 2] := 0.2575070491320295;\r\n          elseif order == 12 then\r\n            alpha := 0.2530051198547209;\r\n            c2[1, 1] := 0.2268294941204543;\r\n            c2[1, 2] := 0.9473116570034053;\r\n            c2[2, 1] := 0.2207657387793729;\r\n            c2[2, 2] := 0.8933728946287606;\r\n            c2[3, 1] := 0.2087600700376653;\r\n            c2[3, 2] := 0.7886236252756229;\r\n            c2[4, 1] := 0.1909959101492760;\r\n            c2[4, 2] := 0.6389263649257017;\r\n            c2[5, 1] := 0.1675208146048472;\r\n            c2[5, 2] := 0.4517847275162215;\r\n            c2[6, 1] := 0.1374257286372761;\r\n            c2[6, 2] := 0.2324699157474680;\r\n          elseif order == 13 then\r\n            alpha := 0.2424910397561007;\r\n            c1[1] := 0.4608848369928040;\r\n            c2[1, 1] := 0.2099813050274780;\r\n            c2[1, 2] := 0.8992478823790660;\r\n            c2[2, 1] := 0.2027250423101359;\r\n            c2[2, 2] := 0.8328117484224146;\r\n            c2[3, 1] := 0.1907635894058731;\r\n            c2[3, 2] := 0.7257379204691213;\r\n            c2[4, 1] := 0.1742280397887686;\r\n            c2[4, 2] := 0.5830640944868014;\r\n            c2[5, 1] := 0.1530858190490478;\r\n            c2[5, 2] := 0.4106192089751885;\r\n            c2[6, 1] := 0.1264090712880446;\r\n            c2[6, 2] := 0.2114980230156001;\r\n          elseif order == 14 then\r\n            alpha := 0.2331902368695848;\r\n            c2[1, 1] := 0.1986162311411235;\r\n            c2[1, 2] := 0.8876961808055535;\r\n            c2[2, 1] := 0.1946683341271615;\r\n            c2[2, 2] := 0.8500754229171967;\r\n            c2[3, 1] := 0.1868331332895056;\r\n            c2[3, 2] := 0.7764629313723603;\r\n            c2[4, 1] := 0.1752118757862992;\r\n            c2[4, 2] := 0.6699720402924552;\r\n            c2[5, 1] := 0.1598906457908402;\r\n            c2[5, 2] := 0.5348446712848934;\r\n            c2[6, 1] := 0.1407810153019944;\r\n            c2[6, 2] := 0.3755841316563539;\r\n            c2[7, 1] := 0.1169627966707339;\r\n            c2[7, 2] := 0.1937088226304455;\r\n          elseif order == 15 then\r\n            alpha := 0.2248854870552422;\r\n            c1[1] := 0.4328492272335646;\r\n            c2[1, 1] := 0.1857292591004588;\r\n            c2[1, 2] := 0.8496337061962563;\r\n            c2[2, 1] := 0.1808644178280136;\r\n            c2[2, 2] := 0.8020517898136011;\r\n            c2[3, 1] := 0.1728264404199081;\r\n            c2[3, 2] := 0.7247449729331105;\r\n            c2[4, 1] := 0.1616970125901954;\r\n            c2[4, 2] := 0.6205369315943097;\r\n            c2[5, 1] := 0.1475257264578426;\r\n            c2[5, 2] := 0.4929612162355906;\r\n            c2[6, 1] := 0.1301861023357119;\r\n            c2[6, 2] := 0.3454770708040735;\r\n            c2[7, 1] := 0.1087810777120188;\r\n            c2[7, 2] := 0.1784526655428406;\r\n          elseif order == 16 then\r\n            alpha := 0.2174105053474761;\r\n            c2[1, 1] := 0.1765637967473151;\r\n            c2[1, 2] := 0.8377453068635511;\r\n            c2[2, 1] := 0.1738525357503125;\r\n            c2[2, 2] := 0.8102988957433199;\r\n            c2[3, 1] := 0.1684627004613343;\r\n            c2[3, 2] := 0.7563265923413258;\r\n            c2[4, 1] := 0.1604519074815815;\r\n            c2[4, 2] := 0.6776082294687619;\r\n            c2[5, 1] := 0.1498828607802206;\r\n            c2[5, 2] := 0.5766417034027680;\r\n            c2[6, 1] := 0.1367764717792823;\r\n            c2[6, 2] := 0.4563528264410489;\r\n            c2[7, 1] := 0.1209810465419295;\r\n            c2[7, 2] := 0.3193782657322374;\r\n            c2[8, 1] := 0.1016312648007554;\r\n            c2[8, 2] := 0.1652419227369036;\r\n          elseif order == 17 then\r\n            alpha := 0.2106355148193306;\r\n            c1[1] := 0.4093223608497299;\r\n            c2[1, 1] := 0.1664014345826274;\r\n            c2[1, 2] := 0.8067173752345952;\r\n            c2[2, 1] := 0.1629839591538256;\r\n            c2[2, 2] := 0.7712924931447541;\r\n            c2[3, 1] := 0.1573277802512491;\r\n            c2[3, 2] := 0.7134213666303411;\r\n            c2[4, 1] := 0.1494828185148637;\r\n            c2[4, 2] := 0.6347841731714884;\r\n            c2[5, 1] := 0.1394948812681826;\r\n            c2[5, 2] := 0.5375594414619047;\r\n            c2[6, 1] := 0.1273627583380806;\r\n            c2[6, 2] := 0.4241608926375478;\r\n            c2[7, 1] := 0.1129187258461290;\r\n            c2[7, 2] := 0.2965752009703245;\r\n            c2[8, 1] := 0.9533357359908857e-1;\r\n            c2[8, 2] := 0.1537041700889585;\r\n          elseif order == 18 then\r\n            alpha := 0.2044575288651841;\r\n            c2[1, 1] := 0.1588768571976356;\r\n            c2[1, 2] := 0.7951914263212913;\r\n            c2[2, 1] := 0.1569357024981854;\r\n            c2[2, 2] := 0.7744529690772538;\r\n            c2[3, 1] := 0.1530722206358810;\r\n            c2[3, 2] := 0.7335304425992080;\r\n            c2[4, 1] := 0.1473206710524167;\r\n            c2[4, 2] := 0.6735038935387268;\r\n            c2[5, 1] := 0.1397225420331520;\r\n            c2[5, 2] := 0.5959151542621590;\r\n            c2[6, 1] := 0.1303092459809849;\r\n            c2[6, 2] := 0.5026483447894845;\r\n            c2[7, 1] := 0.1190627367060072;\r\n            c2[7, 2] := 0.3956893824587150;\r\n            c2[8, 1] := 0.1058058030798994;\r\n            c2[8, 2] := 0.2765091830730650;\r\n            c2[9, 1] := 0.8974708108800873e-1;\r\n            c2[9, 2] := 0.1435505288284833;\r\n          elseif order == 19 then\r\n            alpha := 0.1987936248083529;\r\n            c1[1] := 0.3892259966869526;\r\n            c2[1, 1] := 0.1506640012172225;\r\n            c2[1, 2] := 0.7693121733774260;\r\n            c2[2, 1] := 0.1481728062796673;\r\n            c2[2, 2] := 0.7421133586741549;\r\n            c2[3, 1] := 0.1440444668388838;\r\n            c2[3, 2] := 0.6975075386214800;\r\n            c2[4, 1] := 0.1383101628540374;\r\n            c2[4, 2] := 0.6365464378910025;\r\n            c2[5, 1] := 0.1310032283190998;\r\n            c2[5, 2] := 0.5606211948462122;\r\n            c2[6, 1] := 0.1221431166405330;\r\n            c2[6, 2] := 0.4713530424221445;\r\n            c2[7, 1] := 0.1116991161103884;\r\n            c2[7, 2] := 0.3703717538617073;\r\n            c2[8, 1] := 0.9948917351196349e-1;\r\n            c2[8, 2] := 0.2587371155559744;\r\n            c2[9, 1] := 0.8475989238107367e-1;\r\n            c2[9, 2] := 0.1345537894555993;\r\n          elseif order == 20 then\r\n            alpha := 0.1935761760416219;\r\n            c2[1, 1] := 0.1443871348337404;\r\n            c2[1, 2] := 0.7584165598446141;\r\n            c2[2, 1] := 0.1429501891353184;\r\n            c2[2, 2] := 0.7423000962318863;\r\n            c2[3, 1] := 0.1400877384920004;\r\n            c2[3, 2] := 0.7104185332215555;\r\n            c2[4, 1] := 0.1358210369491446;\r\n            c2[4, 2] := 0.6634599783272630;\r\n            c2[5, 1] := 0.1301773703034290;\r\n            c2[5, 2] := 0.6024175491895959;\r\n            c2[6, 1] := 0.1231826501439148;\r\n            c2[6, 2] := 0.5285332736326852;\r\n            c2[7, 1] := 0.1148465498575254;\r\n            c2[7, 2] := 0.4431977385498628;\r\n            c2[8, 1] := 0.1051289462376788;\r\n            c2[8, 2] := 0.3477444062821162;\r\n            c2[9, 1] := 0.9384622797485121e-1;\r\n            c2[9, 2] := 0.2429038300327729;\r\n            c2[10, 1] := 0.8028211612831444e-1;\r\n            c2[10, 2] := 0.1265329974009533;\r\n          elseif order == 21 then\r\n            alpha := 0.1887494014766075;\r\n            c1[1] := 0.3718070668941645;\r\n            c2[1, 1] := 0.1376151928386445;\r\n            c2[1, 2] := 0.7364290859445481;\r\n            c2[2, 1] := 0.1357438914390695;\r\n            c2[2, 2] := 0.7150167318935022;\r\n            c2[3, 1] := 0.1326398453462415;\r\n            c2[3, 2] := 0.6798001808470175;\r\n            c2[4, 1] := 0.1283231214897678;\r\n            c2[4, 2] := 0.6314663440439816;\r\n            c2[5, 1] := 0.1228169159777534;\r\n            c2[5, 2] := 0.5709353626166905;\r\n            c2[6, 1] := 0.1161406100773184;\r\n            c2[6, 2] := 0.4993087153571335;\r\n            c2[7, 1] := 0.1082959649233524;\r\n            c2[7, 2] := 0.4177766148584385;\r\n            c2[8, 1] := 0.9923596957485723e-1;\r\n            c2[8, 2] := 0.3274257287232124;\r\n            c2[9, 1] := 0.8877776108724853e-1;\r\n            c2[9, 2] := 0.2287218166767916;\r\n            c2[10, 1] := 0.7624076527736326e-1;\r\n            c2[10, 2] := 0.1193423971506988;\r\n          elseif order == 22 then\r\n            alpha := 0.1842668221199706;\r\n            c2[1, 1] := 0.1323053462701543;\r\n            c2[1, 2] := 0.7262446126765204;\r\n            c2[2, 1] := 0.1312121721769772;\r\n            c2[2, 2] := 0.7134286088450949;\r\n            c2[3, 1] := 0.1290330911166814;\r\n            c2[3, 2] := 0.6880287870435514;\r\n            c2[4, 1] := 0.1257817990372067;\r\n            c2[4, 2] := 0.6505015800059301;\r\n            c2[5, 1] := 0.1214765261983008;\r\n            c2[5, 2] := 0.6015107185211451;\r\n            c2[6, 1] := 0.1161365140967959;\r\n            c2[6, 2] := 0.5418983553698413;\r\n            c2[7, 1] := 0.1097755171533100;\r\n            c2[7, 2] := 0.4726370779831614;\r\n            c2[8, 1] := 0.1023889478519956;\r\n            c2[8, 2] := 0.3947439506537486;\r\n            c2[9, 1] := 0.9392485861253800e-1;\r\n            c2[9, 2] := 0.3090996703083202;\r\n            c2[10, 1] := 0.8420273775456455e-1;\r\n            c2[10, 2] := 0.2159561978556017;\r\n            c2[11, 1] := 0.7257600023938262e-1;\r\n            c2[11, 2] := 0.1128633732721116;\r\n          elseif order == 23 then\r\n            alpha := 0.1800893554453722;\r\n            c1[1] := 0.3565232673929280;\r\n            c2[1, 1] := 0.1266275171652706;\r\n            c2[1, 2] := 0.7072778066734162;\r\n            c2[2, 1] := 0.1251865227648538;\r\n            c2[2, 2] := 0.6900676345785905;\r\n            c2[3, 1] := 0.1227944815236645;\r\n            c2[3, 2] := 0.6617011100576023;\r\n            c2[4, 1] := 0.1194647013077667;\r\n            c2[4, 2] := 0.6226432315773119;\r\n            c2[5, 1] := 0.1152132989252356;\r\n            c2[5, 2] := 0.5735222810625359;\r\n            c2[6, 1] := 0.1100558598478487;\r\n            c2[6, 2] := 0.5151027978024605;\r\n            c2[7, 1] := 0.1040013558214886;\r\n            c2[7, 2] := 0.4482410942032739;\r\n            c2[8, 1] := 0.9704014176512626e-1;\r\n            c2[8, 2] := 0.3738049984631116;\r\n            c2[9, 1] := 0.8911683905758054e-1;\r\n            c2[9, 2] := 0.2925028692588410;\r\n            c2[10, 1] := 0.8005438265072295e-1;\r\n            c2[10, 2] := 0.2044134600278901;\r\n            c2[11, 1] := 0.6923832296800832e-1;\r\n            c2[11, 2] := 0.1069984887283394;\r\n          elseif order == 24 then\r\n            alpha := 0.1761838665838427;\r\n            c2[1, 1] := 0.1220804912720132;\r\n            c2[1, 2] := 0.6978026874156063;\r\n            c2[2, 1] := 0.1212296762358897;\r\n            c2[2, 2] := 0.6874139794926736;\r\n            c2[3, 1] := 0.1195328372961027;\r\n            c2[3, 2] := 0.6667954259551859;\r\n            c2[4, 1] := 0.1169990987333593;\r\n            c2[4, 2] := 0.6362602049901176;\r\n            c2[5, 1] := 0.1136409040480130;\r\n            c2[5, 2] := 0.5962662188435553;\r\n            c2[6, 1] := 0.1094722001757955;\r\n            c2[6, 2] := 0.5474001634109253;\r\n            c2[7, 1] := 0.1045052832229087;\r\n            c2[7, 2] := 0.4903523180249535;\r\n            c2[8, 1] := 0.9874509806025907e-1;\r\n            c2[8, 2] := 0.4258751523524645;\r\n            c2[9, 1] := 0.9217799943472177e-1;\r\n            c2[9, 2] := 0.3547079765396403;\r\n            c2[10, 1] := 0.8474633796250476e-1;\r\n            c2[10, 2] := 0.2774145482392767;\r\n            c2[11, 1] := 0.7627722381240495e-1;\r\n            c2[11, 2] := 0.1939329108084139;\r\n            c2[12, 1] := 0.6618645465422745e-1;\r\n            c2[12, 2] := 0.1016670147947242;\r\n          elseif order == 25 then\r\n            alpha := 0.1725220521949266;\r\n            c1[1] := 0.3429735385896000;\r\n            c2[1, 1] := 0.1172525033170618;\r\n            c2[1, 2] := 0.6812327932576614;\r\n            c2[2, 1] := 0.1161194585333535;\r\n            c2[2, 2] := 0.6671566071153211;\r\n            c2[3, 1] := 0.1142375145794466;\r\n            c2[3, 2] := 0.6439167855053158;\r\n            c2[4, 1] := 0.1116157454252308;\r\n            c2[4, 2] := 0.6118378416180135;\r\n            c2[5, 1] := 0.1082654809459177;\r\n            c2[5, 2] := 0.5713609763370088;\r\n            c2[6, 1] := 0.1041985674230918;\r\n            c2[6, 2] := 0.5230289949762722;\r\n            c2[7, 1] := 0.9942439308123559e-1;\r\n            c2[7, 2] := 0.4674627926041906;\r\n            c2[8, 1] := 0.9394453593830893e-1;\r\n            c2[8, 2] := 0.4053226688298811;\r\n            c2[9, 1] := 0.8774221237222533e-1;\r\n            c2[9, 2] := 0.3372372276379071;\r\n            c2[10, 1] := 0.8075839512216483e-1;\r\n            c2[10, 2] := 0.2636485508005428;\r\n            c2[11, 1] := 0.7282483286646764e-1;\r\n            c2[11, 2] := 0.1843801345273085;\r\n            c2[12, 1] := 0.6338571166846652e-1;\r\n            c2[12, 2] := 0.9680153764737715e-1;\r\n          elseif order == 26 then\r\n            alpha := 0.1690795702796737;\r\n            c2[1, 1] := 0.1133168695796030;\r\n            c2[1, 2] := 0.6724297955493932;\r\n            c2[2, 1] := 0.1126417845769961;\r\n            c2[2, 2] := 0.6638709519790540;\r\n            c2[3, 1] := 0.1112948749545606;\r\n            c2[3, 2] := 0.6468652038763624;\r\n            c2[4, 1] := 0.1092823986944244;\r\n            c2[4, 2] := 0.6216337070799265;\r\n            c2[5, 1] := 0.1066130386697976;\r\n            c2[5, 2] := 0.5885011413992190;\r\n            c2[6, 1] := 0.1032969057045413;\r\n            c2[6, 2] := 0.5478864278297548;\r\n            c2[7, 1] := 0.9934388184210715e-1;\r\n            c2[7, 2] := 0.5002885306054287;\r\n            c2[8, 1] := 0.9476081523436283e-1;\r\n            c2[8, 2] := 0.4462644847551711;\r\n            c2[9, 1] := 0.8954648464575577e-1;\r\n            c2[9, 2] := 0.3863930785049522;\r\n            c2[10, 1] := 0.8368166847159917e-1;\r\n            c2[10, 2] := 0.3212074592527143;\r\n            c2[11, 1] := 0.7710664731701103e-1;\r\n            c2[11, 2] := 0.2510470347119383;\r\n            c2[12, 1] := 0.6965807988411425e-1;\r\n            c2[12, 2] := 0.1756419294111342;\r\n            c2[13, 1] := 0.6080674930548766e-1;\r\n            c2[13, 2] := 0.9234535279274277e-1;\r\n          elseif order == 27 then\r\n            alpha := 0.1658353543067995;\r\n            c1[1] := 0.3308543720638957;\r\n            c2[1, 1] := 0.1091618578712746;\r\n            c2[1, 2] := 0.6577977071169651;\r\n            c2[2, 1] := 0.1082549561495043;\r\n            c2[2, 2] := 0.6461121666520275;\r\n            c2[3, 1] := 0.1067479247890451;\r\n            c2[3, 2] := 0.6267937760991321;\r\n            c2[4, 1] := 0.1046471079537577;\r\n            c2[4, 2] := 0.6000750116745808;\r\n            c2[5, 1] := 0.1019605976654259;\r\n            c2[5, 2] := 0.5662734183049320;\r\n            c2[6, 1] := 0.9869726954433709e-1;\r\n            c2[6, 2] := 0.5257827234948534;\r\n            c2[7, 1] := 0.9486520934132483e-1;\r\n            c2[7, 2] := 0.4790595019077763;\r\n            c2[8, 1] := 0.9046906518775348e-1;\r\n            c2[8, 2] := 0.4266025862147336;\r\n            c2[9, 1] := 0.8550529998276152e-1;\r\n            c2[9, 2] := 0.3689188223512328;\r\n            c2[10, 1] := 0.7995282239306020e-1;\r\n            c2[10, 2] := 0.3064589322702932;\r\n            c2[11, 1] := 0.7375174596252882e-1;\r\n            c2[11, 2] := 0.2394754504667310;\r\n            c2[12, 1] := 0.6674377263329041e-1;\r\n            c2[12, 2] := 0.1676223546666024;\r\n            c2[13, 1] := 0.5842458027529246e-1;\r\n            c2[13, 2] := 0.8825044329219431e-1;\r\n          elseif order == 28 then\r\n            alpha := 0.1627710671942929;\r\n            c2[1, 1] := 0.1057232656113488;\r\n            c2[1, 2] := 0.6496161226860832;\r\n            c2[2, 1] := 0.1051786825724864;\r\n            c2[2, 2] := 0.6424661279909941;\r\n            c2[3, 1] := 0.1040917964935006;\r\n            c2[3, 2] := 0.6282470268918791;\r\n            c2[4, 1] := 0.1024670101953951;\r\n            c2[4, 2] := 0.6071189030701136;\r\n            c2[5, 1] := 0.1003105109519892;\r\n            c2[5, 2] := 0.5793175191747016;\r\n            c2[6, 1] := 0.9762969425430802e-1;\r\n            c2[6, 2] := 0.5451486608855443;\r\n            c2[7, 1] := 0.9443223803058400e-1;\r\n            c2[7, 2] := 0.5049796971628137;\r\n            c2[8, 1] := 0.9072460982036488e-1;\r\n            c2[8, 2] := 0.4592270546572523;\r\n            c2[9, 1] := 0.8650956423253280e-1;\r\n            c2[9, 2] := 0.4083368605952977;\r\n            c2[10, 1] := 0.8178165740374893e-1;\r\n            c2[10, 2] := 0.3527525188880655;\r\n            c2[11, 1] := 0.7651838885868020e-1;\r\n            c2[11, 2] := 0.2928534570013572;\r\n            c2[12, 1] := 0.7066010532447490e-1;\r\n            c2[12, 2] := 0.2288185204390681;\r\n            c2[13, 1] := 0.6405358596145789e-1;\r\n            c2[13, 2] := 0.1602396172588190;\r\n            c2[14, 1] := 0.5621780070227172e-1;\r\n            c2[14, 2] := 0.8447589564915071e-1;\r\n          elseif order == 29 then\r\n            alpha := 0.1598706626277596;\r\n            c1[1] := 0.3199314513011623;\r\n            c2[1, 1] := 0.1021101032532951;\r\n            c2[1, 2] := 0.6365758882240111;\r\n            c2[2, 1] := 0.1013729819392774;\r\n            c2[2, 2] := 0.6267495975736321;\r\n            c2[3, 1] := 0.1001476175660628;\r\n            c2[3, 2] := 0.6104876178266819;\r\n            c2[4, 1] := 0.9843854640428316e-1;\r\n            c2[4, 2] := 0.5879603139195113;\r\n            c2[5, 1] := 0.9625164534591696e-1;\r\n            c2[5, 2] := 0.5594012291050210;\r\n            c2[6, 1] := 0.9359356960417668e-1;\r\n            c2[6, 2] := 0.5251016150410664;\r\n            c2[7, 1] := 0.9047086748649986e-1;\r\n            c2[7, 2] := 0.4854024475590397;\r\n            c2[8, 1] := 0.8688856407189167e-1;\r\n            c2[8, 2] := 0.4406826457109709;\r\n            c2[9, 1] := 0.8284779224069856e-1;\r\n            c2[9, 2] := 0.3913408089298914;\r\n            c2[10, 1] := 0.7834154620997181e-1;\r\n            c2[10, 2] := 0.3377643999400627;\r\n            c2[11, 1] := 0.7334628941928766e-1;\r\n            c2[11, 2] := 0.2802710651919946;\r\n            c2[12, 1] := 0.6780290487362146e-1;\r\n            c2[12, 2] := 0.2189770008083379;\r\n            c2[13, 1] := 0.6156321231528423e-1;\r\n            c2[13, 2] := 0.1534235999306070;\r\n            c2[14, 1] := 0.5416797446761512e-1;\r\n            c2[14, 2] := 0.8098664736760292e-1;\r\n          elseif order == 30 then\r\n            alpha := 0.1571200296252450;\r\n            c2[1, 1] := 0.9908074847842124e-1;\r\n            c2[1, 2] := 0.6289618807831557;\r\n            c2[2, 1] := 0.9863509708328196e-1;\r\n            c2[2, 2] := 0.6229164525571278;\r\n            c2[3, 1] := 0.9774542692037148e-1;\r\n            c2[3, 2] := 0.6108853364240036;\r\n            c2[4, 1] := 0.9641490581986484e-1;\r\n            c2[4, 2] := 0.5929869253412513;\r\n            c2[5, 1] := 0.9464802912225441e-1;\r\n            c2[5, 2] := 0.5693960175547550;\r\n            c2[6, 1] := 0.9245027206218041e-1;\r\n            c2[6, 2] := 0.5403402396359503;\r\n            c2[7, 1] := 0.8982754584112941e-1;\r\n            c2[7, 2] := 0.5060948065875106;\r\n            c2[8, 1] := 0.8678535291732599e-1;\r\n            c2[8, 2] := 0.4669749797983789;\r\n            c2[9, 1] := 0.8332744242052199e-1;\r\n            c2[9, 2] := 0.4233249626334694;\r\n            c2[10, 1] := 0.7945356393775309e-1;\r\n            c2[10, 2] := 0.3755006094498054;\r\n            c2[11, 1] := 0.7515543969833788e-1;\r\n            c2[11, 2] := 0.3238400339292700;\r\n            c2[12, 1] := 0.7040879901685638e-1;\r\n            c2[12, 2] := 0.2686072427439079;\r\n            c2[13, 1] := 0.6515528854010540e-1;\r\n            c2[13, 2] := 0.2098650589782619;\r\n            c2[14, 1] := 0.5925168237177876e-1;\r\n            c2[14, 2] := 0.1471138832654873;\r\n            c2[15, 1] := 0.5225913954211672e-1;\r\n            c2[15, 2] := 0.7775248839507864e-1;\r\n          elseif order == 31 then\r\n            alpha := 0.1545067022920929;\r\n            c1[1] := 0.3100206996451866;\r\n            c2[1, 1] := 0.9591020358831668e-1;\r\n            c2[1, 2] := 0.6172474793293396;\r\n            c2[2, 1] := 0.9530301275601203e-1;\r\n            c2[2, 2] := 0.6088916323460413;\r\n            c2[3, 1] := 0.9429332655402368e-1;\r\n            c2[3, 2] := 0.5950511595503025;\r\n            c2[4, 1] := 0.9288445429894548e-1;\r\n            c2[4, 2] := 0.5758534119053522;\r\n            c2[5, 1] := 0.9108073420087422e-1;\r\n            c2[5, 2] := 0.5514734636081183;\r\n            c2[6, 1] := 0.8888719137536870e-1;\r\n            c2[6, 2] := 0.5221306199481831;\r\n            c2[7, 1] := 0.8630901440239650e-1;\r\n            c2[7, 2] := 0.4880834248148061;\r\n            c2[8, 1] := 0.8335074993373294e-1;\r\n            c2[8, 2] := 0.4496225358496770;\r\n            c2[9, 1] := 0.8001502494376102e-1;\r\n            c2[9, 2] := 0.4070602306679052;\r\n            c2[10, 1] := 0.7630041338037624e-1;\r\n            c2[10, 2] := 0.3607139804818122;\r\n            c2[11, 1] := 0.7219760885744920e-1;\r\n            c2[11, 2] := 0.3108783301229550;\r\n            c2[12, 1] := 0.6768185077153345e-1;\r\n            c2[12, 2] := 0.2577706252514497;\r\n            c2[13, 1] := 0.6269571766328638e-1;\r\n            c2[13, 2] := 0.2014081375889921;\r\n            c2[14, 1] := 0.5710081766945065e-1;\r\n            c2[14, 2] := 0.1412581515841926;\r\n            c2[15, 1] := 0.5047740914807019e-1;\r\n            c2[15, 2] := 0.7474725873250158e-1;\r\n          elseif order == 32 then\r\n            alpha := 0.1520196210848210;\r\n            c2[1, 1] := 0.9322163554339406e-1;\r\n            c2[1, 2] := 0.6101488690506050;\r\n            c2[2, 1] := 0.9285233997694042e-1;\r\n            c2[2, 2] := 0.6049832320721264;\r\n            c2[3, 1] := 0.9211494244473163e-1;\r\n            c2[3, 2] := 0.5946969295569034;\r\n            c2[4, 1] := 0.9101176786042449e-1;\r\n            c2[4, 2] := 0.5793791854364477;\r\n            c2[5, 1] := 0.8954614071360517e-1;\r\n            c2[5, 2] := 0.5591619969234026;\r\n            c2[6, 1] := 0.8772216763680164e-1;\r\n            c2[6, 2] := 0.5342177994699602;\r\n            c2[7, 1] := 0.8554440426912734e-1;\r\n            c2[7, 2] := 0.5047560942986598;\r\n            c2[8, 1] := 0.8301735302045588e-1;\r\n            c2[8, 2] := 0.4710187048140929;\r\n            c2[9, 1] := 0.8014469519188161e-1;\r\n            c2[9, 2] := 0.4332730387207936;\r\n            c2[10, 1] := 0.7692807528893225e-1;\r\n            c2[10, 2] := 0.3918021436411035;\r\n            c2[11, 1] := 0.7336507157284898e-1;\r\n            c2[11, 2] := 0.3468890521471250;\r\n            c2[12, 1] := 0.6944555312763458e-1;\r\n            c2[12, 2] := 0.2987898029050460;\r\n            c2[13, 1] := 0.6514446669420571e-1;\r\n            c2[13, 2] := 0.2476810747407199;\r\n            c2[14, 1] := 0.6040544477732702e-1;\r\n            c2[14, 2] := 0.1935412053397663;\r\n            c2[15, 1] := 0.5509478650672775e-1;\r\n            c2[15, 2] := 0.1358108994174911;\r\n            c2[16, 1] := 0.4881064725720192e-1;\r\n            c2[16, 2] := 0.7194819894416505e-1;\r\n          elseif order == 33 then\r\n            alpha := 0.1496489351138032;\r\n            c1[1] := 0.3009752799176432;\r\n            c2[1, 1] := 0.9041725460994505e-1;\r\n            c2[1, 2] := 0.5995521047364046;\r\n            c2[2, 1] := 0.8991117804113002e-1;\r\n            c2[2, 2] := 0.5923764112099496;\r\n            c2[3, 1] := 0.8906941547422532e-1;\r\n            c2[3, 2] := 0.5804822013853129;\r\n            c2[4, 1] := 0.8789442491445575e-1;\r\n            c2[4, 2] := 0.5639663528946501;\r\n            c2[5, 1] := 0.8638945831033775e-1;\r\n            c2[5, 2] := 0.5429623519607796;\r\n            c2[6, 1] := 0.8455834602616358e-1;\r\n            c2[6, 2] := 0.5176379938389326;\r\n            c2[7, 1] := 0.8240517431382334e-1;\r\n            c2[7, 2] := 0.4881921474066189;\r\n            c2[8, 1] := 0.7993380417355076e-1;\r\n            c2[8, 2] := 0.4548502528082586;\r\n            c2[9, 1] := 0.7714713890732801e-1;\r\n            c2[9, 2] := 0.4178579388038483;\r\n            c2[10, 1] := 0.7404596598181127e-1;\r\n            c2[10, 2] := 0.3774715722484659;\r\n            c2[11, 1] := 0.7062702339160462e-1;\r\n            c2[11, 2] := 0.3339432938810453;\r\n            c2[12, 1] := 0.6687952672391507e-1;\r\n            c2[12, 2] := 0.2874950693388235;\r\n            c2[13, 1] := 0.6277828912909767e-1;\r\n            c2[13, 2] := 0.2382680702894708;\r\n            c2[14, 1] := 0.5826808305383988e-1;\r\n            c2[14, 2] := 0.1862073169968455;\r\n            c2[15, 1] := 0.5321974125363517e-1;\r\n            c2[15, 2] := 0.1307323751236313;\r\n            c2[16, 1] := 0.4724820282032780e-1;\r\n            c2[16, 2] := 0.6933542082177094e-1;\r\n          elseif order == 34 then\r\n            alpha := 0.1473858373968463;\r\n            c2[1, 1] := 0.8801537152275983e-1;\r\n            c2[1, 2] := 0.5929204288972172;\r\n            c2[2, 1] := 0.8770594341007476e-1;\r\n            c2[2, 2] := 0.5884653382247518;\r\n            c2[3, 1] := 0.8708797598072095e-1;\r\n            c2[3, 2] := 0.5795895850253119;\r\n            c2[4, 1] := 0.8616320590689187e-1;\r\n            c2[4, 2] := 0.5663615383647170;\r\n            c2[5, 1] := 0.8493413175570858e-1;\r\n            c2[5, 2] := 0.5488825092350877;\r\n            c2[6, 1] := 0.8340387368687513e-1;\r\n            c2[6, 2] := 0.5272851839324592;\r\n            c2[7, 1] := 0.8157596213131521e-1;\r\n            c2[7, 2] := 0.5017313864372913;\r\n            c2[8, 1] := 0.7945402670834270e-1;\r\n            c2[8, 2] := 0.4724089864574216;\r\n            c2[9, 1] := 0.7704133559556429e-1;\r\n            c2[9, 2] := 0.4395276256463053;\r\n            c2[10, 1] := 0.7434009635219704e-1;\r\n            c2[10, 2] := 0.4033126590648964;\r\n            c2[11, 1] := 0.7135035113853376e-1;\r\n            c2[11, 2] := 0.3639961488919042;\r\n            c2[12, 1] := 0.6806813160738834e-1;\r\n            c2[12, 2] := 0.3218025212900124;\r\n            c2[13, 1] := 0.6448214312000864e-1;\r\n            c2[13, 2] := 0.2769235521088158;\r\n            c2[14, 1] := 0.6056719318430530e-1;\r\n            c2[14, 2] := 0.2294693573271038;\r\n            c2[15, 1] := 0.5626925196925040e-1;\r\n            c2[15, 2] := 0.1793564218840015;\r\n            c2[16, 1] := 0.5146352031547277e-1;\r\n            c2[16, 2] := 0.1259877129326412;\r\n            c2[17, 1] := 0.4578069074410591e-1;\r\n            c2[17, 2] := 0.6689147319568768e-1;\r\n          elseif order == 35 then\r\n            alpha := 0.1452224267615486;\r\n            c1[1] := 0.2926764667564367;\r\n            c2[1, 1] := 0.8551731299267280e-1;\r\n            c2[1, 2] := 0.5832758214629523;\r\n            c2[2, 1] := 0.8509109732853060e-1;\r\n            c2[2, 2] := 0.5770596582643844;\r\n            c2[3, 1] := 0.8438201446671953e-1;\r\n            c2[3, 2] := 0.5667497616665494;\r\n            c2[4, 1] := 0.8339191981579831e-1;\r\n            c2[4, 2] := 0.5524209816238369;\r\n            c2[5, 1] := 0.8212328610083385e-1;\r\n            c2[5, 2] := 0.5341766459916322;\r\n            c2[6, 1] := 0.8057906332198853e-1;\r\n            c2[6, 2] := 0.5121470053512750;\r\n            c2[7, 1] := 0.7876247299954955e-1;\r\n            c2[7, 2] := 0.4864870722254752;\r\n            c2[8, 1] := 0.7667670879950268e-1;\r\n            c2[8, 2] := 0.4573736721705665;\r\n            c2[9, 1] := 0.7432449556218945e-1;\r\n            c2[9, 2] := 0.4250013835198991;\r\n            c2[10, 1] := 0.7170742126011575e-1;\r\n            c2[10, 2] := 0.3895767735915445;\r\n            c2[11, 1] := 0.6882488171701314e-1;\r\n            c2[11, 2] := 0.3513097926737368;\r\n            c2[12, 1] := 0.6567231746957568e-1;\r\n            c2[12, 2] := 0.3103999917596611;\r\n            c2[13, 1] := 0.6223804362223595e-1;\r\n            c2[13, 2] := 0.2670123611280899;\r\n            c2[14, 1] := 0.5849696460782910e-1;\r\n            c2[14, 2] := 0.2212298104867592;\r\n            c2[15, 1] := 0.5439628409499822e-1;\r\n            c2[15, 2] := 0.1729443731341637;\r\n            c2[16, 1] := 0.4981540179136920e-1;\r\n            c2[16, 2] := 0.1215462157134930;\r\n            c2[17, 1] := 0.4439981033536435e-1;\r\n            c2[17, 2] := 0.6460098363520967e-1;\r\n          elseif order == 36 then\r\n            alpha := 0.1431515914458580;\r\n            c2[1, 1] := 0.8335881847130301e-1;\r\n            c2[1, 2] := 0.5770670512160201;\r\n            c2[2, 1] := 0.8309698922852212e-1;\r\n            c2[2, 2] := 0.5731929100172432;\r\n            c2[3, 1] := 0.8257400347039723e-1;\r\n            c2[3, 2] := 0.5654713811993058;\r\n            c2[4, 1] := 0.8179117911600136e-1;\r\n            c2[4, 2] := 0.5539556343603020;\r\n            c2[5, 1] := 0.8075042173126963e-1;\r\n            c2[5, 2] := 0.5387245649546684;\r\n            c2[6, 1] := 0.7945413151258206e-1;\r\n            c2[6, 2] := 0.5198817177723069;\r\n            c2[7, 1] := 0.7790506514288866e-1;\r\n            c2[7, 2] := 0.4975537629595409;\r\n            c2[8, 1] := 0.7610613635339480e-1;\r\n            c2[8, 2] := 0.4718884193866789;\r\n            c2[9, 1] := 0.7406012816626425e-1;\r\n            c2[9, 2] := 0.4430516443136726;\r\n            c2[10, 1] := 0.7176927060205631e-1;\r\n            c2[10, 2] := 0.4112237708115829;\r\n            c2[11, 1] := 0.6923460172504251e-1;\r\n            c2[11, 2] := 0.3765940116389730;\r\n            c2[12, 1] := 0.6645495833489556e-1;\r\n            c2[12, 2] := 0.3393522147815403;\r\n            c2[13, 1] := 0.6342528888937094e-1;\r\n            c2[13, 2] := 0.2996755899575573;\r\n            c2[14, 1] := 0.6013361864949449e-1;\r\n            c2[14, 2] := 0.2577053294053830;\r\n            c2[15, 1] := 0.5655503081322404e-1;\r\n            c2[15, 2] := 0.2135004731531631;\r\n            c2[16, 1] := 0.5263798119559069e-1;\r\n            c2[16, 2] := 0.1669320999865636;\r\n            c2[17, 1] := 0.4826589873626196e-1;\r\n            c2[17, 2] := 0.1173807590715484;\r\n            c2[18, 1] := 0.4309819397289806e-1;\r\n            c2[18, 2] := 0.6245036108880222e-1;\r\n          elseif order == 37 then\r\n            alpha := 0.1411669104782917;\r\n            c1[1] := 0.2850271036215707;\r\n            c2[1, 1] := 0.8111958235023328e-1;\r\n            c2[1, 2] := 0.5682412610563970;\r\n            c2[2, 1] := 0.8075727567979578e-1;\r\n            c2[2, 2] := 0.5628142923227016;\r\n            c2[3, 1] := 0.8015440554413301e-1;\r\n            c2[3, 2] := 0.5538087696879930;\r\n            c2[4, 1] := 0.7931239302677386e-1;\r\n            c2[4, 2] := 0.5412833323304460;\r\n            c2[5, 1] := 0.7823314328639347e-1;\r\n            c2[5, 2] := 0.5253190555393968;\r\n            c2[6, 1] := 0.7691895211595101e-1;\r\n            c2[6, 2] := 0.5060183741977191;\r\n            c2[7, 1] := 0.7537237072011853e-1;\r\n            c2[7, 2] := 0.4835036020049034;\r\n            c2[8, 1] := 0.7359601294804538e-1;\r\n            c2[8, 2] := 0.4579149413954837;\r\n            c2[9, 1] := 0.7159227884849299e-1;\r\n            c2[9, 2] := 0.4294078049978829;\r\n            c2[10, 1] := 0.6936295002846032e-1;\r\n            c2[10, 2] := 0.3981491350382047;\r\n            c2[11, 1] := 0.6690857785828917e-1;\r\n            c2[11, 2] := 0.3643121502867948;\r\n            c2[12, 1] := 0.6422751692085542e-1;\r\n            c2[12, 2] := 0.3280684291406284;\r\n            c2[13, 1] := 0.6131430866206096e-1;\r\n            c2[13, 2] := 0.2895750997170303;\r\n            c2[14, 1] := 0.5815677249570920e-1;\r\n            c2[14, 2] := 0.2489521814805720;\r\n            c2[15, 1] := 0.5473023527947980e-1;\r\n            c2[15, 2] := 0.2062377435955363;\r\n            c2[16, 1] := 0.5098441033167034e-1;\r\n            c2[16, 2] := 0.1612849131645336;\r\n            c2[17, 1] := 0.4680658811093562e-1;\r\n            c2[17, 2] := 0.1134672937045305;\r\n            c2[18, 1] := 0.4186928031694695e-1;\r\n            c2[18, 2] := 0.6042754777339966e-1;\r\n          elseif order == 38 then\r\n            alpha := 0.1392625697140030;\r\n            c2[1, 1] := 0.7916943373658329e-1;\r\n            c2[1, 2] := 0.5624158631591745;\r\n            c2[2, 1] := 0.7894592250257840e-1;\r\n            c2[2, 2] := 0.5590219398777304;\r\n            c2[3, 1] := 0.7849941672384930e-1;\r\n            c2[3, 2] := 0.5522551628416841;\r\n            c2[4, 1] := 0.7783093084875645e-1;\r\n            c2[4, 2] := 0.5421574325808380;\r\n            c2[5, 1] := 0.7694193770482690e-1;\r\n            c2[5, 2] := 0.5287909941093643;\r\n            c2[6, 1] := 0.7583430534712885e-1;\r\n            c2[6, 2] := 0.5122376814029880;\r\n            c2[7, 1] := 0.7451020436122948e-1;\r\n            c2[7, 2] := 0.4925978555548549;\r\n            c2[8, 1] := 0.7297197617673508e-1;\r\n            c2[8, 2] := 0.4699889739625235;\r\n            c2[9, 1] := 0.7122194706992953e-1;\r\n            c2[9, 2] := 0.4445436860615774;\r\n            c2[10, 1] := 0.6926216260386816e-1;\r\n            c2[10, 2] := 0.4164072786327193;\r\n            c2[11, 1] := 0.6709399961255503e-1;\r\n            c2[11, 2] := 0.3857341621868851;\r\n            c2[12, 1] := 0.6471757977022456e-1;\r\n            c2[12, 2] := 0.3526828388476838;\r\n            c2[13, 1] := 0.6213084287116965e-1;\r\n            c2[13, 2] := 0.3174082831364342;\r\n            c2[14, 1] := 0.5932799638550641e-1;\r\n            c2[14, 2] := 0.2800495563550299;\r\n            c2[15, 1] := 0.5629672408524944e-1;\r\n            c2[15, 2] := 0.2407078154782509;\r\n            c2[16, 1] := 0.5301264751544952e-1;\r\n            c2[16, 2] := 0.1994026830553859;\r\n            c2[17, 1] := 0.4942673259817896e-1;\r\n            c2[17, 2] := 0.1559719194038917;\r\n            c2[18, 1] := 0.4542996716979947e-1;\r\n            c2[18, 2] := 0.1097844277878470;\r\n            c2[19, 1] := 0.4070720755433961e-1;\r\n            c2[19, 2] := 0.5852181110523043e-1;\r\n          elseif order == 39 then\r\n            alpha := 0.1374332900196804;\r\n            c1[1] := 0.2779468246419593;\r\n            c2[1, 1] := 0.7715084161825772e-1;\r\n            c2[1, 2] := 0.5543001331300056;\r\n            c2[2, 1] := 0.7684028301163326e-1;\r\n            c2[2, 2] := 0.5495289890712267;\r\n            c2[3, 1] := 0.7632343924866024e-1;\r\n            c2[3, 2] := 0.5416083298429741;\r\n            c2[4, 1] := 0.7560141319808483e-1;\r\n            c2[4, 2] := 0.5305846713929198;\r\n            c2[5, 1] := 0.7467569064745969e-1;\r\n            c2[5, 2] := 0.5165224112570647;\r\n            c2[6, 1] := 0.7354807648551346e-1;\r\n            c2[6, 2] := 0.4995030679271456;\r\n            c2[7, 1] := 0.7222060351121389e-1;\r\n            c2[7, 2] := 0.4796242430956156;\r\n            c2[8, 1] := 0.7069540462458585e-1;\r\n            c2[8, 2] := 0.4569982440368368;\r\n            c2[9, 1] := 0.6897453353492381e-1;\r\n            c2[9, 2] := 0.4317502624832354;\r\n            c2[10, 1] := 0.6705970959388781e-1;\r\n            c2[10, 2] := 0.4040159353969854;\r\n            c2[11, 1] := 0.6495194541066725e-1;\r\n            c2[11, 2] := 0.3739379843169939;\r\n            c2[12, 1] := 0.6265098412417610e-1;\r\n            c2[12, 2] := 0.3416613843816217;\r\n            c2[13, 1] := 0.6015440984955930e-1;\r\n            c2[13, 2] := 0.3073260166338746;\r\n            c2[14, 1] := 0.5745615876877304e-1;\r\n            c2[14, 2] := 0.2710546723961181;\r\n            c2[15, 1] := 0.5454383762391338e-1;\r\n            c2[15, 2] := 0.2329316824061170;\r\n            c2[16, 1] := 0.5139340231935751e-1;\r\n            c2[16, 2] := 0.1929604256043231;\r\n            c2[17, 1] := 0.4795705862458131e-1;\r\n            c2[17, 2] := 0.1509655259246037;\r\n            c2[18, 1] := 0.4412933231935506e-1;\r\n            c2[18, 2] := 0.1063130748962878;\r\n            c2[19, 1] := 0.3960672309405603e-1;\r\n            c2[19, 2] := 0.5672356837211527e-1;\r\n          elseif order == 40 then\r\n            alpha := 0.1356742655825434;\r\n            c2[1, 1] := 0.7538038374294594e-1;\r\n            c2[1, 2] := 0.5488228264329617;\r\n            c2[2, 1] := 0.7518806529402738e-1;\r\n            c2[2, 2] := 0.5458297722483311;\r\n            c2[3, 1] := 0.7480383050347119e-1;\r\n            c2[3, 2] := 0.5398604576730540;\r\n            c2[4, 1] := 0.7422847031965465e-1;\r\n            c2[4, 2] := 0.5309482987446206;\r\n            c2[5, 1] := 0.7346313704205006e-1;\r\n            c2[5, 2] := 0.5191429845322307;\r\n            c2[6, 1] := 0.7250930053201402e-1;\r\n            c2[6, 2] := 0.5045099368431007;\r\n            c2[7, 1] := 0.7136868456879621e-1;\r\n            c2[7, 2] := 0.4871295553902607;\r\n            c2[8, 1] := 0.7004317764946634e-1;\r\n            c2[8, 2] := 0.4670962098860498;\r\n            c2[9, 1] := 0.6853470921527828e-1;\r\n            c2[9, 2] := 0.4445169164956202;\r\n            c2[10, 1] := 0.6684507689945471e-1;\r\n            c2[10, 2] := 0.4195095960479698;\r\n            c2[11, 1] := 0.6497570123412630e-1;\r\n            c2[11, 2] := 0.3922007419030645;\r\n            c2[12, 1] := 0.6292726794917847e-1;\r\n            c2[12, 2] := 0.3627221993494397;\r\n            c2[13, 1] := 0.6069918741663154e-1;\r\n            c2[13, 2] := 0.3312065181294388;\r\n            c2[14, 1] := 0.5828873983769410e-1;\r\n            c2[14, 2] := 0.2977798532686911;\r\n            c2[15, 1] := 0.5568964389813015e-1;\r\n            c2[15, 2] := 0.2625503293999835;\r\n            c2[16, 1] := 0.5288947816690705e-1;\r\n            c2[16, 2] := 0.2255872486520188;\r\n            c2[17, 1] := 0.4986456327645859e-1;\r\n            c2[17, 2] := 0.1868796731919594;\r\n            c2[18, 1] := 0.4656832613054458e-1;\r\n            c2[18, 2] := 0.1462410193532463;\r\n            c2[19, 1] := 0.4289867647614935e-1;\r\n            c2[19, 2] := 0.1030361558710747;\r\n            c2[20, 1] := 0.3856310684054106e-1;\r\n            c2[20, 2] := 0.5502423832293889e-1;\r\n          elseif order == 41 then\r\n            alpha := 0.1339811106984253;\r\n            c1[1] := 0.2713685065531391;\r\n            c2[1, 1] := 0.7355140275160984e-1;\r\n            c2[1, 2] := 0.5413274778282860;\r\n            c2[2, 1] := 0.7328319082267173e-1;\r\n            c2[2, 2] := 0.5371064088294270;\r\n            c2[3, 1] := 0.7283676160772547e-1;\r\n            c2[3, 2] := 0.5300963437270770;\r\n            c2[4, 1] := 0.7221298133014343e-1;\r\n            c2[4, 2] := 0.5203345998371490;\r\n            c2[5, 1] := 0.7141302173623395e-1;\r\n            c2[5, 2] := 0.5078728971879841;\r\n            c2[6, 1] := 0.7043831559982149e-1;\r\n            c2[6, 2] := 0.4927768111819803;\r\n            c2[7, 1] := 0.6929049381827268e-1;\r\n            c2[7, 2] := 0.4751250308594139;\r\n            c2[8, 1] := 0.6797129849758392e-1;\r\n            c2[8, 2] := 0.4550083840638406;\r\n            c2[9, 1] := 0.6648246325101609e-1;\r\n            c2[9, 2] := 0.4325285673076087;\r\n            c2[10, 1] := 0.6482554675958526e-1;\r\n            c2[10, 2] := 0.4077964789091151;\r\n            c2[11, 1] := 0.6300169683004558e-1;\r\n            c2[11, 2] := 0.3809299858742483;\r\n            c2[12, 1] := 0.6101130648543355e-1;\r\n            c2[12, 2] := 0.3520508315700898;\r\n            c2[13, 1] := 0.5885349417435808e-1;\r\n            c2[13, 2] := 0.3212801560701271;\r\n            c2[14, 1] := 0.5652528148656809e-1;\r\n            c2[14, 2] := 0.2887316252774887;\r\n            c2[15, 1] := 0.5402021575818373e-1;\r\n            c2[15, 2] := 0.2545001287790888;\r\n            c2[16, 1] := 0.5132588802608274e-1;\r\n            c2[16, 2] := 0.2186415296842951;\r\n            c2[17, 1] := 0.4841900639702602e-1;\r\n            c2[17, 2] := 0.1811322622296060;\r\n            c2[18, 1] := 0.4525419574485134e-1;\r\n            c2[18, 2] := 0.1417762065404688;\r\n            c2[19, 1] := 0.4173260173087802e-1;\r\n            c2[19, 2] := 0.9993834530966510e-1;\r\n            c2[20, 1] := 0.3757210572966463e-1;\r\n            c2[20, 2] := 0.5341611499960143e-1;\r\n          else\r\n            Streams.error(\"Input argument order (= \" + String(order) +\r\n              \") of Bessel filter is not in the range 1..41\");\r\n          end if;\r\n\r\n          annotation (Documentation(info=\"<html><p>The transfer function H(p) of a <em>n</em> 'th order Bessel filter is given by</p>\r\n<blockquote><pre>\r\n        Bn(0)\r\nH(p) = -------\r\n        Bn(p)\r\n</pre></blockquote>\r\n<p>with the denominator polynomial</p>\r\n<blockquote><pre>\r\n         n             n  (2n - k)!       p^k\r\nBn(p) = sum c_k*p^k = sum ----------- * -------   (1)\r\n        k=0           k=0 (n - k)!k!    2^(n-k)\r\n</pre></blockquote>\r\n<p>and the numerator</p>\r\n<blockquote><pre>\r\n               (2n)!     1\r\nBn(0) = c_0 = ------- * ---- .                    (2)\r\n                n!      2^n\r\n</pre></blockquote>\r\n<p>Although the coefficients c_k are integer numbers, it is not advisable to use the\r\npolynomials in an unfactorized form because the coefficients are fast growing with order\r\nn (c_0 is approximately 0.3e24 and 0.8e59 for order n=20 and order n=40\r\nrespectively).</p>\r\n\r\n<p>Therefore, the polynomial Bn(p) is factorized to first and second order polynomials with\r\nreal coefficients corresponding to zeros and poles representation that is used in this library.</p>\r\n\r\n<p>The function returns the coefficients which resulted from factorization of the normalized transfer function</p>\r\n<blockquote><pre>\r\nH'(p') = H(p),  p' = p/w0\r\n</pre></blockquote>\r\n<p>as well as</p>\r\n<blockquote><pre>\r\nalpha = 1/w0\r\n</pre></blockquote>\r\n<p>the reciprocal of the cut of frequency w0 where the gain of the transfer function is\r\ndecreased 3dB.</p>\r\n\r\n<p>Both, coefficients and cut off frequency were calculated symbolically and were eventually evaluated\r\nwith high precision calculation. The results were stored in this function as real\r\nnumbers.</p>\r\n\r\n<h4>Calculation of normalized Bessel filter coefficients</h4>\r\n<p>Equation</p>\r\n<blockquote><pre>\r\nabs(H(j*w0)) = abs(Bn(0)/Bn(j*w0)) = 10^(-3/20)\r\n</pre></blockquote>\r\n<p>which must be fulfilled for cut off frequency w = w0 leads to</p>\r\n<blockquote><pre>\r\n[Re(Bn(j*w0))]^2 + [Im(Bn(j*w0))]^2 - (Bn(0)^2)*10^(3/10) = 0\r\n</pre></blockquote>\r\n<p>which has exactly one real solution w0 for each order n. This solutions of w0 are\r\ncalculated symbolically first and evaluated by using high precise values of the\r\ncoefficients c_k calculated by following (1) and (2).</p>\r\n\r\n<p>With w0, the coefficients of the factorized polynomial can be computed by calculating the\r\nzeros of the denominator polynomial</p>\r\n<blockquote><pre>\r\n        n\r\nBn(p) = sum w0^k*c_k*(p/w0)^k\r\n        k=0\r\n</pre></blockquote>\r\n<p>of the normalized transfer function H'(p'). There exist n/2 of conjugate complex\r\npairs of zeros (beta +-j*gamma) if n is even and one additional real zero (alpha) if n is\r\nodd. Finally, the coefficients a, b1_k, b2_k of the polynomials</p>\r\n<blockquote><pre>\r\na*p + 1,  n is odd\r\n</pre></blockquote>\r\n<p>and</p>\r\n<blockquote><pre>\r\nb2_k*p^2 + b1_k*p + 1,   k = 1,... div(n,2)\r\n</pre></blockquote>\r\n<p>results from</p>\r\n<blockquote><pre>\r\na = -1/alpha\r\n</pre></blockquote>\r\n<p>and</p>\r\n<blockquote><pre>\r\nb2_k = 1/(beta_k^2 + gamma_k^2) b1_k = -2*beta_k/(beta_k^2 + gamma_k^2)\r\n</pre></blockquote>\r\n</html>\"));\r\n        end BesselBaseCoefficients;\r\n\r\n        function toHighestPowerOne\r\n          \"Transform filter to form with highest power of s equal 1\"\r\n          extends Modelica.Icons.Function;\r\n\r\n          input Real den1[:] \"[s] coefficients of polynomials (den1[i]*s + 1)\";\r\n          input Real den2[:,2]\r\n            \"[s^2, s] coefficients of polynomials (den2[i,1]*s^2 + den2[i,2]*s + 1)\";\r\n          output Real cr[size(den1, 1)]\r\n            \"[s^0] coefficients of polynomials cr[i]*(s+1/cr[i])\";\r\n          output Real c0[size(den2, 1)]\r\n            \"[s^0] coefficients of polynomials (s^2 + (den2[i,2]/den2[i,1])*s + (1/den2[i,1]))\";\r\n          output Real c1[size(den2, 1)]\r\n            \"[s^1] coefficients of polynomials (s^2 + (den2[i,2]/den2[i,1])*s + (1/den2[i,1]))\";\r\n        algorithm\r\n          for i in 1:size(den1, 1) loop\r\n            cr[i] := 1/den1[i];\r\n          end for;\r\n\r\n          for i in 1:size(den2, 1) loop\r\n            c1[i] := den2[i, 2]/den2[i, 1];\r\n            c0[i] := 1/den2[i, 1];\r\n          end for;\r\n        end toHighestPowerOne;\r\n\r\n        function normalizationFactor\r\n          \"Compute correction factor of low pass filter such that amplitude at cut-off frequency is -3db (=10^(-3/20) = 0.70794...)\"\r\n          extends Modelica.Icons.Function;\r\n\r\n          import Modelica.Utilities.Streams;\r\n\r\n          input Real c1[:]\r\n            \"[p] coefficients of denominator polynomials (c1[i}*p + 1)\";\r\n          input Real c2[:,2]\r\n            \"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\";\r\n          output Real alpha \"Correction factor (replace p by alpha*p)\";\r\n        protected\r\n          Real alpha_min;\r\n          Real alpha_max;\r\n\r\n          function normalizationResidue\r\n            \"Residue of correction factor computation\"\r\n            extends Modelica.Icons.Function;\r\n            input Real c1[:]\r\n              \"[p] coefficients of denominator polynomials (c1[i]*p + 1)\";\r\n            input Real c2[:,2]\r\n              \"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\";\r\n            input Real alpha;\r\n            output Real residue;\r\n          protected\r\n            constant Real beta= 10^(-3/20)\r\n              \"Amplitude of -3db required, i.e., -3db = 20*log(beta)\";\r\n            Real cc1;\r\n            Real cc2;\r\n            Real p;\r\n            Real alpha2=alpha*alpha;\r\n            Real alpha4=alpha2*alpha2;\r\n            Real A2=1.0;\r\n          algorithm\r\n            assert(size(c1,1) <= 1, \"Internal error 2 (should not occur)\");\r\n            if size(c1, 1) == 1 then\r\n              cc1 := c1[1]*c1[1];\r\n              p := 1 + cc1*alpha2;\r\n              A2 := A2*p;\r\n            end if;\r\n            for i in 1:size(c2, 1) loop\r\n              cc1 := c2[i, 2]*c2[i, 2] - 2*c2[i, 1];\r\n              cc2 := c2[i, 1]*c2[i, 1];\r\n              p := 1 + cc1*alpha2 + cc2*alpha4;\r\n              A2 := A2*p;\r\n            end for;\r\n            residue := 1/sqrt(A2) - beta;\r\n          end normalizationResidue;\r\n\r\n          function findInterval \"Find interval for the root\"\r\n            extends Modelica.Icons.Function;\r\n            input Real c1[:]\r\n              \"[p] coefficients of denominator polynomials (a*p + 1)\";\r\n            input Real c2[:,2]\r\n              \"[p^2, p] coefficients of denominator polynomials (b*p^2 + a*p + 1)\";\r\n            output Real alpha_min;\r\n            output Real alpha_max;\r\n          protected\r\n            Real alpha = 1.0;\r\n            Real residue;\r\n          algorithm\r\n            alpha_min :=0;\r\n            residue := normalizationResidue(c1, c2, alpha);\r\n            if residue < 0 then\r\n               alpha_max :=alpha;\r\n            else\r\n               while residue >= 0 loop\r\n                  alpha := 1.1*alpha;\r\n                  residue := normalizationResidue(c1, c2, alpha);\r\n               end while;\r\n               alpha_max :=alpha;\r\n            end if;\r\n          end findInterval;\r\n\r\n        function solveOneNonlinearEquation\r\n            \"Solve f(u) = 0; f(u_min) and f(u_max) must have different signs\"\r\n            extends Modelica.Icons.Function;\r\n            import Modelica.Utilities.Streams.error;\r\n\r\n          input Real c1[:]\r\n              \"[p] coefficients of denominator polynomials (c1[i]*p + 1)\";\r\n          input Real c2[:,2]\r\n              \"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\";\r\n          input Real u_min \"Lower bound of search interval\";\r\n          input Real u_max \"Upper bound of search interval\";\r\n          input Real tolerance=100*Modelica.Constants.eps\r\n              \"Relative tolerance of solution u\";\r\n          output Real u \"Value of independent variable so that f(u) = 0\";\r\n\r\n          protected\r\n          constant Real eps=Modelica.Constants.eps \"Machine epsilon\";\r\n          Real a=u_min \"Current best minimum interval value\";\r\n          Real b=u_max \"Current best maximum interval value\";\r\n          Real c \"Intermediate point a <= c <= b\";\r\n          Real d;\r\n          Real e \"b - a\";\r\n          Real m;\r\n          Real s;\r\n          Real p;\r\n          Real q;\r\n          Real r;\r\n          Real tol;\r\n          Real fa \"= f(a)\";\r\n          Real fb \"= f(b)\";\r\n          Real fc;\r\n          Boolean found=false;\r\n        algorithm\r\n          // Check that f(u_min) and f(u_max) have different sign\r\n          fa := normalizationResidue(c1,c2,u_min);\r\n          fb := normalizationResidue(c1,c2,u_max);\r\n          fc := fb;\r\n          if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments u_min and u_max to solveOneNonlinearEquation(..)\\n\" +\r\n              \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  u_min  = \" + String(u_min) + \"\\n\" + \"  u_max  = \" + String(u_max)\r\n               + \"\\n\" + \"  fa = f(u_min) = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(u_max) = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\");\r\n          end if;\r\n\r\n          // Initialize variables\r\n          c := a;\r\n          fc := fa;\r\n          e := b - a;\r\n          d := e;\r\n\r\n          // Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b;\r\n              b := c;\r\n              c := a;\r\n              fa := fb;\r\n              fb := fc;\r\n              fc := fa;\r\n            end if;\r\n\r\n            tol := 2*eps*abs(b) + tolerance;\r\n            m := (c - b)/2;\r\n\r\n            if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true;\r\n              u := b;\r\n            else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m;\r\n                d := e;\r\n              else\r\n                s := fb/fa;\r\n                if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s;\r\n                  q := 1 - s;\r\n                else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc;\r\n                  r := fb/fc;\r\n                  p := s*(2*m*q*(q - r) - (b - a)*(r - 1));\r\n                  q := (q - 1)*(r - 1)*(s - 1);\r\n                end if;\r\n\r\n                if p > 0 then\r\n                  q := -q;\r\n                else\r\n                  p := -p;\r\n                end if;\r\n\r\n                s := e;\r\n                e := d;\r\n                if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q;\r\n                else\r\n                  // use bi-section\r\n                  e := m;\r\n                  d := e;\r\n                end if;\r\n              end if;\r\n\r\n              // Best guess value is defined as \"a\"\r\n              a := b;\r\n              fa := fb;\r\n              b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol);\r\n              fb := normalizationResidue(c1,c2,b);\r\n\r\n              if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a;\r\n                fc := fa;\r\n                e := b - a;\r\n                d := e;\r\n              end if;\r\n            end if;\r\n          end while;\r\n\r\n          annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThis function determines the solution of <strong>one non-linear algebraic equation</strong> \\\"y=f(u)\\\"\r\nin <strong>one unknown</strong> \\\"u\\\" in a reliable way. It is one of the best numerical\r\nalgorithms for this purpose. As input, the nonlinear function f(u)\r\nhas to be given, as well as an interval u_min, u_max that\r\ncontains the solution, i.e., \\\"f(u_min)\\\" and \\\"f(u_max)\\\" must\r\nhave a different sign. If possible, a smaller interval is computed by\r\ninverse quadratic interpolation (interpolating with a quadratic polynomial\r\nthrough the last 3 points and computing the zero). If this fails,\r\nbisection is used, which always reduces the interval by a factor of 2.\r\nThe inverse quadratic interpolation method has superlinear convergence.\r\nThis is roughly the same convergence rate as a globally convergent Newton\r\nmethod, but without the need to compute derivatives of the non-linear\r\nfunction. The solver function is a direct mapping of the Algol 60 procedure\r\n\\\"zero\\\" to Modelica, from:\r\n</p>\r\n\r\n<dl>\r\n<dt> Brent R.P.:</dt>\r\n<dd> <strong>Algorithms for Minimization without derivatives</strong>.\r\n     Prentice Hall, 1973, pp. 58-59.</dd>\r\n</dl>\r\n\r\n</html>\"));\r\n        end solveOneNonlinearEquation;\r\n\r\n        algorithm\r\n           // Find interval for alpha\r\n           (alpha_min, alpha_max) :=findInterval(c1, c2);\r\n\r\n           // Compute alpha, so that abs(G(p)) = -3db\r\n           alpha :=solveOneNonlinearEquation(\r\n            c1,\r\n            c2,\r\n            alpha_min,\r\n            alpha_max);\r\n        end normalizationFactor;\r\n\r\n        encapsulated function bandPassAlpha \"Return alpha for band pass\"\r\n          extends Modelica.Icons.Function;\r\n\r\n          import Modelica;\r\n           input Real a \"Coefficient of s^1\";\r\n           input Real b \"Coefficient of s^0\";\r\n           input Modelica.Units.SI.AngularVelocity w\r\n            \"Bandwidth angular frequency\";\r\n           output Real alpha \"Alpha factor to build up band pass\";\r\n\r\n        protected\r\n          Real alpha_min;\r\n          Real alpha_max;\r\n          Real z_min;\r\n          Real z_max;\r\n          Real z;\r\n\r\n          function residue \"Residue of non-linear equation\"\r\n            extends Modelica.Icons.Function;\r\n            input Real a;\r\n            input Real b;\r\n            input Real w;\r\n            input Real z;\r\n            output Real res;\r\n          algorithm\r\n            res := z^2 + (a*w*z/(1+z))^2 - (2+b*w^2)*z + 1;\r\n          end residue;\r\n\r\n        function solveOneNonlinearEquation\r\n            \"Solve f(u) = 0; f(u_min) and f(u_max) must have different signs\"\r\n            extends Modelica.Icons.Function;\r\n            import Modelica.Utilities.Streams.error;\r\n\r\n          input Real aa;\r\n          input Real bb;\r\n          input Real ww;\r\n          input Real u_min \"Lower bound of search interval\";\r\n          input Real u_max \"Upper bound of search interval\";\r\n          input Real tolerance=100*Modelica.Constants.eps\r\n              \"Relative tolerance of solution u\";\r\n          output Real u \"Value of independent variable so that f(u) = 0\";\r\n\r\n          protected\r\n          constant Real eps=Modelica.Constants.eps \"Machine epsilon\";\r\n          Real a=u_min \"Current best minimum interval value\";\r\n          Real b=u_max \"Current best maximum interval value\";\r\n          Real c \"Intermediate point a <= c <= b\";\r\n          Real d;\r\n          Real e \"b - a\";\r\n          Real m;\r\n          Real s;\r\n          Real p;\r\n          Real q;\r\n          Real r;\r\n          Real tol;\r\n          Real fa \"= f(a)\";\r\n          Real fb \"= f(b)\";\r\n          Real fc;\r\n          Boolean found=false;\r\n        algorithm\r\n          // Check that f(u_min) and f(u_max) have different sign\r\n          fa := residue(aa,bb,ww,u_min);\r\n          fb := residue(aa,bb,ww,u_max);\r\n          fc := fb;\r\n          if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then\r\n            error(\r\n              \"The arguments u_min and u_max to solveOneNonlinearEquation(..)\\n\" +\r\n              \"do not bracket the root of the single non-linear equation:\\n\" +\r\n              \"  u_min  = \" + String(u_min) + \"\\n\" + \"  u_max  = \" + String(u_max)\r\n               + \"\\n\" + \"  fa = f(u_min) = \" + String(fa) + \"\\n\" +\r\n              \"  fb = f(u_max) = \" + String(fb) + \"\\n\" +\r\n              \"fa and fb must have opposite sign which is not the case\");\r\n          end if;\r\n\r\n          // Initialize variables\r\n          c := a;\r\n          fc := fa;\r\n          e := b - a;\r\n          d := e;\r\n\r\n          // Search loop\r\n          while not found loop\r\n            if abs(fc) < abs(fb) then\r\n              a := b;\r\n              b := c;\r\n              c := a;\r\n              fa := fb;\r\n              fb := fc;\r\n              fc := fa;\r\n            end if;\r\n\r\n            tol := 2*eps*abs(b) + tolerance;\r\n            m := (c - b)/2;\r\n\r\n            if abs(m) <= tol or fb == 0.0 then\r\n              // root found (interval is small enough)\r\n              found := true;\r\n              u := b;\r\n            else\r\n              // Determine if a bisection is needed\r\n              if abs(e) < tol or abs(fa) <= abs(fb) then\r\n                e := m;\r\n                d := e;\r\n              else\r\n                s := fb/fa;\r\n                if a == c then\r\n                  // linear interpolation\r\n                  p := 2*m*s;\r\n                  q := 1 - s;\r\n                else\r\n                  // inverse quadratic interpolation\r\n                  q := fa/fc;\r\n                  r := fb/fc;\r\n                  p := s*(2*m*q*(q - r) - (b - a)*(r - 1));\r\n                  q := (q - 1)*(r - 1)*(s - 1);\r\n                end if;\r\n\r\n                if p > 0 then\r\n                  q := -q;\r\n                else\r\n                  p := -p;\r\n                end if;\r\n\r\n                s := e;\r\n                e := d;\r\n                if 2*p < 3*m*q - abs(tol*q) and p < abs(0.5*s*q) then\r\n                  // interpolation successful\r\n                  d := p/q;\r\n                else\r\n                  // use bi-section\r\n                  e := m;\r\n                  d := e;\r\n                end if;\r\n              end if;\r\n\r\n              // Best guess value is defined as \"a\"\r\n              a := b;\r\n              fa := fb;\r\n              b := b + (if abs(d) > tol then d else if m > 0 then tol else -tol);\r\n              fb := residue(aa,bb,ww,b);\r\n\r\n              if fb > 0 and fc > 0 or fb < 0 and fc < 0 then\r\n                // initialize variables\r\n                c := a;\r\n                fc := fa;\r\n                e := b - a;\r\n                d := e;\r\n              end if;\r\n            end if;\r\n          end while;\r\n\r\n          annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThis function determines the solution of <strong>one non-linear algebraic equation</strong> \\\"y=f(u)\\\"\r\nin <strong>one unknown</strong> \\\"u\\\" in a reliable way. It is one of the best numerical\r\nalgorithms for this purpose. As input, the nonlinear function f(u)\r\nhas to be given, as well as an interval u_min, u_max that\r\ncontains the solution, i.e., \\\"f(u_min)\\\" and \\\"f(u_max)\\\" must\r\nhave a different sign. If possible, a smaller interval is computed by\r\ninverse quadratic interpolation (interpolating with a quadratic polynomial\r\nthrough the last 3 points and computing the zero). If this fails,\r\nbisection is used, which always reduces the interval by a factor of 2.\r\nThe inverse quadratic interpolation method has superlinear convergence.\r\nThis is roughly the same convergence rate as a globally convergent Newton\r\nmethod, but without the need to compute derivatives of the non-linear\r\nfunction. The solver function is a direct mapping of the Algol 60 procedure\r\n\\\"zero\\\" to Modelica, from:\r\n</p>\r\n\r\n<dl>\r\n<dt> Brent R.P.:</dt>\r\n<dd> <strong>Algorithms for Minimization without derivatives</strong>.\r\n     Prentice Hall, 1973, pp. 58-59.</dd>\r\n</dl>\r\n\r\n</html>\"));\r\n        end solveOneNonlinearEquation;\r\n\r\n        algorithm\r\n          assert( a^2/4 - b <= 0,  \"Band pass transformation cannot be computed\");\r\n          z :=solveOneNonlinearEquation(a, b, w, 0, 1);\r\n          alpha := sqrt(z);\r\n\r\n          annotation (Documentation(info=\"<html>\r\n<p>\r\nA band pass with bandwidth \\\"w\\\" is determined from a low pass\r\n</p>\r\n\r\n<blockquote><pre>\r\n1/(p^2 + a*p + b)\r\n</pre></blockquote>\r\n\r\n<p>\r\nwith the transformation\r\n</p>\r\n\r\n<blockquote><pre>\r\nnew(p) = (p + 1/p)/w\r\n</pre></blockquote>\r\n\r\n<p>\r\nThis results in the following derivation:\r\n</p>\r\n\r\n<blockquote><pre>\r\n1/(p^2 + a*p + b) -> 1/( (p+1/p)^2/w^2 + a*(p + 1/p)/w + b )\r\n                   = 1 /( ( p^2 + 1/p^2 + 2)/w^2 + (p + 1/p)*a/w + b )\r\n                   = w^2*p^2 / (p^4 + 2*p^2 + 1 + (p^3 + p)a*w + b*w^2*p^2)\r\n                   = w^2*p^2 / (p^4 + a*w*p^3 + (2+b*w^2)*p^2 + a*w*p + 1)\r\n</pre></blockquote>\r\n\r\n<p>\r\nThis 4th order transfer function shall be split in to two transfer functions of order 2 each\r\nfor numerical reasons. With the following formulation, the fourth order\r\npolynomial can be represented (with the unknowns \\\"c\\\" and \\\"alpha\\\"):\r\n</p>\r\n\r\n<blockquote><pre>\r\ng(p) = w^2*p^2 / ( (p*alpha)^2 + c*(p*alpha) + 1) * ( (p/alpha)^2 + c*(p/alpha) + 1)\r\n     = w^2*p^2 / ( p^4 + c*(alpha + 1/alpha)*p^3 + (alpha^2 + 1/alpha^2 + c^2)*p^2\r\n                                                 + c*(alpha + 1/alpha)*p + 1 )\r\n</pre></blockquote>\r\n\r\n<p>\r\nComparison of coefficients:\r\n</p>\r\n\r\n<blockquote><pre>\r\nc*(alpha + 1/alpha) = a*w           -> c = a*w / (alpha + 1/alpha)\r\nalpha^2 + 1/alpha^2 + c^2 = 2+b*w^2 -> equation to determine alpha\r\n\r\nalpha^4 + 1 + a^2*w^2*alpha^4/(1+alpha^2)^2 = (2+b*w^2)*alpha^2\r\n  or z = alpha^2\r\nz^2 + a^2*w^2*z^2/(1+z)^2 - (2+b*w^2)*z + 1 = 0\r\n</pre></blockquote>\r\n\r\n<p>\r\nTherefore the last equation has to be solved for \\\"z\\\" (basically, this means to compute\r\na real zero of a fourth order polynomial):\r\n</p>\r\n\r\n<blockquote><pre>\r\nsolve: 0 = f(z)  = z^2 + a^2*w^2*z^2/(1+z)^2 - (2+b*w^2)*z + 1  for \\\"z\\\"\r\n           f(0)  = 1  &gt; 0\r\n           f(1)  = 1 + a^2*w^2/4 - (2+b*w^2) + 1\r\n                 = (a^2/4 - b)*w^2  &lt; 0\r\n                 // since b - a^2/4 > 0 requirement for complex conjugate poles\r\n-> 0 &lt; z &lt; 1\r\n</pre></blockquote>\r\n\r\n<p>\r\nThis function computes the solution of this equation and returns \\\"alpha = sqrt(z)\\\";\r\n</p>\r\n\r\n</html>\"));\r\n        end bandPassAlpha;\r\n      end Utilities;\r\n    end Filter;\r\n  end Internal;\r\n  annotation (\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis package contains basic <strong>continuous</strong> input/output blocks\r\ndescribed by differential equations.\r\n</p>\r\n\r\n<p>\r\nAll blocks of this package can be initialized in different\r\nways controlled by parameter <strong>initType</strong>. The possible\r\nvalues of initType are defined in\r\n<a href=\\\"modelica://Modelica.Blocks.Types.Init\\\">Modelica.Blocks.Types.Init</a>:\r\n</p>\r\n\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>Name</strong></td>\r\n      <td><strong>Description</strong></td></tr>\r\n\r\n  <tr><td><strong>Init.NoInit</strong></td>\r\n      <td>no initialization (start values are used as guess values with fixed=false)</td></tr>\r\n\r\n  <tr><td><strong>Init.SteadyState</strong></td>\r\n      <td>steady state initialization (derivatives of states are zero)</td></tr>\r\n\r\n  <tr><td><strong>Init.InitialState</strong></td>\r\n      <td>Initialization with initial states</td></tr>\r\n\r\n  <tr><td><strong>Init.InitialOutput</strong></td>\r\n      <td>Initialization with initial outputs (and steady state of the states if possible)</td></tr>\r\n</table>\r\n\r\n<p>\r\nFor backward compatibility reasons the default of all blocks is\r\n<strong>Init.NoInit</strong>, with the exception of Integrator and LimIntegrator\r\nwhere the default is <strong>Init.InitialState</strong> (this was the initialization\r\ndefined in version 2.2 of the Modelica standard library).\r\n</p>\r\n\r\n<p>\r\nIn many cases, the most useful initial condition is\r\n<strong>Init.SteadyState</strong> because initial transients are then no longer\r\npresent. The drawback is that in combination with a non-linear\r\nplant, non-linear algebraic equations occur that might be\r\ndifficult to solve if appropriate guess values for the\r\niteration variables are not provided (i.e., start values with fixed=false).\r\nHowever, it is often already useful to just initialize\r\nthe linear blocks from the Continuous blocks library in SteadyState.\r\nThis is uncritical, because only linear algebraic equations occur.\r\nIf Init.NoInit is set, then the start values for the states are\r\ninterpreted as <strong>guess</strong> values and are propagated to the\r\nstates with fixed=<strong>false</strong>.\r\n</p>\r\n\r\n<p>\r\nNote, initialization with Init.SteadyState is usually difficult\r\nfor a block that contains an integrator\r\n(Integrator, LimIntegrator, PI, PID, LimPID).\r\nThis is due to the basic equation of an integrator:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>initial equation</strong>\r\n   <strong>der</strong>(y) = 0;   // Init.SteadyState\r\n<strong>equation</strong>\r\n   <strong>der</strong>(y) = k*u;\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe steady state equation leads to the condition that the input to the\r\nintegrator is zero. If the input u is already (directly or indirectly) defined\r\nby another initial condition, then the initialization problem is <strong>singular</strong>\r\n(has none or infinitely many solutions). This situation occurs often\r\nfor mechanical systems, where, e.g., u = desiredSpeed - measuredSpeed and\r\nsince speed is both a state and a derivative, it is always defined by\r\nInit.InitialState or Init.SteadyState initialization.\r\n</p>\r\n\r\n<p>\r\nIn such a case, <strong>Init.NoInit</strong> has to be selected for the integrator\r\nand an additional initial equation has to be added to the system\r\nto which the integrator is connected. E.g., useful initial conditions\r\nfor a 1-dim. rotational inertia controlled by a PI controller are that\r\n<strong>angle</strong>, <strong>speed</strong>, and <strong>acceleration</strong> of the inertia are zero.\r\n</p>\r\n\r\n</html>\"), Icon(graphics={Line(\r\n          origin={0.061,4.184},\r\n          points={{81.939,36.056},{65.362,36.056},{14.39,-26.199},{-29.966,\r\n              113.485},{-65.374,-61.217},{-78.061,-78.184}},\r\n          color={95,95,95},\r\n          smooth=Smooth.Bezier)}));\r\nend Continuous", "checksum": "af3d9b115034634ebdb52db64d9c4816f0e502b7", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Continuous.mo:2-4542", "component_count": 67, "connection_count": 34, "variable_count": 127, "physical_quantity_count": 40, "parameter_count": 46, "equation_count": 337, "dependency_count": 74, "has_physical_interface": true, "interface_component_count": 26, "has_connections": true, "is_composite_model": true, "complexity_score": 596.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "algorithm assert( a^2/4 - b <= 0, \"Band pass transformation cannot be computed\")", "search_keywords": ["1, 0; 0, 1", "1:nx-1", "20, 2", "2:na", "2:nx", "AngularVelocity", "Boolean", "Complex", "Frequency", "Hz", "Integer", "Real", "SI.Frequency", "Td/Nd, 100*Modelica.\r\n          Constants.eps", "Td/Nd,1.e-14", "i,1", "j+1", "m + 1", "mechanical", "nr+i", "nr+na+1", "nx", "order", "p^2, p", "rad/s", "size(a, 1) - 1", "size(c0_in,1)", "system"]}, "components": [{"name": "x", "type_name": "Real", "prefixes": ["output"], "modifications": {"start": "x_start"}, "condition": null, "array_dims": null, "comment": "State of block"}, {"name": "yd", "type_name": "Real", "prefixes": ["output"], "modifications": {"start": "yd_start"}, "condition": null, "array_dims": null, "comment": "Derivative of y"}, {"name": "x_scaled", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[size(x,1)]", "comment": "Scaled vector x"}, {"name": "x2", "type_name": "Real", "prefixes": ["output"], "modifications": {"start": "x2_start"}, "condition": null, "array_dims": "[m]", "comment": "States 2 of second order filters"}, {"name": "z", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m + 1]", "comment": null}, {"name": "polereal", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}, {"name": "poleimag", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}, {"name": "realpol", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "k2", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(c0_in,1)]", "comment": "Gains of y = k1*x1 + k2*x + u"}, {"name": "D", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}, {"name": "w0", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}, {"name": "k1", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(c0_in,1)]", "comment": "Gains of y = k1*x1 + k2*x + u"}, {"name": "T", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "else", "type_name": "order", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uu", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[na+nr+1]", "comment": null}, {"name": "poles", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "conjugate", "type_name": "Complex", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "order", "type_name": "Integer", "prefixes": ["input"], "modifications": {"min": "1"}, "condition": null, "array_dims": null, "comment": "Order of filter"}, {"name": "cr", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[order]", "comment": "Coefficients of real poles"}, {"name": "alpha2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= alpha*alpha"}, {"name": "c0", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[0]", "comment": "Coefficients of s^0 term if conjugate complex pole"}, {"name": "c1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[0]", "comment": "Coefficients of s^1 term if conjugate complex pole"}, {"name": "A_ripple", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "fac", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Normalization factor"}, {"name": "cr_in", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Coefficients of real poles"}, {"name": "f_cut", "type_name": "SI.Frequency", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Cut-off frequency"}, {"name": "w_cut2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "f_max", "type_name": "SI.Frequency", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Upper band frequency"}, {"name": "cn", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Numerator coefficient of the PT2 terms"}, {"name": "w_band", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "c", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Intermediate point a <= c <= b"}, {"name": "j", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "ww", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(cr_in,1)]", "comment": "Real eigenvalues"}, {"name": "ku", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[size(c0_in,1)]", "comment": "Input gain"}, {"name": "ba2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "bb", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "den1", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "[s] coefficients of polynomials (den1[i]*s + 1)"}, {"name": "alpha_max", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "cc1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "cc2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "p", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha4", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "A2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "alpha_min", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "u_min", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Lower bound of search interval"}, {"name": "u_max", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Upper bound of search interval"}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Value of independent variable so that f(u) = 0"}, {"name": "a", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Coefficient of s^1"}, {"name": "b", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Coefficient of s^0"}, {"name": "d", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "e", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "b - a"}, {"name": "m", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "s", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "q", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "tol", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "fa", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f(a)"}, {"name": "fb", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= f(b)"}, {"name": "fc", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "found", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "z_min", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "z_max", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "w", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "res", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "aa", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "reset", "to_connector": "local_reset", "condition": null}, {"from_connector": "set", "to_connector": "local_set", "condition": null}, {"from_connector": "u", "to_connector": "P.u", "condition": null}, {"from_connector": "u", "to_connector": "I.u", "condition": null}, {"from_connector": "u", "to_connector": "D.u", "condition": null}, {"from_connector": "P.y", "to_connector": "Add.u1", "condition": null}, {"from_connector": "I.y", "to_connector": "Add.u2", "condition": null}, {"from_connector": "D.y", "to_connector": "Add.u3", "condition": null}, {"from_connector": "Add.y", "to_connector": "Gain.u", "condition": null}, {"from_connector": "Gain.y", "to_connector": "y", "condition": null}, {"from_connector": "u_s", "to_connector": "addP.u1", "condition": null}, {"from_connector": "u_s", "to_connector": "addD.u1", "condition": null}, {"from_connector": "u_s", "to_connector": "addI.u1", "condition": null}, {"from_connector": "addP.y", "to_connector": "P.u", "condition": null}, {"from_connector": "addD.y", "to_connector": "D.u", "condition": null}, {"from_connector": "addI.y", "to_connector": "I.u", "condition": null}, {"from_connector": "P.y", "to_connector": "addPID.u1", "condition": null}, {"from_connector": "D.y", "to_connector": "addPID.u2", "condition": null}, {"from_connector": "I.y", "to_connector": "addPID.u3", "condition": null}, {"from_connector": "limiter.y", "to_connector": "addSat.u1", "condition": null}, {"from_connector": "limiter.y", "to_connector": "y", "condition": null}, {"from_connector": "addSat.y", "to_connector": "gainTrack.u", "condition": null}, {"from_connector": "gainTrack.y", "to_connector": "addI.u3", "condition": null}, {"from_connector": "u_m", "to_connector": "addP.u2", "condition": null}, {"from_connector": "u_m", "to_connector": "addD.u2", "condition": null}, {"from_connector": "u_m", "to_connector": "addI.u2", "condition": null}, {"from_connector": "Dzero.y", "to_connector": "addPID.u2", "condition": null}, {"from_connector": "Izero.y", "to_connector": "addPID.u3", "condition": null}, {"from_connector": "addPID.y", "to_connector": "gainPID.u", "condition": null}, {"from_connector": "addFF.y", "to_connector": "limiter.u", "condition": null}, {"from_connector": "gainPID.y", "to_connector": "addFF.u1", "condition": null}, {"from_connector": "FFzero.y", "to_connector": "addFF.u2", "condition": null}, {"from_connector": "addFF.u2", "to_connector": "u_ff", "condition": null}, {"from_connector": "addFF.y", "to_connector": "addSat.u2", "condition": null}], "variables": [{"name": "initType", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "Init.InitialOutput then\r\n      y = y_start", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "local_set", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "y_start", "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "local_reset", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "Integrator", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "(u - x[1])*w", "comment": null}, {"name": "LimIntegrator", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "x", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": ["output"], "attributes": {"start": "x_start"}, "binding_equation": null, "comment": "\"Filter states\""}, {"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "der(u)", "comment": null}, {"name": "Derivative", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FirstOrder", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "yd", "type_name": "Real", "prefixes": ["output"], "attributes": {"start": "yd_start"}, "binding_equation": null, "comment": "\"Derivative of y\""}, {"name": "SecondOrder", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PI", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PID", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "controlError", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "u_s - u_m\r\n      \"Control error (set point - measurement)\"", "comment": null}, {"name": "LimPID", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "x_scaled", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Scaled vector x\""}, {"name": "nx", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "0 then\r\n       y = d*u", "comment": null}, {"name": "TransferFunction", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "StateSpace", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Der", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "x1", "type_name": "Real", "prefixes": ["output"], "attributes": {"start": "x1_start"}, "binding_equation": null, "comment": "\"States 1 of second order filters (der(x1) = x2)\""}, {"name": "x2", "type_name": "Real", "prefixes": ["output"], "attributes": {"start": "x2_start"}, "binding_equation": null, "comment": "\"States 2 of second order filters\""}, {"name": "xr", "type_name": "Real", "prefixes": ["output"], "attributes": {"start": "xr_start"}, "binding_equation": null, "comment": "\"State of real pole for uneven order otherwise dummy\""}, {"name": "z", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "alpha^2\r\n                                z^2 + c^1^2*w^2*z^2/(1+z)^2 - (2+c0*w^2)*z + 1 = 0\r\n\r\n       The band stop filter is derived from the low pass filter by\r\n       the transformation new(s) = w/( (s + 1/s) )   (w = w_band = (f_max - f_min)/sqrt(f_max*f_min) )\r\n\r\n       cr/(s + cr)         -> 1/(( w/(s + 1/s) ) + cr)\r\n                              = (s^2 + 1) / (s^2 + (w/cr)*s + 1)\r\n\r\n       c0/(s^2 + c1*s + c0) -> c0/( w^2/(s + 1/s)^2 + c1*w/(s + 1/s) + c0 )\r\n                               = c0*(s^2 + 1)^2 / (s^4 + c1*w*s^3/c0 + (2+w^2/b)*s^2 + c1*w*s/c0 + 1)\r\n\r\n                               Assume the following description with PT2:\r\n                               = c0*(s^2 + 1)^2 / ( (s^2 + s*(c/alpha) + 1/alpha^2)*\r\n                                                    (s^2 + s*(c*alpha) + alpha^2) )\r\n                               = c0*(s^2 + 1)^2 / (  s^4 + c*(alpha + 1/alpha)*s^3\r\n                                                         + (alpha^2 + 1/alpha^2 + c^2)*s^2\r\n                                                         + c*(alpha + 1/alpha)*p + 1 )\r\n\r\n                            and therefore:\r\n                              c*(alpha + 1/alpha) = c1*w/b         -> c = c1*w/(c0*(alpha + 1/alpha))\r\n                              alpha^2 + 1/alpha^2 + c^2 = 2+w^2/c0 -> equation to determine alpha\r\n                              alpha^4 + 1 + (c1*w/c0*alpha^2)^2/(1+alpha^2)^2 = (2+w^2/c0)*alpha^2\r\n                              or z = alpha^2\r\n                              z^2 + (c1*w/c0*z)^2/(1+z)^2 - (2+w^2/c0)*z + 1 = 0\r\n\r\n                            same as:  ww = w/c0\r\n                              z^2 + (c1*ww*z)^2/(1+z)^2 - (2+c0*ww)*z + 1 = 0  -> same equation as for BandPass\r\n\r\n     Afterwards, change filter coefficients according to transformation new(s) = s/w_cut\r\n        c0*(s^2+1)(s^2 + c1*s + c0)  -> c0*((s/w)^2 + 1) / ((s/w)^2 + c1*(s/w) + c0 =\r\n                                        c0/w^2*(s^2 + w^2) / (s^2 + (c1*w)*s + (c0*w^2))/w^2) =\r\n                                        (s^2 + c0*w^2) / (s^2 + (c1*w)*s + (c0*w^2))\r\n    */\r\n          for i in 1:size(cr_in,1) loop\r\n             c1[i] := w_cut*w_band/cr_in[i]", "comment": null}, {"name": "polereal", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "poleimag", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "realpol", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "k2", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "ones(m)", "comment": "\"Gains of y = k1*x1 + k2*x\""}, {"name": "D", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "w0", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "k1", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Gains of y = k1*x1 + k2*x\""}, {"name": "T", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LowpassButterworth", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CriticalDamping", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "analogFilter", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Blocks.Types.AnalogFilter.ChebyshevI then\r\n        (cr,c0,c1) = Internal.Filter.base.ChebyshevI(order, A_ripple, normalized)", "comment": null}, {"name": "fixed", "type_name": "each", "prefixes": [], "attributes": {}, "binding_equation": "false)", "comment": null}, {"name": "uu", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "filterType", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Blocks.Types.FilterType.BandStop then\r\n        /* Band pass filter\r\n           Complex conjugate poles:  y = k1*x1 + k2*x2 + u", "comment": null}, {"name": "init", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Blocks.Types.Init.InitialOutput then\r\n        y = y_start", "comment": null}, {"name": "assert", "type_name": "algorithm", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Filter", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "order", "type_name": "elseif", "prefixes": ["input"], "attributes": {"min": "1"}, "binding_equation": "41 then\r\n            alpha := 0.1339811106984253", "comment": "\"Order of filter in the range 1..41\""}, {"name": "normalized", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "true\r\n            \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\"", "comment": null}, {"name": "cr", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"[s^0] coefficients of polynomials cr[i]*(s+1/cr[i])\""}, {"name": "alpha", "type_name": "Real", "prefixes": ["output", "input"], "attributes": {}, "binding_equation": "1.0", "comment": "\"Alpha factor to build up band pass\""}, {"name": "alpha2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "alpha*alpha", "comment": "\"= alpha*alpha\""}, {"name": "den1", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"[s] coefficients of polynomials (den1[i]*s + 1)\""}, {"name": "den2", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"[s^2, s] coefficients of polynomials (den2[i,1]*s^2 + den2[i,2]*s + 1)\""}, {"name": "c0", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"[s^0] coefficients of polynomials (s^2 + (den2[i,2]/den2[i,1])*s + (1/den2[i,1]))\""}, {"name": "c1", "type_name": "Real", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": "\"[p] coefficients of denominator polynomials (c1[i]*p + 1)\""}, {"name": "size", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "1 then\r\n              cc1 := c1[1]*c1[1]", "comment": null}, {"name": "Bessel", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Butterworth", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "A_ripple", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "0.5 \"Pass band ripple in [dB]\"", "comment": null}, {"name": "epsilon", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "fac", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ChebyshevI", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "base", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cr_in", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Coefficients of real poles of base filter\""}, {"name": "c0_in", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Coefficients of s^0 term of base filter if conjugate complex pole\""}, {"name": "c1_in", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Coefficients of s^1 term of base filter if conjugate complex pole\""}, {"name": "f_cut", "type_name": "SI.Frequency", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Cut-off frequency\""}, {"name": "w_cut", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "2*pi*f0\r\n            \"Cut-off angular frequency\"", "comment": null}, {"name": "w_cut2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "w_cut*w_cut", "comment": null}, {"name": "lowPass", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "highPass", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "f_min", "type_name": "SI.Frequency", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Band of band stop filter is f_min (A=-3db) .. f_max (A=-3db)\""}, {"name": "f_max", "type_name": "SI.Frequency", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Upper band frequency\""}, {"name": "cn", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Numerator coefficient of the PT2 terms\""}, {"name": "f0", "type_name": "SI.Frequency", "prefixes": [], "attributes": {}, "binding_equation": "sqrt(f_min*f_max)", "comment": null}, {"name": "w_band", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "(f_max - f_min) / f0", "comment": null}, {"name": "c", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Intermediate point a <= c <= b\""}, {"name": "j", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "bandPass", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ww", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "bandStop", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "coefficients", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "r", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Real eigenvalues\""}, {"name": "a", "type_name": "if", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": "c then\r\n                  // linear interpolation\r\n                  p := 2*m*s", "comment": "\"Coefficient of s^1\""}, {"name": "b", "type_name": "Real", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": "u_max \"Current best maximum interval value\"", "comment": "\"Coefficient of s^0\""}, {"name": "ku", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Gains of input terms\""}, {"name": "ba2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "bb", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "roots", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "c2", "type_name": "Real", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": "\"[p^2, p] coefficients of denominator polynomials (c2[i,1]*p^2 + c2[i,2]*p + 1)\""}, {"name": "BesselBaseCoefficients", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "toHighestPowerOne", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alpha_min", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alpha_max", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "residue", "type_name": "end", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cc1", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cc2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "p", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "alpha4", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "alpha2*alpha2", "comment": null}, {"name": "A2", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "1.0", "comment": null}, {"name": "normalizationResidue", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "while", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "findInterval", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u_min", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Lower bound of search interval\""}, {"name": "u_max", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Upper bound of search interval\""}, {"name": "tolerance", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "100*Modelica.Constants.eps\r\n              \"Relative tolerance of solution u\"", "comment": null}, {"name": "u", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Value of independent variable so that f(u) = 0\""}, {"name": "d", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "e", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"b - a\""}, {"name": "m", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "q", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tol", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "fa", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= f(a)\""}, {"name": "fb", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= f(b)\""}, {"name": "fc", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "found", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "solveOneNonlinearEquation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "normalizationFactor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Modelica", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "w", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Bandwidth angular frequency\""}, {"name": "z_min", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "z_max", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "res", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "aa", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "bandPassAlpha", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Utilities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Internal", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "f_cut", "unit": "Hz", "display_unit": null, "quantity": "Frequency", "nominal": null}, {"name": "w_cut", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "f_min", "unit": "Hz", "display_unit": null, "quantity": "Frequency", "nominal": null}, {"name": "f_max", "unit": "Hz", "display_unit": null, "quantity": "Frequency", "nominal": null}, {"name": "f0", "unit": "Hz", "display_unit": null, "quantity": "Frequency", "nominal": null}, {"name": "controller", "unit": "Td/Nd, 100*Modelica.\r\n          Constants.eps", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signal", "unit": "Td/Nd,1.e-14", "display_unit": null, "quantity": null, "nominal": null}, {"name": "function", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Initialization", "unit": "size(a, 1) - 1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "x", "unit": "2:nx", "display_unit": null, "quantity": null, "nominal": null}, {"name": "proper", "unit": "2:na", "display_unit": null, "quantity": null, "nominal": null}, {"name": "system", "unit": "1, 0; 0, 1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "dummy", "unit": "m + 1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "filter", "unit": "n", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Advanced", "unit": "nx", "display_unit": null, "quantity": null, "nominal": null}, {"name": "states", "unit": "1:nx-1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "required", "unit": "nr+i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "unknown", "unit": "nr+na+1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "alpha", "unit": "order", "display_unit": null, "quantity": null, "nominal": null}, {"name": "den2", "unit": "p^2, p", "display_unit": null, "quantity": null, "nominal": null}, {"name": "pole", "unit": "0", "display_unit": null, "quantity": null, "nominal": null}, {"name": "p", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "frequency", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "poles", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "positive", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "wrong", "unit": "j+1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "eigenvalues", "unit": "size(c0_in,1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "gain", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "terms", "unit": "size(c0_in,1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "u", "unit": "size(c0_in,1)", "display_unit": null, "quantity": null, "nominal": null}, {"name": "n", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "c1", "unit": "p", "display_unit": null, "quantity": null, "nominal": null}, {"name": "c2", "unit": "p^2, p", "display_unit": null, "quantity": null, "nominal": null}, {"name": "factor", "unit": "20, 2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "den1", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "cr", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "c0", "unit": "i,1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "computation", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "root", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signs", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Add", "Blocks.Continuous", "Blocks.Math", "Butterworth", "Constants", "CriticalDampingNonNormalized", "CriticalDampingNormalized", "D", "Dzero", "E", "FFzero", "FillPattern", "Gain", "HighPassOrder4Filters", "HighPassOrder4FiltersStepResponse", "I", "Init", "Interfaces", "Internal", "Internal.Filter.base", "Internal.Filter.roots", "Izero", "K", "LinePattern", "LowPassOrder4Filters", "LowPassOrder4FiltersStepResponse", "Martin", "Modelica", "Modelica.Blocks", "Modelica.Blocks.Continuous", "Modelica.Blocks.Continuous.Internal", "Modelica.Blocks.Continuous.Internal.Filter.Utilities", "Modelica.Blocks.Examples", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Nonlinear", "Modelica.Blocks.Sources", "Modelica.Blocks.Types", "Modelica.Blocks.Types.AnalogFilter", "Modelica.Blocks.Types.FilterType", "Modelica.Blocks.Types.Init", "Modelica.Blocks.Types.LimiterHomotopy", "Modelica.Blocks.Types.SimpleController", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Icons", "Modelica.Math", "Modelica.Math.Matrices", "Modelica.Math.asinh", "Modelica.Units.SI", "Modelica.Utilities", "Modelica.Utilities.Streams", "Modelica.Utilities.Streams.error", "P", "R", "SI", "SimpleController", "Smooth", "Streams", "addD", "addFF", "addI", "addP", "addPID", "addSat", "coefficients", "e", "eurosyslib", "gainPID", "gainTrack", "i", "itea4", "limiter", "www.robotic.dlr"], "inheritance_chain": ["Modelica.Icons.Package", "Interfaces.SISO", "Modelica.Blocks.Interfaces.SVcontrol", "Interfaces.MIMO", "Modelica.Blocks.Interfaces.SISO", "Modelica.Icons.InternalPackage", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Blocks.Interfaces", "kind": "package", "name": "Interfaces", "package_path": ["Modelica", "Blocks"], "extends": ["Modelica.Icons.InterfacesPackage", "Modelica.Blocks.Icons.Block", "SO", "Modelica.Blocks.Icons.DiscreteBlock", "DiscreteBlock", "Modelica.Blocks.Icons.BooleanBlock", "Modelica.Blocks.Icons.IntegerBlock", "IntegerSO", "Modelica.Blocks.Icons.PartialBooleanBlock", "Modelica.Blocks.Interfaces.SO", "Modelica.Icons.FunctionsPackage", "Modelica.Icons.Function"], "imports": ["generator", "Modelica.Math.Random.Utilities.automaticLocalSeed"], "parameters": [{"name": "nout", "type": "Integer", "default": "1 \"Number of outputs\"", "description": null}, {"name": "nin", "type": "Integer", "default": "1 \"Number of inputs\"", "description": null}, {"name": "n", "type": "Integer", "default": "1 \"Number of inputs (= number of outputs)\"", "description": null}, {"name": "offset", "type": "Integer", "default": "0 \"Offset of output signal y\"", "description": null}, {"name": "startTime", "type": "SI.Time", "default": "0 \"Output y = offset for time < startTime\"", "description": null}, {"name": "nu_s", "type": "Integer", "default": "1 \"Number of setpoint inputs\"", "description": null}, {"name": "nu_m", "type": "Integer", "default": "1 \"Number of measurement inputs\"", "description": null}, {"name": "ny", "type": "Integer", "default": "1 \"Number of actuator outputs\"", "description": null}, {"name": "threshold", "type": "Real", "default": "0 \"Comparison with respect to threshold\"", "description": null}, {"name": "enableNoise", "type": "Boolean", "default": "globalSeed.enableNoise \"= true: y = noise, otherwise y = y_off\" parameter Real y_off = 0.0 \"Sets y = y_off if enableNoise=false (or time<startTime, see below)\" // Advanced dialog m", "description": null}, {"name": "actualGlobalSeed", "type": "Integer", "default": "if useGlobalSeed then globalSeed.seed else 0 \"The global seed, which is actually used\"", "description": null}, {"name": "generateNoise", "type": "Boolean", "default": "enableNoise and globalSeed.enableNoise \"= true, if noise shall be generated, otherwise no noise\"", "description": null}, {"name": "use_pder", "type": "Boolean", "default": "true \"Use input for 1st derivative of potential\" parameter Boolean use_pder2=true \"Use input for 2nd derivative of potential (only if 1st derivative is used, too)\" parameter Boolea", "description": null}, {"name": "Name_pder", "type": "String", "default": "\"der(p)\" \"Name of 1st derivative of potential variable\"", "description": null}, {"name": "Name_pder2", "type": "String", "default": "\"der2(p)\" \"Name of 2nd derivative of potential variable\"", "description": null}, {"name": "Name_f", "type": "String", "default": "\"f\" \"Name of flow variable\"", "description": null}, {"name": "Name_fder", "type": "String", "default": "\"der(f)\" \"Name of 1st derivative of flow variable\"", "description": null}, {"name": "Name_fder2", "type": "String", "default": "\"der2(f)\" \"Name of 2nd derivative of flow variable\"", "description": null}, {"name": "nout(min", "type": "Integer", "default": "1) = 1 \"Number of outputs\"", "description": null}, {"name": "Name_p", "type": "String", "default": "\"p\" \"Name of potential variable\"", "description": null}], "equations": [{"equations": ["algorithm\r\n        sder2 := u[3]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1701, "end_line": 1702, "start_col": 7, "end_col": 23}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1701, "end_line": 1701, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        sder1 := u[2]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1687, "end_line": 1688, "start_col": 7, "end_col": 23}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1687, "end_line": 1687, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        s := u[1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1674, "end_line": 1675, "start_col": 7, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1674, "end_line": 1674, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        sder1 := u[2]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1663, "end_line": 1664, "start_col": 7, "end_col": 23}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1663, "end_line": 1663, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm\r\n        s := u[1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1650, "end_line": 1651, "start_col": 7, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1650, "end_line": 1650, "start_col": 7, "end_col": 16}}, {"equations": ["equation\r\n      y = -f", "y1 = if use_fder then -der(y) else 0", "y2 = if (use_fder and use_fder2) then -der(y1) else 0", "connect(y1, fder)", "connect(y2, fder2)", "if use_pder then\r\n        connect(pder, u1)", "else\r\n        u1 = 0", "end if", "if (use_pder and use_pder2) then\r\n        connect(pder2, u2)", "else\r\n        u2 = 0", "end if", "if (use_pder and use_pder2) then\r\n        u = Functions.state2({p, u1, u2}, time)", "elseif (use_pder and not use_pder2) then\r\n        u = Functions.state1({p, u1}, time)", "else\r\n        u = p", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1568, "end_line": 1590, "start_col": 5, "end_col": 14}}, {"equations": ["y = -f", "y1 = if use_fder then -der(y) else 0", "y2 = if (use_fder and use_fder2) then -der(y1) else 0", "connect(y1, fder)", "connect(y2, fder2)", "if use_pder then\r\n        connect(pder, u1)", "else\r\n        u1 = 0", "end if", "if (use_pder and use_pder2) then\r\n        connect(pder2, u2)", "else\r\n        u2 = 0", "end if", "if (use_pder and use_pder2) then\r\n        u = Functions.state2({p, u1, u2}, time)", "elseif (use_pder and not use_pder2) then\r\n        u = Functions.state1({p, u1}, time)", "else\r\n        u = p", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1569, "end_line": 1590, "start_col": 7, "end_col": 14}}, {"equations": ["if (use_pder and use_pder2) then\r\n        u = Functions.state2({p, u1, u2}, time)", "elseif (use_pder and not use_pder2) then\r\n        u = Functions.state1({p, u1}, time)", "else\r\n        u = p", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1584, "end_line": 1590, "start_col": 7, "end_col": 13}}, {"equations": ["u = p"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1589, "end_line": 1589, "start_col": 9, "end_col": 15}}, {"equations": ["elseif (use_pder and not use_pder2) then\r\n        u = Functions.state1({p, u1}, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1586, "end_line": 1587, "start_col": 7, "end_col": 45}}, {"equations": ["u = Functions.state1({p, u1}, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1587, "end_line": 1587, "start_col": 9, "end_col": 45}}, {"equations": ["u = Functions.state2({p, u1, u2}, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1585, "end_line": 1585, "start_col": 9, "end_col": 49}}, {"equations": ["if (use_pder and use_pder2) then\r\n        connect(pder2, u2)", "else\r\n        u2 = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1579, "end_line": 1583, "start_col": 7, "end_col": 13}}, {"equations": ["u2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1582, "end_line": 1582, "start_col": 9, "end_col": 16}}, {"equations": ["connect(pder2, u2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1580, "end_line": 1580, "start_col": 9, "end_col": 28}}, {"equations": ["if use_pder then\r\n        connect(pder, u1)", "else\r\n        u1 = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1574, "end_line": 1578, "start_col": 7, "end_col": 13}}, {"equations": ["u1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1577, "end_line": 1577, "start_col": 9, "end_col": 16}}, {"equations": ["connect(pder, u1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1575, "end_line": 1575, "start_col": 9, "end_col": 27}}, {"equations": ["y2 = if (use_fder and use_fder2) then -der(y1) else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1571, "end_line": 1571, "start_col": 7, "end_col": 60}}, {"equations": ["y1 = if use_fder then -der(y) else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1570, "end_line": 1570, "start_col": 7, "end_col": 43}}, {"equations": ["y = -f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1569, "end_line": 1569, "start_col": 7, "end_col": 13}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1568, "end_line": 1568, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      y = p", "y1 = if use_pder then der(y) else 0", "y2 = if (use_pder and use_pder2) then der(y1) else 0", "connect(y1, pder)", "connect(y2, pder2)", "if use_fder then\r\n        connect(fder, u1)", "else\r\n        u1 = 0", "end if", "if (use_fder and use_fder2) then\r\n        connect(fder2, u2)", "else\r\n        u2 = 0", "end if", "if (use_fder and use_fder2) then\r\n        u = Functions.state2({f, u1, u2}, time)", "elseif (use_fder and not use_fder2) then\r\n        u = Functions.state1({f, u1}, time)", "else\r\n        u = f", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1456, "end_line": 1478, "start_col": 5, "end_col": 14}}, {"equations": ["y = p", "y1 = if use_pder then der(y) else 0", "y2 = if (use_pder and use_pder2) then der(y1) else 0", "connect(y1, pder)", "connect(y2, pder2)", "if use_fder then\r\n        connect(fder, u1)", "else\r\n        u1 = 0", "end if", "if (use_fder and use_fder2) then\r\n        connect(fder2, u2)", "else\r\n        u2 = 0", "end if", "if (use_fder and use_fder2) then\r\n        u = Functions.state2({f, u1, u2}, time)", "elseif (use_fder and not use_fder2) then\r\n        u = Functions.state1({f, u1}, time)", "else\r\n        u = f", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1457, "end_line": 1478, "start_col": 7, "end_col": 14}}, {"equations": ["if (use_fder and use_fder2) then\r\n        u = Functions.state2({f, u1, u2}, time)", "elseif (use_fder and not use_fder2) then\r\n        u = Functions.state1({f, u1}, time)", "else\r\n        u = f", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1472, "end_line": 1478, "start_col": 7, "end_col": 13}}, {"equations": ["u = f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1477, "end_line": 1477, "start_col": 9, "end_col": 15}}, {"equations": ["elseif (use_fder and not use_fder2) then\r\n        u = Functions.state1({f, u1}, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1474, "end_line": 1475, "start_col": 7, "end_col": 45}}, {"equations": ["u = Functions.state1({f, u1}, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1475, "end_line": 1475, "start_col": 9, "end_col": 45}}, {"equations": ["u = Functions.state2({f, u1, u2}, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1473, "end_line": 1473, "start_col": 9, "end_col": 49}}, {"equations": ["if (use_fder and use_fder2) then\r\n        connect(fder2, u2)", "else\r\n        u2 = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1467, "end_line": 1471, "start_col": 7, "end_col": 13}}, {"equations": ["u2 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1470, "end_line": 1470, "start_col": 9, "end_col": 16}}, {"equations": ["connect(fder2, u2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1468, "end_line": 1468, "start_col": 9, "end_col": 28}}, {"equations": ["if use_fder then\r\n        connect(fder, u1)", "else\r\n        u1 = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1462, "end_line": 1466, "start_col": 7, "end_col": 13}}, {"equations": ["u1 = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1465, "end_line": 1465, "start_col": 9, "end_col": 16}}, {"equations": ["connect(fder, u1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1463, "end_line": 1463, "start_col": 9, "end_col": 27}}, {"equations": ["y2 = if (use_pder and use_pder2) then der(y1) else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1459, "end_line": 1459, "start_col": 7, "end_col": 59}}, {"equations": ["y1 = if use_pder then der(y) else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1458, "end_line": 1458, "start_col": 7, "end_col": 42}}, {"equations": ["y = p"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1457, "end_line": 1457, "start_col": 7, "end_col": 12}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1456, "end_line": 1456, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n    // Draw random number at sample times\r\n    when generateNoise and sample(startTime, samplePeriod) then\r\n      (r_raw, state) = generator.random(pre(state))", "end when", "// Generate noise if requested\r\n    y = if not generateNoise or time < startTime then y_off else r"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1346, "end_line": 1353, "start_col": 3, "end_col": 68}}, {"equations": ["when generateNoise and sample(startTime, samplePeriod) then\r\n      (r_raw, state) = generator.random(pre(state))", "end when", "// Generate noise if requested\r\n    y = if not generateNoise or time < startTime then y_off else r"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1348, "end_line": 1353, "start_col": 5, "end_col": 68}}, {"equations": ["y = if not generateNoise or time < startTime then y_off else r"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1353, "end_line": 1353, "start_col": 5, "end_col": 67}}, {"equations": ["when generateNoise and sample(startTime, samplePeriod) then\r\n      (r_raw, state) = generator.random(pre(state))", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1348, "end_line": 1350, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1350, "end_line": 1350, "start_col": 9, "end_col": 13}}, {"equations": ["(r_raw, state) = generator.random(pre(state))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1349, "end_line": 1349, "start_col": 7, "end_col": 53}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1348, "end_line": 1348, "start_col": 5, "end_col": 9}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1346, "end_line": 1346, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n     localSeed = if useAutomaticLocalSeed then automaticLocalSeed(getInstanceName()) else fixedLocalSeed", "pre(state) = generator.initialState(localSeed, actualGlobalSeed)", "r_raw = generator.random(pre(state))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1341, "end_line": 1344, "start_col": 3, "end_col": 43}}, {"equations": ["localSeed = if useAutomaticLocalSeed then automaticLocalSeed(getInstanceName()) else fixedLocalSeed", "pre(state) = generator.initialState(localSeed, actualGlobalSeed)", "r_raw = generator.random(pre(state))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1342, "end_line": 1344, "start_col": 6, "end_col": 43}}, {"equations": ["r_raw = generator.random(pre(state))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1344, "end_line": 1344, "start_col": 6, "end_col": 42}}, {"equations": ["pre(state) = generator.initialState(localSeed, actualGlobalSeed)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1343, "end_line": 1343, "start_col": 6, "end_col": 70}}, {"equations": ["localSeed = if useAutomaticLocalSeed then automaticLocalSeed(getInstanceName()) else fixedLocalSeed"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1342, "end_line": 1342, "start_col": 6, "end_col": 105}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 1341, "end_line": 1341, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    connect(u_s, sampler_s.u) annotation (Line(points={{-120,0},{-92,0}}))", "connect(u_m, sampler_m.u)\r\n      annotation (Line(points={{0,-120},{0,-106},{0,-92}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 695, "end_line": 698, "start_col": 3, "end_col": 61}}, {"equations": ["connect(u_s, sampler_s.u) annotation (Line(points={{-120,0},{-92,0}}))", "connect(u_m, sampler_m.u)\r\n      annotation (Line(points={{0,-120},{0,-106},{0,-92}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 696, "end_line": 698, "start_col": 5, "end_col": 61}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 695, "end_line": 695, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(u_s, sampler_s.u) annotation (Line(points={{-120,0},{-102,0}}))", "connect(u_m, sampler_m.u)\r\n      annotation (Line(points={{0,-120},{0,-111},{0,-102}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 654, "end_line": 657, "start_col": 3, "end_col": 62}}, {"equations": ["connect(u_s, sampler_s.u) annotation (Line(points={{-120,0},{-102,0}}))", "connect(u_m, sampler_m.u)\r\n      annotation (Line(points={{0,-120},{0,-111},{0,-102}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 655, "end_line": 657, "start_col": 5, "end_col": 62}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 654, "end_line": 654, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    sampleTrigger = sample(startTime, samplePeriod)", "when sampleTrigger then\r\n      firstTrigger = time <= startTime + samplePeriod/2", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 546, "end_line": 550, "start_col": 3, "end_col": 14}}, {"equations": ["sampleTrigger = sample(startTime, samplePeriod)", "when sampleTrigger then\r\n      firstTrigger = time <= startTime + samplePeriod/2", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 547, "end_line": 550, "start_col": 5, "end_col": 14}}, {"equations": ["when sampleTrigger then\r\n      firstTrigger = time <= startTime + samplePeriod/2", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 548, "end_line": 550, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 550, "end_line": 550, "start_col": 9, "end_col": 13}}, {"equations": ["firstTrigger = time <= startTime + samplePeriod/2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 549, "end_line": 549, "start_col": 7, "end_col": 57}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 548, "end_line": 548, "start_col": 5, "end_col": 9}}, {"equations": ["sampleTrigger = sample(startTime, samplePeriod)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 547, "end_line": 547, "start_col": 5, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 546, "end_line": 546, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.InterfacesPackage | components: Real×8, Integer×1 | connections: 10 | params: nout, nin, n | units: nout, nout, nin | eq: algorithm sder2", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo", "start_line": 2, "end_line": 1749, "start_col": 1, "end_col": 15}, "code_text": "package Interfaces\r\n  \"Library of connectors and partial models for input/output blocks\"\r\n\r\n  extends Modelica.Icons.InterfacesPackage;\r\n\r\n  connector RealInput = input Real \"'input Real' as connector\" annotation (\r\n    defaultComponentName=\"u\",\r\n    Icon(graphics={\r\n      Polygon(\r\n        lineColor={0,0,127},\r\n        fillColor={0,0,127},\r\n        fillPattern=FillPattern.Solid,\r\n        points={{-100.0,100.0},{100.0,0.0},{-100.0,-100.0}})},\r\n      coordinateSystem(extent={{-100.0,-100.0},{100.0,100.0}},\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2)),\r\n    Diagram(\r\n      coordinateSystem(preserveAspectRatio=true,\r\n        initialScale=0.2,\r\n        extent={{-100.0,-100.0},{100.0,100.0}}),\r\n        graphics={\r\n      Polygon(\r\n        lineColor={0,0,127},\r\n        fillColor={0,0,127},\r\n        fillPattern=FillPattern.Solid,\r\n        points={{0.0,50.0},{100.0,0.0},{0.0,-50.0},{0.0,50.0}}),\r\n      Text(\r\n        textColor={0,0,127},\r\n        extent={{-10.0,60.0},{-10.0,85.0}},\r\n        textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nConnector with one input signal of type Real.\r\n</p>\r\n</html>\"));\r\n\r\n  connector RealOutput = output Real \"'output Real' as connector\" annotation (\r\n    defaultComponentName=\"y\",\r\n    Icon(\r\n      coordinateSystem(preserveAspectRatio=true,\r\n        extent={{-100.0,-100.0},{100.0,100.0}}),\r\n        graphics={\r\n      Polygon(\r\n        lineColor={0,0,127},\r\n        fillColor={255,255,255},\r\n        fillPattern=FillPattern.Solid,\r\n        points={{-100.0,100.0},{100.0,0.0},{-100.0,-100.0}})}),\r\n    Diagram(\r\n      coordinateSystem(preserveAspectRatio=true,\r\n        extent={{-100.0,-100.0},{100.0,100.0}}),\r\n        graphics={\r\n      Polygon(\r\n        lineColor={0,0,127},\r\n        fillColor={255,255,255},\r\n        fillPattern=FillPattern.Solid,\r\n        points={{-100.0,50.0},{0.0,0.0},{-100.0,-50.0}}),\r\n      Text(\r\n        textColor={0,0,127},\r\n        extent={{30.0,60.0},{30.0,110.0}},\r\n        textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nConnector with one output signal of type Real.\r\n</p>\r\n</html>\"));\r\n\r\n  connector BooleanInput = input Boolean \"'input Boolean' as connector\"\r\n    annotation (\r\n    defaultComponentName=\"u\",\r\n    Icon(graphics={Polygon(\r\n          points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,0,255},\r\n          fillPattern=FillPattern.Solid)}, coordinateSystem(\r\n        extent={{-100,-100},{100,100}},\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2)),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2,\r\n        extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n          points={{0,50},{100,0},{0,-50},{0,50}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,0,255},\r\n          fillPattern=FillPattern.Solid), Text(\r\n          extent={{-10,85},{-10,60}},\r\n          textColor={255,0,255},\r\n          textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nConnector with one input signal of type Boolean.\r\n</p>\r\n</html>\"));\r\n\r\n  connector BooleanOutput = output Boolean \"'output Boolean' as connector\"\r\n    annotation (\r\n    defaultComponentName=\"y\",\r\n    Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n          points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n          points={{-100,50},{0,0},{-100,-50},{-100,50}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid), Text(\r\n          extent={{30,110},{30,60}},\r\n          textColor={255,0,255},\r\n          textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nConnector with one output signal of type Boolean.\r\n</p>\r\n</html>\"));\r\n\r\n  connector IntegerInput = input Integer \"'input Integer' as connector\"\r\n    annotation (\r\n    defaultComponentName=\"u\",\r\n    Icon(graphics={Polygon(\r\n          points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n          lineColor={255,127,0},\r\n          fillColor={255,127,0},\r\n          fillPattern=FillPattern.Solid)}, coordinateSystem(\r\n        extent={{-100,-100},{100,100}},\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2)),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2,\r\n        extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n          points={{0,50},{100,0},{0,-50},{0,50}},\r\n          lineColor={255,127,0},\r\n          fillColor={255,127,0},\r\n          fillPattern=FillPattern.Solid), Text(\r\n          extent={{-10,85},{-10,60}},\r\n          textColor={255,127,0},\r\n          textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nConnector with one input signal of type Integer.\r\n</p>\r\n</html>\"));\r\n\r\n  connector IntegerOutput = output Integer \"'output Integer' as connector\"\r\n    annotation (\r\n    defaultComponentName=\"y\",\r\n    Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n          points={{-100,100},{100,0},{-100,-100},{-100,100}},\r\n          lineColor={255,127,0},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={Polygon(\r\n          points={{-100,50},{0,0},{-100,-50},{-100,50}},\r\n          lineColor={255,127,0},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid), Text(\r\n          extent={{30,110},{30,60}},\r\n          textColor={255,127,0},\r\n          textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nConnector with one output signal of type Integer.\r\n</p>\r\n</html>\"));\r\n\r\n  connector RealVectorInput = input Real\r\n    \"Real input connector used for vector of connectors\" annotation (\r\n    defaultComponentName=\"u\",\r\n    Icon(graphics={Ellipse(\r\n          extent={{-100,100},{100,-100}},\r\n          lineColor={0,0,127},\r\n          fillColor={0,0,127},\r\n          fillPattern=FillPattern.Solid)}, coordinateSystem(\r\n        extent={{-100,-100},{100,100}},\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2)),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        initialScale=0.2,\r\n        extent={{-100,-100},{100,100}}), graphics={Text(\r\n          extent={{-10,85},{-10,60}},\r\n          textColor={0,0,127},\r\n          textString=\"%name\"), Ellipse(\r\n          extent={{-50,50},{50,-50}},\r\n          lineColor={0,0,127},\r\n          fillColor={0,0,127},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nReal input connector that is used for a vector of connectors,\r\nfor example <a href=\\\"modelica://Modelica.Blocks.Interfaces.PartialRealMISO\\\">PartialRealMISO</a>,\r\nand has therefore a different icon as RealInput connector.\r\n</p>\r\n</html>\"));\r\n\r\n  connector IntegerVectorInput = input Integer\r\n    \"Integer input connector used for vector of connectors\" annotation (\r\n    defaultComponentName=\"u\",\r\n    Icon(graphics={Ellipse(\r\n          extent={{-100,100},{100,-100}},\r\n          lineColor={255,128,0},\r\n          fillColor={255,128,0},\r\n          fillPattern=FillPattern.Solid)}, coordinateSystem(\r\n        extent={{-100,-100},{100,100}},\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2)),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        initialScale=0.2,\r\n        extent={{-100,-100},{100,100}}), graphics={Text(\r\n          extent={{-10,85},{-10,60}},\r\n          textColor={255,128,0},\r\n          textString=\"%name\"), Ellipse(\r\n          extent={{-50,50},{50,-50}},\r\n          lineColor={255,128,0},\r\n          fillColor={255,128,0},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Documentation(info=\"<html>\r\n\r\n<p>\r\nInteger input connector that is used for a vector of connectors,\r\nfor example <a href=\\\"modelica://Modelica.Blocks.Interfaces.PartialIntegerMISO\\\">PartialIntegerMISO</a>,\r\nand has therefore a different icon as IntegerInput connector.\r\n</p>\r\n</html>\"));\r\n\r\n  connector BooleanVectorInput = input Boolean\r\n    \"Boolean input connector used for vector of connectors\" annotation (\r\n    defaultComponentName=\"u\",\r\n    Icon(graphics={Ellipse(\r\n          extent={{-100,-100},{100,100}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,0,255},\r\n          fillPattern=FillPattern.Solid)}, coordinateSystem(\r\n        extent={{-100,-100},{100,100}},\r\n        preserveAspectRatio=false,\r\n        initialScale=0.2)),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        initialScale=0.2,\r\n        extent={{-100,-100},{100,100}}), graphics={Text(\r\n          extent={{-10,85},{-10,60}},\r\n          textColor={255,0,255},\r\n          textString=\"%name\"), Ellipse(\r\n          extent={{-50,50},{50,-50}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,0,255},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nBoolean input connector that is used for a vector of connectors,\r\nfor example <a href=\\\"modelica://Modelica.Blocks.Interfaces.PartialBooleanMISO\\\">PartialBooleanMISO</a>,\r\nand has therefore a different icon as BooleanInput connector.\r\n</p>\r\n</html>\"));\r\n\r\n  connector RealVectorOutput = output Real\r\n    \"Real output connector used for vector of connectors\" annotation (\r\n    defaultComponentName=\"y\",\r\n    Icon(graphics={Ellipse(\r\n          extent={{-100,100},{100,-100}},\r\n          lineColor={0,0,127},\r\n          fillColor={0,0,127},\r\n          fillPattern=FillPattern.Solid)}, coordinateSystem(\r\n        extent={{-100,-100},{100,100}},\r\n        preserveAspectRatio=true,\r\n        initialScale=0.2)),\r\n    Diagram(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        initialScale=0.2,\r\n        extent={{-100,-100},{100,100}}), graphics={Text(\r\n          extent={{-10,85},{-10,60}},\r\n          textColor={0,0,127},\r\n          textString=\"%name\"), Ellipse(\r\n          extent={{-50,50},{50,-50}},\r\n          lineColor={0,0,127},\r\n          fillColor={0,0,127},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nReal output connector that is used for a vector of connectors,\r\nfor example <a href=\\\"modelica://Modelica.Blocks.Routing.DeMultiplex\\\">DeMultiplex</a>,\r\nand has therefore a different icon as RealOutput connector.\r\n</p>\r\n</html>\"));\r\n\r\n  partial block SO \"Single Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    RealOutput y \"Connector of Real output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Real output signal.\r\n</p>\r\n</html>\"));\r\n\r\n  end SO;\r\n\r\n  partial block MO \"Multiple Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    parameter Integer nout(min=1) = 1 \"Number of outputs\";\r\n    RealOutput y[nout] \"Connector of Real output signals\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Real output signal vector.\r\n</p>\r\n</html>\"));\r\n\r\n  end MO;\r\n\r\n  partial block SISO \"Single Input Single Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    RealInput u \"Connector of Real input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    RealOutput y \"Connector of Real output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Real input and one continuous Real output signal.\r\n</p>\r\n</html>\"));\r\n  end SISO;\r\n\r\n  partial block SI2SO\r\n    \"2 Single Input / 1 Single Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    RealInput u1 \"Connector of Real input signal 1\" annotation (Placement(\r\n          transformation(extent={{-140,40},{-100,80}})));\r\n    RealInput u2 \"Connector of Real input signal 2\" annotation (Placement(\r\n          transformation(extent={{-140,-80},{-100,-40}})));\r\n    RealOutput y \"Connector of Real output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has two continuous Real input signals u1 and u2 and one\r\ncontinuous Real output signal y.\r\n</p>\r\n</html>\"));\r\n\r\n  end SI2SO;\r\n\r\n  partial block SIMO \"Single Input Multiple Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n    parameter Integer nout=1 \"Number of outputs\";\r\n    RealInput u \"Connector of Real input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    RealOutput y[nout] \"Connector of Real output signals\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p> Block has one continuous Real input signal and a\r\n    vector of continuous Real output signals.</p>\r\n\r\n</html>\"));\r\n  end SIMO;\r\n\r\n  partial block MISO \"Multiple Input Single Output continuous control block\"\r\n\r\n    extends Modelica.Blocks.Icons.Block;\r\n    parameter Integer nin=1 \"Number of inputs\";\r\n    RealInput u[nin] \"Connector of Real input signals\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    RealOutput y \"Connector of Real output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a vector of continuous Real input signals and\r\none continuous Real output signal.\r\n</p>\r\n</html>\"));\r\n  end MISO;\r\n\r\n  partial block PartialRealMISO\r\n    \"Partial block with a RealVectorInput and a RealOutput signal\"\r\n\r\n    parameter Integer significantDigits(min=1) = 3\r\n      \"Number of significant digits to be shown in dynamic diagram layer for y\"\r\n      annotation (Dialog(tab=\"Advanced\"));\r\n    parameter Integer nu(min=0) = 0 \"Number of input connections\"\r\n      annotation (Dialog(connectorSizing=true), HideResult=true);\r\n    Modelica.Blocks.Interfaces.RealVectorInput u[nu]\r\n      annotation (Placement(transformation(extent={{-120,70},{-80,-70}})));\r\n    Modelica.Blocks.Interfaces.RealOutput y\r\n      annotation (Placement(transformation(extent={{100,-17},{134,17}})));\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}},\r\n          initialScale=0.06), graphics={\r\n          Text(\r\n            extent={{110,-50},{300,-70}},\r\n            textString=DynamicSelect(\" \", String(y, significantDigits=\r\n                significantDigits))),\r\n          Text(\r\n            extent={{-250,170},{250,110}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            lineColor={255,137,0},\r\n            fillColor={255,255,255},\r\n            borderPattern=BorderPattern.Raised,\r\n            fillPattern=FillPattern.Solid)}));\r\n  end PartialRealMISO;\r\n\r\n  partial block MIMO \"Multiple Input Multiple Output continuous control block\"\r\n\r\n    extends Modelica.Blocks.Icons.Block;\r\n    parameter Integer nin=1 \"Number of inputs\";\r\n    parameter Integer nout=1 \"Number of outputs\";\r\n    RealInput u[nin] \"Connector of Real input signals\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    RealOutput y[nout] \"Connector of Real output signals\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a continuous Real input and a continuous Real output signal vector.\r\nThe signal sizes of the input and output vector may be different.\r\n</p>\r\n</html>\"));\r\n  end MIMO;\r\n\r\n  partial block MIMOs\r\n    \"Multiple Input Multiple Output continuous control block with same number of inputs and outputs\"\r\n\r\n    extends Modelica.Blocks.Icons.Block;\r\n    parameter Integer n=1 \"Number of inputs (= number of outputs)\";\r\n    RealInput u[n] \"Connector of Real input signals\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    RealOutput y[n] \"Connector of Real output signals\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a continuous Real input and a continuous Real output signal vector\r\nwhere the signal sizes of the input and output vector are identical.\r\n</p>\r\n</html>\"));\r\n  end MIMOs;\r\n\r\n  partial block MI2MO\r\n    \"2 Multiple Input / Multiple Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    parameter Integer n=1 \"Dimension of input and output vectors.\";\r\n\r\n    RealInput u1[n] \"Connector 1 of Real input signals\" annotation (Placement(\r\n          transformation(extent={{-140,40},{-100,80}})));\r\n    RealInput u2[n] \"Connector 2 of Real input signals\" annotation (Placement(\r\n          transformation(extent={{-140,-80},{-100,-40}})));\r\n    RealOutput y[n] \"Connector of Real output signals\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has two continuous Real input vectors u1 and u2 and one\r\ncontinuous Real output vector y.\r\nAll vectors have the same number of elements.\r\n</p>\r\n</html>\"));\r\n\r\n  end MI2MO;\r\n\r\n  partial block SignalSource \"Base class for continuous signal source\"\r\n    extends SO;\r\n    parameter Real offset=0 \"Offset of output signal y\";\r\n    parameter SI.Time startTime=0 \"Output y = offset for time < startTime\";\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBasic block for Real sources of package Blocks.Sources.\r\nThis component has one continuous Real output signal y\r\nand two parameters (offset, startTime) to shift the\r\ngenerated signal.\r\n</p>\r\n</html>\"));\r\n  end SignalSource;\r\n\r\n  partial block SVcontrol \"Single-Variable continuous controller\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    RealInput u_s \"Connector of setpoint input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    RealInput u_m \"Connector of measurement input signal\" annotation (Placement(\r\n          transformation(\r\n          origin={0,-120},\r\n          extent={{20,-20},{-20,20}},\r\n          rotation=270)));\r\n    RealOutput y \"Connector of actuator output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has two continuous Real input signals and one\r\ncontinuous Real output signal. The block is designed\r\nto be used as base class for a corresponding controller.\r\n</p>\r\n</html>\"));\r\n  end SVcontrol;\r\n\r\n  partial block MVcontrol \"Multi-Variable continuous controller\"\r\n    extends Modelica.Blocks.Icons.Block;\r\n\r\n    parameter Integer nu_s=1 \"Number of setpoint inputs\";\r\n    parameter Integer nu_m=1 \"Number of measurement inputs\";\r\n    parameter Integer ny=1 \"Number of actuator outputs\";\r\n    RealInput u_s[nu_s] \"Connector of setpoint input signals\" annotation (\r\n        Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    RealInput u_m[nu_m] \"Connector of measurement input signals\" annotation (\r\n        Placement(transformation(\r\n          origin={0,-120},\r\n          extent={{20,-20},{-20,20}},\r\n          rotation=270)));\r\n    RealOutput y[ny] \"Connector of actuator output signals\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has two continuous Real input signal vectors and one\r\ncontinuous Real output signal vector. The block is designed\r\nto be used as base class for a corresponding controller.\r\n</p>\r\n</html>\"));\r\n  end MVcontrol;\r\n\r\n  partial block DiscreteBlock \"Base class of discrete control blocks\"\r\n    extends Modelica.Blocks.Icons.DiscreteBlock;\r\n\r\n    parameter SI.Time samplePeriod(min=100*Modelica.Constants.eps, start=0.1)\r\n      \"Sample period of component\";\r\n    parameter SI.Time startTime=0 \"First sample time instant\";\r\n  protected\r\n    output Boolean sampleTrigger \"True, if sample time instant\";\r\n    output Boolean firstTrigger(start=false, fixed=true)\r\n      \"Rising edge signals first sample instant\";\r\n  equation\r\n    sampleTrigger = sample(startTime, samplePeriod);\r\n    when sampleTrigger then\r\n      firstTrigger = time <= startTime + samplePeriod/2;\r\n    end when;\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBasic definitions of a discrete block of library\r\nBlocks.Discrete.\r\nThe output(s) will only change at events, but are not formally a discrete variable(s) in Modelica.\r\nThe input(s) will be sampled, and can thus be continuous variable(s).\r\n</p>\r\n\r\n<p>\r\n<strong>Important</strong>: If you connect several discrete blocks you should normally ensure that <strong>samplePeriod (and startTime)\r\nare exactly identical</strong> for all blocks, since otherwise the output from one block will be transformed into a continuous signal\r\nand sampled, which can cause a variable delay of up to one sample period leading to unexpected results.\r\n</p>\r\n\r\n<p>\r\nModelica 3.3 introduced synchronous operators that avoid the need to manually propagate samplePeriod to each block.\r\n</p>\r\n</html>\"));\r\n  end DiscreteBlock;\r\n\r\n  partial block DiscreteSISO\r\n    \"Single Input Single Output discrete control block\"\r\n\r\n    extends DiscreteBlock;\r\n\r\n    Modelica.Blocks.Interfaces.RealInput u \"Connector of Real input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Modelica.Blocks.Interfaces.RealOutput y \"Connector of Real output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one input and one output signal\r\nwhich are sampled due to the defined <strong>samplePeriod</strong> parameter.\r\nSee the base-class <a href=\\\"modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\\">DiscreteBlock</a> for more information.\r\n</p>\r\n</html>\"));\r\n  end DiscreteSISO;\r\n\r\n  partial block DiscreteMIMO\r\n    \"Multiple Input Multiple Output discrete control block\"\r\n\r\n    extends DiscreteBlock;\r\n    parameter Integer nin=1 \"Number of inputs\";\r\n    parameter Integer nout=1 \"Number of outputs\";\r\n\r\n    Modelica.Blocks.Interfaces.RealInput u[nin] \"Connector of Real input signals\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Modelica.Blocks.Interfaces.RealOutput y[nout] \"Connector of Real output signals\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a input and a output signal vector\r\nwhich are sampled due to the defined <strong>samplePeriod</strong> parameter.\r\nSee the base-class <a href=\\\"modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\\">DiscreteBlock</a> for more information.\r\n</p>\r\n</html>\"));\r\n  end DiscreteMIMO;\r\n\r\n  partial block DiscreteMIMOs\r\n    \"Multiple Input Multiple Output discrete control block\"\r\n    parameter Integer n=1 \"Number of inputs (= number of outputs)\";\r\n    extends DiscreteBlock;\r\n\r\n    Modelica.Blocks.Interfaces.RealInput u[n] \"Connector of Real input signals\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Modelica.Blocks.Interfaces.RealOutput y[n] \"Connector of Real output signals\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a input and a output signal vector\r\nwhere the signal sizes of the input and output vector are identical.\r\nThese signals are sampled due to the defined <strong>samplePeriod</strong> parameter.\r\nSee the base-class <a href=\\\"modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\\">DiscreteBlock</a> for more information.\r\n</p>\r\n</html>\"));\r\n\r\n  end DiscreteMIMOs;\r\n\r\n  partial block SVdiscrete \"Discrete Single-Variable controller\"\r\n    extends DiscreteBlock;\r\n\r\n    Discrete.Sampler sampler_s(final samplePeriod=samplePeriod, final startTime=\r\n         startTime) annotation (Placement(transformation(extent={{-100,-10},{-80,\r\n              10}})));\r\n    Discrete.Sampler sampler_m(final samplePeriod=samplePeriod, final startTime=\r\n         startTime) annotation (Placement(transformation(\r\n          origin={0,-90},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=90)));\r\n    Modelica.Blocks.Interfaces.RealInput u_s\r\n      \"Scalar setpoint input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    Modelica.Blocks.Interfaces.RealInput u_m\r\n      \"Scalar measurement input signal\" annotation (Placement(\r\n          transformation(\r\n          origin={0,-120},\r\n          extent={{20,-20},{-20,20}},\r\n          rotation=270)));\r\n    Modelica.Blocks.Interfaces.RealOutput y\r\n      \"Scalar actuator output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n  equation\r\n    connect(u_s, sampler_s.u) annotation (Line(points={{-120,0},{-102,0}}));\r\n    connect(u_m, sampler_m.u)\r\n      annotation (Line(points={{0,-120},{0,-111},{0,-102}}));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has two Real input signals and one\r\nReal output signal\r\nthat are sampled due to the defined <strong>samplePeriod</strong> parameter.\r\nThe block is designed\r\nto be used as base class for a corresponding controller.\r\nSee the base-class <a href=\\\"modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\\">DiscreteBlock</a> for more information.\r\n</p>\r\n</html>\"));\r\n  end SVdiscrete;\r\n\r\n  partial block MVdiscrete \"Discrete Multi-Variable controller\"\r\n    extends DiscreteBlock;\r\n    parameter Integer nu_s=1 \"Number of setpoint inputs\";\r\n    parameter Integer nu_m=1 \"Number of measurement inputs\";\r\n    parameter Integer ny=1 \"Number of actuator outputs\";\r\n    Discrete.Sampler sampler_s[nu_s](each final samplePeriod=samplePeriod,\r\n        each final startTime=startTime) annotation (Placement(transformation(\r\n            extent={{-90,-10},{-70,10}})));\r\n    Discrete.Sampler sampler_m[nu_m](each final samplePeriod=samplePeriod,\r\n        each final startTime=startTime) annotation (Placement(transformation(\r\n          origin={0,-80},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=90)));\r\n    Modelica.Blocks.Interfaces.RealInput u_s[nu_s]\r\n      \"Setpoint input signals\" annotation (Placement(transformation(\r\n            extent={{-140,-20},{-100,20}})));\r\n    Modelica.Blocks.Interfaces.RealInput u_m[nu_m]\r\n      \"Measurement input signals\" annotation (Placement(\r\n          transformation(\r\n          origin={0,-120},\r\n          extent={{20,-20},{-20,20}},\r\n          rotation=270)));\r\n    Modelica.Blocks.Interfaces.RealOutput y[ny]\r\n      \"Actuator output signals\" annotation (Placement(transformation(\r\n            extent={{100,-10},{120,10}})));\r\n  equation\r\n    connect(u_s, sampler_s.u) annotation (Line(points={{-120,0},{-92,0}}));\r\n    connect(u_m, sampler_m.u)\r\n      annotation (Line(points={{0,-120},{0,-106},{0,-92}}));\r\n    annotation (Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n              -100},{100,100}}), graphics={Text(\r\n              extent={{-100,-10},{-80,-30}},\r\n              textString=\"u_s\",\r\n              textColor={0,0,255})}),         Documentation(info=\"<html>\r\n<p>\r\nBlock has two Real input signal vectors and one\r\nReal output signal vector. The vector signals\r\nare sampled due to the defined <strong>samplePeriod</strong> parameter.\r\nThe block is designed\r\nto be used as base class for a corresponding controller.\r\nSee the base-class <a href=\\\"modelica://Modelica.Blocks.Interfaces.DiscreteBlock\\\">DiscreteBlock</a> for more information.\r\n</p>\r\n</html>\"));\r\n  end MVdiscrete;\r\n\r\n  partial block BooleanSISO\r\n    \"Single Input Single Output control block with signals of type Boolean\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n\r\n  public\r\n    BooleanInput u \"Connector of Boolean input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    BooleanOutput y \"Connector of Boolean output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Boolean input and one continuous Boolean output signal.\r\n</p>\r\n</html>\"));\r\n  end BooleanSISO;\r\n\r\n  partial block BooleanMIMOs\r\n    \"Multiple Input Multiple Output continuous control block with same number of inputs and outputs of Boolean type\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n    parameter Integer n=1 \"Number of inputs (= number of outputs)\";\r\n    BooleanInput u[n] \"Connector of Boolean input signals\" annotation (\r\n        Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    BooleanOutput y[n] \"Connector of Boolean output signals\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a continuous Boolean input and a continuous Boolean output signal vector\r\nwhere the signal sizes of the input and output vector are identical.\r\n</p>\r\n</html>\"));\r\n  end BooleanMIMOs;\r\n\r\n  partial block MI2BooleanMOs\r\n    \"2 Multiple Input / Boolean Multiple Output block with same signal lengths\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n    parameter Integer n=1 \"Dimension of input and output vectors.\";\r\n    RealInput u1[n] \"Connector 1 of Boolean input signals\" annotation (\r\n        Placement(transformation(extent={{-140,40},{-100,80}})));\r\n    RealInput u2[n] \"Connector 2 of Boolean input signals\" annotation (\r\n        Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n    BooleanOutput y[n] \"Connector of Boolean output signals\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>Block has two Boolean input vectors u1 and u2 and one Boolean output\r\nvector y. All vectors have the same number of elements.</p>\r\n</html>\"));\r\n  end MI2BooleanMOs;\r\n\r\n  partial block SI2BooleanSO \"2 Single Input / Boolean Single Output block\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n    BooleanInput u1 \"Connector 1 of Boolean input signals\" annotation (\r\n        Placement(transformation(extent={{-140,40},{-100,80}})));\r\n    BooleanInput u2 \"Connector 2 of Boolean input signals\" annotation (\r\n        Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n    BooleanOutput y \"Connector of Boolean output signals\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has two Boolean input signals u1 and u2 and one Boolean output signal y.\r\n</p>\r\n</html>\"));\r\n\r\n  end SI2BooleanSO;\r\n\r\n  partial block BooleanSignalSource \"Base class for Boolean signal sources\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n    BooleanOutput y \"Connector of Boolean output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-80,68},{-80,-80}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{-80,90},{-88,68},{-72,68},{-80,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-90,-70},{68,-70}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{90,-70},{68,-62},{68,-78},{90,-70}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid)}), Documentation(info=\"<html>\r\n<p>\r\nBasic block for Boolean sources of package Blocks.Sources.\r\nThis component has one continuous Boolean output signal y.\r\n</p>\r\n</html>\"));\r\n\r\n  end BooleanSignalSource;\r\n\r\n  partial block IntegerSO \"Single Integer Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.IntegerBlock;\r\n\r\n    IntegerOutput y \"Connector of Integer output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Integer output signal.\r\n</p>\r\n</html>\"));\r\n  end IntegerSO;\r\n\r\n  partial block IntegerMO \"Multiple Integer Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.IntegerBlock;\r\n\r\n    parameter Integer nout(min=1) = 1 \"Number of outputs\";\r\n    IntegerOutput y[nout] \"Connector of Integer output signals\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Integer output signal vector.\r\n</p>\r\n</html>\"));\r\n  end IntegerMO;\r\n\r\n  partial block IntegerSignalSource\r\n    \"Base class for continuous Integer signal source\"\r\n    extends IntegerSO;\r\n    parameter Integer offset=0 \"Offset of output signal y\";\r\n    parameter SI.Time startTime=0 \"Output y = offset for time < startTime\";\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBasic block for Integer sources of package Blocks.Sources.\r\nThis component has one continuous Integer output signal y\r\nand two parameters (offset, startTime) to shift the\r\ngenerated signal.\r\n</p>\r\n</html>\"));\r\n  end IntegerSignalSource;\r\n\r\n  partial block IntegerSIBooleanSO\r\n    \"Integer Input Boolean Output continuous control block\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n    IntegerInput u \"Connector of Integer input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    BooleanOutput y \"Connector of Boolean output signal\" annotation (Placement(\r\n          transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a continuous Integer input and a continuous Boolean output signal.\r\n</p>\r\n</html>\"));\r\n  end IntegerSIBooleanSO;\r\n\r\n  partial block IntegerMIBooleanMOs\r\n    \"Multiple Integer Input Multiple Boolean Output continuous control block with same number of inputs and outputs\"\r\n\r\n    extends Modelica.Blocks.Icons.BooleanBlock;\r\n    parameter Integer n=1 \"Number of inputs (= number of outputs)\";\r\n    IntegerInput u[n] \"Connector of Integer input signals\" annotation (\r\n        Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    BooleanOutput y[n] \"Connector of Boolean output signals\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nBlock has a continuous Integer input and a continuous Boolean output signal vector\r\nwhere the signal sizes of the input and output vector are identical.\r\n</p>\r\n</html>\"));\r\n  end IntegerMIBooleanMOs;\r\n\r\n  partial block PartialIntegerSISO\r\n    \"Partial block with a IntegerInput and an IntegerOutput signal\"\r\n\r\n    Modelica.Blocks.Interfaces.IntegerInput u \"Integer input signal\"\r\n      annotation (Placement(transformation(extent={{-180,-40},{-100,40}})));\r\n    Modelica.Blocks.Interfaces.IntegerOutput y \"Integer output signal\"\r\n      annotation (Placement(transformation(extent={{100,-20},{140,20}})));\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=false,\r\n          extent={{-100,-100},{100,100}},\r\n          initialScale=0.06), graphics={\r\n          Text(\r\n            extent={{110,-50},{250,-70}},\r\n            textString=DynamicSelect(\" \", String(\r\n                  y,\r\n                  minimumLength=1,\r\n                  significantDigits=0))),\r\n          Text(\r\n            extent={{-150,150},{150,110}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor={255,213,170},\r\n            fillPattern=FillPattern.Solid,\r\n            borderPattern=BorderPattern.Raised)}));\r\n  end PartialIntegerSISO;\r\n\r\n  partial block PartialIntegerMISO\r\n    \"Partial block with an IntegerVectorInput and an IntegerOutput signal\"\r\n\r\n    parameter Integer nu(min=0) = 0 \"Number of input connections\"\r\n      annotation (Dialog(connectorSizing=true), HideResult=true);\r\n    Modelica.Blocks.Interfaces.IntegerVectorInput u[nu]\r\n      \"Vector of Integer input signals\"\r\n      annotation (Placement(transformation(extent={{-120,70},{-80,-70}})));\r\n    Modelica.Blocks.Interfaces.IntegerOutput y \"Integer output signal\"\r\n      annotation (Placement(transformation(extent={{100,-15},{130,15}})));\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}},\r\n          initialScale=0.06), graphics={\r\n          Text(\r\n            extent={{110,-50},{250,-70}},\r\n            textString=DynamicSelect(\" \", String(\r\n                  y,\r\n                  minimumLength=1,\r\n                  significantDigits=0))),\r\n          Text(\r\n            extent={{-150,150},{150,110}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            lineColor={255,137,0},\r\n            fillColor={255,213,170},\r\n            borderPattern=BorderPattern.Raised,\r\n            fillPattern=FillPattern.Solid)}));\r\n  end PartialIntegerMISO;\r\n\r\n  partial block partialBooleanSISO\r\n    \"Partial block with 1 input and 1 output Boolean signal\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    Blocks.Interfaces.BooleanInput u \"Connector of Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Ellipse(\r\n            extent={{-71,7},{-85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if u then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid), Ellipse(\r\n            extent={{71,7},{85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}), Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Boolean input and one continuous Boolean output signal\r\nwith a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanSISO;\r\n\r\n  partial block partialBooleanSI2SO\r\n    \"Partial block with 2 input and 1 output Boolean signal\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    Blocks.Interfaces.BooleanInput u1 \"Connector of first Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanInput u2\r\n      \"Connector of second Boolean input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-100},{-100,-60}})));\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Ellipse(\r\n            extent={{-71,7},{-85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if u1 then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u1 then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(\r\n            extent={{-71,-74},{-85,-88}},\r\n            lineColor=DynamicSelect({235,235,235}, if u2 then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u2 then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(\r\n            extent={{71,7},{85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}), Documentation(info=\"<html>\r\n<p>\r\nBlock has two continuous Boolean input and one continuous Boolean output signal\r\nwith a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanSI2SO;\r\n\r\n  partial block partialBooleanSI3SO\r\n    \"Partial block with 3 input and 1 output Boolean signal\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    Blocks.Interfaces.BooleanInput u1 \"Connector of first Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,60},{-100,100}})));\r\n    Blocks.Interfaces.BooleanInput u2\r\n      \"Connector of second Boolean input signal\" annotation (Placement(\r\n          transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanInput u3 \"Connector of third Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Ellipse(\r\n            extent={{-71,74},{-85,88}},\r\n            lineColor=DynamicSelect({235,235,235}, if u1 then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u1 then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(\r\n            extent={{-71,7},{-85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if u2 then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u2 then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(\r\n            extent={{-71,-74},{-85,-88}},\r\n            lineColor=DynamicSelect({235,235,235}, if u3 then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u3 then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(\r\n            extent={{71,7},{85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}), Documentation(info=\"<html><p>\r\nBlock has three continuous Boolean input and one continuous Boolean output signal\r\nwith a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanSI3SO;\r\n\r\n  partial block partialBooleanSI \"Partial block with 1 input Boolean signal\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n\r\n    Blocks.Interfaces.BooleanInput u \"Connector of Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Ellipse(\r\n            extent={{-71,7},{-85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if u then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if u then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}), Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Boolean input signal\r\nwith a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanSI;\r\n\r\n  partial block partialBooleanSO \"Partial block with 1 output Boolean signal\"\r\n\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Ellipse(\r\n            extent={{71,7},{85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}), Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Boolean output signal\r\nwith a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanSO;\r\n\r\n  partial block partialBooleanSource\r\n    \"Partial source block (has 1 output Boolean signal and an appropriate default icon)\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={\r\n          Polygon(\r\n            points={{-80,88},{-88,66},{-72,66},{-80,88}},\r\n            lineColor={255,0,255},\r\n            fillColor={255,0,255},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-80,66},{-80,-82}}, color={255,0,255}),\r\n          Line(points={{-90,-70},{72,-70}}, color={255,0,255}),\r\n          Polygon(\r\n            points={{90,-70},{68,-62},{68,-78},{90,-70}},\r\n            lineColor={255,0,255},\r\n            fillColor={255,0,255},\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(\r\n            extent={{71,7},{85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nBasic block for Boolean sources of package Blocks.Sources.\r\nThis component has one continuous Boolean output signal y\r\nand a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanSource;\r\n\r\n  partial block partialBooleanThresholdComparison\r\n    \"Partial block to compare the Real input u with a threshold and provide the result as 1 Boolean output signal\"\r\n\r\n    parameter Real threshold=0 \"Comparison with respect to threshold\";\r\n\r\n    Blocks.Interfaces.RealInput u \"Connector of Real input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor={210,210,210},\r\n            fillPattern=FillPattern.Solid,\r\n            borderPattern=BorderPattern.Raised),\r\n          Text(\r\n            extent={{-150,-140},{150,-110}},\r\n            textString=\"%threshold\"),\r\n          Ellipse(\r\n            extent={{71,7},{85,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid), Text(\r\n            extent={{-150,150},{150,110}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255})}), Documentation(info=\"<html>\r\n<p>\r\nBlock has one continuous Real input and one continuous Boolean output signal\r\nas well as a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanThresholdComparison;\r\n\r\n  partial block partialBooleanComparison\r\n    \"Partial block with 2 Real input and 1 Boolean output signal (the result of a comparison of the two Real inputs)\"\r\n\r\n    Blocks.Interfaces.RealInput u1 \"Connector of first Real input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.RealInput u2 \"Connector of second Real input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));\r\n    Blocks.Interfaces.BooleanOutput y \"Connector of Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor={210,210,210},\r\n            fillPattern=FillPattern.Solid,\r\n            borderPattern=BorderPattern.Raised),\r\n          Ellipse(\r\n            extent={{73,7},{87,-7}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid),\r\n          Ellipse(extent={{32,10},{52,-10}}, lineColor={0,0,127}),\r\n          Line(points={{-100,-80},{42,-80},{42,0}}, color={0,0,127}),\r\n                                                 Text(\r\n            extent={{-150,150},{150,110}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255})}),\r\n        Documentation(info=\"<html>\r\n<p>\r\nBlock has two continuous Real input and one continuous Boolean output signal\r\nas a result of the comparison of the two input signals. The block\r\nhas a 3D icon (e.g., used in Blocks.Logical library).\r\n</p>\r\n</html>\"));\r\n\r\n  end partialBooleanComparison;\r\n\r\n  partial block PartialBooleanSISO_small\r\n    \"Partial block with a BooleanInput and a BooleanOutput signal and a small block icon\"\r\n\r\n    Modelica.Blocks.Interfaces.BooleanInput u \"Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-180,-40},{-100,40}})));\r\n    Modelica.Blocks.Interfaces.BooleanOutput y \"Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-20},{140,20}})));\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}},\r\n          initialScale=0.04), graphics={\r\n          Text(\r\n            extent={{-300,200},{300,120}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor={215,215,215},\r\n            fillPattern=FillPattern.Solid,\r\n            borderPattern=BorderPattern.Raised),\r\n          Ellipse(\r\n            extent={{60,10},{80,-10}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}));\r\n  end PartialBooleanSISO_small;\r\n\r\n  partial block PartialBooleanMISO\r\n    \"Partial block with a BooleanVectorInput and a BooleanOutput signal\"\r\n\r\n    parameter Integer nu(min=0) = 0 \"Number of input connections\"\r\n      annotation (Dialog(connectorSizing=true), HideResult=true);\r\n    Modelica.Blocks.Interfaces.BooleanVectorInput u[nu]\r\n      \"Vector of Boolean input signals\"\r\n      annotation (Placement(transformation(extent={{-120,70},{-80,-70}})));\r\n    Modelica.Blocks.Interfaces.BooleanOutput y \"Boolean output signal\"\r\n      annotation (Placement(transformation(extent={{100,-15},{130,15}})));\r\n    annotation (Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}},\r\n          initialScale=0.06), graphics={\r\n          Text(\r\n            extent={{-250,170},{250,110}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Rectangle(\r\n            extent={{-100,100},{100,-100}},\r\n            fillColor={215,215,215},\r\n            fillPattern=FillPattern.Solid,\r\n            borderPattern=BorderPattern.Raised),\r\n          Ellipse(\r\n            extent={{60,10},{80,-10}},\r\n            lineColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillColor=DynamicSelect({235,235,235}, if y then {0,255,0} else {235,235,235}),\r\n            fillPattern=FillPattern.Solid)}));\r\n  end PartialBooleanMISO;\r\n\r\n  partial block PartialConversionBlock\r\n    \"Partial block defining the interface for conversion blocks\"\r\n\r\n    RealInput u \"Connector of Real input signal to be converted\" annotation (\r\n        Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    RealOutput y\r\n      \"Connector of Real output signal containing input signal u in another unit\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n    annotation (\r\n      Icon(\r\n        coordinateSystem(preserveAspectRatio=true,\r\n          extent={{-100.0,-100.0},{100.0,100.0}}),\r\n          graphics={\r\n        Rectangle(\r\n          lineColor={0,0,127},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid,\r\n          extent={{-100.0,-100.0},{100.0,100.0}}),\r\n        Line(\r\n          points={{-90.0,0.0},{30.0,0.0}},\r\n          color={191,0,0}),\r\n        Polygon(\r\n          lineColor={191,0,0},\r\n          fillColor={191,0,0},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{90.0,0.0},{30.0,20.0},{30.0,-20.0},{90.0,0.0}}),\r\n        Text(\r\n          textColor={0,0,255},\r\n          extent={{-150,110},{150,150}},\r\n          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nThis block defines the interface of a conversion block that\r\nconverts from one unit into another one.\r\n</p>\r\n\r\n</html>\"));\r\n\r\n  end PartialConversionBlock;\r\n\r\n  partial block PartialNoise \"Partial noise generator\"\r\n    import generator = Modelica.Math.Random.Generators.Xorshift128plus;\r\n    import Modelica.Math.Random.Utilities.automaticLocalSeed;\r\n    extends Modelica.Blocks.Interfaces.SO;\r\n\r\n    // Main dialog menu\r\n    parameter SI.Period samplePeriod(start=0.01)\r\n      \"Period for sampling the raw random numbers\"\r\n      annotation(Dialog(enable=enableNoise));\r\n\r\n    // Advanced dialog menu: Noise generation\r\n    parameter Boolean enableNoise = globalSeed.enableNoise\r\n      \"= true: y = noise, otherwise y = y_off\"\r\n      annotation(choices(checkBox=true),Dialog(tab=\"Advanced\",group=\"Noise generation\"));\r\n    parameter Real y_off = 0.0\r\n      \"Sets y = y_off if enableNoise=false (or time<startTime, see below)\"\r\n      annotation(Dialog(tab=\"Advanced\",group=\"Noise generation\"));\r\n\r\n    // Advanced dialog menu: Initialization\r\n    parameter Boolean useGlobalSeed = true\r\n      \"= true: use global seed, otherwise ignore it\"\r\n      annotation(choices(checkBox=true),Dialog(tab=\"Advanced\",group = \"Initialization\",enable=enableNoise));\r\n    parameter Boolean useAutomaticLocalSeed = true\r\n      \"= true: use automatic local seed, otherwise use fixedLocalSeed\"\r\n      annotation(choices(checkBox=true),Dialog(tab=\"Advanced\",group = \"Initialization\",enable=enableNoise));\r\n    parameter Integer fixedLocalSeed = 1 \"Local seed (any Integer number)\"\r\n      annotation(Dialog(tab=\"Advanced\",group = \"Initialization\",enable=enableNoise and not useAutomaticLocalSeed));\r\n    parameter SI.Time startTime = 0.0\r\n      \"Start time for sampling the raw random numbers\"\r\n      annotation(Dialog(tab=\"Advanced\", group=\"Initialization\",enable=enableNoise));\r\n    final parameter Integer localSeed(fixed=false) \"The actual localSeed\";\r\n  protected\r\n    outer Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n      \"Definition of global seed via inner/outer\";\r\n    parameter Integer actualGlobalSeed = if useGlobalSeed then globalSeed.seed else 0\r\n      \"The global seed, which is actually used\";\r\n    parameter Boolean generateNoise = enableNoise and globalSeed.enableNoise\r\n      \"= true, if noise shall be generated, otherwise no noise\";\r\n\r\n    // Declare state and random number variables\r\n    Integer state[generator.nState] \"Internal state of random number generator\";\r\n    discrete Real r \"Random number according to the desired distribution\";\r\n    discrete Real r_raw \"Uniform random number in the range (0,1]\";\r\n\r\n  initial equation\r\n     localSeed = if useAutomaticLocalSeed then automaticLocalSeed(getInstanceName()) else fixedLocalSeed;\r\n     pre(state) = generator.initialState(localSeed, actualGlobalSeed);\r\n     r_raw = generator.random(pre(state));\r\n\r\n  equation\r\n    // Draw random number at sample times\r\n    when generateNoise and sample(startTime, samplePeriod) then\r\n      (r_raw, state) = generator.random(pre(state));\r\n    end when;\r\n\r\n    // Generate noise if requested\r\n    y = if not generateNoise or time < startTime then y_off else r;\r\n\r\n      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Polygon(\r\n            points={{-76,90},{-84,68},{-68,68},{-76,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-76,68},{-76,-80}}, color={192,192,192}),\r\n          Line(points={{-86,-14},{72,-14}},\r\n                                        color={192,192,192}),\r\n          Polygon(\r\n            points={{94,-14},{72,-6},{72,-22},{94,-14}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(visible = enableNoise,\r\n             points={{-76,-19},{-62,-19},{-62,-3},{-54,-3},{-54,-51},{-46,-51},{-46,\r\n                -29},{-38,-29},{-38,55},{-30,55},{-30,23},{-30,23},{-30,-37},{-20,\r\n                -37},{-20,-19},{-10,-19},{-10,-47},{0,-47},{0,35},{6,35},{6,49},{12,\r\n                49},{12,-7},{22,-7},{22,5},{28,5},{28,-25},{38,-25},{38,47},{48,47},\r\n                {48,13},{56,13},{56,-53},{66,-53}}),\r\n          Text(\r\n            extent={{-150,-110},{150,-150}},\r\n            textString=\"%samplePeriod s\"),\r\n          Line(visible=not enableNoise,\r\n            points={{-76,48},{72,48}}),\r\n          Text(visible=not enableNoise,\r\n            extent={{-75,42},{95,2}},\r\n            textString=\"%y_off\"),\r\n          Text(visible=enableNoise and not useAutomaticLocalSeed,\r\n            extent={{-92,20},{98,-22}},\r\n            textColor={238,46,47},\r\n            textString=\"%fixedLocalSeed\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nPartial base class of noise generators defining the common features\r\nof noise blocks.\r\n</p>\r\n</html>\",   revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n  end PartialNoise;\r\n\r\n  package Adaptors \"Package with adaptors (especially useful for FMUs)\"\r\n    extends Modelica.Icons.InterfacesPackage;\r\n\r\n    partial model FlowToPotentialAdaptor \"Signal adaptor for a connector with flow, 1st derivative of flow, and 2nd derivative of flow as inputs and\r\n  potential, 1st derivative of potential, and 2nd derivative of potential as outputs (especially useful for FMUs)\"\r\n      parameter Boolean use_pder=true \"Use output for 1st derivative of potential\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      parameter Boolean use_pder2=true \"Use output for 2nd derivative of potential (only if 1st derivative is used, too)\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      parameter Boolean use_fder=true \"Use input for 1st derivative of flow\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      parameter Boolean use_fder2=true \"Use input for 2nd derivative of flow (only if 1st derivative is used, too)\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      Modelica.Blocks.Interfaces.RealOutput p \"Output for potential\"\r\n        annotation (Placement(transformation(extent={{20,70},{40,90}})));\r\n      Modelica.Blocks.Interfaces.RealOutput pder if use_pder\r\n        \"Optional output for der(potential)\"\r\n        annotation (Placement(transformation(extent={{20,40},{40,60}})));\r\n      Modelica.Blocks.Interfaces.RealOutput pder2 if (use_pder and use_pder2)\r\n        \"Optional output for der2(potential)\"\r\n        annotation (Placement(transformation(extent={{20,10},{40,30}})));\r\n      Modelica.Blocks.Interfaces.RealInput f \"Input for flow\"\r\n        annotation (Placement(transformation(extent={{40,-90},{20,-70}})));\r\n      Modelica.Blocks.Interfaces.RealInput fder if use_fder\r\n        \"Optional input for der(flow)\"\r\n        annotation (Placement(transformation(extent={{40,-60},{20,-40}})));\r\n      Modelica.Blocks.Interfaces.RealInput fder2 if (use_fder and use_fder2)\r\n        \"Optional input for der2(flow)\"\r\n        annotation (Placement(transformation(extent={{40,-30},{20,-10}})));\r\n    protected\r\n      parameter String Name_p=\"p\" \"Name of potential variable\";\r\n      parameter String Name_pder=\"der(p)\" \"Name of 1st derivative of potential variable\";\r\n      parameter String Name_pder2=\"der2(p)\" \"Name of 2nd derivative of potential variable\";\r\n      parameter String Name_f=\"f\" \"Name of flow variable\";\r\n      parameter String Name_fder=\"der(f)\" \"Name of 1st derivative of flow variable\";\r\n      parameter String Name_fder2=\"der2(f)\" \"Name of 2nd derivative of flow variable\";\r\n      Real y \"Output signal\" annotation(HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealOutput y1 \"Optional 1st derivative of output\" annotation(HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealOutput y2 \"Optional 2nd derivative of output\" annotation(HideResult=true);\r\n      Real u \"Input signal\" annotation(HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealInput u1 \"Optional 1st derivative of input\" annotation (HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealInput u2 \"Optional 2nd derivative of input\" annotation (HideResult=true);\r\n    equation\r\n      y = p;\r\n      y1 = if use_pder then der(y) else 0;\r\n      y2 = if (use_pder and use_pder2) then der(y1) else 0;\r\n      connect(y1, pder);\r\n      connect(y2, pder2);\r\n      if use_fder then\r\n        connect(fder, u1);\r\n      else\r\n        u1 = 0;\r\n      end if;\r\n      if (use_fder and use_fder2) then\r\n        connect(fder2, u2);\r\n      else\r\n        u2 = 0;\r\n      end if;\r\n      if (use_fder and use_fder2) then\r\n        u = Functions.state2({f, u1, u2}, time);\r\n      elseif (use_fder and not use_fder2) then\r\n        u = Functions.state1({f, u1}, time);\r\n      else\r\n        u = f;\r\n      end if;\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={\r\n            Text(\r\n              extent={{-150,150},{150,110}},\r\n              textColor={0,0,255},\r\n              textString=\"%name\"),\r\n                Rectangle(\r\n                  extent={{-20,100},{20,-100}},\r\n                  lineColor={0,0,127},\r\n                  radius=10),\r\n            Text(\r\n              extent={{-18,90},{18,70}},\r\n              textString=\"%Name_p\"),\r\n            Text(\r\n              extent={{-18,60},{18,40}},\r\n              textString=\"%Name_pder\",\r\n              visible=use_pder),\r\n            Text(\r\n              extent={{-18,30},{18,10}},\r\n              textString=\"%Name_pder2\",\r\n              visible=(use_pder and use_pder2)),\r\n            Text(\r\n              extent={{-18,-70},{18,-90}},\r\n              textString=\"%Name_f\"),\r\n            Text(\r\n              extent={{-18,-40},{18,-60}},\r\n              textString=\"%Name_fder\",\r\n              visible=use_fder),\r\n            Text(\r\n              extent={{-18,-10},{18,-30}},\r\n              textString=\"%Name_fder2\",\r\n              visible=(use_fder and use_fder2))}),\r\n              Diagram(coordinateSystem(preserveAspectRatio=false)),\r\n        Documentation(info=\"<html>\r\n<p>\r\nAdaptor between a physical connector and a signal representation of the connector signals.\r\nThis component is used to provide a pure signal interface around a physical model\r\nand export this model in form of an input/output block,\r\nespecially as FMU (<a href=\\\"https://fmi-standard.org\\\">Functional Mock-up Unit</a>).\r\n</p>\r\n<p>\r\nThis adaptor has flow, optional 1st derivative of flow, and optional 2nd derivative of flow as input and\r\npotential, optional 1st derivative of potential, and optional 2nd derivative of potential as output signals.\r\n</p>\r\n<p>\r\nNote, the input signals must be consistent to each other\r\n(fder=der(f), fder2=der(fder)).\r\n</p>\r\n</html>\"));\r\n    end FlowToPotentialAdaptor;\r\n\r\n    partial model PotentialToFlowAdaptor \"Signal adaptor for a connector with potential, 1st derivative of potential, and 2nd derivative of potential as inputs and\r\n  flow, 1st derivative of flow, and 2nd derivative of flow as outputs (especially useful for FMUs)\"\r\n      parameter Boolean use_pder=true \"Use input for 1st derivative of potential\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      parameter Boolean use_pder2=true \"Use input for 2nd derivative of potential (only if 1st derivative is used, too)\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      parameter Boolean use_fder=true \"Use output for 1st derivative of flow\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      parameter Boolean use_fder2=true \"Use output for 2nd derivative of flow (only if 1st derivative is used, too)\"\r\n        annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n      Modelica.Blocks.Interfaces.RealInput p \"Input for potential\"\r\n        annotation (Placement(transformation(extent={{-40,70},{-20,90}})));\r\n      Modelica.Blocks.Interfaces.RealInput pder if use_pder\r\n        \"Optional input for der(potential)\"\r\n        annotation (Placement(transformation(extent={{-40,40},{-20,60}})));\r\n      Modelica.Blocks.Interfaces.RealInput pder2 if (use_pder and use_pder2)\r\n        \"Optional input for der2(potential)\"\r\n        annotation (Placement(transformation(extent={{-40,10},{-20,30}})));\r\n      Modelica.Blocks.Interfaces.RealOutput f \"Output for flow\"\r\n        annotation (Placement(transformation(extent={{-20,-90},{-40,-70}})));\r\n      Modelica.Blocks.Interfaces.RealOutput fder if use_fder\r\n        \"Optional output for der(flow)\"\r\n        annotation (Placement(transformation(extent={{-20,-60},{-40,-40}})));\r\n      Modelica.Blocks.Interfaces.RealOutput fder2 if (use_fder and use_fder2)\r\n        \"Optional output for der2(flow)\"\r\n        annotation (Placement(transformation(extent={{-20,-30},{-40,-10}})));\r\n    protected\r\n      parameter String Name_p=\"p\" \"Name of potential variable\";\r\n      parameter String Name_pder=\"der(p)\" \"Name of 1st derivative of potential variable\";\r\n      parameter String Name_pder2=\"der2(p)\" \"Name of 2nd derivative of potential variable\";\r\n      parameter String Name_f=\"f\" \"Name of flow variable\";\r\n      parameter String Name_fder=\"der(f)\" \"Name of 1st derivative of flow variable\";\r\n      parameter String Name_fder2=\"der2(f)\" \"Name of 2nd derivative of flow variable\";\r\n      Real y \"Output signal\" annotation(HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealOutput y1 \"Optional 1st derivative of output\" annotation(HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealOutput y2 \"Optional 2nd derivative of output\" annotation(HideResult=true);\r\n      Real u \"Input signal\" annotation(HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealInput u1 \"Optional 1st derivative of input\" annotation (HideResult=true);\r\n      Modelica.Blocks.Interfaces.RealInput u2 \"Optional 2nd derivative of input\" annotation (HideResult=true);\r\n    equation\r\n      y = -f;\r\n      y1 = if use_fder then -der(y) else 0;\r\n      y2 = if (use_fder and use_fder2) then -der(y1) else 0;\r\n      connect(y1, fder);\r\n      connect(y2, fder2);\r\n      if use_pder then\r\n        connect(pder, u1);\r\n      else\r\n        u1 = 0;\r\n      end if;\r\n      if (use_pder and use_pder2) then\r\n        connect(pder2, u2);\r\n      else\r\n        u2 = 0;\r\n      end if;\r\n      if (use_pder and use_pder2) then\r\n        u = Functions.state2({p, u1, u2}, time);\r\n      elseif (use_pder and not use_pder2) then\r\n        u = Functions.state1({p, u1}, time);\r\n      else\r\n        u = p;\r\n      end if;\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={\r\n            Text(\r\n              extent={{-150,150},{150,110}},\r\n              textColor={0,0,255},\r\n              textString=\"%name\"),\r\n                Rectangle(\r\n                  extent={{-20,100},{20,-100}},\r\n                  lineColor={0,0,127},\r\n                  radius=10),\r\n            Text(\r\n              extent={{-18,90},{18,70}},\r\n              textString=\"%Name_p\"),\r\n            Text(\r\n              extent={{-18,60},{18,40}},\r\n              textString=\"%Name_pder\",\r\n              visible=use_pder),\r\n            Text(\r\n              extent={{-18,30},{18,10}},\r\n              textString=\"%Name_pder2\",\r\n              visible=(use_pder and use_pder2)),\r\n            Text(\r\n              extent={{-18,-70},{18,-90}},\r\n              textString=\"%Name_f\"),\r\n            Text(\r\n              extent={{-18,-40},{18,-60}},\r\n              textString=\"%Name_fder\",\r\n              visible=use_fder),\r\n            Text(\r\n              extent={{-18,-10},{18,-30}},\r\n              textString=\"%Name_fder2\",\r\n              visible=(use_fder and use_fder2))}),\r\n              Diagram(coordinateSystem(preserveAspectRatio=false)),\r\n        Documentation(info=\"<html>\r\n<p>\r\nAdaptor between a physical connector and a signal representation of the connector signals.\r\nThis component is used to provide a pure signal interface around a physical model\r\nand export this model in form of an input/output block,\r\nespecially as FMU (<a href=\\\"https://fmi-standard.org\\\">Functional Mock-up Unit</a>).\r\n</p>\r\n<p>\r\nThis adaptor has potential, optional 1st derivative of potential, and optional 2nd derivative of potential as input and\r\nflow, optional 1st derivative of flow, and optional 2nd derivative of flow as output signals.\r\n</p>\r\n<p>\r\nNote, the input signals must be consistent to each other\r\n(pder=der(p), pder2=der(pder)).\r\n</p>\r\n</html>\"));\r\n    end PotentialToFlowAdaptor;\r\n\r\n    package Functions \"Functions for adaptors\"\r\n      extends Modelica.Icons.FunctionsPackage;\r\n\r\n      function state1 \"Return state (with one derivative)\"\r\n        extends Modelica.Icons.Function;\r\n        input Real u[2] \"Required values for state and der(s)\";\r\n        input Real dummy\r\n          \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n        output Real s;\r\n      algorithm\r\n        s := u[1];\r\n        annotation (derivative(noDerivative=u) = state1der1,\r\n            InlineAfterIndexReduction=true);\r\n      end state1;\r\n\r\n      function state1der1 \"Return 1st derivative (der of state1)\"\r\n        extends Modelica.Icons.Function;\r\n        input Real u[2] \"Required values for state and der(s)\";\r\n        input Real dummy\r\n          \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n        input Real dummy_der;\r\n        output Real sder1;\r\n      algorithm\r\n        sder1 := u[2];\r\n        annotation (InlineAfterIndexReduction=true);\r\n      end state1der1;\r\n\r\n      function state2 \"Return state (with two derivatives)\"\r\n        extends Modelica.Icons.Function;\r\n        input Real u[3] \"Required values for state and der(s)\";\r\n        input Real dummy\r\n          \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n        output Real s;\r\n      algorithm\r\n        s := u[1];\r\n        annotation (derivative(noDerivative=u) = state2der1,\r\n            InlineAfterIndexReduction=true);\r\n      end state2;\r\n\r\n      function state2der1 \"Return 1st derivative (der of state2)\"\r\n        extends Modelica.Icons.Function;\r\n        input Real u[3] \"Required values for state and der(s)\";\r\n        input Real dummy\r\n          \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n        input Real dummy_der;\r\n        output Real sder1;\r\n      algorithm\r\n        sder1 := u[2];\r\n        annotation (derivative(noDerivative=u, order=2) = state2der2,\r\n            InlineAfterIndexReduction=true);\r\n      end state2der1;\r\n\r\n      function state2der2 \"Return 2nd derivative (der of state2der1)\"\r\n        extends Modelica.Icons.Function;\r\n        input Real u[3] \"Required values for state and der(s)\";\r\n        input Real dummy\r\n          \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n        input Real dummy_der;\r\n        input Real dummy_der2;\r\n        output Real sder2;\r\n      algorithm\r\n        sder2 := u[3];\r\n        annotation (InlineAfterIndexReduction=true);\r\n      end state2der2;\r\n    end Functions;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains partial adaptors to implement adaptors in various domains\r\nbetween a physical connector and a signal representation of the connector signals.\r\nThis component is used to provide a pure signal interface around a physical model\r\nand export this model in form of an input/output block,\r\nespecially as FMU (<a href=\\\"https://fmi-standard.org\\\">Functional Mock-up Unit</a>).\r\n</p>\r\n</html>\"));\r\n  end Adaptors;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains interface definitions for\r\n<strong>continuous</strong> input/output blocks with Real,\r\nInteger and Boolean signals. Furthermore, it contains\r\npartial models for continuous and discrete blocks.\r\n</p>\r\n\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>June 28, 2019</em>\r\n       by Thomas Beutlich:<br>\r\n       Removed obsolete blocks.</li>\r\n<li><em>Oct. 21, 2002</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>\r\n       and Christian Schweiger:<br>\r\n       Added several new interfaces.</li>\r\n<li><em>Oct. 24, 1999</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>:<br>\r\n       RealInputSignal renamed to RealInput. RealOutputSignal renamed to\r\n       output RealOutput. GraphBlock renamed to BlockIcon. SISOreal renamed to\r\n       SISO. SOreal renamed to SO. I2SOreal renamed to M2SO.\r\n       SignalGenerator renamed to SignalSource. Introduced the following\r\n       new models: MIMO, MIMOs, SVcontrol, MVcontrol, DiscreteBlockIcon,\r\n       DiscreteBlock, DiscreteSISO, DiscreteMIMO, DiscreteMIMOs,\r\n       BooleanBlockIcon, BooleanSISO, BooleanSignalSource, MI2BooleanMOs.</li>\r\n<li><em>June 30, 1999</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>:<br>\r\n       Realized a first version, based on an existing Dymola library\r\n       of Dieter Moormann and Hilding Elmqvist.</li>\r\n</ul>\r\n</html>\"));\r\nend Interfaces", "checksum": "51e9efc795070fd2d71d645c8ac5552967322c0b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Interfaces.mo:2-1749", "component_count": 9, "connection_count": 10, "variable_count": 72, "physical_quantity_count": 6, "parameter_count": 20, "equation_count": 72, "dependency_count": 27, "has_physical_interface": true, "interface_component_count": 6, "has_connections": true, "is_composite_model": true, "complexity_score": 130.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "algorithm sder2 := u[3]", "search_keywords": ["Integer", "Real", "generator.nState", "nin", "nout", "nu", "system"]}, "components": [{"name": "state", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[generator.nState]", "comment": "Internal state of random number generator"}, {"name": "r", "type_name": "Real", "prefixes": ["discrete"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Random number according to the desired distribution"}, {"name": "r_raw", "type_name": "Real", "prefixes": ["discrete"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Uniform random number in the range (0,1]"}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[2]", "comment": "Required values for state and der(s)"}, {"name": "s", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "dummy_der", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sder1", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "dummy_der2", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sder2", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "u_s", "to_connector": "sampler_s.u", "condition": null}, {"from_connector": "u_m", "to_connector": "sampler_m.u", "condition": null}, {"from_connector": "y1", "to_connector": "pder", "condition": null}, {"from_connector": "y2", "to_connector": "pder2", "condition": null}, {"from_connector": "fder", "to_connector": "u1", "condition": null}, {"from_connector": "fder2", "to_connector": "u2", "condition": null}, {"from_connector": "y1", "to_connector": "fder", "condition": null}, {"from_connector": "y2", "to_connector": "fder2", "condition": null}, {"from_connector": "pder", "to_connector": "u1", "condition": null}, {"from_connector": "pder2", "to_connector": "u2", "condition": null}], "variables": [{"name": "RealInput", "type_name": "connector", "prefixes": [], "attributes": {}, "binding_equation": "input Real \"'input Real' as connector\" \r\n\r\n  connector RealOutput = output Real \"'output Real' as connector\" \r\n\r\n  connector BooleanInput = input Boolean \"'input Boolean' as connector\"\r\n    \r\n\r\n  connector BooleanOutput = output Boolean \"'output Boolean' as connector\"\r\n    \r\n\r\n  connector IntegerInput = input Integer \"'input Integer' as connector\"\r\n    \r\n\r\n  connector IntegerOutput = output Integer \"'output Integer' as connector\"\r\n    \r\n\r\n  connector RealVectorInput = input Real\r\n    \"Real input connector used for vector of connectors\" \r\n\r\n  connector IntegerVectorInput = input Integer\r\n    \"Integer input connector used for vector of connectors\" \r\n\r\n  connector BooleanVectorInput = input Boolean\r\n    \"Boolean input connector used for vector of connectors\" \r\n\r\n  connector RealVectorOutput = output Real\r\n    \"Real output connector used for vector of connectors\" \r\n\r\n  partial block SO \"Single Output continuous control block\"\r\n    extends Modelica.Blocks.Icons.Block", "comment": null}, {"name": "SO", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SI2SO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SIMO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialRealMISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MIMO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MIMOs", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MI2MO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SignalSource", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SVcontrol", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MVcontrol", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "sampleTrigger", "type_name": "equation", "prefixes": ["output"], "attributes": {}, "binding_equation": "sample(startTime, samplePeriod)", "comment": "\"True, if sample time instant\""}, {"name": "firstTrigger", "type_name": "Boolean", "prefixes": ["output"], "attributes": {"start": "false", "fixed": "true"}, "binding_equation": null, "comment": "\"Rising edge signals first sample instant\""}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DiscreteBlock", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DiscreteSISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DiscreteMIMO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DiscreteMIMOs", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SVdiscrete", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MVdiscrete", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BooleanSISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BooleanMIMOs", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "MI2BooleanMOs", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "SI2BooleanSO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BooleanSignalSource", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerSO", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerMO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerSignalSource", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerSIBooleanSO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerMIBooleanMOs", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialIntegerSISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialIntegerMISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanSISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanSI2SO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanSI3SO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanSI", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanSO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanSource", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanThresholdComparison", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "partialBooleanComparison", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialBooleanSISO_small", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialBooleanMISO", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialConversionBlock", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "generator", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Math.Random.Generators.Xorshift128plus", "comment": null}, {"name": "globalSeed", "type_name": "Modelica.Blocks.Noise.GlobalSeed", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": "\"Definition of global seed via inner/outer\""}, {"name": "state", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Internal state of random number generator\""}, {"name": "r", "type_name": "Real", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Random number according to the desired distribution\""}, {"name": "r_raw", "type_name": "Real", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Uniform random number in the range (0,1]\""}, {"name": "PartialNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "-f", "comment": null}, {"name": "u1", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "0", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "u2", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "0", "comment": null}, {"name": "u", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "p", "comment": "\"Required values for state and der(s)\""}, {"name": "FlowToPotentialAdaptor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PotentialToFlowAdaptor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dummy", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\""}, {"name": "s", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "state1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dummy_der", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "sder1", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "state1der1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "state2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "state2der1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dummy_der2", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "sder2", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "state2der2", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Functions", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Adaptors", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "outputs", "unit": "nout", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signal", "unit": "nout", "display_unit": null, "quantity": null, "nominal": null}, {"name": "inputs", "unit": "nin", "display_unit": null, "quantity": null, "nominal": null}, {"name": "connections", "unit": "nu", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signals", "unit": "nout", "display_unit": null, "quantity": null, "nominal": null}, {"name": "noise", "unit": "generator.nState", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Blocks", "Blocks.Interfaces", "BorderPattern", "Discrete", "FillPattern", "Functions", "Martin", "Modelica.Blocks.Icons", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Noise", "Modelica.Blocks.Routing", "Modelica.Constants", "Modelica.Icons", "Modelica.Math.Random.Generators", "Modelica.Math.Random.Utilities", "Modelica.Math.Random.Utilities.automaticLocalSeed", "SI", "dlr_logo", "e", "generator", "globalSeed", "sampler_m", "sampler_s", "standard", "v", "www.dlr", "www.robotic.dlr"], "inheritance_chain": ["Modelica.Icons.InterfacesPackage", "Modelica.Blocks.Icons.Block", "SO", "Modelica.Blocks.Icons.DiscreteBlock", "DiscreteBlock", "Modelica.Blocks.Icons.BooleanBlock", "Modelica.Blocks.Icons.IntegerBlock", "IntegerSO", "Modelica.Blocks.Icons.PartialBooleanBlock", "Modelica.Blocks.Interfaces.SO", "Modelica.Icons.FunctionsPackage", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Blocks.Logical", "kind": "package", "name": "Logical", "package_path": ["Modelica", "Blocks"], "extends": ["Modelica.Icons.Package", "Blocks.Interfaces.partialBooleanSI2SO", "Blocks.Interfaces.partialBooleanSISO", "Blocks.Interfaces.partialBooleanThresholdComparison", "Blocks.Interfaces.partialBooleanComparison", "Blocks.Interfaces.partialBooleanSO", "Blocks.Interfaces.partialBooleanSI3SO", "Modelica.Blocks.Icons.PartialBooleanBlock", "Blocks.Icons.PartialBooleanBlock", "Modelica.Blocks.Interfaces.partialBooleanSI"], "imports": [], "parameters": [{"name": "pre_u_start", "type": "Boolean", "default": "false \"Start value of pre(u) at initial time\"", "description": null}, {"name": "pre_y_start", "type": "Boolean", "default": "false \"Value of pre(y) at initial time\"", "description": null}, {"name": "amplitude", "type": "Real", "default": "1 \"Amplitude of trapezoid\"", "description": null}, {"name": "offset", "type": "Real", "default": "0 \"Offset of output signal\"", "description": null}, {"name": "Qini", "type": "Boolean", "default": "false \"Start value of Q at initial time\"", "description": null}, {"name": "assertionLevel", "type": "AssertionLevel", "default": "AssertionLevel.error \"Assertion level\"", "description": null}, {"name": "terminationText", "type": "String", "default": "\"... End condition reached\" \"Text that will be displayed when simulation is terminated\"", "description": null}, {"name": "uLow(start", "type": "Real", "default": "0) \"If y=true and u<uLow", "description": null}, {"name": "switch to y", "type": "Real", "default": "true\"", "description": null}, {"name": "uHigh(start", "type": "Real", "default": "1) \"If y=false and u>uHigh", "description": null}, {"name": "bandwidth(start", "type": "Real", "default": "0.1) \"Bandwidth around reference signal\"", "description": null}, {"name": "delayTime(final min", "type": "SI.Time", "default": "0)=0 \"Time delay\"", "description": null}], "equations": [{"equations": ["equation\r\n    when condition then\r\n      terminate(terminationText)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 974, "end_line": 977, "start_col": 3, "end_col": 14}}, {"equations": ["when condition then\r\n      terminate(terminationText)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 975, "end_line": 977, "start_col": 5, "end_col": 14}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 977, "end_line": 977, "start_col": 9, "end_col": 13}}, {"equations": ["terminate(terminationText)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 976, "end_line": 976, "start_col": 7, "end_col": 34}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 975, "end_line": 975, "start_col": 5, "end_col": 9}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 974, "end_line": 974, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    assert(u,message,assertionLevel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 938, "end_line": 939, "start_col": 3, "end_col": 38}}, {"equations": ["assert(u,message,assertionLevel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 939, "end_line": 939, "start_col": 5, "end_col": 38}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 938, "end_line": 938, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(nor1.y, nor.u2) annotation (Line(points={{1,-10},{40,-10},{40,-40},\r\n            {-60,-40},{-60,22},{-22,22}}, color={255,0,255}))", "connect(nor1.y, Q) annotation (Line(points={{1,-10},{60,-10},{60,60},{110,\r\n            60}}, color={255,0,255}))", "connect(nor.y, pre.u)\r\n      annotation (Line(points={{1,30},{8,30}}, color={255,0,255}))", "connect(pre.y, nor1.u1) annotation (Line(points={{31,30},{40,30},{40,10},{-40,\r\n            10},{-40,-10},{-22,-10}}, color={255,0,255}))", "connect(pre.y, QI) annotation (Line(points={{31,30},{80,30},{80,-60},{110,-60}}, color={255,0,255}))", "connect(S, nor.u1) annotation (Line(\r\n        points={{-120,60},{-40,60},{-40,30},{-22,30}}, color={255,0,255}))", "connect(R, nor1.u2) annotation (Line(\r\n        points={{-120,-60},{-40,-60},{-40,-18},{-22,-18}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 877, "end_line": 890, "start_col": 3, "end_col": 80}}, {"equations": ["connect(nor1.y, nor.u2) annotation (Line(points={{1,-10},{40,-10},{40,-40},\r\n            {-60,-40},{-60,22},{-22,22}}, color={255,0,255}))", "connect(nor1.y, Q) annotation (Line(points={{1,-10},{60,-10},{60,60},{110,\r\n            60}}, color={255,0,255}))", "connect(nor.y, pre.u)\r\n      annotation (Line(points={{1,30},{8,30}}, color={255,0,255}))", "connect(pre.y, nor1.u1) annotation (Line(points={{31,30},{40,30},{40,10},{-40,\r\n            10},{-40,-10},{-22,-10}}, color={255,0,255}))", "connect(pre.y, QI) annotation (Line(points={{31,30},{80,30},{80,-60},{110,-60}}, color={255,0,255}))", "connect(S, nor.u1) annotation (Line(\r\n        points={{-120,60},{-40,60},{-40,30},{-22,30}}, color={255,0,255}))", "connect(R, nor1.u2) annotation (Line(\r\n        points={{-120,-60},{-40,-60},{-40,-18},{-22,-18}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 878, "end_line": 890, "start_col": 5, "end_col": 80}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 877, "end_line": 877, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    when {u, not u} then\r\n      tSwitch = time", "end when", "y1 = if u then true else not (time >= tSwitch + delayTime)", "y2 = if not u then false else (time >= tSwitch + delayTime)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 818, "end_line": 823, "start_col": 3, "end_col": 65}}, {"equations": ["when {u, not u} then\r\n      tSwitch = time", "end when", "y1 = if u then true else not (time >= tSwitch + delayTime)", "y2 = if not u then false else (time >= tSwitch + delayTime)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 819, "end_line": 823, "start_col": 5, "end_col": 65}}, {"equations": ["y2 = if not u then false else (time >= tSwitch + delayTime)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 823, "end_line": 823, "start_col": 5, "end_col": 64}}, {"equations": ["y1 = if u then true else not (time >= tSwitch + delayTime)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 822, "end_line": 822, "start_col": 5, "end_col": 63}}, {"equations": ["when {u, not u} then\r\n      tSwitch = time", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 819, "end_line": 821, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 821, "end_line": 821, "start_col": 9, "end_col": 13}}, {"equations": ["tSwitch = time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 820, "end_line": 820, "start_col": 7, "end_col": 22}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 819, "end_line": 819, "start_col": 5, "end_col": 9}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 818, "end_line": 818, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    tSwitch = time - 2*delayTime"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 816, "end_line": 817, "start_col": 3, "end_col": 34}}, {"equations": ["tSwitch = time - 2*delayTime"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 817, "end_line": 817, "start_col": 5, "end_col": 34}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 816, "end_line": 816, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    when u then\r\n      entryTime = time", "end when", "y = if u then time - entryTime else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 765, "end_line": 769, "start_col": 3, "end_col": 45}}, {"equations": ["when u then\r\n      entryTime = time", "end when", "y = if u then time - entryTime else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 766, "end_line": 769, "start_col": 5, "end_col": 45}}, {"equations": ["y = if u then time - entryTime else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 769, "end_line": 769, "start_col": 5, "end_col": 44}}, {"equations": ["when u then\r\n      entryTime = time", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 766, "end_line": 768, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 768, "end_line": 768, "start_col": 9, "end_col": 13}}, {"equations": ["entryTime = time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 767, "end_line": 767, "start_col": 7, "end_col": 24}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 766, "end_line": 766, "start_col": 5, "end_col": 9}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 765, "end_line": 765, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(entryTime) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 763, "end_line": 764, "start_col": 3, "end_col": 24}}, {"equations": ["pre(entryTime) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 764, "end_line": 764, "start_col": 5, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 763, "end_line": 763, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = if time < T then endValue - (T - time)*rate else endValue", "when {initial(),u,not u} then\r\n      endValue = if u then offset + amplitude else offset", "rate = if u and (rising > 0) then amplitude/rising else if not u and (\r\n        falling > 0) then -amplitude/falling else 0", "T = if u and not (rising > 0) or not u and not (falling > 0) or not abs(\r\n        amplitude) > 0 or initial() then time else time + (endValue - pre(y))/\r\n        rate", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 695, "end_line": 705, "start_col": 3, "end_col": 14}}, {"equations": ["y = if time < T then endValue - (T - time)*rate else endValue", "when {initial(),u,not u} then\r\n      endValue = if u then offset + amplitude else offset", "rate = if u and (rising > 0) then amplitude/rising else if not u and (\r\n        falling > 0) then -amplitude/falling else 0", "T = if u and not (rising > 0) or not u and not (falling > 0) or not abs(\r\n        amplitude) > 0 or initial() then time else time + (endValue - pre(y))/\r\n        rate", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 696, "end_line": 705, "start_col": 5, "end_col": 14}}, {"equations": ["when {initial(),u,not u} then\r\n      endValue = if u then offset + amplitude else offset", "rate = if u and (rising > 0) then amplitude/rising else if not u and (\r\n        falling > 0) then -amplitude/falling else 0", "T = if u and not (rising > 0) or not u and not (falling > 0) or not abs(\r\n        amplitude) > 0 or initial() then time else time + (endValue - pre(y))/\r\n        rate", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 698, "end_line": 705, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 705, "end_line": 705, "start_col": 9, "end_col": 13}}, {"equations": ["endValue = if u then offset + amplitude else offset", "rate = if u and (rising > 0) then amplitude/rising else if not u and (\r\n        falling > 0) then -amplitude/falling else 0", "T = if u and not (rising > 0) or not u and not (falling > 0) or not abs(\r\n        amplitude) > 0 or initial() then time else time + (endValue - pre(y))/\r\n        rate"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 699, "end_line": 704, "start_col": 7, "end_col": 14}}, {"equations": ["T = if u and not (rising > 0) or not u and not (falling > 0) or not abs(\r\n        amplitude) > 0 or initial() then time else time + (endValue - pre(y))/\r\n        rate"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 702, "end_line": 704, "start_col": 7, "end_col": 13}}, {"equations": ["rate = if u and (rising > 0) then amplitude/rising else if not u and (\r\n        falling > 0) then -amplitude/falling else 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 700, "end_line": 701, "start_col": 7, "end_col": 52}}, {"equations": ["endValue = if u then offset + amplitude else offset"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 699, "end_line": 699, "start_col": 7, "end_col": 58}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 698, "end_line": 698, "start_col": 5, "end_col": 9}}, {"equations": ["y = if time < T then endValue - (T - time)*rate else endValue"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 696, "end_line": 696, "start_col": 5, "end_col": 66}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 695, "end_line": 695, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = pre(y) and (u < reference + bandwidth/2) or (u < reference - bandwidth/\r\n      2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 649, "end_line": 651, "start_col": 3, "end_col": 10}}, {"equations": ["y = pre(y) and (u < reference + bandwidth/2) or (u < reference - bandwidth/\r\n      2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 650, "end_line": 651, "start_col": 5, "end_col": 10}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 649, "end_line": 649, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(y) = pre_y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 647, "end_line": 648, "start_col": 3, "end_col": 26}}, {"equations": ["pre(y) = pre_y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 648, "end_line": 648, "start_col": 5, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 647, "end_line": 647, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    assert(uHigh > uLow,\"Hysteresis limits wrong (uHigh <= uLow)\")", "y = not pre(y) and u > uHigh or pre(y) and u >= uLow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 522, "end_line": 524, "start_col": 3, "end_col": 58}}, {"equations": ["assert(uHigh > uLow,\"Hysteresis limits wrong (uHigh <= uLow)\")", "y = not pre(y) and u > uHigh or pre(y) and u >= uLow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 523, "end_line": 524, "start_col": 5, "end_col": 58}}, {"equations": ["y = not pre(y) and u > uHigh or pre(y) and u >= uLow"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 524, "end_line": 524, "start_col": 5, "end_col": 57}}, {"equations": ["assert(uHigh > uLow,\"Hysteresis limits wrong (uHigh <= uLow)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 523, "end_line": 523, "start_col": 5, "end_col": 67}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 522, "end_line": 522, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(y) = pre_y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 520, "end_line": 521, "start_col": 3, "end_col": 26}}, {"equations": ["pre(y) = pre_y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 521, "end_line": 521, "start_col": 5, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 520, "end_line": 520, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = if u2 then u1 else u3"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 474, "end_line": 475, "start_col": 3, "end_col": 31}}, {"equations": ["y = if u2 then u1 else u3"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 475, "end_line": 475, "start_col": 5, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 474, "end_line": 474, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = if u2 then u1 else u3"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 429, "end_line": 430, "start_col": 3, "end_col": 31}}, {"equations": ["y = if u2 then u1 else u3"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 430, "end_line": 430, "start_col": 5, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 429, "end_line": 429, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    u_pos = enable and u >= 0", "y = change(u_pos) and not edge(enable) and not edge(disable)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 379, "end_line": 381, "start_col": 3, "end_col": 66}}, {"equations": ["u_pos = enable and u >= 0", "y = change(u_pos) and not edge(enable) and not edge(disable)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 380, "end_line": 381, "start_col": 5, "end_col": 66}}, {"equations": ["y = change(u_pos) and not edge(enable) and not edge(disable)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 381, "end_line": 381, "start_col": 5, "end_col": 65}}, {"equations": ["u_pos = enable and u >= 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 380, "end_line": 380, "start_col": 5, "end_col": 30}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 379, "end_line": 379, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(u_pos) = false", "pre(enable) = false", "pre(disable) = not pre(enable)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 375, "end_line": 378, "start_col": 3, "end_col": 36}}, {"equations": ["pre(u_pos) = false", "pre(enable) = false", "pre(disable) = not pre(enable)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 376, "end_line": 378, "start_col": 5, "end_col": 36}}, {"equations": ["pre(disable) = not pre(enable)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 378, "end_line": 378, "start_col": 5, "end_col": 35}}, {"equations": ["pre(enable) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 377, "end_line": 377, "start_col": 5, "end_col": 24}}, {"equations": ["pre(u_pos) = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 376, "end_line": 376, "start_col": 5, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 375, "end_line": 375, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = u1 <= u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 345, "end_line": 346, "start_col": 3, "end_col": 18}}, {"equations": ["y = u1 <= u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 346, "end_line": 346, "start_col": 5, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 345, "end_line": 345, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u1 < u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 328, "end_line": 329, "start_col": 3, "end_col": 17}}, {"equations": ["y = u1 < u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 329, "end_line": 329, "start_col": 5, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 328, "end_line": 328, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u1 >= u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 307, "end_line": 308, "start_col": 3, "end_col": 18}}, {"equations": ["y = u1 >= u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 308, "end_line": 308, "start_col": 5, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 307, "end_line": 307, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u1 > u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 287, "end_line": 288, "start_col": 3, "end_col": 17}}, {"equations": ["y = u1 > u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 288, "end_line": 288, "start_col": 5, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 287, "end_line": 287, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u <= threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 269, "end_line": 270, "start_col": 3, "end_col": 24}}, {"equations": ["y = u <= threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 270, "end_line": 270, "start_col": 5, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 269, "end_line": 269, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u < threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 253, "end_line": 254, "start_col": 3, "end_col": 23}}, {"equations": ["y = u < threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 254, "end_line": 254, "start_col": 5, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 253, "end_line": 253, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u >= threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 233, "end_line": 234, "start_col": 3, "end_col": 24}}, {"equations": ["y = u >= threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 234, "end_line": 234, "start_col": 5, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 233, "end_line": 233, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u > threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 214, "end_line": 215, "start_col": 3, "end_col": 23}}, {"equations": ["y = u > threshold"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 215, "end_line": 215, "start_col": 5, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 214, "end_line": 214, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = change(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 193, "end_line": 194, "start_col": 3, "end_col": 19}}, {"equations": ["y = change(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 194, "end_line": 194, "start_col": 5, "end_col": 19}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 193, "end_line": 193, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(u) = pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 191, "end_line": 192, "start_col": 3, "end_col": 26}}, {"equations": ["pre(u) = pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 192, "end_line": 192, "start_col": 5, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 191, "end_line": 191, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = edge(not_u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 171, "end_line": 172, "start_col": 3, "end_col": 21}}, {"equations": ["y = edge(not_u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 172, "end_line": 172, "start_col": 5, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 171, "end_line": 171, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(not_u) = not pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 169, "end_line": 170, "start_col": 3, "end_col": 34}}, {"equations": ["pre(not_u) = not pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 170, "end_line": 170, "start_col": 5, "end_col": 34}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 169, "end_line": 169, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = edge(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 144, "end_line": 145, "start_col": 3, "end_col": 17}}, {"equations": ["y = edge(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 145, "end_line": 145, "start_col": 5, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 144, "end_line": 144, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(u) = pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 142, "end_line": 143, "start_col": 3, "end_col": 26}}, {"equations": ["pre(u) = pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 143, "end_line": 143, "start_col": 5, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 142, "end_line": 142, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = pre(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 113, "end_line": 114, "start_col": 3, "end_col": 16}}, {"equations": ["y = pre(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 114, "end_line": 114, "start_col": 5, "end_col": 16}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 113, "end_line": 113, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(u) = pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 111, "end_line": 112, "start_col": 3, "end_col": 26}}, {"equations": ["pre(u) = pre_u_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 112, "end_line": 112, "start_col": 5, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 111, "end_line": 111, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    y = not u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 89, "end_line": 90, "start_col": 3, "end_col": 15}}, {"equations": ["y = not u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 90, "end_line": 90, "start_col": 5, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 89, "end_line": 89, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = not (u1 and u2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 73, "end_line": 74, "start_col": 3, "end_col": 25}}, {"equations": ["y = not (u1 and u2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 74, "end_line": 74, "start_col": 5, "end_col": 25}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 73, "end_line": 73, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = not (u1 or u2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 58, "end_line": 59, "start_col": 3, "end_col": 24}}, {"equations": ["y = not (u1 or u2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 59, "end_line": 59, "start_col": 5, "end_col": 24}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 58, "end_line": 58, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = not ((u1 and u2) or (not u1 and not u2))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 43, "end_line": 44, "start_col": 3, "end_col": 50}}, {"equations": ["y = not ((u1 and u2) or (not u1 and not u2))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 44, "end_line": 44, "start_col": 5, "end_col": 50}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 43, "end_line": 43, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u1 or u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 25, "end_line": 26, "start_col": 3, "end_col": 18}}, {"equations": ["y = u1 or u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 26, "end_line": 26, "start_col": 5, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 25, "end_line": 25, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    y = u1 and u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 7, "end_line": 8, "start_col": 3, "end_col": 19}}, {"equations": ["y = u1 and u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 8, "end_line": 8, "start_col": 5, "end_col": 19}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 7, "end_line": 7, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.Package | components: Boolean×1, Real×1 | connections: 7 | params: pre_u_start, pre_y_start, amplitude | units: s, s, s | eq: equation wh", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo", "start_line": 2, "end_line": 1032, "start_col": 1, "end_col": 12}, "code_text": "package Logical \"Library of components with Boolean input and output signals\"\r\n  extends Modelica.Icons.Package;\r\n\r\n  block And \"Logical 'and': y = u1 and u2\"\r\n    extends Blocks.Interfaces.partialBooleanSI2SO;\r\n  equation\r\n    y = u1 and u2;\r\n    annotation (\r\n      defaultComponentName=\"and1\",\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"and\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if all inputs are <strong>true</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end And;\r\n\r\n  block Or \"Logical 'or': y = u1 or u2\"\r\n    extends Blocks.Interfaces.partialBooleanSI2SO;\r\n  equation\r\n    y = u1 or u2;\r\n    annotation (\r\n      defaultComponentName=\"or1\",\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"or\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if at least one input is <strong>true</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Or;\r\n\r\n  block Xor \"Logical 'xor': y = u1 xor u2\"\r\n    extends Blocks.Interfaces.partialBooleanSI2SO;\r\n  equation\r\n    y = not ((u1 and u2) or (not u1 and not u2));\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"xor\")}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if exactly one input is <strong>true</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Xor;\r\n\r\n  block Nor \"Logical 'nor': y = not (u1 or u2)\"\r\n    extends Blocks.Interfaces.partialBooleanSI2SO;\r\n  equation\r\n    y = not (u1 or u2);\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"nor\")}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if none of the inputs is <strong>true</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Nor;\r\n\r\n  block Nand \"Logical 'nand': y = not (u1 and u2)\"\r\n    extends Blocks.Interfaces.partialBooleanSI2SO;\r\n  equation\r\n    y = not (u1 and u2);\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"nand\")}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if at least one input is <strong>false</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Nand;\r\n\r\n  block Not \"Logical 'not': y = not u\"\r\n    extends Blocks.Interfaces.partialBooleanSISO;\r\n\r\n  equation\r\n    y = not u;\r\n    annotation (\r\n      defaultComponentName=\"not1\",\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"not\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the input is <strong>false</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Not;\r\n\r\n  block Pre\r\n    \"Breaks algebraic loops by an infinitesimal small time delay (y = pre(u): event iteration continues until u = pre(u))\"\r\n\r\n    parameter Boolean pre_u_start=false \"Start value of pre(u) at initial time\";\r\n    extends Blocks.Interfaces.partialBooleanSISO;\r\n\r\n  initial equation\r\n    pre(u) = pre_u_start;\r\n  equation\r\n    y = pre(u);\r\n    annotation (\r\n      defaultComponentName=\"pre1\",\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"pre\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis block delays the Boolean input by an infinitesimal small time delay and\r\ntherefore breaks algebraic loops. In a network of logical blocks, in every\r\n\\\"closed connection loop\\\" at least one logical block must have a delay,\r\nsince algebraic systems of Boolean equations are not solvable.\r\n</p>\r\n\r\n<p>\r\nThe \\\"Pre\\\" block returns the value of the \\\"input\\\" signal from the\r\nlast \\\"event iteration\\\". The \\\"event iteration\\\" stops, once both\r\nvalues are identical (u = pre(u)).\r\n</p>\r\n</html>\"));\r\n  end Pre;\r\n\r\n  block Edge \"Output y is true, if the input u has a rising edge (y = edge(u))\"\r\n\r\n    parameter Boolean pre_u_start=false \"Start value of pre(u) at initial time\";\r\n    extends Blocks.Interfaces.partialBooleanSISO;\r\n\r\n  initial equation\r\n    pre(u) = pre_u_start;\r\n  equation\r\n    y = edge(u);\r\n    annotation (\r\n      defaultComponentName=\"edge1\",\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"edge\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Boolean input has a rising edge\r\nfrom <strong>false</strong> to <strong>true</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Edge;\r\n\r\n  block FallingEdge\r\n    \"Output y is true, if the input u has a falling edge (y = edge(not u))\"\r\n\r\n    parameter Boolean pre_u_start=false \"Start value of pre(u) at initial time\";\r\n    extends Blocks.Interfaces.partialBooleanSISO;\r\n\r\n  protected\r\n    Boolean not_u=not u;\r\n  initial equation\r\n    pre(not_u) = not pre_u_start;\r\n  equation\r\n    y = edge(not_u);\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"falling\")}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Boolean input has a falling edge\r\nfrom <strong>true</strong> to <strong>false</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end FallingEdge;\r\n\r\n  block Change\r\n    \"Output y is true, if the input u has a rising or falling edge (y = change(u))\"\r\n\r\n    parameter Boolean pre_u_start=false \"Start value of pre(u) at initial time\";\r\n    extends Blocks.Interfaces.partialBooleanSISO;\r\n\r\n  initial equation\r\n    pre(u) = pre_u_start;\r\n  equation\r\n    y = change(u);\r\n    annotation (\r\n      defaultComponentName=\"change1\",\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"change\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Boolean input has either a rising edge\r\nfrom <strong>false</strong> to <strong>true</strong> or a falling edge from\r\n<strong>true</strong> to <strong>false</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Change;\r\n\r\n  block GreaterThreshold\r\n    \"Output y is true, if input u is greater than threshold\"\r\n    extends Blocks.Interfaces.partialBooleanThresholdComparison;\r\n  equation\r\n    y = u > threshold;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Line(\r\n            points={{-54,20},{-8,0},{-54,-20}},\r\n            thickness=0.5)}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Real input is greater than\r\nparameter <strong>threshold</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end GreaterThreshold;\r\n\r\n  block GreaterEqualThreshold\r\n    \"Output y is true, if input u is greater or equal than threshold\"\r\n\r\n    extends Blocks.Interfaces.partialBooleanThresholdComparison;\r\n  equation\r\n    y = u >= threshold;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Line(\r\n            points={{-54,20},{-8,0},{-54,-20}},\r\n            thickness=0.5),\r\n          Line(points={{-54,-30},{-8,-30}}, thickness=0.5)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Real input is greater than or equal to\r\nparameter <strong>threshold</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end GreaterEqualThreshold;\r\n\r\n  block LessThreshold \"Output y is true, if input u is less than threshold\"\r\n\r\n    extends Blocks.Interfaces.partialBooleanThresholdComparison;\r\n  equation\r\n    y = u < threshold;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Line(points={{-8,20},{-54,0},{-8,-20}}, thickness=0.5)}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Real input is less than\r\nparameter <strong>threshold</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end LessThreshold;\r\n\r\n  block LessEqualThreshold\r\n    \"Output y is true, if input u is less or equal than threshold\"\r\n    extends Blocks.Interfaces.partialBooleanThresholdComparison;\r\n  equation\r\n    y = u <= threshold;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Line(points={{-8,20},{-54,0},{-8,-20}}, thickness=0.5),\r\n          Line(points={{-54,-30},{-8,-30}}, thickness=0.5)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if the Real input is less than or equal to\r\nparameter <strong>threshold</strong>, otherwise\r\nthe output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end LessEqualThreshold;\r\n\r\n  block Greater \"Output y is true, if input u1 is greater than input u2\"\r\n    extends Blocks.Interfaces.partialBooleanComparison;\r\n\r\n  equation\r\n    y = u1 > u2;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,\r\n              -100},{100,100}}), graphics={\r\n          Ellipse(extent={{32,10},{52,-10}}, lineColor={0,0,127}),\r\n          Line(points={{-100,-80},{42,-80},{42,0}}, color={0,0,127}),\r\n          Line(\r\n            points={{-54,20},{-8,0},{-54,-20}},\r\n            thickness=0.5)}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if Real input u1 is greater than\r\nReal input u2, otherwise the output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Greater;\r\n\r\n  block GreaterEqual\r\n    \"Output y is true, if input u1 is greater or equal than input u2\"\r\n    extends Blocks.Interfaces.partialBooleanComparison;\r\n\r\n  equation\r\n    y = u1 >= u2;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,\r\n              -100},{100,100}}), graphics={\r\n          Ellipse(extent={{32,10},{52,-10}}, lineColor={0,0,127}),\r\n          Line(points={{-100,-80},{42,-80},{42,0}}, color={0,0,127}),\r\n          Line(\r\n            points={{-54,20},{-8,0},{-54,-20}},\r\n            thickness=0.5),\r\n          Line(points={{-54,-30},{-8,-30}}, thickness=0.5)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if Real input u1 is greater than or equal to\r\nReal input u2, otherwise the output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end GreaterEqual;\r\n\r\n  block Less \"Output y is true, if input u1 is less than input u2\"\r\n    extends Blocks.Interfaces.partialBooleanComparison;\r\n\r\n  equation\r\n    y = u1 < u2;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,\r\n              -100},{100,100}}), graphics={\r\n          Ellipse(extent={{32,10},{52,-10}}, lineColor={0,0,127}),\r\n          Line(points={{-100,-80},{42,-80},{42,0}}, color={0,0,127}),\r\n          Line(points={{-8,20},{-54,0},{-8,-20}}, thickness=0.5)}), Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if Real input u1 is less than\r\nReal input u2, otherwise the output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Less;\r\n\r\n  block LessEqual \"Output y is true, if input u1 is less or equal than input u2\"\r\n    extends Blocks.Interfaces.partialBooleanComparison;\r\n\r\n  equation\r\n    y = u1 <= u2;\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,\r\n              -100},{100,100}}), graphics={\r\n          Ellipse(extent={{32,10},{52,-10}}, lineColor={0,0,127}),\r\n          Line(points={{-100,-80},{42,-80},{42,0}}, color={0,0,127}),\r\n          Line(points={{-8,20},{-54,0},{-8,-20}}, thickness=0.5),\r\n          Line(points={{-54,-30},{-8,-30}}, thickness=0.5)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>true</strong> if Real input u1 is less than or equal to\r\nReal input u2, otherwise the output is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end LessEqual;\r\n\r\n  block ZeroCrossing \"Trigger zero crossing of input u\"\r\n    extends Blocks.Interfaces.partialBooleanSO;\r\n    Blocks.Interfaces.RealInput u annotation (Placement(transformation(extent={\r\n              {-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanInput enable\r\n      \"Zero input crossing is triggered if the enable input signal is true\"\r\n      annotation (Placement(transformation(\r\n          origin={0,-120},\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=90)));\r\n\r\n  protected\r\n    Boolean disable=not enable;\r\n    Boolean u_pos;\r\n  initial equation\r\n    pre(u_pos) = false;\r\n    pre(enable) = false;\r\n    pre(disable) = not pre(enable);\r\n  equation\r\n    u_pos = enable and u >= 0;\r\n    y = change(u_pos) and not edge(enable) and not edge(disable);\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThe output \\\"y\\\" is <strong>true</strong> at the\r\ntime instant when the input \\\"u\\\" becomes\r\nzero, provided the input \\\"enable\\\" is\r\n<strong>true</strong>. At all other time instants, the output \\\"y\\\" is <strong>false</strong>.\r\nIf the input \\\"u\\\" is zero at a time instant when the \\\"enable\\\"\r\ninput changes its value, then the output y is <strong>false</strong>.\r\n</p>\r\n<p>\r\nNote, that in the plot window of a Modelica simulator, the output of\r\nthis block is usually identically to <strong>false</strong>, because the output\r\nmay only be <strong>true</strong> at an event instant, but not during\r\ncontinuous integration. In order to check that this component is\r\nactually working as expected, one should connect its output to, e.g.,\r\ncomponent <em><a href=\\\"modelica://Modelica.Blocks.Discrete.TriggeredSampler\\\">Modelica.Blocks.Discrete.TriggeredSampler</a></em>.\r\n</p>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n              {100,100}}), graphics={\r\n          Line(points={{-78,68},{-78,-80}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{-78,90},{-86,68},{-70,68},{-78,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-88,0},{70,0}}, color={192,192,192}),\r\n          Line(points={{-78,0},{-73.2,32.3},{-70,50.3},{-66.7,64.5},{-63.5,74.2},\r\n                {-60.3,79.3},{-57.1,79.6},{-53.9,75.3},{-50.7,67.1},{-46.6,52.2},\r\n                {-41,25.8},{-33,-13.9},{-28.2,-33.7},{-24.1,-45.9},{-20.1,-53.2},\r\n                {-16.1,-55.3},{-12.1,-52.5},{-8.1,-45.3},{-3.23,-32.1},{10.44,\r\n                13.7},{15.3,26.4},{20.1,34.8},{24.1,38},{28.9,37.2},{33.8,31.8},\r\n                {40.2,19.4},{53.1,-10.5},{59.5,-21.2},{65.1,-25.9},{70.7,-25.9},\r\n                {77.2,-20.5},{82,-13.8}}, color={192,192,192}, smooth = Smooth.Bezier),\r\n          Polygon(\r\n            points={{92,0},{70,8},{70,-8},{92,0}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-36,-59},{-36,81}}, color={255,0,255}),\r\n          Line(points={{6,-59},{6,81}}, color={255,0,255}),\r\n          Line(points={{49,-59},{49,81}}, color={255,0,255}),\r\n          Line(points={{-78,0},{70,0}}, color={255,0,255})}));\r\n  end ZeroCrossing;\r\n\r\n  block LogicalSwitch \"Logical Switch\"\r\n    extends Blocks.Interfaces.partialBooleanSI3SO;\r\n\r\n  equation\r\n    y = if u2 then u1 else u3;\r\n    annotation (Documentation(info=\"<html>\r\n<p>The LogicalSwitch switches, depending on the\r\nBoolean u2 connector (the middle connector),\r\nbetween the two possible input signals\r\nu1 (upper connector) and u3 (lower connector).</p>\r\n<p>If u2 is true, connector y is set equal to\r\nu1, else it is set equal to u3.</p>\r\n</html>\"), Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}),\r\n            graphics={\r\n          Line(\r\n            points={{12,0},{100,0}},\r\n            color={255,0,255}),\r\n          Line(\r\n            points={{-100,0},{-40,0}},\r\n            color={255,0,255}),\r\n          Line(\r\n            points={{-100,-80},{-40,-80},{-40,-80}},\r\n            color={255,0,255}),\r\n          Line(points={{-40,12},{-40,-10}}, color={255,0,255}),\r\n          Line(points={{-100,80},{-40,80}}, color={255,0,255}),\r\n          Line(\r\n            points=DynamicSelect({{-40,80},{8,2}}, if u2 then {{-40,80},{8,2}} else {{-40,-80},{8,2}}),\r\n            color={255,0,255},\r\n            thickness=1),\r\n          Ellipse(lineColor={0,0,127},\r\n            pattern=LinePattern.None,\r\n            fillPattern=FillPattern.Solid,\r\n            extent={{2,-6},{18,8}})}));\r\n  end LogicalSwitch;\r\n\r\n  block Switch \"Switch between two Real signals\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    Blocks.Interfaces.RealInput u1 \"Connector of first Real input signal\"\r\n      annotation (Placement(transformation(extent={{-140,60},{-100,100}})));\r\n    Blocks.Interfaces.BooleanInput u2 \"Connector of Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.RealInput u3 \"Connector of second Real input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));\r\n    Blocks.Interfaces.RealOutput y \"Connector of Real output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n  equation\r\n    y = if u2 then u1 else u3;\r\n    annotation (\r\n      defaultComponentName=\"switch1\",\r\n      Documentation(info=\"<html>\r\n<p>The Logical.Switch switches, depending on the\r\nlogical connector u2 (the middle connector)\r\nbetween the two possible input signals\r\nu1 (upper connector) and u3 (lower connector).</p>\r\n<p>If u2 is <strong>true</strong>, the output signal y is set equal to\r\nu1, else it is set equal to u3.</p>\r\n</html>\"),\r\n      Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{12,0},{100,0}},\r\n            color={0,0,127}),\r\n          Line(points={{-100,0},{-40,0}},\r\n            color={255,0,255}),\r\n          Line(points={{-100,-80},{-40,-80},{-40,-80}},\r\n            color={0,0,127}),\r\n          Line(points={{-40,12},{-40,-12}},\r\n            color={255,0,255}),\r\n          Line(points={{-100,80},{-38,80}},\r\n            color={0,0,127}),\r\n          Line(points=DynamicSelect({{-38,80},{6,2}}, if u2 then {{-38,80},{6,2}} else {{-38,-80},{6,2}}),\r\n            color={0,0,127},\r\n            thickness=1),\r\n          Ellipse(lineColor={0,0,255},\r\n            pattern=LinePattern.None,\r\n            fillPattern=FillPattern.Solid,\r\n            extent={{2,-8},{18,8}})}));\r\n  end Switch;\r\n\r\n  block Hysteresis \"Transform Real to Boolean signal with Hysteresis\"\r\n\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    parameter Real uLow(start=0) \"If y=true and u<uLow, switch to y=false\";\r\n    parameter Real uHigh(start=1) \"If y=false and u>uHigh, switch to y=true\";\r\n    parameter Boolean pre_y_start=false \"Value of pre(y) at initial time\";\r\n\r\n    Blocks.Interfaces.RealInput u annotation (Placement(transformation(extent={\r\n              {-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanOutput y annotation (Placement(transformation(\r\n            extent={{100,-10},{120,10}})));\r\n\r\n  initial equation\r\n    pre(y) = pre_y_start;\r\n  equation\r\n    assert(uHigh > uLow,\"Hysteresis limits wrong (uHigh <= uLow)\");\r\n    y = not pre(y) and u > uHigh or pre(y) and u >= uLow;\r\n    annotation (\r\n      Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n              100,100}}), graphics={Polygon(\r\n              points={{-65,89},{-73,67},{-57,67},{-65,89}},\r\n              lineColor={192,192,192},\r\n              fillColor={192,192,192},\r\n              fillPattern=FillPattern.Solid),Line(points={{-65,67},{-65,-81}},\r\n            color={192,192,192}),Line(points={{-90,-70},{82,-70}}, color={192,192,192}),\r\n            Polygon(\r\n              points={{90,-70},{68,-62},{68,-78},{90,-70}},\r\n              lineColor={192,192,192},\r\n              fillColor={192,192,192},\r\n              fillPattern=FillPattern.Solid),Text(\r\n              extent={{70,-80},{94,-100}},\r\n              textColor={160,160,164},\r\n              textString=\"u\"),Text(\r\n              extent={{-65,93},{-12,75}},\r\n              textColor={160,160,164},\r\n              textString=\"y\"),Line(\r\n              points={{-80,-70},{30,-70}},\r\n              thickness=0.5),Line(\r\n              points={{-50,10},{80,10}},\r\n              thickness=0.5),Line(\r\n              points={{-50,10},{-50,-70}},\r\n              thickness=0.5),Line(\r\n              points={{30,10},{30,-70}},\r\n              thickness=0.5),Line(\r\n              points={{-10,-65},{0,-70},{-10,-75}},\r\n              thickness=0.5),Line(\r\n              points={{-10,15},{-20,10},{-10,5}},\r\n              thickness=0.5),Line(\r\n              points={{-55,-20},{-50,-30},{-44,-20}},\r\n              thickness=0.5),Line(\r\n              points={{25,-30},{30,-19},{35,-30}},\r\n              thickness=0.5),Text(\r\n              extent={{-99,2},{-70,18}},\r\n              textColor={160,160,164},\r\n              textString=\"true\"),Text(\r\n              extent={{-98,-87},{-66,-73}},\r\n              textColor={160,160,164},\r\n              textString=\"false\"),Text(\r\n              extent={{19,-87},{44,-70}},\r\n              textString=\"uHigh\"),Text(\r\n              extent={{-63,-88},{-38,-71}},\r\n              textString=\"uLow\"),Line(points={{-69,10},{-60,10}}, color={160,\r\n            160,164})}),\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={\r\n          Polygon(\r\n            points={{-80,90},{-88,68},{-72,68},{-80,90}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-80,68},{-80,-29}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{92,-29},{70,-21},{70,-37},{92,-29}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-79,-29},{84,-29}}, color={192,192,192}),\r\n          Line(points={{-79,-29},{41,-29}}),\r\n          Line(points={{-15,-21},{1,-29},{-15,-36}}),\r\n          Line(points={{41,51},{41,-29}}),\r\n          Line(points={{33,3},{41,22},{50,3}}),\r\n          Line(points={{-49,51},{81,51}}),\r\n          Line(points={{-4,59},{-19,51},{-4,43}}),\r\n          Line(points={{-59,29},{-49,11},{-39,29}}),\r\n          Line(points={{-49,51},{-49,-29}}),\r\n          Text(\r\n            extent={{-92,-49},{-9,-92}},\r\n            textColor={192,192,192},\r\n            textString=\"%uLow\"),\r\n          Text(\r\n            extent={{2,-49},{91,-92}},\r\n            textColor={192,192,192},\r\n            textString=\"%uHigh\"),\r\n          Rectangle(extent={{-91,-49},{-8,-92}}, lineColor={192,192,192}),\r\n          Line(points={{-49,-29},{-49,-49}}, color={192,192,192}),\r\n          Rectangle(extent={{2,-49},{91,-92}}, lineColor={192,192,192}),\r\n          Line(points={{41,-29},{41,-49}}, color={192,192,192})}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis block transforms a <strong>Real</strong> input signal <strong>u</strong> into a <strong>Boolean</strong>\r\noutput signal <strong>y</strong>:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Logical/Hysteresis.png\\\"\r\n     alt=\\\"Hysteresis.png\\\">\r\n</div>\r\n\r\n<ul>\r\n<li> When the output was <strong>false</strong> and the input becomes\r\n     <strong>greater</strong> than parameter <strong>uHigh</strong>, the output\r\n     switches to <strong>true</strong>.</li>\r\n<li> When the output was <strong>true</strong> and the input becomes\r\n     <strong>less</strong> than parameter <strong>uLow</strong>, the output\r\n     switches to <strong>false</strong>.</li>\r\n</ul>\r\n<p>\r\nThe start value of the output is defined via parameter\r\n<strong>pre_y_start</strong> (= value of pre(y) at initial time).\r\nThe default value of this parameter is <strong>false</strong>.\r\n</p>\r\n</html>\"));\r\n  end Hysteresis;\r\n\r\n  block OnOffController \"On-off controller\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    Blocks.Interfaces.RealInput reference\r\n      \"Connector of Real input signal used as reference signal\" annotation (\r\n        Placement(transformation(extent={{-140,80},{-100,40}})));\r\n    Blocks.Interfaces.RealInput u\r\n      \"Connector of Real input signal used as measurement signal\" annotation (\r\n        Placement(transformation(extent={{-140,-40},{-100,-80}})));\r\n    Blocks.Interfaces.BooleanOutput y\r\n      \"Connector of Real output signal used as actuator signal\" annotation (\r\n        Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n    parameter Real bandwidth(start=0.1) \"Bandwidth around reference signal\";\r\n    parameter Boolean pre_y_start=false \"Value of pre(y) at initial time\";\r\n\r\n  initial equation\r\n    pre(y) = pre_y_start;\r\n  equation\r\n    y = pre(y) and (u < reference + bandwidth/2) or (u < reference - bandwidth/\r\n      2);\r\n    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n              -100},{100,100}}), graphics={\r\n          Text(\r\n            extent={{-92,74},{44,44}},\r\n            textString=\"reference\"),\r\n          Text(\r\n            extent={{-94,-52},{-34,-74}},\r\n            textString=\"u\"),\r\n          Line(points={{-76,-32},{-68,-6},{-50,26},{-24,40},{-2,42},{16,36},{32,28},{48,12},{58,-6},{68,-28}},\r\n            color={0,0,127}),\r\n          Line(points={{-78,-2},{-6,18},{82,-12}},\r\n            color={255,0,0}),\r\n          Line(points={{-78,12},{-6,30},{82,0}}),\r\n          Line(points={{-78,-16},{-6,4},{82,-26}}),\r\n          Line(points={{-82,-18},{-56,-18},{-56,-40},{64,-40},{64,-20},{90,-20}},\r\n            color={255,0,255})}), Documentation(info=\"<html>\r\n<p>The block OnOffController sets the output signal <strong>y</strong> to <strong>true</strong> when\r\nthe input signal <strong>u</strong> falls below the <strong>reference</strong> signal minus half of\r\nthe bandwidth and sets the output signal <strong>y</strong> to <strong>false</strong> when the input\r\nsignal <strong>u</strong> exceeds the <strong>reference</strong> signal plus half of the bandwidth.</p>\r\n</html>\"));\r\n  end OnOffController;\r\n\r\n  block TriggeredTrapezoid \"Triggered trapezoid generator\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n\r\n    parameter Real amplitude=1 \"Amplitude of trapezoid\";\r\n    parameter SI.Time rising(final min=0) = 0\r\n      \"Rising duration of trapezoid\";\r\n    parameter SI.Time falling(final min=0) = rising\r\n      \"Falling duration of trapezoid\";\r\n    parameter Real offset=0 \"Offset of output signal\";\r\n\r\n    Blocks.Interfaces.BooleanInput u \"Connector of Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.RealOutput y \"Connector of Real output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n  protected\r\n    discrete Real endValue \"Value of y at time of recent edge\";\r\n    discrete Real rate \"Current rising/falling rate\";\r\n    discrete SI.Time T\r\n      \"Predicted time of output reaching endValue\";\r\n  equation\r\n    y = if time < T then endValue - (T - time)*rate else endValue;\r\n\r\n    when {initial(),u,not u} then\r\n      endValue = if u then offset + amplitude else offset;\r\n      rate = if u and (rising > 0) then amplitude/rising else if not u and (\r\n        falling > 0) then -amplitude/falling else 0;\r\n      T = if u and not (rising > 0) or not u and not (falling > 0) or not abs(\r\n        amplitude) > 0 or initial() then time else time + (endValue - pre(y))/\r\n        rate;\r\n    end when;\r\n    annotation (\r\n      Icon(\r\n        coordinateSystem(preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}),\r\n          graphics={\r\n        Line(points={{-60,-70},{-60,-70},{-30,40},{8,40},{40,-70},{40,-70}},\r\n          color={0,0,127}),\r\n        Line(points={{-90,-70},{82,-70}},\r\n          color={192,192,192}),\r\n        Line(points={{-80,68},{-80,-80}},\r\n          color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{90,-70},{68,-62},{68,-78},{90,-70}}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{-80,90},{-88,68},{-72,68},{-80,90}}),\r\n        Line(points={{-80,-70},{-60,-70},{-60,24},{8,24},{8,-70},{60,-70}},\r\n          color={255,0,255})}),\r\n      Documentation(info=\"<html>\r\n<p>The block TriggeredTrapezoid has a Boolean input and a real\r\noutput signal and requires the parameters <em>amplitude</em>,\r\n<em>rising</em>, <em>falling</em> and <em>offset</em>. The\r\noutput signal <strong>y</strong> represents a trapezoidal signal dependent on the\r\ninput signal <strong>u</strong>.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Logical/TriggeredTrapezoid.png\\\"\r\n     alt=\\\"TriggeredTrapezoid.png\\\">\r\n</div>\r\n\r\n<p>The behaviour is as follows: Assume the initial input to be false. In this\r\ncase, the output will be <em>offset</em>. After a rising edge (i.e., the input\r\nchanges from false to true), the output is rising during <em>rising</em> to the\r\nsum of <em>offset</em> and <em>amplitude</em>. In contrast, after a falling\r\nedge (i.e., the input changes from true to false), the output is falling\r\nduring <em>falling</em> to a value of <em>offset</em>.\r\n</p>\r\n<p>Note, that the case of edges before expiration of rising or falling is\r\nhandled properly.</p>\r\n</html>\"));\r\n  end TriggeredTrapezoid;\r\n\r\n  block Timer\r\n    \"Timer measuring the time from the time instant where the Boolean input became true\"\r\n\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    Blocks.Interfaces.BooleanInput u \"Connector of Boolean input signal\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.RealOutput y \"Connector of Real output signal\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n  protected\r\n    discrete SI.Time entryTime \"Time instant when u became true\";\r\n  initial equation\r\n    pre(entryTime) = 0;\r\n  equation\r\n    when u then\r\n      entryTime = time;\r\n    end when;\r\n    y = if u then time - entryTime else 0.0;\r\n    annotation (\r\n      Icon(\r\n        coordinateSystem(preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}),\r\n          graphics={\r\n        Line(points={{-90,-70},{82,-70}},\r\n          color={192,192,192}),\r\n        Line(points={{-80,68},{-80,-80}},\r\n          color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{90,-70},{68,-62},{68,-78},{90,-70}}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{-80,90},{-88,68},{-72,68},{-80,90}}),\r\n        Line(points={{-80,-70},{-60,-70},{-60,-26},{38,-26},{38,-70},{66,-70}},\r\n          color={255,0,255}),\r\n        Line(points={{-80,0},{-62,0},{40,90},{40,0},{68,0}},\r\n          color={0,0,127})}),\r\n      Documentation(info=\"<html>\r\n<p>When the Boolean input <strong>u</strong> becomes <strong>true</strong>, the timer starts\r\nand the output <strong>y</strong> is the time that has elapsed since <strong>u</strong> became <strong>true</strong>.\r\nWhen the input becomes <strong>false</strong>, the timer stops and the output is reset to zero.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Logical/Timer.png\\\"\r\n     alt=\\\"Timer.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n  end Timer;\r\n\r\n  block LogicalDelay \"Delay boolean signal\"\r\n    extends Blocks.Icons.PartialBooleanBlock;\r\n    parameter SI.Time delayTime(final min=0)=0 \"Time delay\";\r\n    Blocks.Interfaces.BooleanInput u\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n    Blocks.Interfaces.BooleanOutput y1\r\n      annotation (Placement(transformation(extent={{100,50},{120,70}})));\r\n    Blocks.Interfaces.BooleanOutput y2\r\n    annotation (Placement(transformation(extent={{100,-70},{120,-50}})));\r\n  protected\r\n    discrete SI.Time tSwitch;\r\n  initial equation\r\n    tSwitch = time - 2*delayTime;\r\n  equation\r\n    when {u, not u} then\r\n      tSwitch = time;\r\n    end when;\r\n    y1 = if u then true else not (time >= tSwitch + delayTime);\r\n    y2 = if not u then false else (time >= tSwitch + delayTime);\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nWhen input <code>u</code> gets true, output <code>y1</code> gets immediately true, whereas output <code>y2</code> gets true after <code>delayTime</code>.\r\n</p>\r\n<p>\r\nWhen input <code>u</code> gets false, output <code>y1</code> gets false after <code>delayTime</code>, whereas output <code>y2</code> gets immediately false.\r\n</p>\r\n</html>\"), Icon(graphics={\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{-80,90},{-88,68},{-72,68},{-80,90}}),\r\n        Line(points={{-80,68},{-80,-80}},\r\n          color={192,192,192}),\r\n        Line(points={{-90,-70},{82,-70}},\r\n          color={192,192,192}),\r\n        Polygon(lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid,\r\n          points={{90,-70},{68,-62},{68,-78},{90,-70}}),\r\n          Line(points={{-80,-10},{-60,-10},{-60,10},{40,10},{40,-10},{80,-10}},\r\n              color={255,0,255}),\r\n          Line(points={{-80,50},{-60,50},{-60,70},{50,70},{50,50},{80,50}},\r\n              color={255,0,255}),\r\n          Line(points={{-80,-70},{-50,-70},{-50,-50},{40,-50},{40,-70},{80,-70}},\r\n              color={255,0,255}),\r\n          Line(\r\n            points={{-60,70},{-60,-70}},\r\n            color={192,192,192},\r\n            pattern=LinePattern.Dot),\r\n          Line(\r\n            points={{40,70},{40,-70}},\r\n            color={192,192,192},\r\n            pattern=LinePattern.Dot)}));\r\n  end LogicalDelay;\r\n\r\n  block RSFlipFlop \"A basic RS Flip Flop\"\r\n    extends Modelica.Blocks.Icons.PartialBooleanBlock;\r\n    parameter Boolean Qini=false \"Start value of Q at initial time\";\r\n    Modelica.Blocks.Interfaces.BooleanOutput Q annotation (Placement(\r\n          transformation(extent={{100,50},{120,70}})));\r\n    Modelica.Blocks.Interfaces.BooleanOutput QI annotation (Placement(\r\n          transformation(extent={{100,-70},{120,-50}})));\r\n    Modelica.Blocks.Logical.Nor nor annotation (Placement(transformation(extent=\r\n             {{-20,20},{0,40}})));\r\n    Modelica.Blocks.Logical.Nor nor1 annotation (Placement(transformation(\r\n            extent={{-20,-20},{0,0}})));\r\n    Modelica.Blocks.Logical.Pre pre(pre_u_start=not (Qini)) annotation (\r\n        Placement(transformation(extent={{10,20},{30,40}})));\r\n    Modelica.Blocks.Interfaces.BooleanInput S\r\n      annotation (Placement(transformation(extent={{-140,40},{-100,80}})));\r\n    Modelica.Blocks.Interfaces.BooleanInput R\r\n      annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n  equation\r\n    connect(nor1.y, nor.u2) annotation (Line(points={{1,-10},{40,-10},{40,-40},\r\n            {-60,-40},{-60,22},{-22,22}}, color={255,0,255}));\r\n    connect(nor1.y, Q) annotation (Line(points={{1,-10},{60,-10},{60,60},{110,\r\n            60}}, color={255,0,255}));\r\n    connect(nor.y, pre.u)\r\n      annotation (Line(points={{1,30},{8,30}}, color={255,0,255}));\r\n    connect(pre.y, nor1.u1) annotation (Line(points={{31,30},{40,30},{40,10},{-40,\r\n            10},{-40,-10},{-22,-10}}, color={255,0,255}));\r\n    connect(pre.y, QI) annotation (Line(points={{31,30},{80,30},{80,-60},{110,-60}}, color={255,0,255}));\r\n    connect(S, nor.u1) annotation (Line(\r\n        points={{-120,60},{-40,60},{-40,30},{-22,30}}, color={255,0,255}));\r\n    connect(R, nor1.u2) annotation (Line(\r\n        points={{-120,-60},{-40,-60},{-40,-18},{-22,-18}}, color={255,0,255}));\r\n  annotation (\r\n    Icon(graphics={\r\n        Text(\r\n          extent={{-60,-30},{-20,-90}},\r\n          textString=\"R\"),\r\n        Text(\r\n          extent={{-62,90},{-22,30}},\r\n          textString=\"S\"),\r\n        Text(\r\n          extent={{20,90},{60,30}},\r\n          textString=\"Q\"),\r\n        Text(\r\n          extent={{6,-30},{66,-90}},\r\n          textString=\"Q!\"),\r\n        Ellipse(\r\n          extent={{-73,54},{-87,68}},\r\n          lineColor=DynamicSelect({235,235,235}, if S then {0,255,0} else {235,235,235}),\r\n          fillColor=DynamicSelect({235,235,235}, if S then {0,255,0} else {235,235,235}),\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{83,-53},{69,-67}},\r\n          lineColor=DynamicSelect({235,235,235}, if QI then {0,255,0} else {235,235,235}),\r\n          fillColor=DynamicSelect({235,235,235}, if QI then {0,255,0} else {235,235,235}),\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{-71,-52},{-85,-66}},\r\n          lineColor=DynamicSelect({235,235,235}, if R then {0,255,0} else {235,235,235}),\r\n          fillColor=DynamicSelect({235,235,235}, if R then {0,255,0} else {235,235,235}),\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{71,67},{85,53}},\r\n          lineColor=DynamicSelect({235,235,235}, if Q then {0,255,0} else {235,235,235}),\r\n          fillColor=DynamicSelect({235,235,235}, if Q then {0,255,0} else {235,235,235}),\r\n          fillPattern=FillPattern.Solid)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output <code>Q</code> is set by the input <code>S</code>, is reset by the input <code>R</code>, and keeps its value in between. <code>QI</code> is the inverse of <code>Q</code>.\r\n</p>\r\n</html>\"));\r\n  end RSFlipFlop;\r\n\r\n  block AssertCondition \"Assert that input u is true\"\r\n    extends Modelica.Blocks.Interfaces.partialBooleanSI;\r\n    parameter String message = \"Assert block failed\"\r\n      \"Assertion message to be displayed if the input u is false; please adapt\";\r\n    parameter AssertionLevel assertionLevel=AssertionLevel.error\r\n      \"Assertion level\";\r\n  equation\r\n    assert(u,message,assertionLevel);\r\n    annotation (\r\n      Icon(graphics={\r\n          Text(\r\n            extent={{-90,40},{90,-40}},\r\n            textString=\"assert\")}),\r\n      Documentation(\r\n        info=\"<html>\r\n<p>\r\nThis block asserts that the Boolean input&nbsp;<strong>u</strong> is <strong>true</strong>.\r\nIf&nbsp;<strong>u</strong> is <strong>false</strong>, the simulation will\r\neither abort with an error (if <strong>assertionLevel</strong> is set to\r\n<strong>error</strong>), or issue a&nbsp;warning and continue (if\r\n<strong>assertionLevel</strong> is set to <strong>warning</strong>).\r\nThe <strong>message</strong> will be reported in either case.\r\nFor further information, refer to the documentation of\r\n<a href=\\\"modelica://ModelicaReference.Operators.'assert()'\\\">ModelicaReference.Operators.'assert()'</a>\r\n&ndash; an operator which this block is based on.\r\n</p>\r\n<p>\r\nTypically, this block is used by connecting a&nbsp;(possibly) <strong>time\r\nvarying</strong> outside condition and the input&nbsp;<strong>u</strong>\r\nto abort the simulation if the condition fails.\r\n</p>\r\n</html>\"));\r\n  end AssertCondition;\r\n\r\n  block TerminateSimulation \"Terminate simulation if condition is fulfilled\"\r\n\r\n    Modelica.Blocks.Interfaces.BooleanOutput condition=false\r\n      \"Terminate simulation when condition becomes true\" annotation (Dialog,\r\n        Placement(transformation(extent={{200,-10},{220,10}})));\r\n    parameter String terminationText=\"... End condition reached\"\r\n      \"Text that will be displayed when simulation is terminated\";\r\n\r\n  equation\r\n    when condition then\r\n      terminate(terminationText);\r\n    end when;\r\n    annotation (Icon(\r\n        coordinateSystem(preserveAspectRatio=false,\r\n          extent={{-200,-20},{200,20}},\r\n          initialScale=0.2),\r\n          graphics={\r\n        Rectangle(fillColor={235,235,235},\r\n          fillPattern=FillPattern.Solid,\r\n          lineThickness=5,\r\n          borderPattern=BorderPattern.Raised,\r\n          extent={{-200,-20},{200,20}}),\r\n        Text(extent={{-166,-15},{194,15}},\r\n          textString=\"%condition\"),\r\n        Rectangle(fillColor={161,35,41},\r\n          fillPattern=FillPattern.Solid,\r\n          borderPattern=BorderPattern.Raised,\r\n          extent={{-194,-14},{-168,14}}),\r\n        Text(textColor={0,0,255},\r\n          extent={{-200,22},{200,46}},\r\n          textString=\"%name\")}), Documentation(info=\"<html>\r\n<p>\r\nIn the parameter menu, a <strong>time varying</strong> expression can be defined\r\nvia variable <strong>condition</strong>, for example \\\"condition = x &lt; 0\\\",\r\nwhere \\\"x\\\" is a variable that is declared in the model in which the\r\n\\\"TerminateSimulation\\\" block is present.\r\nIf this expression becomes <strong>true</strong>,\r\nthe simulation is (successfully) terminated. A termination message\r\nexplaining the reason for the termination can be given via\r\nparameter \\\"terminationText\\\".\r\n</p>\r\n\r\n</html>\"));\r\n  end TerminateSimulation;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package provides blocks with Boolean input and output signals\r\nto describe logical networks. A typical example for a logical\r\nnetwork built with package Logical is shown in the next figure:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Logical/LogicalNetwork1.png\\\"\r\n     alt=\\\"LogicalNetwork1.png\\\">\r\n</div>\r\n\r\n<p>\r\nThe actual value of Boolean input and/or output signals is displayed\r\nin the respective block icon as \\\"circle\\\", where \\\"white\\\" color means\r\nvalue <strong>false</strong> and \\\"green\\\" color means value <strong>true</strong>. These\r\nvalues are visualized in a diagram animation.\r\n</p>\r\n</html>\"), Icon(graphics={Line(\r\n          points={{-86,-22},{-50,-22},{-50,22},{48,22},{48,-22},{88,-24}},\r\n          color={255,0,255})}));\r\nend Logical", "checksum": "66fb237109c5bf6a04c1fe64519e7d1b83e3fd0b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Logical.mo:2-1032", "component_count": 2, "connection_count": 7, "variable_count": 41, "physical_quantity_count": 3, "parameter_count": 12, "equation_count": 143, "dependency_count": 24, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 174.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation when(条件成立時) condition then terminate(terminationText)", "search_keywords": ["Boolean", "Real", "Time", "system"]}, "components": [{"name": "u_pos", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "rate", "type_name": "Real", "prefixes": ["discrete"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Current rising/falling rate"}], "connections": [{"from_connector": "nor1.y", "to_connector": "nor.u2", "condition": null}, {"from_connector": "nor1.y", "to_connector": "Q", "condition": null}, {"from_connector": "nor.y", "to_connector": "pre.u", "condition": null}, {"from_connector": "pre.y", "to_connector": "nor1.u1", "condition": null}, {"from_connector": "pre.y", "to_connector": "QI", "condition": null}, {"from_connector": "S", "to_connector": "nor.u1", "condition": null}, {"from_connector": "R", "to_connector": "nor1.u2", "condition": null}], "variables": [{"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "if time < T then endValue - (T - time)*rate else endValue", "comment": null}, {"name": "And", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Or", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Xor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Nor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Nand", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Not", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Pre", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Edge", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "not_u", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "not u", "comment": null}, {"name": "FallingEdge", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Change", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "GreaterThreshold", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "GreaterEqualThreshold", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LessThreshold", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LessEqualThreshold", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Greater", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "GreaterEqual", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Less", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LessEqual", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "disable", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "not enable", "comment": null}, {"name": "u_pos", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "enable and u >= 0", "comment": null}, {"name": "ZeroCrossing", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LogicalSwitch", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Switch", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Hysteresis", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "OnOffController", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "endValue", "type_name": "Real", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Value of y at time of recent edge\""}, {"name": "rate", "type_name": "Real", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Current rising/falling rate\""}, {"name": "T", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Predicted time of output reaching endValue\""}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TriggeredTrapezoid", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "entryTime", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": "\"Time instant when u became true\""}, {"name": "Timer", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tSwitch", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LogicalDelay", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "RSFlipFlop", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "AssertCondition", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "condition", "type_name": "Modelica.Blocks.Interfaces.BooleanOutput", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n      \"Terminate simulation when condition becomes true\" \r\n    parameter String terminationText=\"... End condition reached\"\r\n      \"Text that will be displayed when simulation is terminated\"", "comment": null}, {"name": "TerminateSimulation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "T", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "entryTime", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "tSwitch", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}], "dependencies": ["AssertionLevel", "Blocks.Icons", "Blocks.Interfaces", "BorderPattern", "FillPattern", "Hysteresis", "LinePattern", "Logical", "LogicalNetwork1", "Modelica.Blocks.Discrete", "Modelica.Blocks.Icons", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Logical", "Modelica.Icons", "ModelicaReference", "SI", "Smooth", "Timer", "TriggeredTrapezoid", "e", "i", "nor", "nor1", "pre"], "inheritance_chain": ["Modelica.Icons.Package", "Blocks.Interfaces.partialBooleanSI2SO", "Blocks.Interfaces.partialBooleanSISO", "Blocks.Interfaces.partialBooleanThresholdComparison", "Blocks.Interfaces.partialBooleanComparison", "Blocks.Interfaces.partialBooleanSO", "Blocks.Interfaces.partialBooleanSI3SO", "Modelica.Blocks.Icons.PartialBooleanBlock", "Blocks.Icons.PartialBooleanBlock", "Modelica.Blocks.Interfaces.partialBooleanSI"]}
{"fqn": "Modelica.Blocks.MathInteger", "kind": "package", "name": "MathInteger", "package_path": ["Modelica", "Blocks"], "extends": ["Modelica.Icons.Package", "Modelica.Blocks.Interfaces.PartialIntegerMISO", "Modelica.Blocks.Interfaces.PartialIntegerSISO"], "imports": [], "parameters": [{"name": "y_default", "type": "Integer", "default": "0 \"Default value of output y if use_pre_as_default=false, as well as pre(y) at initial time\"", "description": null}, {"name": "use_pre_as_default", "type": "Boolean", "default": "true \"= true, y holds its last value if all u[i]=false, otherwise y=y_default\" parameter Integer nu(min=0) = 0 \"Number of input connections\" Modelica.Blocks.Interfaces.BooleanVecto", "description": null}, {"name": "use_reset", "type": "Boolean", "default": "false \"= true, if reset port enabled\" parameter Boolean use_set = false \"= true, if set port enabled and used as default value when reset\" parameter Integer y_start = 0 \"Initial an", "description": null}, {"name": "k[nu]", "type": "Integer", "default": "fill(1,nu) \"Input gains\"", "description": null}], "equations": [{"equations": ["equation\r\n    if use_reset then\r\n       connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if", "else\r\n       local_reset = false", "local_set = 0", "end if", "when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 211, "end_line": 226, "start_col": 3, "end_col": 14}}, {"equations": ["if use_reset then\r\n       connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if", "else\r\n       local_reset = false", "local_set = 0", "end if", "when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 212, "end_line": 226, "start_col": 5, "end_col": 14}}, {"equations": ["when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 224, "end_line": 226, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 226, "end_line": 226, "start_col": 9, "end_col": 13}}, {"equations": ["y = if local_reset then local_set else pre(y) + u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 225, "end_line": 225, "start_col": 8, "end_col": 58}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 224, "end_line": 224, "start_col": 5, "end_col": 9}}, {"equations": ["if use_reset then\r\n       connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if", "else\r\n       local_reset = false", "local_set = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 212, "end_line": 222, "start_col": 5, "end_col": 11}}, {"equations": ["local_reset = false", "local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 220, "end_line": 221, "start_col": 8, "end_col": 22}}, {"equations": ["local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 221, "end_line": 221, "start_col": 8, "end_col": 21}}, {"equations": ["local_reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 220, "end_line": 220, "start_col": 8, "end_col": 27}}, {"equations": ["connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 213, "end_line": 218, "start_col": 8, "end_col": 17}}, {"equations": ["if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 214, "end_line": 218, "start_col": 10, "end_col": 16}}, {"equations": ["local_set = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 217, "end_line": 217, "start_col": 12, "end_col": 32}}, {"equations": ["connect(set, local_set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 215, "end_line": 215, "start_col": 12, "end_col": 36}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 211, "end_line": 211, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(y) = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 209, "end_line": 210, "start_col": 3, "end_col": 22}}, {"equations": ["pre(y) = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 210, "end_line": 210, "start_col": 5, "end_col": 22}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 209, "end_line": 209, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n    if size(u,1) > 0 then\r\n       y = product(u)", "else\r\n       y = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 139, "end_line": 144, "start_col": 3, "end_col": 12}}, {"equations": ["if size(u,1) > 0 then\r\n       y = product(u)", "else\r\n       y = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 140, "end_line": 144, "start_col": 5, "end_col": 12}}, {"equations": ["y = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 143, "end_line": 143, "start_col": 8, "end_col": 14}}, {"equations": ["y = product(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 141, "end_line": 141, "start_col": 8, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 139, "end_line": 139, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    if size(u,1) > 0 then\r\n       y = k*u", "else\r\n       y = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 98, "end_line": 103, "start_col": 3, "end_col": 12}}, {"equations": ["if size(u,1) > 0 then\r\n       y = k*u", "else\r\n       y = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 99, "end_line": 103, "start_col": 5, "end_col": 12}}, {"equations": ["y = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 102, "end_line": 102, "start_col": 8, "end_col": 14}}, {"equations": ["y = k*u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 100, "end_line": 100, "start_col": 8, "end_col": 16}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 98, "end_line": 98, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n  firstActiveIndex = Modelica.Math.BooleanVectors.firstTrueIndex(\r\n                                                  u)", "y = if firstActiveIndex > 0 then expr[firstActiveIndex] else\r\n      if use_pre_as_default then pre(y) else y_default"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 29, "end_line": 33, "start_col": 1, "end_col": 56}}, {"equations": ["firstActiveIndex = Modelica.Math.BooleanVectors.firstTrueIndex(\r\n                                                  u)", "y = if firstActiveIndex > 0 then expr[firstActiveIndex] else\r\n      if use_pre_as_default then pre(y) else y_default"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 30, "end_line": 33, "start_col": 3, "end_col": 56}}, {"equations": ["y = if firstActiveIndex > 0 then expr[firstActiveIndex] else\r\n      if use_pre_as_default then pre(y) else y_default"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 32, "end_line": 33, "start_col": 3, "end_col": 55}}, {"equations": ["firstActiveIndex = Modelica.Math.BooleanVectors.firstTrueIndex(\r\n                                                  u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 30, "end_line": 31, "start_col": 3, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 29, "end_line": 29, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  pre(y) = y_default"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 27, "end_line": 28, "start_col": 1, "end_col": 22}}, {"equations": ["pre(y) = y_default"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 28, "end_line": 28, "start_col": 3, "end_col": 22}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 27, "end_line": 27, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: Modelica.Blocks.Interfaces.IntegerOutput×1 | connections: 2 | params: y_default, use_pre_as_default, use_reset | un", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 2, "end_line": 291, "start_col": 1, "end_col": 16}, "code_text": "package MathInteger\r\n  \"Library of Integer mathematical functions as input/output blocks\"\r\n  extends Modelica.Icons.Package;\r\nblock MultiSwitch\r\n    \"Set Integer expression that is associated with the first active input signal\"\r\n\r\n  input Integer expr[nu]=fill(0, nu)\r\n      \"y = if u[i] then expr[i] elseif use_pre_as_default then pre(y) else y_default\" annotation(Dialog);\r\n  parameter Integer y_default=0\r\n      \"Default value of output y if use_pre_as_default=false, as well as pre(y) at initial time\";\r\n\r\n  parameter Boolean use_pre_as_default=true\r\n      \"= true, y holds its last value if all u[i]=false, otherwise y=y_default\"\r\n        annotation(HideResult=true, choices(checkBox=true));\r\n  parameter Integer nu(min=0) = 0 \"Number of input connections\"\r\n          annotation(Dialog(connectorSizing=true), HideResult=true);\r\n\r\n  Modelica.Blocks.Interfaces.BooleanVectorInput u[nu]\r\n      \"Set y = expr[i], if u[i] = true\"\r\n    annotation (Placement(transformation(extent={{-110,30},{-90,-30}})));\r\n  Modelica.Blocks.Interfaces.IntegerOutput y \"Output depending on expression\"\r\n    annotation (Placement(transformation(extent={{300,-10},{320,10}})));\r\n\r\n  protected\r\n  Integer firstActiveIndex;\r\ninitial equation\r\n  pre(y) = y_default;\r\nequation\r\n  firstActiveIndex = Modelica.Math.BooleanVectors.firstTrueIndex(\r\n                                                  u);\r\n  y = if firstActiveIndex > 0 then expr[firstActiveIndex] else\r\n      if use_pre_as_default then pre(y) else y_default;\r\n  annotation (defaultComponentName=\"multiSwitch1\", Icon(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        extent={{-100,-100},{300,100}}), graphics={\r\n            Text(\r\n              extent={{310,-25},{410,-45}},\r\n              textString=DynamicSelect(\" \", String(\r\n                  y,\r\n                  minimumLength=1,\r\n                  significantDigits=0))),\r\n            Text(\r\n              visible=not use_pre_as_default,\r\n              extent={{-100,-60},{300,-90}},\r\n              textString=\"else: %y_default\"),\r\n            Text(\r\n              visible=use_pre_as_default,\r\n              extent={{-100,-50},{300,-80}},\r\n              textString=\"else: pre(y)\"),\r\n            Rectangle(\r\n              extent={{-100,-40},{300,40}},\r\n              fillColor={255,213,170},\r\n              fillPattern=FillPattern.Solid,\r\n              borderPattern=BorderPattern.Raised),\r\n            Text(\r\n              extent={{-100,90},{300,50}},\r\n              textString=\"%name\",\r\n              textColor={0,0,255}),\r\n            Text(\r\n              extent={{-80,15},{290,-15}},\r\n              textString=\"%expr\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis block has a vector of Boolean input signals u[nu] and a vector of\r\n(time varying) Integer expressions expr[nu]. The output signal y is\r\nset to expr[i], if i is the first element in the input vector u that is true. If all input signals are\r\nfalse, y is set to parameter \\\"y_default\\\" or the last value is kept, if use_pre_as_default = <strong>true</strong>.\r\n</p>\r\n\r\n<blockquote><pre>\r\n// Conceptual equation (not valid Modelica)\r\ni = 'first element of u[:] that is true';\r\ny = <strong>if</strong> i==0 <strong>then</strong> (<strong>if</strong> use_pre_as_default <strong>then</strong> pre(y)\r\n                                        <strong>else</strong> y_default)\r\n    <strong>else</strong> expr[i];\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe input connector is a vector of Boolean input signals.\r\nWhen a connection line is drawn, the dimension of the input\r\nvector is enlarged by one and the connection is automatically\r\nconnected to this new free index (thanks to the\r\nconnectorSizing annotation).\r\n</p>\r\n\r\n<p>\r\nThe usage is demonstrated, e.g., in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.IntegerNetwork1\\\">Modelica.Blocks.Examples.IntegerNetwork1</a>.\r\n</p>\r\n\r\n</html>\"));\r\nend MultiSwitch;\r\n\r\n  block Sum \"Sum of Integers: y = k[1]*u[1] + k[2]*u[2] + ... + k[n]*u[n]\"\r\n     extends Modelica.Blocks.Interfaces.PartialIntegerMISO;\r\n     parameter Integer k[nu] = fill(1,nu) \"Input gains\";\r\n  equation\r\n    if size(u,1) > 0 then\r\n       y = k*u;\r\n    else\r\n       y = 0;\r\n    end if;\r\n    annotation (Icon(graphics={Text(\r\n              extent={{-200,-110},{200,-140}},\r\n              textString=\"%k\"), Text(\r\n              extent={{-72,68},{92,-68}},\r\n              textString=\"+\")}), Documentation(info=\"<html>\r\n<p>\r\nThis blocks computes the scalar Integer output \\\"y\\\" as sum of the elements of the\r\nInteger input signal vector u:\r\n</p>\r\n<blockquote><pre>\r\ny = k[1]*u[1] + k[2]*u[2] + ... k[N]*u[N];\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe input connector is a vector of Integer input signals.\r\nWhen a connection line is drawn, the dimension of the input\r\nvector is enlarged by one and the connection is automatically\r\nconnected to this new free index (thanks to the\r\nconnectorSizing annotation).\r\n</p>\r\n\r\n<p>\r\nThe usage is demonstrated, e.g., in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.IntegerNetwork1\\\">Modelica.Blocks.Examples.IntegerNetwork1</a>.\r\n</p>\r\n\r\n<p>\r\nIf no connection to the input connector \\\"u\\\" is present,\r\nthe output is set to zero: y=0.\r\n</p>\r\n</html>\"));\r\n  end Sum;\r\n\r\n  block Product \"Product of Integer: y = u[1]*u[2]* ... *u[n]\"\r\n     extends Modelica.Blocks.Interfaces.PartialIntegerMISO;\r\n  equation\r\n    if size(u,1) > 0 then\r\n       y = product(u);\r\n    else\r\n       y = 0;\r\n    end if;\r\n\r\n    annotation (Icon(graphics={Text(\r\n              extent={{-74,50},{94,-94}},\r\n              textString=\"*\")}), Documentation(info=\"<html>\r\n<p>\r\nThis blocks computes the scalar Integer output \\\"y\\\" as product of the elements of the\r\nInteger input signal vector u:\r\n</p>\r\n<blockquote><pre>\r\ny = u[1]*u[2]* ... *u[N];\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe input connector is a vector of Integer input signals.\r\nWhen a connection line is drawn, the dimension of the input\r\nvector is enlarged by one and the connection is automatically\r\nconnected to this new free index (thanks to the\r\nconnectorSizing annotation).\r\n</p>\r\n\r\n<p>\r\nThe usage is demonstrated, e.g., in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.IntegerNetwork1\\\">Modelica.Blocks.Examples.IntegerNetwork1</a>.\r\n</p>\r\n\r\n<p>\r\nIf no connection to the input connector \\\"u\\\" is present,\r\nthe output is set to zero: y=0.\r\n</p>\r\n</html>\"));\r\n  end Product;\r\n\r\n  block TriggeredAdd\r\n    \"Add input to previous value of output, if rising edge of trigger port\"\r\n    extends Modelica.Blocks.Interfaces.PartialIntegerSISO;\r\n\r\n    parameter Boolean use_reset = false \"= true, if reset port enabled\"\r\n          annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Boolean use_set = false\r\n      \"= true, if set port enabled and used as default value when reset\"\r\n          annotation(Dialog(enable=use_reset), Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Integer y_start = 0\r\n      \"Initial and reset value of y if set port is not used\";\r\n\r\n    Modelica.Blocks.Interfaces.BooleanInput trigger annotation (Placement(\r\n          transformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=90,\r\n          origin={-60,-120})));\r\n    Modelica.Blocks.Interfaces.BooleanInput reset if use_reset annotation (Placement(\r\n          transformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=90,\r\n          origin={60,-120})));\r\n    Modelica.Blocks.Interfaces.IntegerInput set if use_set annotation (Placement(transformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=270,\r\n          origin={60,120}), iconTransformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=270,\r\n          origin={28,98})));\r\n  protected\r\n    Modelica.Blocks.Interfaces.BooleanOutput local_reset annotation(HideResult=true);\r\n    Modelica.Blocks.Interfaces.IntegerOutput local_set;\r\n  initial equation\r\n    pre(y) = y_start;\r\n  equation\r\n    if use_reset then\r\n       connect(reset, local_reset);\r\n         if use_set then\r\n           connect(set, local_set);\r\n         else\r\n           local_set = y_start;\r\n         end if;\r\n    else\r\n       local_reset = false;\r\n       local_set = 0;\r\n    end if;\r\n\r\n    when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u;\r\n    end when;\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=false, extent={{-100,-100},{100,100}},\r\n          initialScale=0.06), graphics={\r\n            Line(\r\n              points={{-100,0},{32,76}},\r\n              color={255,128,0},\r\n              pattern=LinePattern.Dot),\r\n            Line(\r\n              points={{-100,0},{32,-20}},\r\n              color={255,128,0},\r\n              pattern=LinePattern.Dot),\r\n            Line(\r\n              points={{-54,-56},{-26,-56},{-26,-20},{32,-20},{32,76}}),\r\n            Line(\r\n              points={{-60,-100},{32,-20}},\r\n              color={255,0,255},\r\n              pattern=LinePattern.Dot),\r\n            Text(\r\n              visible=use_reset,\r\n              extent={{-28,-62},{94,-86}},\r\n              textString=\"reset\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nAdd input to previous value of output, if rising edge of trigger port\r\n</p>\r\n\r\n<p>\r\nThis block has one Integer input \\\"u\\\", one Boolean input \\\"trigger\\\",\r\nan optional Boolean input \\\"reset\\\", an optional Integer input \\\"set\\\", and\r\nan Integer output \\\"y\\\".\r\nThe optional inputs can be activated with the \\\"use_reset\\\" and\r\n\\\"use_set\\\" flags, respectively.\r\n</p>\r\n\r\n<p>\r\nThe input \\\"u\\\" is added to the previous value of the\r\noutput \\\"y\\\" if the \\\"trigger\\\" port has a rising edge. At the start of the\r\nsimulation \\\"y = y_start\\\".\r\n</p>\r\n\r\n<p>\r\nIf the \\\"reset\\\" port is enabled, then the output \\\"y\\\" is reset to \\\"set\\\"\r\nor to \\\"y_start\\\" (if the \\\"set\\\" port is not enabled), whenever the \\\"reset\\\"\r\nport has a rising edge.\r\n</p>\r\n\r\n<p>\r\nThe usage is demonstrated, e.g., in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.IntegerNetwork1\\\">Modelica.Blocks.Examples.IntegerNetwork1</a>.\r\n</p>\r\n\r\n</html>\"));\r\n  end TriggeredAdd;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains basic <strong>mathematical operations</strong>\r\non <strong>Integer</strong> signals.\r\n</p>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n            {100,100}}), graphics={Line(\r\n          points={{-74,-66},{-46,-66},{-46,-30},{12,-30},{12,66}},\r\n          color={255,128,0}), Line(\r\n          points={{12,66},{70,66}},\r\n          color={255,128,0})}));\r\nend MathInteger", "checksum": "d9c1b71feee9142b07df8eb005e6ecba692cbb59", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo:2-291", "component_count": 1, "connection_count": 2, "variable_count": 11, "physical_quantity_count": 6, "parameter_count": 4, "equation_count": 36, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 46.0, "model_type": "library", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation if(条件なら) use_reset then connect(reset, local_reset)", "search_keywords": ["Modelica.Blocks.Interfaces.IntegerOutput", "electrical", "firstActiveIndex", "library", "nu"]}, "components": [{"name": "local_set", "type_name": "Modelica.Blocks.Interfaces.IntegerOutput", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "reset", "to_connector": "local_reset", "condition": null}, {"from_connector": "set", "to_connector": "local_set", "condition": null}], "variables": [{"name": "expr", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": "fill(0, nu)\r\n      \"y = if u[i] then expr[i] elseif use_pre_as_default then pre(y) else y_default\" \r\n  parameter Integer y_default=0\r\n      \"Default value of output y if use_pre_as_default=false, as well as pre(y) at initial time\"", "comment": null}, {"name": "firstActiveIndex", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Math.BooleanVectors.firstTrueIndex(\r\n                                                  u)", "comment": null}, {"name": "MultiSwitch", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "0", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Sum", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Product", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "local_set", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "y_start", "comment": null}, {"name": "local_reset", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TriggeredAdd", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "signal", "unit": "nu", "display_unit": null, "quantity": null, "nominal": null}, {"name": "true", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}, {"name": "connections", "unit": "nu", "display_unit": null, "quantity": null, "nominal": null}, {"name": "expression", "unit": "firstActiveIndex", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Sum", "unit": "n", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Product", "unit": "n", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["BorderPattern", "FillPattern", "LinePattern", "Modelica.Blocks.Examples", "Modelica.Blocks.Interfaces", "Modelica.Icons", "Modelica.Math.BooleanVectors", "e"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Blocks.Interfaces.PartialIntegerMISO", "Modelica.Blocks.Interfaces.PartialIntegerSISO"]}
{"fqn": "Modelica.Blocks", "kind": "package", "name": "Blocks", "package_path": ["Modelica"], "extends": ["Modelica.Icons.Package", "Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse", "Modelica.Icons.UtilitiesPackage", "Modelica.Blocks.Icons.Block", "Modelica.Blocks.Interfaces.SO", "Modelica.Electrical.Machines.Icons.TransientMachine", "Modelica.Icons.InterfacesPackage", "Modelica.Icons.SignalBus", "Modelica.Icons.SignalSubBus"], "imports": ["Modelica.Units.SI", "Modelica.Constants.pi", "distribution"], "parameters": [{"name": "driveAngle", "type": "SI.Angle", "default": "1.570796326794897 \"Reference distance to move\"", "description": null}, {"name": "order", "type": "Integer", "default": "2 \"Filter order\"", "description": null}, {"name": "f_cut", "type": "SI.Frequency", "default": "2 \"Cut-off frequency\"", "description": null}, {"name": "filterType", "type": "Modelica.Blocks.Types.FilterType", "default": "Modelica.Blocks.Types.FilterType.LowPass \"Type of filter (LowPass/HighPass)\"", "description": null}, {"name": "init", "type": "Modelica.Blocks.Types.Init", "default": "Modelica.Blocks.Types.Init.SteadyState \"Type of initialization (no init/steady state/initial state/initial output)\"", "description": null}, {"name": "normalized", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "riseTime", "type": "SI.Time", "default": "2 \"Time to reach the step input\"", "description": null}, {"name": "vMax", "type": "SI.Velocity", "default": "2 \"Max. velocity\"", "description": null}, {"name": "aMax", "type": "SI.Acceleration", "default": "20 \"Max. acceleration\"", "description": null}, {"name": "f1", "type": "SI.Frequency", "default": "50 \"Fundamental wave frequency\"", "description": null}, {"name": "V1", "type": "SI.Voltage", "default": "100 \"Fundamental wave RMS voltage\"", "description": null}, {"name": "V3", "type": "SI.Voltage", "default": "20 \"Third harmonic wave RMS voltage\"", "description": null}, {"name": "offset", "type": "Real", "default": "0 \"Offset of pulse signal\"", "description": null}, {"name": "f", "type": "Modelica.Units.SI.Frequency", "default": "50 \"Base frequency of pulse signal\"", "description": null}, {"name": "y_mean", "type": "Real", "default": "offset + app*dutyCycle \"Mean value\"", "description": null}, {"name": "y_rect", "type": "Real", "default": "abs(offset + app)*dutyCycle + abs(offset)*(1 - dutyCycle) \"Rectified mean\"", "description": null}, {"name": "y_rms", "type": "Real", "default": "sqrt((offset + app)^2*dutyCycle + offset^2*(1 - dutyCycle)) \"Root mean square\"", "description": null}, {"name": "y1_cos", "type": "Real", "default": "((offset + app)*( sin(dutyCycle*2*pi) - sin(0)) + offset*( sin(2*pi) - sin(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic cosine rms component\"", "description": null}, {"name": "y1_sin", "type": "Real", "default": "((offset + app)*(-cos(dutyCycle*2*pi) + cos(0)) + offset*(-cos(2*pi) + cos(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic sine rms component\"", "description": null}, {"name": "y1_rms", "type": "Real", "default": "sqrt(y1_cos^2+y1_sin^2) \"RMS value of first harmonic\"", "description": null}, {"name": "y1_arg", "type": "Real", "default": "atan2(y1_sin,y1_cos) \"Argument of first harmonic\"", "description": null}, {"name": "startTime", "type": "SI.Time", "default": "0.5 \"Start time of noise\"", "description": null}, {"name": "y_off", "type": "Real", "default": "-1.0 \"Output of block before startTime\"", "description": null}, {"name": "samplePeriod", "type": "SI.Period", "default": "0.02 \"Sample period of all blocks\"", "description": null}, {"name": "y_min", "type": "Real", "default": "0 \"Minimum value of band\"", "description": null}, {"name": "y_max", "type": "Real", "default": "6 \"Maximum value of band\"", "description": null}, {"name": "pMean", "type": "Real", "default": "mu \"Theoretical mean value of normal distribution\"", "description": null}, {"name": "var", "type": "Real", "default": "sigma^2 \"Theoretical variance of uniform distribution\"", "description": null}, {"name": "std", "type": "Real", "default": "sigma \"Theoretical standard deviation of normal distribution\"", "description": null}, {"name": "mu", "type": "Real", "default": "3 \"Mean value for normal distribution\"", "description": null}, {"name": "sigma", "type": "Real", "default": "1 \"Standard deviation for normal distribution\"", "description": null}, {"name": "V", "type": "SI.Velocity", "default": "140 * 0.5144 \"Airspeed of aircraft (typically 140kts during approach)\"", "description": null}, {"name": "L", "type": "SI.Length", "default": "600 * 0.3048 \"Scale length (= flight altitude)\"", "description": null}, {"name": "if amplitude at f_cut", "type": "Boolean", "default": "-3db", "description": null}, {"name": "otherwise unmodified filter\"", "type": "Boolean", "default": "", "description": null}, {"name": "app(final min", "type": "Real", "default": "0)=1 \"Peak-to-peak value of pulse signal\"", "description": null}, {"name": "dutyCycle(final min", "type": "Real", "default": "0, final max=1)=0.5 \"Duty cycle of pulse signal\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(realExpression.y, subControlBus.myRealSignal) annotation (Line(\r\n          points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}))", "connect(booleanExpression.y, subControlBus.myBooleanSignal) annotation (\r\n          Line(\r\n          points={{21.3,-20},{60,-20},{60,0},{100,0}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 3181, "end_line": 3186, "start_col": 5, "end_col": 76}}, {"equations": ["connect(realExpression.y, subControlBus.myRealSignal) annotation (Line(\r\n          points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}))", "connect(booleanExpression.y, subControlBus.myBooleanSignal) annotation (\r\n          Line(\r\n          points={{21.3,-20},{60,-20},{60,0},{100,0}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 3182, "end_line": 3186, "start_col": 7, "end_col": 76}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 3181, "end_line": 3181, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2991, "start_col": 9, "end_col": 70}}, {"equations": ["connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2974, "end_line": 2991, "start_col": 11, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2973, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2895, "start_col": 9, "end_col": 68}}, {"equations": ["connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2844, "end_line": 2895, "start_col": 11, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2843, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n         when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2682, "end_line": 2685, "start_col": 7, "end_col": 19}}, {"equations": ["when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2683, "end_line": 2685, "start_col": 10, "end_col": 19}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2685, "end_line": 2685, "start_col": 14, "end_col": 18}}, {"equations": ["y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2684, "end_line": 2684, "start_col": 13, "end_col": 83}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2683, "end_line": 2683, "start_col": 10, "end_col": 14}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2682, "end_line": 2682, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, lambda, k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2612, "end_line": 2613, "start_col": 7, "end_col": 40}}, {"equations": ["y = distribution(u, lambda, k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2613, "end_line": 2613, "start_col": 9, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2612, "end_line": 2612, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, mu, sigma)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2540, "end_line": 2541, "start_col": 7, "end_col": 40}}, {"equations": ["y = distribution(u, mu, sigma)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2541, "end_line": 2541, "start_col": 9, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2540, "end_line": 2540, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, u_min, u_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2469, "end_line": 2470, "start_col": 7, "end_col": 43}}, {"equations": ["y = distribution(u, u_min, u_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2470, "end_line": 2470, "start_col": 9, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2469, "end_line": 2469, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n      connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}))", "connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2380, "end_line": 2384, "start_col": 5, "end_col": 55}}, {"equations": ["connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}))", "connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2381, "end_line": 2384, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2380, "end_line": 2380, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}))", "connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}))", "connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}))", "connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}))", "connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}))", "connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}))", "connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}))", "connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}))", "connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}))", "connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2275, "end_line": 2295, "start_col": 5, "end_col": 53}}, {"equations": ["connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}))", "connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}))", "connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}))", "connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}))", "connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}))", "connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}))", "connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}))", "connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}))", "connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}))", "connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2276, "end_line": 2295, "start_col": 7, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2275, "end_line": 2275, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}))", "connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}))", "connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}))", "connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}))", "connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2151, "end_line": 2161, "start_col": 5, "end_col": 69}}, {"equations": ["connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}))", "connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}))", "connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}))", "connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}))", "connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2152, "end_line": 2161, "start_col": 7, "end_col": 69}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2151, "end_line": 2151, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2086, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2065, "end_line": 2086, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2064, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1982, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1961, "end_line": 1982, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1960, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n    connect(pulse.y, mean.u) annotation (Line(points={{-39,0},{-20,0},{-20,60},{-12,\r\n            60}}, color={0,0,127}))", "connect(pulse.y, rectifiedMean.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            20},{-12,20}}, color={0,0,127}))", "connect(pulse.y, rootMeanSquare.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            -20},{-12,-20}}, color={0,0,127}))", "connect(pulse.y, harmonic.u) annotation (Line(points={{-39,0},{-20,0},{-20,-60},\r\n            {-12,-60}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1627, "end_line": 1635, "start_col": 3, "end_col": 43}}, {"equations": ["connect(pulse.y, mean.u) annotation (Line(points={{-39,0},{-20,0},{-20,60},{-12,\r\n            60}}, color={0,0,127}))", "connect(pulse.y, rectifiedMean.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            20},{-12,20}}, color={0,0,127}))", "connect(pulse.y, rootMeanSquare.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            -20},{-12,-20}}, color={0,0,127}))", "connect(pulse.y, harmonic.u) annotation (Line(points={{-39,0},{-20,0},{-20,-60},\r\n            {-12,-60}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1628, "end_line": 1635, "start_col": 5, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1627, "end_line": 1627, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(amplitude.y, product1.u2) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,74},{-2,74}}, color={0,0,127}))", "connect(amplitude.y, product2.u1) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,26},{-2,26}}, color={0,0,127}))", "connect(sine.y, product1.u1) annotation (Line(points={{-39,80},{-20,80},{-20,\r\n            86},{-2,86}},  color={0,0,127}))", "connect(sawTooth.y, product2.u2) annotation (Line(points={{-39,20},{-20,20},\r\n            {-20,14},{-2,14}}, color={0,0,127}))", "connect(product1.y, signalExtrema1.u)\r\n      annotation (Line(points={{21,80},{58,80}}, color={0,0,127}))", "connect(product2.y, signalExtrema2.u)\r\n      annotation (Line(points={{21,20},{58,20}}, color={0,0,127}))", "connect(sine1.y, add.u1) annotation (Line(points={{-39,-40},{-32,-40},{-32,\r\n            -54},{-22,-54}}, color={0,0,127}))", "connect(pulse.y, add.u2) annotation (Line(points={{-39,-80},{-32,-80},{-32,\r\n            -66},{-22,-66}}, color={0,0,127}))", "connect(add.y, product3.u2) annotation (Line(points={{1,-60},{10,-60},{10,\r\n            -46},{18,-46}}, color={0,0,127}))", "connect(sawTooth1.y, product3.u1) annotation (Line(points={{1,-20},{10,-20},\r\n            {10,-34},{18,-34}}, color={0,0,127}))", "connect(product3.y, signalExtrema3.u)\r\n      annotation (Line(points={{41,-40},{58,-40}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1558, "end_line": 1580, "start_col": 3, "end_col": 70}}, {"equations": ["connect(amplitude.y, product1.u2) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,74},{-2,74}}, color={0,0,127}))", "connect(amplitude.y, product2.u1) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,26},{-2,26}}, color={0,0,127}))", "connect(sine.y, product1.u1) annotation (Line(points={{-39,80},{-20,80},{-20,\r\n            86},{-2,86}},  color={0,0,127}))", "connect(sawTooth.y, product2.u2) annotation (Line(points={{-39,20},{-20,20},\r\n            {-20,14},{-2,14}}, color={0,0,127}))", "connect(product1.y, signalExtrema1.u)\r\n      annotation (Line(points={{21,80},{58,80}}, color={0,0,127}))", "connect(product2.y, signalExtrema2.u)\r\n      annotation (Line(points={{21,20},{58,20}}, color={0,0,127}))", "connect(sine1.y, add.u1) annotation (Line(points={{-39,-40},{-32,-40},{-32,\r\n            -54},{-22,-54}}, color={0,0,127}))", "connect(pulse.y, add.u2) annotation (Line(points={{-39,-80},{-32,-80},{-32,\r\n            -66},{-22,-66}}, color={0,0,127}))", "connect(add.y, product3.u2) annotation (Line(points={{1,-60},{10,-60},{10,\r\n            -46},{18,-46}}, color={0,0,127}))", "connect(sawTooth1.y, product3.u1) annotation (Line(points={{1,-20},{10,-20},\r\n            {10,-34},{18,-34}}, color={0,0,127}))", "connect(product3.y, signalExtrema3.u)\r\n      annotation (Line(points={{41,-40},{58,-40}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1559, "end_line": 1580, "start_col": 5, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1558, "end_line": 1558, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(sine.y, signalExtrema1.u)\r\n      annotation (Line(points={{1,0},{20,0},{20,20},{38,20}}, color={0,0,127}))", "connect(sine.y, signalExtrema2.u) annotation (Line(points={{1,0},{20,0},{20,-20},\r\n            {38,-20}}, color={0,0,127}))", "connect(amplitude.y, sine.amplitude) annotation (Line(points={{-59,20},{-40,\r\n            20},{-40,6},{-22,6}}, color={0,0,127}))", "connect(frequency.y, sine.f) annotation (Line(points={{-59,-20},{-40,-20},{\r\n            -40,-6},{-22,-6}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1487, "end_line": 1495, "start_col": 3, "end_col": 50}}, {"equations": ["connect(sine.y, signalExtrema1.u)\r\n      annotation (Line(points={{1,0},{20,0},{20,20},{38,20}}, color={0,0,127}))", "connect(sine.y, signalExtrema2.u) annotation (Line(points={{1,0},{20,0},{20,-20},\r\n            {38,-20}}, color={0,0,127}))", "connect(amplitude.y, sine.amplitude) annotation (Line(points={{-59,20},{-40,\r\n            20},{-40,6},{-22,6}}, color={0,0,127}))", "connect(frequency.y, sine.f) annotation (Line(points={{-59,-20},{-40,-20},{\r\n            -40,-6},{-22,-6}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1488, "end_line": 1495, "start_col": 5, "end_col": 50}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1487, "end_line": 1487, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(ramp.y, sinA.f) annotation (Line(points={{-79,0},{-70,0},{-70,-26},{-62,\r\n            -26}},color={0,0,127}))", "connect(ramp.y, sinAminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,-56},\r\n            {-62,-56}}, color={0,0,127}))", "connect(ramp.y, cosBminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,14},\r\n            {-62,14}}, color={0,0,127}))", "connect(ramp.y, cosB.f) annotation (Line(points={{-79,0},{-70,0},{-70,44},{-62,\r\n            44}}, color={0,0,127}))", "connect(cosBminus.y, feedbackCos.u2)\r\n      annotation (Line(points={{-39,20},{-20,20},{-20,42}}, color={0,0,127}))", "connect(cosB.y, feedbackCos.u1)\r\n      annotation (Line(points={{-39,50},{-28,50}}, color={0,0,127}))", "connect(sinA.y, feedbackSin.u1)\r\n      annotation (Line(points={{-39,-20},{-28,-20}}, color={0,0,127}))", "connect(sinAminus.y, feedbackSin.u2)\r\n      annotation (Line(points={{-39,-50},{-20,-50},{-20,-28}}, color={0,0,127}))", "connect(feedbackCos.y, rotator.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,0},{8,0}}, color={0,0,127}))", "connect(feedbackSin.y, rotator.u[2])\r\n      annotation (Line(points={{-11,-20},{0,-20},{0,0},{8,0}}, color={0,0,127}))", "connect(rotator.y[2], integrator.u)\r\n      annotation (Line(points={{31,0},{38,0}}, color={0,0,127}))", "connect(integrator.y, rotator.angle) annotation (Line(points={{61,0},{70,0},{70,\r\n            -20},{20,-20},{20,-12}}, color={0,0,127}))", "connect(integrator.y, der1.u)\r\n      annotation (Line(points={{61,0},{78,0}}, color={0,0,127}))", "connect(integrator.y, wrapAngle.u)\r\n      annotation (Line(points={{61,0},{70,0},{70,30},{78,30}}, color={0,0,127}))", "connect(feedbackCos.y, toPolar.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,30},{8,30}}, color={0,0,127}))", "connect(feedbackSin.y, toPolar.u[2]) annotation (Line(points={{-11,-20},{0,-20},\r\n            {0,30},{8,30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1389, "end_line": 1421, "start_col": 3, "end_col": 47}}, {"equations": ["connect(ramp.y, sinA.f) annotation (Line(points={{-79,0},{-70,0},{-70,-26},{-62,\r\n            -26}},color={0,0,127}))", "connect(ramp.y, sinAminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,-56},\r\n            {-62,-56}}, color={0,0,127}))", "connect(ramp.y, cosBminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,14},\r\n            {-62,14}}, color={0,0,127}))", "connect(ramp.y, cosB.f) annotation (Line(points={{-79,0},{-70,0},{-70,44},{-62,\r\n            44}}, color={0,0,127}))", "connect(cosBminus.y, feedbackCos.u2)\r\n      annotation (Line(points={{-39,20},{-20,20},{-20,42}}, color={0,0,127}))", "connect(cosB.y, feedbackCos.u1)\r\n      annotation (Line(points={{-39,50},{-28,50}}, color={0,0,127}))", "connect(sinA.y, feedbackSin.u1)\r\n      annotation (Line(points={{-39,-20},{-28,-20}}, color={0,0,127}))", "connect(sinAminus.y, feedbackSin.u2)\r\n      annotation (Line(points={{-39,-50},{-20,-50},{-20,-28}}, color={0,0,127}))", "connect(feedbackCos.y, rotator.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,0},{8,0}}, color={0,0,127}))", "connect(feedbackSin.y, rotator.u[2])\r\n      annotation (Line(points={{-11,-20},{0,-20},{0,0},{8,0}}, color={0,0,127}))", "connect(rotator.y[2], integrator.u)\r\n      annotation (Line(points={{31,0},{38,0}}, color={0,0,127}))", "connect(integrator.y, rotator.angle) annotation (Line(points={{61,0},{70,0},{70,\r\n            -20},{20,-20},{20,-12}}, color={0,0,127}))", "connect(integrator.y, der1.u)\r\n      annotation (Line(points={{61,0},{78,0}}, color={0,0,127}))", "connect(integrator.y, wrapAngle.u)\r\n      annotation (Line(points={{61,0},{70,0},{70,30},{78,30}}, color={0,0,127}))", "connect(feedbackCos.y, toPolar.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,30},{8,30}}, color={0,0,127}))", "connect(feedbackSin.y, toPolar.u[2]) annotation (Line(points={{-11,-20},{0,-20},\r\n            {0,30},{8,30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1390, "end_line": 1421, "start_col": 5, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1389, "end_line": 1389, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(amplitude.y, sinAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,36},{-12,36}}, color={0,0,127}))", "connect(frequency.y, sinFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -46},{-12,-46}}, color={0,0,127}))", "connect(amplitude.y, cosAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,4},{-12,4}}, color={0,0,127}))", "connect(frequency.y, cosFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -76},{-12,-76}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1325, "end_line": 1333, "start_col": 3, "end_col": 48}}, {"equations": ["connect(amplitude.y, sinAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,36},{-12,36}}, color={0,0,127}))", "connect(frequency.y, sinFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -46},{-12,-46}}, color={0,0,127}))", "connect(amplitude.y, cosAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,4},{-12,4}}, color={0,0,127}))", "connect(frequency.y, cosFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -76},{-12,-76}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1326, "end_line": 1333, "start_col": 5, "end_col": 48}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1325, "end_line": 1325, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(voltageSensor.p, sineVoltage3.p) annotation (Line(points={{0,10},{0,30},{-40,30},{-40,20}}, color={0,0,255}))", "connect(sineVoltage3.n, sineVoltage1.p) annotation (Line(points={{-40,0},{-40,-10}}, color={0,0,255}))", "connect(sineVoltage1.n, ground.p) annotation (Line(points={{-40,-30},{-40,-40}}, color={0,0,255}))", "connect(ground.p, voltageSensor.n) annotation (Line(points={{-40,-40},{-40,-30},{0,-30},{0,-10}}, color={0,0,255}))", "connect(thd1.u, voltageSensor.v) annotation (Line(points={{28,20},{20,20},{20,0},{11,0}}, color={0,0,127}))", "connect(voltageSensor.v, thdRMS.u) annotation (Line(points={{11,0},{20,0},{20,-20},{28,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1249, "end_line": 1255, "start_col": 3, "end_col": 117}}, {"equations": ["connect(voltageSensor.p, sineVoltage3.p) annotation (Line(points={{0,10},{0,30},{-40,30},{-40,20}}, color={0,0,255}))", "connect(sineVoltage3.n, sineVoltage1.p) annotation (Line(points={{-40,0},{-40,-10}}, color={0,0,255}))", "connect(sineVoltage1.n, ground.p) annotation (Line(points={{-40,-30},{-40,-40}}, color={0,0,255}))", "connect(ground.p, voltageSensor.n) annotation (Line(points={{-40,-40},{-40,-30},{0,-30},{0,-10}}, color={0,0,255}))", "connect(thd1.u, voltageSensor.v) annotation (Line(points={{28,20},{20,20},{20,0},{11,0}}, color={0,0,127}))", "connect(voltageSensor.v, thdRMS.u) annotation (Line(points={{11,0},{20,0},{20,-20},{28,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1250, "end_line": 1255, "start_col": 5, "end_col": 117}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1249, "end_line": 1249, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(currentSensor.i[1], realFFT.u) annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1195, "end_line": 1196, "start_col": 3, "end_col": 119}}, {"equations": ["connect(currentSensor.i[1], realFFT.u) annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1196, "end_line": 1196, "start_col": 5, "end_col": 119}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1195, "end_line": 1195, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(currentSensor.i[1], realFFT.u)\r\n      annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}},\r\n                                                     color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1152, "end_line": 1155, "start_col": 3, "end_col": 72}}, {"equations": ["connect(currentSensor.i[1], realFFT.u)\r\n      annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}},\r\n                                                     color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1153, "end_line": 1155, "start_col": 5, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1152, "end_line": 1152, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(sine.y, controlBus.realSignal1) annotation (Line(\r\n        points={{-39,50},{12,50},{12,14},{30,14},{30,10}}, color={0,0,127}))", "connect(booleanStep.y, controlBus.booleanSignal) annotation (Line(\r\n        points={{-37,10},{30,10}}, color={255,0,255}))", "connect(integerStep.y, controlBus.integerSignal) annotation (Line(\r\n        points={{-39,-30},{0,-30},{0,6},{32,6},{32,10},{30,10}}, color={255,127,0}))", "connect(part.subControlBus, controlBus.subControlBus) annotation (Line(\r\n        points={{-40,-70},{30,-70},{30,10}},\r\n        color={255,204,51},\r\n        thickness=0.5))", "connect(gain.u, controlBus.realSignal1) annotation (Line(\r\n        points={{-38,80},{20,80},{20,18},{32,18},{32,10},{30,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1015, "end_line": 1028, "start_col": 3, "end_col": 86}}, {"equations": ["connect(sine.y, controlBus.realSignal1) annotation (Line(\r\n        points={{-39,50},{12,50},{12,14},{30,14},{30,10}}, color={0,0,127}))", "connect(booleanStep.y, controlBus.booleanSignal) annotation (Line(\r\n        points={{-37,10},{30,10}}, color={255,0,255}))", "connect(integerStep.y, controlBus.integerSignal) annotation (Line(\r\n        points={{-39,-30},{0,-30},{0,6},{32,6},{32,10},{30,10}}, color={255,127,0}))", "connect(part.subControlBus, controlBus.subControlBus) annotation (Line(\r\n        points={{-40,-70},{30,-70},{30,10}},\r\n        color={255,204,51},\r\n        thickness=0.5))", "connect(gain.u, controlBus.realSignal1) annotation (Line(\r\n        points={{-38,80},{20,80},{20,18},{32,18},{32,10},{30,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1017, "end_line": 1028, "start_col": 5, "end_col": 86}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1015, "end_line": 1015, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(integerTable.y, integerValue.numberPort) annotation (Line(\r\n        points={{-59,30},{-41.5,30}}, color={255,127,0}))", "connect(timeTable.y, realValue.numberPort) annotation (Line(\r\n        points={{-59,70},{-41.5,70}}, color={0,0,127}))", "connect(booleanTable.y, booleanValue.activePort) annotation (Line(\r\n        points={{-59,-10},{-41.5,-10}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 974, "end_line": 980, "start_col": 3, "end_col": 61}}, {"equations": ["connect(integerTable.y, integerValue.numberPort) annotation (Line(\r\n        points={{-59,30},{-41.5,30}}, color={255,127,0}))", "connect(timeTable.y, realValue.numberPort) annotation (Line(\r\n        points={{-59,70},{-41.5,70}}, color={0,0,127}))", "connect(booleanTable.y, booleanValue.activePort) annotation (Line(\r\n        points={{-59,-10},{-41.5,-10}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 975, "end_line": 980, "start_col": 5, "end_col": 61}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 974, "end_line": 974, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(booleanPulse1.y, and1.u[1]) annotation (Line(\r\n        points={{-79,70},{-68,70},{-68,72.8},{-58,72.8}}, color={255,0,255}))", "connect(booleanStep.y, and1.u[2]) annotation (Line(\r\n        points={{-79,38},{-64,38},{-64,70},{-58,70}}, color={255,0,255}))", "connect(booleanPulse2.y, and1.u[3]) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,67.2},{-58,67.2}}, color={255,0,255}))", "connect(and1.y, or1.u[1]) annotation (Line(\r\n        points={{-45.1,70},{-36.4,70},{-36.4,70.1},{-28,70.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or1.u[2]) annotation (Line(\r\n        points={{-79,6},{-40,6},{-40,65.9},{-28,65.9}}, color={255,0,255}))", "connect(or1.y, xor1.u[1]) annotation (Line(\r\n        points={{-15.1,68},{-8,68},{-8,68.1},{-2,68.1}}, color={255,0,255}))", "connect(booleanPulse2.y, xor1.u[2]) annotation (Line(\r\n        points={{-79,6},{-12,6},{-12,63.9},{-2,63.9}}, color={255,0,255}))", "connect(and1.y, showValue.activePort) annotation (Line(\r\n        points={{-45.1,70},{-42,70},{-42,84},{-37.5,84}}, color={255,0,255}))", "connect(or1.y, showValue2.activePort) annotation (Line(\r\n        points={{-15.1,68},{-12,68},{-12,84},{-3.5,84}}, color={255,0,255}))", "connect(xor1.y, showValue3.activePort) annotation (Line(\r\n        points={{10.9,66},{22.5,66}}, color={255,0,255}))", "connect(xor1.y, nand1.u[1]) annotation (Line(\r\n        points={{10.9,66},{16,66},{16,48.1},{22,48.1}}, color={255,0,255}))", "connect(booleanPulse2.y, nand1.u[2]) annotation (Line(\r\n        points={{-79,6},{16,6},{16,44},{22,44},{22,43.9}}, color={255,0,255}))", "connect(nand1.y, or2.u[1]) annotation (Line(\r\n        points={{34.9,46},{46,46},{46,46.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or2.u[2]) annotation (Line(\r\n        points={{-79,6},{42,6},{42,41.9},{46,41.9}}, color={255,0,255}))", "connect(or2.y, nor1.u) annotation (Line(\r\n        points={{58.9,44},{66.4,44}}, color={255,0,255}))", "connect(nor1.y, showValue4.activePort) annotation (Line(\r\n        points={{76.8,44},{88.5,44}}, color={255,0,255}))", "connect(booleanPulse2.y, rising.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-11},{-57.6,-11}}, color={255,0,255}))", "connect(rising.y, set1.u[1]) annotation (Line(\r\n        points={{-47.2,-11},{-38.6,-11},{-38.6,-11.5},{-30,-11.5}}, color={255,0,255}))", "connect(falling.y, set1.u[2]) annotation (Line(\r\n        points={{-47.2,-28},{-40,-28},{-40,-14.5},{-30,-14.5}}, color={255,0,255}))", "connect(booleanPulse2.y, falling.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-28},{-57.6,-28}}, color={255,0,255}))", "connect(booleanTable.y, onDelay.u) annotation (Line(\r\n        points={{-79,-90},{-57.6,-90}}, color={255,0,255}))", "connect(booleanPulse2.y, changing.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-55},{-57.6,-55}}, color={255,0,255}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{1,-50},{11.6,-50}}, color={255,127,0}))", "connect(changing.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{-47.2,-55},{-30,-55},{-30,-74},{16.4,-74},{16.4,-57.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue1.numberPort) annotation (Line(\r\n        points={{27.2,-50},{38.5,-50}}, color={255,127,0}))", "connect(set1.y, showValue5.activePort) annotation (Line(\r\n        points={{11,-13},{22.5,-13}}, color={255,0,255}))", "connect(onDelay.y, showValue6.activePort) annotation (Line(\r\n        points={{-47.2,-90},{-33.5,-90}}, color={255,0,255}))", "connect(sampleTriggerSet.y, rSFlipFlop.S) annotation (Line(\r\n        points={{54.7,-69},{60,-69},{60,-74},{68,-74}}, color={255,0,255}))", "connect(sampleTriggerReset.y, rSFlipFlop.R) annotation (Line(\r\n        points={{54.7,-91},{60,-91},{60,-86},{68,-86}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 871, "end_line": 929, "start_col": 3, "end_col": 77}}, {"equations": ["connect(booleanPulse1.y, and1.u[1]) annotation (Line(\r\n        points={{-79,70},{-68,70},{-68,72.8},{-58,72.8}}, color={255,0,255}))", "connect(booleanStep.y, and1.u[2]) annotation (Line(\r\n        points={{-79,38},{-64,38},{-64,70},{-58,70}}, color={255,0,255}))", "connect(booleanPulse2.y, and1.u[3]) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,67.2},{-58,67.2}}, color={255,0,255}))", "connect(and1.y, or1.u[1]) annotation (Line(\r\n        points={{-45.1,70},{-36.4,70},{-36.4,70.1},{-28,70.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or1.u[2]) annotation (Line(\r\n        points={{-79,6},{-40,6},{-40,65.9},{-28,65.9}}, color={255,0,255}))", "connect(or1.y, xor1.u[1]) annotation (Line(\r\n        points={{-15.1,68},{-8,68},{-8,68.1},{-2,68.1}}, color={255,0,255}))", "connect(booleanPulse2.y, xor1.u[2]) annotation (Line(\r\n        points={{-79,6},{-12,6},{-12,63.9},{-2,63.9}}, color={255,0,255}))", "connect(and1.y, showValue.activePort) annotation (Line(\r\n        points={{-45.1,70},{-42,70},{-42,84},{-37.5,84}}, color={255,0,255}))", "connect(or1.y, showValue2.activePort) annotation (Line(\r\n        points={{-15.1,68},{-12,68},{-12,84},{-3.5,84}}, color={255,0,255}))", "connect(xor1.y, showValue3.activePort) annotation (Line(\r\n        points={{10.9,66},{22.5,66}}, color={255,0,255}))", "connect(xor1.y, nand1.u[1]) annotation (Line(\r\n        points={{10.9,66},{16,66},{16,48.1},{22,48.1}}, color={255,0,255}))", "connect(booleanPulse2.y, nand1.u[2]) annotation (Line(\r\n        points={{-79,6},{16,6},{16,44},{22,44},{22,43.9}}, color={255,0,255}))", "connect(nand1.y, or2.u[1]) annotation (Line(\r\n        points={{34.9,46},{46,46},{46,46.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or2.u[2]) annotation (Line(\r\n        points={{-79,6},{42,6},{42,41.9},{46,41.9}}, color={255,0,255}))", "connect(or2.y, nor1.u) annotation (Line(\r\n        points={{58.9,44},{66.4,44}}, color={255,0,255}))", "connect(nor1.y, showValue4.activePort) annotation (Line(\r\n        points={{76.8,44},{88.5,44}}, color={255,0,255}))", "connect(booleanPulse2.y, rising.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-11},{-57.6,-11}}, color={255,0,255}))", "connect(rising.y, set1.u[1]) annotation (Line(\r\n        points={{-47.2,-11},{-38.6,-11},{-38.6,-11.5},{-30,-11.5}}, color={255,0,255}))", "connect(falling.y, set1.u[2]) annotation (Line(\r\n        points={{-47.2,-28},{-40,-28},{-40,-14.5},{-30,-14.5}}, color={255,0,255}))", "connect(booleanPulse2.y, falling.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-28},{-57.6,-28}}, color={255,0,255}))", "connect(booleanTable.y, onDelay.u) annotation (Line(\r\n        points={{-79,-90},{-57.6,-90}}, color={255,0,255}))", "connect(booleanPulse2.y, changing.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-55},{-57.6,-55}}, color={255,0,255}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{1,-50},{11.6,-50}}, color={255,127,0}))", "connect(changing.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{-47.2,-55},{-30,-55},{-30,-74},{16.4,-74},{16.4,-57.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue1.numberPort) annotation (Line(\r\n        points={{27.2,-50},{38.5,-50}}, color={255,127,0}))", "connect(set1.y, showValue5.activePort) annotation (Line(\r\n        points={{11,-13},{22.5,-13}}, color={255,0,255}))", "connect(onDelay.y, showValue6.activePort) annotation (Line(\r\n        points={{-47.2,-90},{-33.5,-90}}, color={255,0,255}))", "connect(sampleTriggerSet.y, rSFlipFlop.S) annotation (Line(\r\n        points={{54.7,-69},{60,-69},{60,-74},{68,-74}}, color={255,0,255}))", "connect(sampleTriggerReset.y, rSFlipFlop.R) annotation (Line(\r\n        points={{54.7,-91},{60,-91},{60,-86},{68,-86}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 872, "end_line": 929, "start_col": 5, "end_col": 77}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 871, "end_line": 871, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(sine.y, realToInteger.u) annotation (Line(\r\n        points={{-79,70},{-62,70}}, color={0,0,127}))", "connect(realToInteger.y, sum.u[1]) annotation (Line(\r\n        points={{-39,70},{-32,70},{-32,72},{-14,72},{-14,72.8}}, color={255,127,0}))", "connect(integerStep.y, sum.u[2]) annotation (Line(\r\n        points={{-39,40},{-28,40},{-28,70},{-14,70}}, color={255,127,0}))", "connect(integerConstant.y, sum.u[3]) annotation (Line(\r\n        points={{-39,0},{-22,0},{-22,67.2},{-14,67.2}}, color={255,127,0}))", "connect(sum.y, showValue.numberPort) annotation (Line(\r\n        points={{-1.1,70},{38.5,70}}, color={255,127,0}))", "connect(sum.y, product.u[1]) annotation (Line(\r\n        points={{-1.1,70},{4,70},{4,32.1},{16,32.1}}, color={255,127,0}))", "connect(integerStep.y, product.u[2]) annotation (Line(\r\n        points={{-39,40},{-8,40},{-8,27.9},{16,27.9}}, color={255,127,0}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n        points={{28.9,30},{38.5,30}}, color={255,127,0}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{-39,0},{13.6,0}}, color={255,127,0}))", "connect(booleanPulse1.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{9,-20},{18.4,-20},{18.4,-7.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue2.numberPort) annotation (Line(\r\n        points={{29.2,0},{38.5,0}}, color={255,127,0}))", "connect(booleanPulse1.y, multiSwitch1.u[1]) annotation (Line(\r\n        points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch1.u[2]) annotation (Line(\r\n        points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 763, "end_line": 789, "start_col": 3, "end_col": 85}}, {"equations": ["connect(sine.y, realToInteger.u) annotation (Line(\r\n        points={{-79,70},{-62,70}}, color={0,0,127}))", "connect(realToInteger.y, sum.u[1]) annotation (Line(\r\n        points={{-39,70},{-32,70},{-32,72},{-14,72},{-14,72.8}}, color={255,127,0}))", "connect(integerStep.y, sum.u[2]) annotation (Line(\r\n        points={{-39,40},{-28,40},{-28,70},{-14,70}}, color={255,127,0}))", "connect(integerConstant.y, sum.u[3]) annotation (Line(\r\n        points={{-39,0},{-22,0},{-22,67.2},{-14,67.2}}, color={255,127,0}))", "connect(sum.y, showValue.numberPort) annotation (Line(\r\n        points={{-1.1,70},{38.5,70}}, color={255,127,0}))", "connect(sum.y, product.u[1]) annotation (Line(\r\n        points={{-1.1,70},{4,70},{4,32.1},{16,32.1}}, color={255,127,0}))", "connect(integerStep.y, product.u[2]) annotation (Line(\r\n        points={{-39,40},{-8,40},{-8,27.9},{16,27.9}}, color={255,127,0}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n        points={{28.9,30},{38.5,30}}, color={255,127,0}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{-39,0},{13.6,0}}, color={255,127,0}))", "connect(booleanPulse1.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{9,-20},{18.4,-20},{18.4,-7.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue2.numberPort) annotation (Line(\r\n        points={{29.2,0},{38.5,0}}, color={255,127,0}))", "connect(booleanPulse1.y, multiSwitch1.u[1]) annotation (Line(\r\n        points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch1.u[2]) annotation (Line(\r\n        points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 764, "end_line": 789, "start_col": 5, "end_col": 85}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 763, "end_line": 763, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n  connect(booleanPulse1.y, multiSwitch.u[1]) annotation (Line(\r\n      points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch.u[2]) annotation (Line(\r\n      points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))", "connect(sine.y, add.u[1]) annotation (Line(\r\n      points={{-75,70},{-46.5,70},{-46.5,72.1},{-14,72.1}}, color={0,0,127}))", "connect(integerStep.y, add.u[2]) annotation (Line(\r\n      points={{-39,40},{-28,40},{-28,67.9},{-14,67.9}}, color={0,0,127}))", "connect(add.y, showValue.numberPort) annotation (Line(\r\n      points={{-0.98,70},{64.5,70}}, color={0,0,127}))", "connect(integerStep.y, product.u[1]) annotation (Line(\r\n      points={{-39,40},{-20,40},{-20,32.1},{6,32.1}}, color={0,0,127}))", "connect(integerConstant.y, product.u[2]) annotation (Line(\r\n      points={{-39,0},{-20,0},{-20,27.9},{6,27.9}}, color={0,0,127}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n      points={{19.02,30},{62.5,30}}, color={0,0,127}))", "connect(add.y, linearDependency1.u1) annotation (Line(\r\n      points={{-0.98,70},{20,70},{20,96},{38,96}}, color={0,0,127}))", "connect(product.y, linearDependency1.u2) annotation (Line(\r\n      points={{19.02,30},{30,30},{30,84},{38,84}}, color={0,0,127}))", "connect(add.y, minMax.u[1]) annotation (Line(\r\n      points={{-0.98,70},{48,70},{48,-2.5},{58,-2.5}}, color={0,0,127}))", "connect(product.y, minMax.u[2]) annotation (Line(\r\n      points={{19.02,30},{40,30},{40,-9.5},{58,-9.5}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 677, "end_line": 701, "start_col": 1, "end_col": 74}}, {"equations": ["connect(booleanPulse1.y, multiSwitch.u[1]) annotation (Line(\r\n      points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch.u[2]) annotation (Line(\r\n      points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))", "connect(sine.y, add.u[1]) annotation (Line(\r\n      points={{-75,70},{-46.5,70},{-46.5,72.1},{-14,72.1}}, color={0,0,127}))", "connect(integerStep.y, add.u[2]) annotation (Line(\r\n      points={{-39,40},{-28,40},{-28,67.9},{-14,67.9}}, color={0,0,127}))", "connect(add.y, showValue.numberPort) annotation (Line(\r\n      points={{-0.98,70},{64.5,70}}, color={0,0,127}))", "connect(integerStep.y, product.u[1]) annotation (Line(\r\n      points={{-39,40},{-20,40},{-20,32.1},{6,32.1}}, color={0,0,127}))", "connect(integerConstant.y, product.u[2]) annotation (Line(\r\n      points={{-39,0},{-20,0},{-20,27.9},{6,27.9}}, color={0,0,127}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n      points={{19.02,30},{62.5,30}}, color={0,0,127}))", "connect(add.y, linearDependency1.u1) annotation (Line(\r\n      points={{-0.98,70},{20,70},{20,96},{38,96}}, color={0,0,127}))", "connect(product.y, linearDependency1.u2) annotation (Line(\r\n      points={{19.02,30},{30,30},{30,84},{38,84}}, color={0,0,127}))", "connect(add.y, minMax.u[1]) annotation (Line(\r\n      points={{-0.98,70},{48,70},{48,-2.5},{58,-2.5}}, color={0,0,127}))", "connect(product.y, minMax.u[2]) annotation (Line(\r\n      points={{19.02,30},{40,30},{40,-9.5},{58,-9.5}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 678, "end_line": 701, "start_col": 3, "end_col": 74}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 677, "end_line": 677, "start_col": 1, "end_col": 9}}, {"equations": ["equation\r\n\r\n    connect(table2.y, Not1.u)\r\n      annotation (Line(points={{-59,-10},{-42,-10}}, color={255,0,255}))", "connect(And1.y, Or1.u2) annotation (Line(points={{21,-10},{28,-10},{28,22},\r\n            {38,22}}, color={255,0,255}))", "connect(table1.y, Or1.u1)\r\n      annotation (Line(points={{-59,30},{38,30}}, color={255,0,255}))", "connect(Not1.y, And1.u1)\r\n      annotation (Line(points={{-19,-10},{-2,-10}}, color={255,0,255}))", "connect(Pre1.y, And1.u2) annotation (Line(points={{-19,-50},{-10,-50},{-10,\r\n            -18},{-2,-18}}, color={255,0,255}))", "connect(Or1.y, Pre1.u) annotation (Line(points={{61,30},{68,30},{68,-70},{-60,\r\n            -70},{-60,-50},{-42,-50}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 613, "end_line": 626, "start_col": 3, "end_col": 60}}, {"equations": ["connect(table2.y, Not1.u)\r\n      annotation (Line(points={{-59,-10},{-42,-10}}, color={255,0,255}))", "connect(And1.y, Or1.u2) annotation (Line(points={{21,-10},{28,-10},{28,22},\r\n            {38,22}}, color={255,0,255}))", "connect(table1.y, Or1.u1)\r\n      annotation (Line(points={{-59,30},{38,30}}, color={255,0,255}))", "connect(Not1.y, And1.u1)\r\n      annotation (Line(points={{-19,-10},{-2,-10}}, color={255,0,255}))", "connect(Pre1.y, And1.u2) annotation (Line(points={{-19,-50},{-10,-50},{-10,\r\n            -18},{-2,-18}}, color={255,0,255}))", "connect(Or1.y, Pre1.u) annotation (Line(points={{61,30},{68,30},{68,-70},{-60,\r\n            -70},{-60,-50},{-42,-50}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 615, "end_line": 626, "start_col": 5, "end_col": 60}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 613, "end_line": 613, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(firstOrder1.y, inverseBlockConstraints.u2) annotation (Line(\r\n        points={{-1,30},{-6,30}}, color={0,0,127}))", "connect(inverseBlockConstraints.y2, firstOrder1.u) annotation (Line(\r\n        points={{27,30},{22,30}}, color={0,0,127}))", "connect(firstOrder2.y, feedback.u1) annotation (Line(\r\n        points={{-1,-10},{-42,-10}}, color={0,0,127}))", "connect(sine.y, criticalDamping.u) annotation (Line(\r\n        points={{-59,30},{-42,30}}, color={0,0,127}))", "connect(criticalDamping.y, inverseBlockConstraints.u1) annotation (Line(\r\n        points={{-19,30},{-12,30}}, color={0,0,127}))", "connect(sine.y, feedback.u2) annotation (Line(\r\n        points={{-59,30},{-50,30},{-50,-2}}, color={0,0,127}))", "connect(inverseBlockConstraints.y1, firstOrder2.u) annotation (Line(\r\n        points={{31,30},{40,30},{40,-10},{22,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 483, "end_line": 497, "start_col": 3, "end_col": 71}}, {"equations": ["connect(firstOrder1.y, inverseBlockConstraints.u2) annotation (Line(\r\n        points={{-1,30},{-6,30}}, color={0,0,127}))", "connect(inverseBlockConstraints.y2, firstOrder1.u) annotation (Line(\r\n        points={{27,30},{22,30}}, color={0,0,127}))", "connect(firstOrder2.y, feedback.u1) annotation (Line(\r\n        points={{-1,-10},{-42,-10}}, color={0,0,127}))", "connect(sine.y, criticalDamping.u) annotation (Line(\r\n        points={{-59,30},{-42,30}}, color={0,0,127}))", "connect(criticalDamping.y, inverseBlockConstraints.u1) annotation (Line(\r\n        points={{-19,30},{-12,30}}, color={0,0,127}))", "connect(sine.y, feedback.u2) annotation (Line(\r\n        points={{-59,30},{-50,30},{-50,-2}}, color={0,0,127}))", "connect(inverseBlockConstraints.y1, firstOrder2.u) annotation (Line(\r\n        points={{31,30},{40,30},{40,-10},{22,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 484, "end_line": 497, "start_col": 5, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 483, "end_line": 483, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}))", "connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}))", "connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}))", "connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 429, "end_line": 439, "start_col": 3, "end_col": 29}}, {"equations": ["connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}))", "connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}))", "connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}))", "connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 430, "end_line": 439, "start_col": 5, "end_col": 29}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 429, "end_line": 429, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step.y, filter_fac5.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,-10},{-22,-10}}, color={0,0,127}))", "connect(step.y, filter_fac4.u) annotation (Line(\r\n        points={{-39,30},{-22,30}}, color={0,0,127}))", "connect(step.y, filter_fac3.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,72},{-22,72}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 321, "end_line": 327, "start_col": 3, "end_col": 73}}, {"equations": ["connect(step.y, filter_fac5.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,-10},{-22,-10}}, color={0,0,127}))", "connect(step.y, filter_fac4.u) annotation (Line(\r\n        points={{-39,30},{-22,30}}, color={0,0,127}))", "connect(step.y, filter_fac3.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,72},{-22,72}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 322, "end_line": 327, "start_col": 5, "end_col": 73}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 321, "end_line": 321, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-59,50},{-42,50}}, color={0,0,127}))", "connect(Bessel.y, der1.u) annotation (Line(\r\n        points={{-19,50},{-8,50}}, color={0,0,127}))", "connect(der1.y, der2.u) annotation (Line(\r\n        points={{15,50},{28,50}}, color={0,0,127}))", "connect(der2.y, der3.u) annotation (Line(\r\n        points={{51,50},{60,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 282, "end_line": 290, "start_col": 3, "end_col": 53}}, {"equations": ["connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-59,50},{-42,50}}, color={0,0,127}))", "connect(Bessel.y, der1.u) annotation (Line(\r\n        points={{-19,50},{-8,50}}, color={0,0,127}))", "connect(der1.y, der2.u) annotation (Line(\r\n        points={{15,50},{28,50}}, color={0,0,127}))", "connect(der2.y, der3.u) annotation (Line(\r\n        points={{51,50},{60,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 283, "end_line": 290, "start_col": 5, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 282, "end_line": 282, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step.y, CriticalDamping.u) annotation (Line(\r\n        points={{-39,50},{-22,50}}, color={0,0,127}))", "connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-39,50},{-32,50},{-32,10},{-22,10}}, color={0,0,127}))", "connect(Butterworth.u, step.y) annotation (Line(\r\n        points={{-22,-30},{-32,-30},{-32,50},{-39,50}}, color={0,0,127}))", "connect(ChebyshevI.u, step.y) annotation (Line(\r\n        points={{-22,-70},{-32,-70},{-32,50},{-39,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 232, "end_line": 240, "start_col": 3, "end_col": 75}}, {"equations": ["connect(step.y, CriticalDamping.u) annotation (Line(\r\n        points={{-39,50},{-22,50}}, color={0,0,127}))", "connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-39,50},{-32,50},{-32,10},{-22,10}}, color={0,0,127}))", "connect(Butterworth.u, step.y) annotation (Line(\r\n        points={{-22,-30},{-32,-30},{-32,50},{-39,50}}, color={0,0,127}))", "connect(ChebyshevI.u, step.y) annotation (Line(\r\n        points={{-22,-70},{-32,-70},{-32,50},{-39,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 233, "end_line": 240, "start_col": 5, "end_col": 75}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 232, "end_line": 232, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(spring.flange_b, inertia2.flange_a)\r\n      annotation (Line(points={{52,-10},{60,-10}}))", "connect(inertia1.flange_b, spring.flange_a)\r\n      annotation (Line(points={{22,-10},{32,-10}}))", "connect(torque.flange, inertia1.flange_a)\r\n      annotation (Line(points={{-5,-10},{2,-10}}))", "connect(kinematicPTP.y[1], integrator.u)\r\n      annotation (Line(points={{-71,30},{-65,30}}, color={0,0,127}))", "connect(speedSensor.flange, inertia1.flange_b)\r\n      annotation (Line(points={{22,-40},{22,-10}}))", "connect(loadTorque.flange, inertia2.flange_b)\r\n      annotation (Line(points={{88,-10},{80,-10}}))", "connect(PI.y, torque.tau)\r\n      annotation (Line(points={{-35,-10},{-27,-10}}, color={0,0,127}))", "connect(speedSensor.w, PI.u_m)\r\n      annotation (Line(points={{1,-40},{-46,-40},{-46,-22}}, color={0,0,127}))", "connect(integrator.y, PI.u_s) annotation (Line(points={{-42,30},{-37,30},{-37,\r\n            11},{-67,11},{-67,-10},{-58,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 58, "end_line": 76, "start_col": 3, "end_col": 66}}, {"equations": ["connect(spring.flange_b, inertia2.flange_a)\r\n      annotation (Line(points={{52,-10},{60,-10}}))", "connect(inertia1.flange_b, spring.flange_a)\r\n      annotation (Line(points={{22,-10},{32,-10}}))", "connect(torque.flange, inertia1.flange_a)\r\n      annotation (Line(points={{-5,-10},{2,-10}}))", "connect(kinematicPTP.y[1], integrator.u)\r\n      annotation (Line(points={{-71,30},{-65,30}}, color={0,0,127}))", "connect(speedSensor.flange, inertia1.flange_b)\r\n      annotation (Line(points={{22,-40},{22,-10}}))", "connect(loadTorque.flange, inertia2.flange_b)\r\n      annotation (Line(points={{88,-10},{80,-10}}))", "connect(PI.y, torque.tau)\r\n      annotation (Line(points={{-35,-10},{-27,-10}}, color={0,0,127}))", "connect(speedSensor.w, PI.u_m)\r\n      annotation (Line(points={{1,-40},{-46,-40},{-46,-22}}, color={0,0,127}))", "connect(integrator.y, PI.u_s) annotation (Line(points={{-42,30},{-37,30},{-37,\r\n            11},{-67,11},{-67,-10},{-58,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 59, "end_line": 76, "start_col": 5, "end_col": 66}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 58, "end_line": 58, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    der(spring.w_rel) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 55, "end_line": 56, "start_col": 3, "end_col": 27}}, {"equations": ["der(spring.w_rel) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 56, "end_line": 56, "start_col": 5, "end_col": 27}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 55, "end_line": 55, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.Package | components: Real×13, SI.Position×2, SI.Velocity×1 | connections: 207 | params: driveAngle, order, f_cut | units: m/s, m/s2, rad", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2, "end_line": 3301, "start_col": 1, "end_col": 11}, "code_text": "package Blocks \"Library of basic input/output control blocks (continuous, discrete, logical, table blocks)\"\r\n\r\n  extends Modelica.Icons.Package;\r\n  import Modelica.Units.SI;\r\n\r\npackage Examples\r\n  \"Library of examples to demonstrate the usage of package Blocks\"\r\n\r\n  extends Modelica.Icons.ExamplesPackage;\r\n\r\n  model PID_Controller\r\n    \"Demonstrates the usage of a Continuous.LimPID controller\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Angle driveAngle=1.570796326794897\r\n      \"Reference distance to move\";\r\n    Modelica.Blocks.Continuous.LimPID PI(\r\n      k=100,\r\n      Ti=0.1,\r\n      yMax=12,\r\n      Ni=0.1,\r\n      initType=Modelica.Blocks.Types.Init.SteadyState,\r\n      controllerType=Modelica.Blocks.Types.SimpleController.PI,\r\n      limiter(u(start = 0)),\r\n      Td=0.1) annotation (Placement(transformation(extent={{-56,-20},{-36,0}})));\r\n    Modelica.Mechanics.Rotational.Components.Inertia inertia1(\r\n      phi(fixed=true, start=0),\r\n      J=1,\r\n      a(fixed=true, start=0)) annotation (Placement(transformation(extent={{2,-20},\r\n              {22,0}})));\r\n\r\n    Modelica.Mechanics.Rotational.Sources.Torque torque annotation (Placement(\r\n          transformation(extent={{-25,-20},{-5,0}})));\r\n    Modelica.Mechanics.Rotational.Components.SpringDamper spring(\r\n      c=1e4,\r\n      d=100,\r\n      stateSelect=StateSelect.prefer,\r\n      w_rel(fixed=true)) annotation (Placement(transformation(extent={{32,-20},\r\n              {52,0}})));\r\n    Modelica.Mechanics.Rotational.Components.Inertia inertia2(J=2) annotation (\r\n        Placement(transformation(extent={{60,-20},{80,0}})));\r\n    Modelica.Blocks.Sources.KinematicPTP kinematicPTP(\r\n      startTime=0.5,\r\n      deltaq={driveAngle},\r\n      qd_max={1},\r\n      qdd_max={1}) annotation (Placement(transformation(extent={{-92,20},{-72,\r\n              40}})));\r\n    Modelica.Blocks.Continuous.Integrator integrator(initType=Modelica.Blocks.Types.Init.InitialState)\r\n      annotation (Placement(transformation(extent={{-63,20},{-43,40}})));\r\n    Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n        Placement(transformation(extent={{22,-50},{2,-30}})));\r\n    Modelica.Mechanics.Rotational.Sources.ConstantTorque loadTorque(\r\n        tau_constant=10, useSupport=false) annotation (Placement(transformation(\r\n            extent={{98,-15},{88,-5}})));\r\n  initial equation\r\n    der(spring.w_rel) = 0;\r\n\r\n  equation\r\n    connect(spring.flange_b, inertia2.flange_a)\r\n      annotation (Line(points={{52,-10},{60,-10}}));\r\n    connect(inertia1.flange_b, spring.flange_a)\r\n      annotation (Line(points={{22,-10},{32,-10}}));\r\n    connect(torque.flange, inertia1.flange_a)\r\n      annotation (Line(points={{-5,-10},{2,-10}}));\r\n    connect(kinematicPTP.y[1], integrator.u)\r\n      annotation (Line(points={{-71,30},{-65,30}}, color={0,0,127}));\r\n    connect(speedSensor.flange, inertia1.flange_b)\r\n      annotation (Line(points={{22,-40},{22,-10}}));\r\n    connect(loadTorque.flange, inertia2.flange_b)\r\n      annotation (Line(points={{88,-10},{80,-10}}));\r\n    connect(PI.y, torque.tau)\r\n      annotation (Line(points={{-35,-10},{-27,-10}}, color={0,0,127}));\r\n    connect(speedSensor.w, PI.u_m)\r\n      annotation (Line(points={{1,-40},{-46,-40},{-46,-22}}, color={0,0,127}));\r\n    connect(integrator.y, PI.u_s) annotation (Line(points={{-42,30},{-37,30},{-37,\r\n            11},{-67,11},{-67,-10},{-58,-10}}, color={0,0,127}));\r\n    annotation (\r\n      Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Rectangle(extent={{-99,48},{-32,8}}, lineColor={255,0,0}),\r\n          Text(\r\n            extent={{-98,59},{-31,51}},\r\n            textColor={255,0,0},\r\n            textString=\"reference speed generation\"),\r\n          Text(\r\n            extent={{-98,-46},{-60,-52}},\r\n            textColor={255,0,0},\r\n            textString=\"PI controller\"),\r\n          Line(\r\n            points={{-76,-44},{-57,-23}},\r\n            color={255,0,0},\r\n            arrow={Arrow.None,Arrow.Filled}),\r\n          Rectangle(extent={{-25,6},{99,-50}}, lineColor={255,0,0}),\r\n          Text(\r\n            extent={{4,14},{71,7}},\r\n            textColor={255,0,0},\r\n            textString=\"plant (simple drive train)\")}),\r\n      experiment(StopTime=4),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis is a simple drive train controlled by a PID controller:\r\n</p>\r\n\r\n<ul>\r\n<li> The two blocks \\\"kinematic_PTP\\\" and \\\"integrator\\\" are used to generate\r\n     the reference speed (= constant acceleration phase, constant speed phase,\r\n     constant deceleration phase until inertia is at rest). To check\r\n     whether the system starts in steady state, the reference speed is\r\n     zero until time = 0.5 s and then follows the sketched trajectory.</li>\r\n\r\n<li> The block \\\"PI\\\" is an instance of \\\"Blocks.Continuous.LimPID\\\" which is\r\n     a PID controller where several practical important aspects, such as\r\n     anti-windup-compensation has been added. In this case, the control block\r\n     is used as PI controller.</li>\r\n\r\n<li> The output of the controller is a torque that drives a motor inertia\r\n     \\\"inertia1\\\". Via a compliant spring/damper component, the load\r\n     inertia \\\"inertia2\\\" is attached. A constant external torque of 10 Nm\r\n     is acting on the load inertia.</li>\r\n</ul>\r\n\r\n<p>\r\nThe PI controller is initialized in steady state (initType=SteadyState)\r\nand the drive shall also be initialized in steady state.\r\nHowever, it is not possible to initialize \\\"inertia1\\\" in SteadyState, because\r\n\\\"der(inertia1.phi)=inertia1.w=0\\\" is an input to the PI controller that\r\ndefines that the derivative of the integrator state is zero (= the same\r\ncondition that was already defined by option SteadyState of the PI controller).\r\nFurthermore, one initial condition is missing, because the absolute position\r\nof inertia1 or inertia2 is not defined. The solution shown in this examples is\r\nto initialize the angle and the angular acceleration of \\\"inertia1\\\".\r\n</p>\r\n\r\n<p>\r\nIn the following figure, results of a typical simulation are shown:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/PID_controller.png\\\"\r\n     alt=\\\"PID_controller.png\\\"><br>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/PID_controller2.png\\\"\r\n     alt=\\\"PID_controller2.png\\\">\r\n\r\n<p>\r\nIn the upper figure the reference speed (= integrator.y) and\r\nthe actual speed (= inertia1.w) are shown. As can be seen,\r\nthe system initializes in steady state, since no transients\r\nare present. The inertia follows the reference speed quite good\r\nuntil the end of the constant speed phase. Then there is a deviation.\r\nIn the lower figure the reason can be seen: The output of the\r\ncontroller (PI.y) is in its limits. The anti-windup compensation\r\nworks reasonably, since the input to the limiter (PI.limiter.u)\r\nis forced back to its limit after a transient phase.\r\n</p>\r\n\r\n</html>\",\r\n        figures = {\r\n          Figure(\r\n            title = \"Anti-windup compensation\",\r\n            identifier = \"anti-windup\",\r\n            preferred = true,\r\n            plots = {\r\n              Plot(\r\n                title = \"Reference tracking\",\r\n                identifier = \"tracking\",\r\n                curves = {\r\n                  Curve(y = integrator.y, legend = \"Reference speed\"),\r\n                  Curve(y = inertia1.w, legend = \"Actual speed\")}),\r\n              Plot(\r\n                title = \"Anti-windup limiter\",\r\n                identifier = \"limiter\",\r\n                curves = {\r\n                  Curve(y = PI.limiter.u, legend = \"Input to the anti-windup limiter\"),\r\n                  Curve(y = PI.y, legend = \"Controller output\")})},\r\n            caption = \"%(plot:tracking) Reference speed (%(variable:integrator.y)) and the actual speed (%(variable:inertia1.w)). The system initializes in steady state, since no transients are present. The inertia follows the reference speed quite good until the end of the constant speed phase. Then there is a deviation.\r\n\r\n%(plot:limiter) Here the reason for the deviation can be seen: The output of the controller (%(variable:PI.y)) is in its limits. The anti-windup compensation works reasonably, since the input to the limiter (%(variable:PI.limiter.u)) is forced back to its limit after a transient phase.\r\n\")}));\r\n  end PID_Controller;\r\n\r\n  model Filter \"Demonstrates the Continuous.Filter block with various options\"\r\n    extends Modelica.Icons.Example;\r\n    parameter Integer order=3 \"Number of order of filter\";\r\n    parameter SI.Frequency f_cut=2 \"Cut-off frequency\";\r\n    parameter Modelica.Blocks.Types.FilterType filterType=Modelica.Blocks.Types.FilterType.LowPass\r\n      \"Type of filter (LowPass/HighPass)\";\r\n    parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.SteadyState\r\n      \"Type of initialization (no init/steady state/initial state/initial output)\";\r\n    parameter Boolean normalized=true \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n\r\n    Modelica.Blocks.Sources.Step step(startTime=0.1, offset=0.1)\r\n      annotation (Placement(transformation(extent={{-60,40},{-40,60}})));\r\n    Modelica.Blocks.Continuous.Filter CriticalDamping(\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.CriticalDamping,\r\n      normalized=normalized,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,40},{0,60}})));\r\n    Modelica.Blocks.Continuous.Filter Bessel(\r\n      normalized=normalized,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.Bessel,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n    Modelica.Blocks.Continuous.Filter Butterworth(\r\n      normalized=normalized,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.Butterworth,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));\r\n    Modelica.Blocks.Continuous.Filter ChebyshevI(\r\n      normalized=normalized,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.ChebyshevI,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n\r\n  equation\r\n    connect(step.y, CriticalDamping.u) annotation (Line(\r\n        points={{-39,50},{-22,50}}, color={0,0,127}));\r\n    connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-39,50},{-32,50},{-32,10},{-22,10}}, color={0,0,127}));\r\n    connect(Butterworth.u, step.y) annotation (Line(\r\n        points={{-22,-30},{-32,-30},{-32,50},{-39,50}}, color={0,0,127}));\r\n    connect(ChebyshevI.u, step.y) annotation (Line(\r\n        points={{-22,-70},{-32,-70},{-32,50},{-39,50}}, color={0,0,127}));\r\n    annotation (\r\n      experiment(StopTime=0.9),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis example demonstrates various options of the\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous.Filter\\\">Filter</a> block.\r\nA step input starts at 0.1 s with an offset of 0.1, in order to demonstrate\r\nthe initialization options. This step input drives 4 filter blocks that\r\nhave identical parameters, with the only exception of the used analog filter type\r\n(CriticalDamping, Bessel, Butterworth, Chebyshev of type I). All the main options\r\ncan be set via parameters and are then applied to all the 4 filters.\r\nThe default setting uses low pass filters of order 3 with a cut-off frequency of\r\n2 Hz resulting in the following outputs:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Filter1.png\\\"\r\n     alt=\\\"Filter1.png\\\">\r\n</html>\"));\r\n  end Filter;\r\n\r\n  model FilterWithDifferentiation\r\n    \"Demonstrates the use of low pass filters to determine derivatives of filters\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Frequency f_cut=2 \"Cut-off frequency\";\r\n\r\n    Modelica.Blocks.Sources.Step step(startTime=0.1, offset=0.1)\r\n      annotation (Placement(transformation(extent={{-80,40},{-60,60}})));\r\n    Modelica.Blocks.Continuous.Filter Bessel(\r\n      f_cut=f_cut,\r\n      filterType=Modelica.Blocks.Types.FilterType.LowPass,\r\n      order=3,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.Bessel)\r\n      annotation (Placement(transformation(extent={{-40,40},{-20,60}})));\r\n\r\n    Continuous.Der der1\r\n      annotation (Placement(transformation(extent={{-6,40},{14,60}})));\r\n    Continuous.Der der2\r\n      annotation (Placement(transformation(extent={{30,40},{50,60}})));\r\n    Continuous.Der der3\r\n      annotation (Placement(transformation(extent={{62,40},{82,60}})));\r\n  equation\r\n    connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-59,50},{-42,50}}, color={0,0,127}));\r\n    connect(Bessel.y, der1.u) annotation (Line(\r\n        points={{-19,50},{-8,50}}, color={0,0,127}));\r\n    connect(der1.y, der2.u) annotation (Line(\r\n        points={{15,50},{28,50}}, color={0,0,127}));\r\n    connect(der2.y, der3.u) annotation (Line(\r\n        points={{51,50},{60,50}}, color={0,0,127}));\r\n    annotation (\r\n      experiment(StopTime=0.9),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis example demonstrates that the output of the\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous.Filter\\\">Filter</a> block\r\ncan be differentiated up to the order of the filter. This feature can be\r\nused in order to make an inverse model realizable or to \\\"smooth\\\" a potential\r\ndiscontinuous control signal.\r\n</p>\r\n\r\n</html>\"));\r\n  end FilterWithDifferentiation;\r\n\r\n  model FilterWithRiseTime\r\n    \"Demonstrates to use the rise time instead of the cut-off frequency to define a filter\"\r\n    import Modelica.Constants.pi;\r\n    extends Modelica.Icons.Example;\r\n    parameter Integer order=2 \"Filter order\";\r\n    parameter SI.Time riseTime=2 \"Time to reach the step input\";\r\n\r\n    Continuous.Filter filter_fac5(f_cut=5/(2*pi*riseTime), order=order)\r\n      annotation (Placement(transformation(extent={{-20,-20},{0,0}})));\r\n    Sources.Step step(startTime=1)\r\n      annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n    Continuous.Filter filter_fac4(f_cut=4/(2*pi*riseTime), order=order)\r\n      annotation (Placement(transformation(extent={{-20,20},{0,40}})));\r\n    Continuous.Filter filter_fac3(f_cut=3/(2*pi*riseTime), order=order)\r\n      annotation (Placement(transformation(extent={{-20,62},{0,82}})));\r\n  equation\r\n    connect(step.y, filter_fac5.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,-10},{-22,-10}}, color={0,0,127}));\r\n    connect(step.y, filter_fac4.u) annotation (Line(\r\n        points={{-39,30},{-22,30}}, color={0,0,127}));\r\n    connect(step.y, filter_fac3.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,72},{-22,72}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=4), Documentation(info=\"<html>\r\n<p>\r\nFilters are usually parameterized with the cut-off frequency.\r\nSometimes, it is more meaningful to parameterize a filter with its\r\nrise time, i.e., the time it needs until the output reaches the end value\r\nof a step input. This is performed with the formula:\r\n</p>\r\n\r\n<blockquote><pre>\r\nf_cut = fac/(2*pi*riseTime);\r\n</pre></blockquote>\r\n\r\n<p>\r\nwhere \\\"fac\\\" is typically 3, 4, or 5. The following image shows\r\nthe results of a simulation of this example model\r\n(riseTime = 2 s, fac=3, 4, and 5):\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/FilterWithRiseTime.png\\\"\r\n     alt=\\\"FilterWithRiseTime.png\\\">\r\n\r\n<p>\r\nSince the step starts at 1 s, and the rise time is 2 s, the filter output y\r\nshall reach the value of 1 after 1+2=3 s. Depending on the factor \\\"fac\\\" this is\r\nreached with different precisions. This is summarized in the following table:\r\n</p>\r\n\r\n<blockquote><table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr>\r\n   <td>Filter order</td>\r\n   <td>Factor fac</td>\r\n   <td>Percentage of step value reached after rise time</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">1</td>\r\n   <td align=\\\"center\\\">3</td>\r\n   <td align=\\\"center\\\">95.1 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">1</td>\r\n   <td align=\\\"center\\\">4</td>\r\n   <td align=\\\"center\\\">98.2 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">1</td>\r\n   <td align=\\\"center\\\">5</td>\r\n   <td align=\\\"center\\\">99.3 %</td>\r\n</tr>\r\n\r\n<tr>\r\n   <td align=\\\"center\\\">2</td>\r\n   <td align=\\\"center\\\">3</td>\r\n   <td align=\\\"center\\\">94.7 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">2</td>\r\n   <td align=\\\"center\\\">4</td>\r\n   <td align=\\\"center\\\">98.6 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">2</td>\r\n   <td align=\\\"center\\\">5</td>\r\n   <td align=\\\"center\\\">99.6 %</td>\r\n</tr>\r\n</table></blockquote>\r\n\r\n</html>\"));\r\n  end FilterWithRiseTime;\r\n\r\n  model SlewRateLimiter\r\n    \"Demonstrate usage of Nonlinear.SlewRateLimiter\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Velocity vMax=2 \"Max. velocity\";\r\n    parameter SI.Acceleration aMax=20 \"Max. acceleration\";\r\n    SI.Position s=positionStep.y \"Reference position\";\r\n    SI.Position sSmoothed=positionSmoothed.y \"Smoothed position\";\r\n    SI.Velocity vLimited=limit_a.y \"Limited velocity\";\r\n    SI.Acceleration aLimited=a.y \"Limited acceleration\";\r\n    Modelica.Blocks.Sources.Step positionStep(startTime=0.1)\r\n      annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n    Modelica.Blocks.Nonlinear.SlewRateLimiter limit_v(\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      Rising=vMax,\r\n      y_start=positionStep.offset,\r\n      Td=0.0001)\r\n      annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n    Modelica.Blocks.Continuous.Der v\r\n      annotation (Placement(transformation(extent={{-20,-10},{0,10}})));\r\n    Modelica.Blocks.Nonlinear.SlewRateLimiter limit_a(\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      y_start=0,\r\n      Rising=20,\r\n      Td=0.0001)\r\n                annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n    Modelica.Blocks.Continuous.Integrator positionSmoothed(\r\n      k=1,\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      y_start=positionStep.offset)\r\n      annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n    Modelica.Blocks.Continuous.Der a\r\n      annotation (Placement(transformation(extent={{50,-40},{70,-20}})));\r\n  equation\r\n    connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}));\r\n    connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}));\r\n    connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}));\r\n    connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}));\r\n    connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}));\r\n\r\n    annotation (experiment(StopTime=1.0, Interval=0.001), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to use the Nonlinear.SlewRateLimiter block to limit a position step with regards to velocity and acceleration:\r\n</p>\r\n<ul>\r\n<li> The Sources.Step block <code>positionStep</code> demands an unphysical position step.</li>\r\n<li> The first SlewRateLimiter block  <code>limit_v</code> limits velocity.</li>\r\n<li> The first Der block <code>v</code> calculates velocity from the smoothed position signal.</li>\r\n<li> The second SlewRateLimiter block <code>limit_a</code> limits acceleration of the smoothed velocity signal.</li>\r\n<li> The second Der block <code>a</code> calculates acceleration from the smoothed velocity signal.</li>\r\n<li> The Integrator block <code>positionSmoothed</code> calculates smoothed position from the smoothed velocity signal.</li>\r\n</ul>\r\n<p>\r\nA position controlled drive with limited velocity and limited acceleration (i.e. torque) is able to follow the smoothed reference position.\r\n</p>\r\n</html>\"));\r\n  end SlewRateLimiter;\r\n\r\n  model InverseModel \"Demonstrates the construction of an inverse model\"\r\n    extends Modelica.Icons.Example;\r\n\r\n    Continuous.FirstOrder firstOrder1(\r\n      k=1,\r\n      T=0.3,\r\n      initType=Modelica.Blocks.Types.Init.SteadyState)\r\n      annotation (Placement(transformation(extent={{20,20},{0,40}})));\r\n    Sources.Sine sine(\r\n      f=2,\r\n      offset=1,\r\n      startTime=0.2)\r\n      annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n    Math.InverseBlockConstraints inverseBlockConstraints\r\n      annotation (Placement(transformation(extent={{-10,20},{30,40}})));\r\n    Continuous.FirstOrder firstOrder2(\r\n      k=1,\r\n      T=0.3,\r\n      initType=Modelica.Blocks.Types.Init.SteadyState)\r\n      annotation (Placement(transformation(extent={{20,-20},{0,0}})));\r\n    Math.Feedback feedback\r\n      annotation (Placement(transformation(extent={{-40,0},{-60,-20}})));\r\n    Continuous.CriticalDamping criticalDamping(n=1, f=50*sine.f)\r\n      annotation (Placement(transformation(extent={{-40,20},{-20,40}})));\r\n  equation\r\n    connect(firstOrder1.y, inverseBlockConstraints.u2) annotation (Line(\r\n        points={{-1,30},{-6,30}}, color={0,0,127}));\r\n    connect(inverseBlockConstraints.y2, firstOrder1.u) annotation (Line(\r\n        points={{27,30},{22,30}}, color={0,0,127}));\r\n    connect(firstOrder2.y, feedback.u1) annotation (Line(\r\n        points={{-1,-10},{-42,-10}}, color={0,0,127}));\r\n    connect(sine.y, criticalDamping.u) annotation (Line(\r\n        points={{-59,30},{-42,30}}, color={0,0,127}));\r\n    connect(criticalDamping.y, inverseBlockConstraints.u1) annotation (Line(\r\n        points={{-19,30},{-12,30}}, color={0,0,127}));\r\n    connect(sine.y, feedback.u2) annotation (Line(\r\n        points={{-59,30},{-50,30},{-50,-2}}, color={0,0,127}));\r\n    connect(inverseBlockConstraints.y1, firstOrder2.u) annotation (Line(\r\n        points={{31,30},{40,30},{40,-10},{22,-10}}, color={0,0,127}));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to construct an inverse model in Modelica\r\n(for more details see <a href=\\\"https://www.modelica.org/events/Conference2005/online_proceedings/Session3/Session3c3.pdf\\\">Looye, Th&uuml;mmel, Kurze, Otter, Bals: Nonlinear Inverse Models for Control</a>).\r\n</p>\r\n\r\n<p>\r\nFor a linear, single input, single output system\r\n</p>\r\n\r\n<blockquote><pre>\r\ny = n(s)/d(s) * u   // plant model\r\n</pre></blockquote>\r\n\r\n<p>\r\nthe inverse model is derived by simply exchanging the numerator and\r\nthe denominator polynomial:\r\n</p>\r\n\r\n<blockquote><pre>\r\nu = d(s)/n(s) * y   // inverse plant model\r\n</pre></blockquote>\r\n\r\n<p>\r\nIf the denominator polynomial d(s) has a higher degree as the\r\nnumerator polynomial n(s) (which is usually the case for plant models),\r\nthen the inverse model is no longer proper, i.e., it is not causal.\r\nTo avoid this, an approximate inverse model is constructed by adding\r\na sufficient number of poles to the denominator of the inverse model.\r\nThis can be interpreted as filtering the desired output signal y:\r\n</p>\r\n\r\n<blockquote><pre>\r\nu = d(s)/(n(s)*f(s)) * y  // inverse plant model with filtered y\r\n</pre></blockquote>\r\n\r\n<p>\r\nWith Modelica it is in principal possible to construct inverse models not only\r\nfor linear but also for non-linear models and in particular for every\r\nModelica model. The basic construction mechanism is explained at hand\r\nof this example:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/InverseModelSchematic.png\\\"\r\n     alt=\\\"InverseModelSchematic.png\\\">\r\n\r\n<p>\r\nHere the first order block \\\"firstOrder1\\\" shall be inverted. This is performed\r\nby connecting its inputs and outputs with an instance of block\r\nModelica.Blocks.Math.<strong>InverseBlockConstraints</strong>. By this connection,\r\nthe inputs and outputs are exchanged. The goal is to compute the input of the\r\n\\\"firstOrder1\\\" block so that its output follows a given sine signal.\r\nFor this, the sine signal \\\"sin\\\" is first filtered with a \\\"CriticalDamping\\\"\r\nfilter of order 1 and then the output of this filter is connected to the output\r\nof the \\\"firstOrder1\\\" block (via the InverseBlockConstraints block, since\r\n2 outputs cannot be connected directly together in a block diagram).\r\n</p>\r\n\r\n<p>\r\nIn order to check the inversion, the computed input of \\\"firstOrder1\\\" is used\r\nas input in an identical block \\\"firstOrder2\\\". The output of \\\"firstOrder2\\\" should\r\nbe the given \\\"sine\\\" function. The difference is constructed with the \\\"feedback\\\"\r\nblock. Since the \\\"sine\\\" function is filtered, one cannot expect that this difference\r\nis zero. The higher the cut-off frequency of the filter, the closer is the\r\nagreement. A typical simulation result is shown in the next figure:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/InverseModel.png\\\"\r\n     alt=\\\"InverseModel.png\\\">\r\n</html>\"), experiment(StopTime=1.0));\r\n  end InverseModel;\r\n\r\n  model ShowLogicalSources\r\n    \"Demonstrates the usage of logical sources together with their diagram animation\"\r\n    extends Modelica.Icons.Example;\r\n    Sources.BooleanTable table(table={2,4,6,8}) annotation (Placement(\r\n          transformation(extent={{-60,-100},{-40,-80}})));\r\n    Sources.BooleanConstant const annotation (Placement(transformation(extent={\r\n              {-60,60},{-40,80}})));\r\n    Sources.BooleanStep step(startTime=4) annotation (Placement(transformation(\r\n            extent={{-60,20},{-40,40}})));\r\n    Sources.BooleanPulse pulse(period=1.5) annotation (Placement(transformation(\r\n            extent={{-60,-20},{-40,0}})));\r\n\r\n    Sources.SampleTrigger sample(period=0.5) annotation (Placement(\r\n          transformation(extent={{-60,-60},{-40,-40}})));\r\n    Sources.BooleanExpression booleanExpression(y=pulse.y and step.y)\r\n      annotation (Placement(transformation(extent={{20,20},{80,40}})));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis simple example demonstrates the logical sources in\r\n<a href=\\\"modelica://Modelica.Blocks.Sources\\\">Modelica.Blocks.Sources</a> and demonstrate\r\ntheir diagram animation (see \\\"small circle\\\" close to the output connector).\r\nThe \\\"booleanExpression\\\" source shows how a logical expression can be defined\r\nin its parameter menu referring to variables available on this level of the\r\nmodel.\r\n</p>\r\n\r\n</html>\"));\r\n  end ShowLogicalSources;\r\n\r\n  model LogicalNetwork1 \"Demonstrates the usage of logical blocks\"\r\n\r\n    extends Modelica.Icons.Example;\r\n    Sources.BooleanTable table2(table={1,3,5,7}) annotation (Placement(\r\n          transformation(extent={{-80,-20},{-60,0}})));\r\n    Sources.BooleanTable table1(table={2,4,6,8}) annotation (Placement(\r\n          transformation(extent={{-80,20},{-60,40}})));\r\n    Logical.Not Not1 annotation (Placement(transformation(extent={{-40,-20},{-20,\r\n              0}})));\r\n\r\n    Logical.And And1 annotation (Placement(transformation(extent={{0,-20},{20,0}})));\r\n    Logical.Or Or1 annotation (Placement(transformation(extent={{40,20},{60,40}})));\r\n    Logical.Pre Pre1 annotation (Placement(transformation(extent={{-40,-60},{-20,\r\n              -40}})));\r\n  equation\r\n\r\n    connect(table2.y, Not1.u)\r\n      annotation (Line(points={{-59,-10},{-42,-10}}, color={255,0,255}));\r\n    connect(And1.y, Or1.u2) annotation (Line(points={{21,-10},{28,-10},{28,22},\r\n            {38,22}}, color={255,0,255}));\r\n    connect(table1.y, Or1.u1)\r\n      annotation (Line(points={{-59,30},{38,30}}, color={255,0,255}));\r\n    connect(Not1.y, And1.u1)\r\n      annotation (Line(points={{-19,-10},{-2,-10}}, color={255,0,255}));\r\n    connect(Pre1.y, And1.u2) annotation (Line(points={{-19,-50},{-10,-50},{-10,\r\n            -18},{-2,-18}}, color={255,0,255}));\r\n    connect(Or1.y, Pre1.u) annotation (Line(points={{61,30},{68,30},{68,-70},{-60,\r\n            -70},{-60,-50},{-42,-50}}, color={255,0,255}));\r\n\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of logical blocks. Note, that\r\nthe Boolean values of the input and output signals are visualized\r\nin the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\nIf a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. It a\r\n\\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.\r\n</p>\r\n</html>\"));\r\n  end LogicalNetwork1;\r\n\r\nmodel RealNetwork1 \"Demonstrates the usage of blocks from Modelica.Blocks.Math\"\r\n\r\n  extends Modelica.Icons.Example;\r\n\r\n  Modelica.Blocks.Math.MultiSum add(nu=2)\r\n    annotation (Placement(transformation(extent={{-14,64},{-2,76}})));\r\n  Sources.Sine sine(amplitude=3, f=0.1)\r\n    annotation (Placement(transformation(extent={{-96,60},{-76,80}})));\r\n  Sources.Step integerStep(height=3, startTime=2)\r\n    annotation (Placement(transformation(extent={{-60,30},{-40,50}})));\r\n  Sources.Constant integerConstant(k=1)\r\n    annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n  Modelica.Blocks.Interaction.Show.RealValue showValue\r\n    annotation (Placement(transformation(extent={{66,60},{86,80}})));\r\n  Math.MultiProduct product(nu=2)\r\n    annotation (Placement(transformation(extent={{6,24},{18,36}})));\r\n  Modelica.Blocks.Interaction.Show.RealValue showValue1(significantDigits=2)\r\n    annotation (Placement(transformation(extent={{64,20},{84,40}})));\r\n  Sources.BooleanPulse booleanPulse1(period=1)\r\n    annotation (Placement(transformation(extent={{-12,-30},{8,-10}})));\r\n  Math.MultiSwitch multiSwitch(\r\n    nu=2,\r\n    expr={4,6},\r\n    y_default=2)\r\n    annotation (Placement(transformation(extent={{28,-60},{68,-40}})));\r\n  Sources.BooleanPulse booleanPulse2(period=2, width=80)\r\n    annotation (Placement(transformation(extent={{-12,-70},{8,-50}})));\r\n  Modelica.Blocks.Interaction.Show.RealValue showValue3(\r\n    use_numberPort=false,\r\n    number=multiSwitch.y,\r\n    significantDigits=1)\r\n    annotation (Placement(transformation(extent={{40,-84},{60,-64}})));\r\n  Math.LinearDependency linearDependency1(\r\n    y0=1,\r\n    k1=2,\r\n    k2=3) annotation (Placement(transformation(extent={{40,80},{60,100}})));\r\n  Math.MinMax minMax(nu=2)\r\n    annotation (Placement(transformation(extent={{58,-16},{78,4}})));\r\nequation\r\n  connect(booleanPulse1.y, multiSwitch.u[1]) annotation (Line(\r\n      points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}));\r\n  connect(booleanPulse2.y, multiSwitch.u[2]) annotation (Line(\r\n      points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}));\r\n  connect(sine.y, add.u[1]) annotation (Line(\r\n      points={{-75,70},{-46.5,70},{-46.5,72.1},{-14,72.1}}, color={0,0,127}));\r\n  connect(integerStep.y, add.u[2]) annotation (Line(\r\n      points={{-39,40},{-28,40},{-28,67.9},{-14,67.9}}, color={0,0,127}));\r\n  connect(add.y, showValue.numberPort) annotation (Line(\r\n      points={{-0.98,70},{64.5,70}}, color={0,0,127}));\r\n  connect(integerStep.y, product.u[1]) annotation (Line(\r\n      points={{-39,40},{-20,40},{-20,32.1},{6,32.1}}, color={0,0,127}));\r\n  connect(integerConstant.y, product.u[2]) annotation (Line(\r\n      points={{-39,0},{-20,0},{-20,27.9},{6,27.9}}, color={0,0,127}));\r\n  connect(product.y, showValue1.numberPort) annotation (Line(\r\n      points={{19.02,30},{62.5,30}}, color={0,0,127}));\r\n  connect(add.y, linearDependency1.u1) annotation (Line(\r\n      points={{-0.98,70},{20,70},{20,96},{38,96}}, color={0,0,127}));\r\n  connect(product.y, linearDependency1.u2) annotation (Line(\r\n      points={{19.02,30},{30,30},{30,84},{38,84}}, color={0,0,127}));\r\n  connect(add.y, minMax.u[1]) annotation (Line(\r\n      points={{-0.98,70},{48,70},{48,-2.5},{58,-2.5}}, color={0,0,127}));\r\n  connect(product.y, minMax.u[2]) annotation (Line(\r\n      points={{19.02,30},{40,30},{40,-9.5},{58,-9.5}}, color={0,0,127}));\r\n  annotation (\r\n    experiment(StopTime=10),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of mathematical Real blocks.\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Modelica.Blocks.Math</a>.\r\nNote, that\r\n</p>\r\n\r\n<ul>\r\n<li> at the right side of the model, several Math.ShowValue blocks\r\n     are present, that visualize the actual value of the respective Real\r\n     signal in a diagram animation.</li>\r\n\r\n<li> the Boolean values of the input and output signals are visualized\r\n     in the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\n     If a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. If a\r\n     \\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.</li>\r\n</ul>\r\n\r\n</html>\"));\r\nend RealNetwork1;\r\n\r\n  model IntegerNetwork1\r\n    \"Demonstrates the usage of blocks from Modelica.Blocks.MathInteger\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    MathInteger.Sum sum(nu=3)\r\n      annotation (Placement(transformation(extent={{-14,64},{-2,76}})));\r\n    Sources.Sine sine(amplitude=3, f=0.1)\r\n      annotation (Placement(transformation(extent={{-100,60},{-80,80}})));\r\n    Math.RealToInteger realToInteger\r\n      annotation (Placement(transformation(extent={{-60,60},{-40,80}})));\r\n    Sources.IntegerStep integerStep(height=3, startTime=2)\r\n      annotation (Placement(transformation(extent={{-60,30},{-40,50}})));\r\n    Sources.IntegerConstant integerConstant(k=1)\r\n      annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue\r\n      annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n    MathInteger.Product product(nu=2)\r\n      annotation (Placement(transformation(extent={{16,24},{28,36}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue1\r\n      annotation (Placement(transformation(extent={{40,20},{60,40}})));\r\n    MathInteger.TriggeredAdd triggeredAdd(use_reset=false, use_set=false)\r\n      annotation (Placement(transformation(extent={{16,-6},{28,6}})));\r\n    Sources.BooleanPulse booleanPulse1(period=1)\r\n      annotation (Placement(transformation(extent={{-12,-30},{8,-10}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue2\r\n      annotation (Placement(transformation(extent={{40,-10},{60,10}})));\r\n    MathInteger.MultiSwitch multiSwitch1(\r\n      nu=2,\r\n      expr={4,6},\r\n      y_default=2,\r\n      use_pre_as_default=false)\r\n      annotation (Placement(transformation(extent={{28,-60},{68,-40}})));\r\n    Sources.BooleanPulse booleanPulse2(period=2, width=80)\r\n      annotation (Placement(transformation(extent={{-12,-70},{8,-50}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue3(use_numberPort=\r\n          false, number=multiSwitch1.y)\r\n      annotation (Placement(transformation(extent={{40,-84},{60,-64}})));\r\n  equation\r\n    connect(sine.y, realToInteger.u) annotation (Line(\r\n        points={{-79,70},{-62,70}}, color={0,0,127}));\r\n    connect(realToInteger.y, sum.u[1]) annotation (Line(\r\n        points={{-39,70},{-32,70},{-32,72},{-14,72},{-14,72.8}}, color={255,127,0}));\r\n    connect(integerStep.y, sum.u[2]) annotation (Line(\r\n        points={{-39,40},{-28,40},{-28,70},{-14,70}}, color={255,127,0}));\r\n    connect(integerConstant.y, sum.u[3]) annotation (Line(\r\n        points={{-39,0},{-22,0},{-22,67.2},{-14,67.2}}, color={255,127,0}));\r\n    connect(sum.y, showValue.numberPort) annotation (Line(\r\n        points={{-1.1,70},{38.5,70}}, color={255,127,0}));\r\n    connect(sum.y, product.u[1]) annotation (Line(\r\n        points={{-1.1,70},{4,70},{4,32.1},{16,32.1}}, color={255,127,0}));\r\n    connect(integerStep.y, product.u[2]) annotation (Line(\r\n        points={{-39,40},{-8,40},{-8,27.9},{16,27.9}}, color={255,127,0}));\r\n    connect(product.y, showValue1.numberPort) annotation (Line(\r\n        points={{28.9,30},{38.5,30}}, color={255,127,0}));\r\n    connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{-39,0},{13.6,0}}, color={255,127,0}));\r\n    connect(booleanPulse1.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{9,-20},{18.4,-20},{18.4,-7.2}}, color={255,0,255}));\r\n    connect(triggeredAdd.y, showValue2.numberPort) annotation (Line(\r\n        points={{29.2,0},{38.5,0}}, color={255,127,0}));\r\n    connect(booleanPulse1.y, multiSwitch1.u[1]) annotation (Line(\r\n        points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, multiSwitch1.u[2]) annotation (Line(\r\n        points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of Integer blocks.\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.MathInteger\\\">Modelica.Blocks.MathInteger</a>.\r\nNote, that\r\n</p>\r\n\r\n<ul>\r\n<li> at the right side of the model, several MathInteger.ShowValue blocks\r\n     are present, that visualize the actual value of the respective Integer\r\n     signal in a diagram animation.</li>\r\n\r\n<li> the Boolean values of the input and output signals are visualized\r\n     in the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\n     If a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. If a\r\n     \\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.</li>\r\n\r\n</ul>\r\n\r\n</html>\"));\r\n  end IntegerNetwork1;\r\n\r\n  model BooleanNetwork1\r\n    \"Demonstrates the usage of blocks from Modelica.Blocks.MathBoolean\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue\r\n      annotation (Placement(transformation(extent={{-36,74},{-16,94}})));\r\n    MathBoolean.And and1(nu=3)\r\n      annotation (Placement(transformation(extent={{-58,64},{-46,76}})));\r\n    Sources.BooleanPulse booleanPulse1(width=20, period=1)\r\n      annotation (Placement(transformation(extent={{-100,60},{-80,80}})));\r\n    Sources.BooleanPulse booleanPulse2(period=1, width=80)\r\n      annotation (Placement(transformation(extent={{-100,-4},{-80,16}})));\r\n    Sources.BooleanStep booleanStep(startTime=1.5)\r\n      annotation (Placement(transformation(extent={{-100,28},{-80,48}})));\r\n    MathBoolean.Or or1(nu=2)\r\n      annotation (Placement(transformation(extent={{-28,62},{-16,74}})));\r\n    MathBoolean.Xor xor1(nu=2)\r\n      annotation (Placement(transformation(extent={{-2,60},{10,72}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue2\r\n      annotation (Placement(transformation(extent={{-2,74},{18,94}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue3\r\n      annotation (Placement(transformation(extent={{24,56},{44,76}})));\r\n    MathBoolean.Nand nand1(nu=2)\r\n      annotation (Placement(transformation(extent={{22,40},{34,52}})));\r\n    MathBoolean.Nor or2(nu=2)\r\n      annotation (Placement(transformation(extent={{46,38},{58,50}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue4\r\n      annotation (Placement(transformation(extent={{90,34},{110,54}})));\r\n    MathBoolean.Not nor1\r\n      annotation (Placement(transformation(extent={{68,40},{76,48}})));\r\n    MathBoolean.OnDelay onDelay(delayTime=1)\r\n      annotation (Placement(transformation(extent={{-56,-94},{-48,-86}})));\r\n    MathBoolean.RisingEdge rising\r\n      annotation (Placement(transformation(extent={{-56,-15},{-48,-7}})));\r\n    MathBoolean.MultiSwitch set1(nu=2, expr={false,true})\r\n      annotation (Placement(transformation(extent={{-30,-23},{10,-3}})));\r\n    MathBoolean.FallingEdge falling\r\n      annotation (Placement(transformation(extent={{-56,-32},{-48,-24}})));\r\n    Sources.BooleanTable booleanTable(table={2,4,6,6.5,7,9,11})\r\n      annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));\r\n    MathBoolean.ChangingEdge changing\r\n      annotation (Placement(transformation(extent={{-56,-59},{-48,-51}})));\r\n    MathInteger.TriggeredAdd triggeredAdd\r\n      annotation (Placement(transformation(extent={{14,-56},{26,-44}})));\r\n    Sources.IntegerConstant integerConstant(k=2)\r\n      annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue1\r\n      annotation (Placement(transformation(extent={{40,-60},{60,-40}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue5\r\n      annotation (Placement(transformation(extent={{24,-23},{44,-3}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue6\r\n      annotation (Placement(transformation(extent={{-32,-100},{-12,-80}})));\r\n    Logical.RSFlipFlop rSFlipFlop\r\n      annotation (Placement(transformation(extent={{70,-90},{90,-70}})));\r\n    Sources.SampleTrigger sampleTriggerSet(period=0.5, startTime=0)\r\n      annotation (Placement(transformation(extent={{40,-76},{54,-62}})));\r\n    Sources.SampleTrigger sampleTriggerReset(period=0.5, startTime=0.3)\r\n      annotation (Placement(transformation(extent={{40,-98},{54,-84}})));\r\n  equation\r\n    connect(booleanPulse1.y, and1.u[1]) annotation (Line(\r\n        points={{-79,70},{-68,70},{-68,72.8},{-58,72.8}}, color={255,0,255}));\r\n    connect(booleanStep.y, and1.u[2]) annotation (Line(\r\n        points={{-79,38},{-64,38},{-64,70},{-58,70}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, and1.u[3]) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,67.2},{-58,67.2}}, color={255,0,255}));\r\n    connect(and1.y, or1.u[1]) annotation (Line(\r\n        points={{-45.1,70},{-36.4,70},{-36.4,70.1},{-28,70.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, or1.u[2]) annotation (Line(\r\n        points={{-79,6},{-40,6},{-40,65.9},{-28,65.9}}, color={255,0,255}));\r\n    connect(or1.y, xor1.u[1]) annotation (Line(\r\n        points={{-15.1,68},{-8,68},{-8,68.1},{-2,68.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, xor1.u[2]) annotation (Line(\r\n        points={{-79,6},{-12,6},{-12,63.9},{-2,63.9}}, color={255,0,255}));\r\n    connect(and1.y, showValue.activePort) annotation (Line(\r\n        points={{-45.1,70},{-42,70},{-42,84},{-37.5,84}}, color={255,0,255}));\r\n    connect(or1.y, showValue2.activePort) annotation (Line(\r\n        points={{-15.1,68},{-12,68},{-12,84},{-3.5,84}}, color={255,0,255}));\r\n    connect(xor1.y, showValue3.activePort) annotation (Line(\r\n        points={{10.9,66},{22.5,66}}, color={255,0,255}));\r\n    connect(xor1.y, nand1.u[1]) annotation (Line(\r\n        points={{10.9,66},{16,66},{16,48.1},{22,48.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, nand1.u[2]) annotation (Line(\r\n        points={{-79,6},{16,6},{16,44},{22,44},{22,43.9}}, color={255,0,255}));\r\n    connect(nand1.y, or2.u[1]) annotation (Line(\r\n        points={{34.9,46},{46,46},{46,46.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, or2.u[2]) annotation (Line(\r\n        points={{-79,6},{42,6},{42,41.9},{46,41.9}}, color={255,0,255}));\r\n    connect(or2.y, nor1.u) annotation (Line(\r\n        points={{58.9,44},{66.4,44}}, color={255,0,255}));\r\n    connect(nor1.y, showValue4.activePort) annotation (Line(\r\n        points={{76.8,44},{88.5,44}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, rising.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-11},{-57.6,-11}}, color={255,0,255}));\r\n    connect(rising.y, set1.u[1]) annotation (Line(\r\n        points={{-47.2,-11},{-38.6,-11},{-38.6,-11.5},{-30,-11.5}}, color={255,0,255}));\r\n    connect(falling.y, set1.u[2]) annotation (Line(\r\n        points={{-47.2,-28},{-40,-28},{-40,-14.5},{-30,-14.5}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, falling.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-28},{-57.6,-28}}, color={255,0,255}));\r\n    connect(booleanTable.y, onDelay.u) annotation (Line(\r\n        points={{-79,-90},{-57.6,-90}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, changing.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-55},{-57.6,-55}}, color={255,0,255}));\r\n    connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{1,-50},{11.6,-50}}, color={255,127,0}));\r\n    connect(changing.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{-47.2,-55},{-30,-55},{-30,-74},{16.4,-74},{16.4,-57.2}}, color={255,0,255}));\r\n    connect(triggeredAdd.y, showValue1.numberPort) annotation (Line(\r\n        points={{27.2,-50},{38.5,-50}}, color={255,127,0}));\r\n    connect(set1.y, showValue5.activePort) annotation (Line(\r\n        points={{11,-13},{22.5,-13}}, color={255,0,255}));\r\n    connect(onDelay.y, showValue6.activePort) annotation (Line(\r\n        points={{-47.2,-90},{-33.5,-90}}, color={255,0,255}));\r\n    connect(sampleTriggerSet.y, rSFlipFlop.S) annotation (Line(\r\n        points={{54.7,-69},{60,-69},{60,-74},{68,-74}}, color={255,0,255}));\r\n    connect(sampleTriggerReset.y, rSFlipFlop.R) annotation (Line(\r\n        points={{54.7,-91},{60,-91},{60,-86},{68,-86}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of Boolean blocks\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.MathBoolean\\\">Modelica.Blocks.MathBoolean</a>.\r\nNote, that\r\n</p>\r\n\r\n<ul>\r\n<li> at the right side of the model, several MathBoolean.ShowValue blocks\r\n     are present, that visualize the actual value of the respective Boolean\r\n     signal in a diagram animation (\\\"green\\\" means \\\"true\\\").</li>\r\n\r\n<li> the Boolean values of the input and output signals are visualized\r\n     in the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\n     If a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. If a\r\n     \\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.</li>\r\n\r\n</ul>\r\n\r\n</html>\"));\r\n  end BooleanNetwork1;\r\n\r\n  model Interaction1\r\n    \"Demonstrates the usage of blocks from Modelica.Blocks.Interaction.Show\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Interaction.Show.IntegerValue integerValue\r\n      annotation (Placement(transformation(extent={{-40,20},{-20,40}})));\r\n    Sources.IntegerTable integerTable(table=[0, 0; 1, 2; 2, 4; 3, 6; 4, 4; 6, 2])\r\n      annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n    Sources.TimeTable timeTable(table=[0, 0; 1, 2.1; 2, 4.2; 3, 6.3; 4, 4.2; 6,\r\n          2.1; 6, 2.1])\r\n      annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n    Interaction.Show.RealValue realValue\r\n      annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n    Sources.BooleanTable booleanTable(table={1,2,3,4,5,6,7,8,9})\r\n      annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));\r\n    Interaction.Show.BooleanValue booleanValue\r\n      annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));\r\n    Sources.RadioButtonSource start(buttonTimeTable={1,3}, reset={stop.on})\r\n      annotation (Placement(transformation(extent={{24,64},{36,76}})));\r\n    Sources.RadioButtonSource stop(buttonTimeTable={2,4}, reset={start.on})\r\n      annotation (Placement(transformation(extent={{48,64},{60,76}})));\r\n  equation\r\n    connect(integerTable.y, integerValue.numberPort) annotation (Line(\r\n        points={{-59,30},{-41.5,30}}, color={255,127,0}));\r\n    connect(timeTable.y, realValue.numberPort) annotation (Line(\r\n        points={{-59,70},{-41.5,70}}, color={0,0,127}));\r\n    connect(booleanTable.y, booleanValue.activePort) annotation (Line(\r\n        points={{-59,-10},{-41.5,-10}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of blocks\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.Interaction\\\">Modelica.Blocks.Interaction</a>\r\nto show how diagram animations can be constructed.\r\n</p>\r\n\r\n</html>\"));\r\n  end Interaction1;\r\n\r\n  model BusUsage \"Demonstrates the usage of a signal bus\"\r\n    extends Modelica.Icons.Example;\r\n\r\n  public\r\n    Modelica.Blocks.Sources.IntegerStep integerStep(\r\n      height=1,\r\n      offset=2,\r\n      startTime=0.5) annotation (Placement(transformation(extent={{-60,-40},{-40,\r\n              -20}})));\r\n    Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=0.5) annotation (\r\n        Placement(transformation(extent={{-58,0},{-38,20}})));\r\n    Modelica.Blocks.Sources.Sine sine(f=1) annotation (Placement(\r\n          transformation(extent={{-60,40},{-40,60}})));\r\n\r\n    Modelica.Blocks.Examples.BusUsage_Utilities.Part part annotation (Placement(\r\n          transformation(extent={{-60,-80},{-40,-60}})));\r\n    Modelica.Blocks.Math.Gain gain(k=1) annotation (Placement(transformation(\r\n            extent={{-40,70},{-60,90}})));\r\n  protected\r\n    BusUsage_Utilities.Interfaces.ControlBus controlBus annotation (Placement(\r\n          transformation(\r\n          origin={30,10},\r\n          extent={{-20,20},{20,-20}},\r\n          rotation=90)));\r\n  equation\r\n\r\n    connect(sine.y, controlBus.realSignal1) annotation (Line(\r\n        points={{-39,50},{12,50},{12,14},{30,14},{30,10}}, color={0,0,127}));\r\n    connect(booleanStep.y, controlBus.booleanSignal) annotation (Line(\r\n        points={{-37,10},{30,10}}, color={255,0,255}));\r\n    connect(integerStep.y, controlBus.integerSignal) annotation (Line(\r\n        points={{-39,-30},{0,-30},{0,6},{32,6},{32,10},{30,10}}, color={255,127,0}));\r\n    connect(part.subControlBus, controlBus.subControlBus) annotation (Line(\r\n        points={{-40,-70},{30,-70},{30,10}},\r\n        color={255,204,51},\r\n        thickness=0.5));\r\n    connect(gain.u, controlBus.realSignal1) annotation (Line(\r\n        points={{-38,80},{20,80},{20,18},{32,18},{32,10},{30,10}}, color={0,0,127}));\r\n    annotation (Documentation(info=\"<html>\r\n<p><strong>Signal bus concept</strong></p>\r\n<p>\r\nIn technical systems, such as vehicles, robots or satellites, many signals\r\nare exchanged between components. In a simulation system, these signals\r\nare usually modelled by signal connections of input/output blocks.\r\nUnfortunately, the signal connection structure may become very complicated,\r\nespecially for hierarchical models.\r\n</p>\r\n\r\n<p>\r\nThe same is also true for real technical systems. To reduce complexity\r\nand get higher flexibility, many technical systems use data buses to\r\nexchange data between components. For the same reasons, it is often better\r\nto use a \\\"signal bus\\\" concept also in a Modelica model. This is demonstrated\r\nat hand of this model (Modelica.Blocks.Examples.BusUsage):\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/BusUsage.png\\\"\r\n     alt=\\\"BusUsage.png\\\">\r\n\r\n<ul>\r\n<li> Connector instance \\\"controlBus\\\" is a hierarchical connector that is\r\n     used to exchange signals between different components. It is\r\n     defined as \\\"expandable connector\\\" in order that <strong>no</strong> central definition\r\n     of the connector is needed but is automatically constructed by the\r\n     signals connected to it (see also <a href=\\\"https://specification.modelica.org/maint/3.6/connectors-and-connections.html#expandable-connectors\\\">Section&nbsp;9.1.3 <em>Expandable Connectors</em> of the Modelica&nbsp;3.6 specification</a>).</li>\r\n<li> Input/output signals can be directly connected to the \\\"controlBus\\\".</li>\r\n<li> A component, such as \\\"part\\\", can be directly connected to the \\\"controlBus\\\",\r\n     provided it has also a bus connector, or the \\\"part\\\" connector is a\r\n     sub-connector contained in the \\\"controlBus\\\".</li>\r\n</ul>\r\n\r\n<p>\r\nThe control and sub-control bus icons are provided within Modelica.Icons.\r\nIn <a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces\\\">Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces</a>\r\nthe buses for this example are defined. Both the \\\"ControlBus\\\" and the \\\"SubControlBus\\\" are\r\n<strong>expandable</strong> connectors that do not define any variable. For example,\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces.ControlBus#text\\\">Interfaces.ControlBus</a>\r\nis defined as:\r\n</p>\r\n<blockquote><pre>\r\n<strong>expandable connector</strong> ControlBus\r\n    <strong>extends</strong> Modelica.Icons.ControlBus;\r\n    <strong>annotation</strong> ();\r\n<strong>end</strong> ControlBus;\r\n</pre></blockquote>\r\n<p>\r\nNote, the \\\"annotation\\\" in the connector is important since the color\r\nand thickness of a connector line are taken from the first\r\nline element in the icon annotation of a connector class. Above, a small rectangle in the\r\ncolor of the bus is defined (and therefore this rectangle is not\r\nvisible). As a result, when connecting from an instance of this\r\nconnector to another connector instance, the connecting line has\r\nthe color of the \\\"ControlBus\\\" with double width (due to \\\"thickness=0.5\\\").\r\n</p>\r\n\r\n<p>\r\nAn <strong>expandable</strong> connector is a connector where the content of the connector\r\nis constructed by the variables connected to instances of this connector.\r\nFor example, if \\\"sine.y\\\" is connected to the \\\"controlBus\\\", a pop-up menu may appear:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/BusUsage2.png\\\"\r\n     alt=\\\"BusUsage2.png\\\">\r\n\r\n<p>\r\nThe \\\"Add variable/New name\\\" field allows the user to define the name of the signal on\r\nthe \\\"controlBus\\\". When typing \\\"realSignal1\\\" as \\\"New name\\\", a connection of the form:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>connect</strong>(sine.y, controlBus.realSignal1)\r\n</pre></blockquote>\r\n\r\n<p>\r\nis generated and the \\\"controlBus\\\" contains the new signal \\\"realSignal1\\\". Modelica tools\r\nmay give more support in order to list potential signals for a connection. Therefore, in\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces\\\">BusUsage_Utilities.Interfaces</a>\r\nthe expected implementation of the \\\"ControlBus\\\" and of the \\\"SubControlBus\\\" are given.\r\nFor example \\\"Internal.ControlBus\\\" is defined as:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>expandable connector</strong> StandardControlBus\r\n  <strong>extends</strong> BusUsage_Utilities.Interfaces.ControlBus;\r\n\r\n  <strong>import</strong> Modelica.Units.SI;\r\n  SI.AngularVelocity    realSignal1   \\\"First Real signal\\\";\r\n  SI.Velocity           realSignal2   \\\"Second Real signal\\\";\r\n  Integer               integerSignal \\\"Integer signal\\\";\r\n  Boolean               booleanSignal \\\"Boolean signal\\\";\r\n  StandardSubControlBus subControlBus \\\"Combined signal\\\";\r\n<strong>end</strong> StandardControlBus;\r\n</pre></blockquote>\r\n\r\n<p>\r\nConsequently, when connecting now from \\\"sine.y\\\" to \\\"controlBus\\\", the menu\r\nlooks differently:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/BusUsage3.png\\\"\r\n     alt=\\\"BusUsage3.png\\\">\r\n\r\n<p>\r\nNote, even if the signals from \\\"Internal.StandardControlBus\\\" are listed, these are\r\njust potential signals. The user might still add different signal names.\r\n</p>\r\n\r\n</html>\"), experiment(StopTime=2));\r\n  end BusUsage;\r\n\r\n  model Rectifier6pulseFFT \"Example of FFT block\"\r\n    extends Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse;\r\n    Modelica.Blocks.Math.RealFFT realFFT(\r\n      startTime=0.04,\r\n      f_max=2000,\r\n      f_res=5,\r\n      resultFileName=\"rectifier6pulseFFTresult.mat\")\r\n    annotation (Placement(\r\n          transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          origin={-40,-20})));\r\n  equation\r\n    connect(currentSensor.i[1], realFFT.u)\r\n      annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}},\r\n                                                     color={0,0,127}));\r\n    annotation (experiment(StopTime=0.25, Interval=0.0001),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis example is based on a&nbsp;<a href=\\\"modelica://Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse\\\">6-pulse rectifier example</a>,\r\ncalculating the harmonics with the <a href=\\\"modelica://Modelica.Blocks.Math.RealFFT\\\">FFT block</a>.\r\n</p>\r\n<p>\r\nSampling starts after the initial transients are settled - waiting for\r\n<code>2&nbsp;periods&nbsp;= 2/f&nbsp;= 0.04&nbsp;s&nbsp;= realFFT.startTime</code>.\r\nChoosing a&nbsp;maximum frequency <code>f_max&nbsp;=&nbsp;2000&nbsp;Hz</code>,\r\na&nbsp;frequency resolution <code>f_res&nbsp;=&nbsp;5&nbsp;Hz</code>\r\n(both given in the block <code>realFFT</code>) and\r\nthe default oversampling factor <code>f_max_factor&nbsp;=&nbsp;5</code>,\r\nwe have to acquire <code>n&nbsp;= 2*f_max/f_res*f_max_factor&nbsp;=&nbsp;4000</code>\r\nsampling intervals.\r\nThe resulting sampling interval is <code>samplePeriod&nbsp;=&nbsp;1/(n*f_res)&nbsp;=&nbsp;0.05&nbsp;ms</code>.\r\nThus, we have to sample for a&nbsp;period of <code>n*samplePeriod&nbsp;=&nbsp;1/f_res&nbsp;=&nbsp;0.2&nbsp;s</code>.\r\n</p>\r\n<p>\r\nThe result file &quot;rectifier6pulseFFTresult.mat&quot; can be used to plot\r\namplitudes versus frequencies.\r\nNote that for each frequency three rows exit: one with amplitude zero,\r\none with the calculated amplitude, one with amplitude zero.\r\nThus, the second column (amplitude) can be easily plotted versus the first column (frequency).\r\nAs expected, one can see the 5<sup>th</sup>, 7<sup>th</sup>, 11<sup>th</sup>,\r\n13<sup>th</sup>, 17<sup>th</sup>, 19<sup>th</sup>, 23<sup>th</sup>, 25<sup>th</sup>,\r\n&hellip; harmonic in the result.\r\n</p>\r\n</html>\"));\r\n  end Rectifier6pulseFFT;\r\n\r\n  model Rectifier12pulseFFT \"Example of FFT block\"\r\n    extends Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse;\r\n    Modelica.Blocks.Math.RealFFT realFFT(\r\n      startTime=0.04,\r\n      f_max=2000,\r\n      f_res=5,\r\n      resultFileName=\"rectifier12pulseFFTresult.mat\")\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={-40,-20})));\r\n  equation\r\n    connect(currentSensor.i[1], realFFT.u) annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=0.25, Interval=0.0001),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis example is based on a&nbsp;<a href=\\\"modelica://Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse\\\">12-pulse rectifier example</a>,\r\ncalculating the harmonics with the <a href=\\\"modelica://Modelica.Blocks.Math.RealFFT\\\">FFT block</a>.\r\n</p>\r\n<p>\r\nSampling starts after the initial transients are settled - waiting for\r\n<code>2&nbsp;periods&nbsp;= 2/f&nbsp;= 0.04&nbsp;s&nbsp;= realFFT.startTime</code>.\r\nChoosing a&nbsp;maximum frequency <code>f_max&nbsp;=&nbsp;2000&nbsp;Hz</code>,\r\na&nbsp;frequency resolution <code>f_res&nbsp;=&nbsp;5&nbsp;Hz</code>\r\n(both given in the block <code>realFFT</code>) and\r\nthe default oversampling factor <code>f_max_factor&nbsp;=&nbsp;5</code>,\r\nwe have to acquire <code>n&nbsp;= 2*f_max/f_res*f_max_factor&nbsp;=&nbsp;4000</code>\r\nsampling intervals.\r\nThe resulting sampling interval is <code>samplePeriod&nbsp;=&nbsp;1/(n*f_res)&nbsp;=&nbsp;0.05&nbsp;ms</code>.\r\nThus, we have to sample for a&nbsp;period of <code>n*samplePeriod = 1/f_res = 0.2 s</code>.\r\n</p>\r\n<p>\r\nThe result file &quot;rectifier12pulseFFTresult.mat&quot; can be used to plot amplitudes versus frequencies.\r\nNote that for each frequency three rows exit: one with amplitude zero,\r\none with the calculated amplitude, one with amplitude zero.\r\nThus, the second column (amplitude) can be easily plotted versus the first column (frequency).\r\nAs expected, one can see the 11<sup>th</sup>, 13<sup>th</sup>, 23<sup>th</sup>, 25<sup>th</sup>,\r\n&hellip; harmonic in the result.\r\n</p>\r\n</html>\"));\r\n  end Rectifier12pulseFFT;\r\n\r\n  model TotalHarmonicDistortion \"Calculation of total harmonic distortion of voltage\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Frequency f1 = 50 \"Fundamental wave frequency\";\r\n    parameter SI.Voltage V1 = 100 \"Fundamental wave RMS voltage\";\r\n    parameter SI.Voltage V3 = 20 \"Third harmonic wave RMS voltage\";\r\n    final parameter Real THD1 = V3/V1 \"Theoretically obtained THD with respect to fundamental wave\";\r\n    final parameter Real THDrms = V3/sqrt(V1^2+V3^2) \"Theoretically obtained THD with respect to RMS\";\r\n    Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));\r\n    Modelica.Electrical.Analog.Sources.SineVoltage sineVoltage3(V=sqrt(2)*V3, f=3*f1,\r\n      startTime=0.02) annotation (Placement(transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270,\r\n          origin={-40,10})));\r\n    Modelica.Electrical.Analog.Sources.SineVoltage sineVoltage1(V=sqrt(2)*V1, f=f1,\r\n      startTime=0.02) annotation (Placement(transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270,\r\n          origin={-40,-20})));\r\n    Modelica.Electrical.Analog.Sensors.VoltageSensor voltageSensor annotation (Placement(transformation(\r\n          extent={{-10,10},{10,-10}},\r\n          rotation=270)));\r\n    Modelica.Blocks.Math.TotalHarmonicDistortion thd1(f=f1) annotation (Placement(transformation(extent={{30,10},{50,30}})));\r\n    Modelica.Blocks.Math.TotalHarmonicDistortion thdRMS(f=f1, useFirstHarmonic=false) annotation (Placement(transformation(extent={{30,-30},{50,-10}})));\r\n  equation\r\n    connect(voltageSensor.p, sineVoltage3.p) annotation (Line(points={{0,10},{0,30},{-40,30},{-40,20}}, color={0,0,255}));\r\n    connect(sineVoltage3.n, sineVoltage1.p) annotation (Line(points={{-40,0},{-40,-10}}, color={0,0,255}));\r\n    connect(sineVoltage1.n, ground.p) annotation (Line(points={{-40,-30},{-40,-40}}, color={0,0,255}));\r\n    connect(ground.p, voltageSensor.n) annotation (Line(points={{-40,-40},{-40,-30},{0,-30},{0,-10}}, color={0,0,255}));\r\n    connect(thd1.u, voltageSensor.v) annotation (Line(points={{28,20},{20,20},{20,0},{11,0}}, color={0,0,127}));\r\n    connect(voltageSensor.v, thdRMS.u) annotation (Line(points={{11,0},{20,0},{20,-20},{28,-20}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=0.1,\r\n        Interval=0.0001,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>This example compares the result of the\r\n<a href=\\\"modelica://Modelica.Blocks.Math.TotalHarmonicDistortion\\\">total harmonic distortion (THD)</a>\r\nwith respect to the fundamental wave and with respect to the total root mean square (RMS).\r\nIn this simulation model a non-sinusoidal voltage\r\nwave form is created by the superposition two voltage waves:</p>\r\n\r\n<ul>\r\n<li>Fundamental wave with RMS voltage <code>V1</code> and frequency <code>f1</code></li>\r\n<li>Third harmonic wave with RMS voltage <code>V3</code> and frequency <code>3*f1</code></li>\r\n</ul>\r\n\r\n<p>This simulation model compares numerically determined THD values with results, obtained by\r\ntheoretical calculations:</p>\r\n\r\n<ul>\r\n<li>Compare the numerically determined THD value <code>thd1.y</code> and the theoretical value <code>THD1</code>,\r\n    both with respect to the fundamental wave; also plot <code>thd1.valid</code></li>\r\n<li>Compare the numerically determined THD value <code>thdRMS.y</code> and the theoretical value <code>THDrms</code>,\r\n    both with respect to the RMS value; also plot <code>thdRMS.valid</code></li>\r\n</ul>\r\n</html>\"));\r\n  end TotalHarmonicDistortion;\r\n\r\n  model Modulation \"Demonstrate amplitude modulation and frequency modulation\"\r\n    extends Modelica.Icons.Example;\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sine(\r\n      useConstantAmplitude=true,\r\n      useConstantFrequency=true,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,60},{10,80}})));\r\n    Modelica.Blocks.Sources.Sine amplitude(\r\n      amplitude=0.5,\r\n      f=2,\r\n      offset=1)\r\n      annotation (Placement(transformation(extent={{-52,20},{-32,40}})));\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sinAM(\r\n      useConstantAmplitude=false,\r\n      useConstantFrequency=true,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,20},{10,40}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude cosAM(\r\n      useConstantAmplitude=false,\r\n      useConstantFrequency=true,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,-12},{10,8}})));\r\n    Modelica.Blocks.Sources.Sine frequency(\r\n      amplitude=50,\r\n      f=2,\r\n      offset=100)\r\n      annotation (Placement(transformation(extent={{-50,-50},{-30,-30}})));\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sinFM(\r\n      useConstantAmplitude=true,\r\n      useConstantFrequency=false,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude cosFM(\r\n      useConstantAmplitude=true,\r\n      useConstantFrequency=false,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,-80},{10,-60}})));\r\n  equation\r\n    connect(amplitude.y, sinAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,36},{-12,36}}, color={0,0,127}));\r\n    connect(frequency.y, sinFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -46},{-12,-46}}, color={0,0,127}));\r\n    connect(amplitude.y, cosAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,4},{-12,4}}, color={0,0,127}));\r\n    connect(frequency.y, cosFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -76},{-12,-76}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=1.0, Interval=0.0001), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates amplitude modulation (AM) and frequency modulation (FM).\r\n</p>\r\n</html>\"));\r\n  end Modulation;\r\n\r\n  model SinCosEncoder \"Evaluation of a sinusoidal encoder\"\r\n    extends Modelica.Icons.Example;\r\n    import Modelica.Constants.pi;\r\n    SI.AngularVelocity w=2*pi*ramp.y \"2*pi*f\";\r\n    Sources.Ramp ramp(\r\n      height=100,\r\n      duration=1,\r\n      offset=0,\r\n      startTime=0)\r\n      annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude\r\n                                              cosB(\r\n      useConstantAmplitude=true,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,40},{-40,60}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude\r\n                                              cosBminus(\r\n      useConstantAmplitude=true,\r\n      constantAmplitude=-1,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,10},{-40,30}})));\r\n    Sources.SineVariableFrequencyAndAmplitude sinA(\r\n      useConstantAmplitude=true,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));\r\n    Sources.SineVariableFrequencyAndAmplitude sinAminus(\r\n      useConstantAmplitude=true,\r\n      constantAmplitude=-1,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));\r\n    Math.Feedback feedbackCos\r\n      annotation (Placement(transformation(extent={{-30,40},{-10,60}})));\r\n    Math.Feedback feedbackSin\r\n      annotation (Placement(transformation(extent={{-30,-30},{-10,-10}})));\r\n    Electrical.Machines.SpacePhasors.Blocks.Rotator rotator\r\n      annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n    Continuous.Integrator integrator(k=1e6)\r\n      annotation (Placement(transformation(extent={{40,-10},{60,10}})));\r\n    Continuous.Der der1\r\n      annotation (Placement(transformation(extent={{80,-10},{100,10}})));\r\n    Math.WrapAngle wrapAngle(positiveRange=false)\r\n      annotation (Placement(transformation(extent={{80,20},{100,40}})));\r\n    Electrical.Machines.SpacePhasors.Blocks.ToPolar toPolar\r\n      annotation (Placement(transformation(extent={{10,20},{30,40}})));\r\n  equation\r\n    connect(ramp.y, sinA.f) annotation (Line(points={{-79,0},{-70,0},{-70,-26},{-62,\r\n            -26}},color={0,0,127}));\r\n    connect(ramp.y, sinAminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,-56},\r\n            {-62,-56}}, color={0,0,127}));\r\n    connect(ramp.y, cosBminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,14},\r\n            {-62,14}}, color={0,0,127}));\r\n    connect(ramp.y, cosB.f) annotation (Line(points={{-79,0},{-70,0},{-70,44},{-62,\r\n            44}}, color={0,0,127}));\r\n    connect(cosBminus.y, feedbackCos.u2)\r\n      annotation (Line(points={{-39,20},{-20,20},{-20,42}}, color={0,0,127}));\r\n    connect(cosB.y, feedbackCos.u1)\r\n      annotation (Line(points={{-39,50},{-28,50}}, color={0,0,127}));\r\n    connect(sinA.y, feedbackSin.u1)\r\n      annotation (Line(points={{-39,-20},{-28,-20}}, color={0,0,127}));\r\n    connect(sinAminus.y, feedbackSin.u2)\r\n      annotation (Line(points={{-39,-50},{-20,-50},{-20,-28}}, color={0,0,127}));\r\n    connect(feedbackCos.y, rotator.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,0},{8,0}}, color={0,0,127}));\r\n    connect(feedbackSin.y, rotator.u[2])\r\n      annotation (Line(points={{-11,-20},{0,-20},{0,0},{8,0}}, color={0,0,127}));\r\n    connect(rotator.y[2], integrator.u)\r\n      annotation (Line(points={{31,0},{38,0}}, color={0,0,127}));\r\n    connect(integrator.y, rotator.angle) annotation (Line(points={{61,0},{70,0},{70,\r\n            -20},{20,-20},{20,-12}}, color={0,0,127}));\r\n    connect(integrator.y, der1.u)\r\n      annotation (Line(points={{61,0},{78,0}}, color={0,0,127}));\r\n    connect(integrator.y, wrapAngle.u)\r\n      annotation (Line(points={{61,0},{70,0},{70,30},{78,30}}, color={0,0,127}));\r\n    connect(feedbackCos.y, toPolar.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,30},{8,30}}, color={0,0,127}));\r\n    connect(feedbackSin.y, toPolar.u[2]) annotation (Line(points={{-11,-20},{0,-20},\r\n            {0,30},{8,30}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=1.0, Interval=5e-05, Tolerance=1e-05), Documentation(info=\"<html>\r\n<p>\r\nThis examples demonstrates robust evaluation of a sin-cos-encoder.\r\n</p>\r\n<p>\r\nThe sin-cos-encoder provides four tracks:\r\n</p>\r\n<ul>\r\n<li>cosine</li>\r\n<li>minus sine</li>\r\n<li>sine</li>\r\n<li>minus cosine</li>\r\n</ul>\r\n<p>\r\nAll four tracks have the same amplitude and the same offset &gt; amplitude. Offset is used to detect loss of a track.\r\nTo remove offset, (minus sine) is subtracted from (sine) and (minus cosine) from (cosine),\r\nresulting in a cosine and a sine signal with doubled amplitude but without offset.\r\n</p>\r\n<p>\r\nInterpreting cosine and sine as real and imaginary part of a phasor, one could calculate the angle of the phasor (i.e. transform rectangular coordinates to polar coordinates).\r\nThis is not very robust if the signals are superimposed with some noise.\r\nTherefore the phasor is rotated by an angle that is obtained by a controller. The controller aims at imaginary part equal to zero.\r\nThe resulting angle is continuous, i.e. differentiating the angle results in 2*&pi;*frequency.\r\nIf desired, the angle can be wrapped to the interval [-&pi;, +&pi;].\r\n</p>\r\n</html>\"));\r\n  end SinCosEncoder;\r\n\r\n  model CompareSincExpSine \"Compare sinc and exponential sine signal\"\r\n    extends Modelica.Icons.Example;\r\n    Sources.Sinc sinc(f=5)\r\n      annotation (Placement(transformation(extent={{-10,20},{10,40}})));\r\n    Sources.ExpSine expSine1(f=5, damping=5)\r\n      annotation (Placement(transformation(extent={{-10,-20},{10,0}})));\r\n    Sources.ExpSine expSine2(\r\n      f=5,\r\n      phase=Modelica.Constants.pi/2,\r\n      damping=5)\r\n      annotation (Placement(transformation(extent={{-10,-60},{10,-40}})));\r\n    annotation (experiment(StopTime=1.0, Interval=0.0001), Documentation(info=\"<html>\r\n<p>\r\nCompare the sinc signal and an exponentially damped sine.\r\n</p>\r\n</html>\"));\r\n  end CompareSincExpSine;\r\n\r\n  model DemonstrateSignalExtrema \"Test detection of signal extrema\"\r\n    extends Modelica.Icons.Example;\r\n    Sources.Sine amplitude(\r\n      amplitude=2,\r\n      f=63,\r\n      offset=3)\r\n      annotation (Placement(transformation(extent={{-80,10},{-60,30}})));\r\n    Sources.Cosine frequency(\r\n      amplitude=45,\r\n      f=77,\r\n      offset=55)\r\n      annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sine(\r\n        useConstantFrequency=false, phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-20,-10},{0,10}})));\r\n    Modelica.Blocks.Math.SignalExtrema signalExtrema1(Ts=1e-2)\r\n      annotation (Placement(transformation(extent={{40,10},{60,30}})));\r\n    Modelica.Blocks.Math.SignalExtrema signalExtrema2(Ts=1e-4)\r\n      annotation (Placement(transformation(extent={{40,-30},{60,-10}})));\r\n  equation\r\n    connect(sine.y, signalExtrema1.u)\r\n      annotation (Line(points={{1,0},{20,0},{20,20},{38,20}}, color={0,0,127}));\r\n    connect(sine.y, signalExtrema2.u) annotation (Line(points={{1,0},{20,0},{20,-20},\r\n            {38,-20}}, color={0,0,127}));\r\n    connect(amplitude.y, sine.amplitude) annotation (Line(points={{-59,20},{-40,\r\n            20},{-40,6},{-22,6}}, color={0,0,127}));\r\n    connect(frequency.y, sine.f) annotation (Line(points={{-59,-20},{-40,-20},{\r\n            -40,-6},{-22,-6}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=1.5,\r\n        Interval=1e-05,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>\r\nThis example uses a sinusoidal signal with amplitude varying sinusoidally in the range of [1,5] with a frequency of 63 Hz,\r\nand frequency varying according to a cosine function in the range of [10, 100] Hz with a frequency of 77 Hz.\r\n</p>\r\n<p>\r\nNote that signalExtrema1 doesn't find the extrema exactly since sampling frequency 100 Hz is too small compared to maximum frequency of the input signal,\r\nwhereas signalExtrema2 catches the extrema rather good due to the fact that sampling frequency 10 kHz is high enough.\r\n</p>\r\n</html>\"));\r\n  end DemonstrateSignalExtrema;\r\n\r\n  model DemonstrateContinuousSignalExtrema\r\n    \"Test the ContinuousSignalExtrema block\"\r\n    extends Modelica.Icons.Example;\r\n    Modelica.Blocks.Sources.Sine sine(\r\n      amplitude=1,\r\n      f=9,\r\n      offset=-2)\r\n      annotation (Placement(transformation(extent={{-60,70},{-40,90}})));\r\n    Modelica.Blocks.Sources.SawTooth sawTooth(\r\n      amplitude=2,\r\n      period=1/9,\r\n      offset=1)\r\n      annotation (Placement(transformation(extent={{-60,10},{-40,30}})));\r\n    Modelica.Blocks.Sources.Sine amplitude(\r\n      amplitude=1,\r\n      f=1.75,\r\n      offset=0)\r\n      annotation (Placement(transformation(extent={{-40,40},{-20,60}})));\r\n    Modelica.Blocks.Math.Product product1\r\n      annotation (Placement(transformation(extent={{0,70},{20,90}})));\r\n    Modelica.Blocks.Math.Product product2\r\n      annotation (Placement(transformation(extent={{0,10},{20,30}})));\r\n    Modelica.Blocks.Math.ContinuousSignalExtrema signalExtrema1\r\n      annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n    Modelica.Blocks.Math.ContinuousSignalExtrema signalExtrema2\r\n      annotation (Placement(transformation(extent={{60,10},{80,30}})));\r\n    Sources.Sine sine1(\r\n      amplitude=1,\r\n      f=7,\r\n      offset=-2)\r\n      annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));\r\n    Sources.Pulse pulse(\r\n      amplitude=2,\r\n      period=1/9,\r\n      offset=1)\r\n      annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));\r\n    Math.Add add\r\n      annotation (Placement(transformation(extent={{-20,-70},{0,-50}})));\r\n    Math.Product product3\r\n      annotation (Placement(transformation(extent={{20,-50},{40,-30}})));\r\n    Sources.SawTooth sawTooth1(\r\n      amplitude=2,\r\n      period=1/13,\r\n      offset=-1)\r\n      annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));\r\n    Math.ContinuousSignalExtrema signalExtrema3\r\n      annotation (Placement(transformation(extent={{60,-50},{80,-30}})));\r\n  equation\r\n    connect(amplitude.y, product1.u2) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,74},{-2,74}}, color={0,0,127}));\r\n    connect(amplitude.y, product2.u1) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,26},{-2,26}}, color={0,0,127}));\r\n    connect(sine.y, product1.u1) annotation (Line(points={{-39,80},{-20,80},{-20,\r\n            86},{-2,86}},  color={0,0,127}));\r\n    connect(sawTooth.y, product2.u2) annotation (Line(points={{-39,20},{-20,20},\r\n            {-20,14},{-2,14}}, color={0,0,127}));\r\n    connect(product1.y, signalExtrema1.u)\r\n      annotation (Line(points={{21,80},{58,80}}, color={0,0,127}));\r\n    connect(product2.y, signalExtrema2.u)\r\n      annotation (Line(points={{21,20},{58,20}}, color={0,0,127}));\r\n    connect(sine1.y, add.u1) annotation (Line(points={{-39,-40},{-32,-40},{-32,\r\n            -54},{-22,-54}}, color={0,0,127}));\r\n    connect(pulse.y, add.u2) annotation (Line(points={{-39,-80},{-32,-80},{-32,\r\n            -66},{-22,-66}}, color={0,0,127}));\r\n    connect(add.y, product3.u2) annotation (Line(points={{1,-60},{10,-60},{10,\r\n            -46},{18,-46}}, color={0,0,127}));\r\n    connect(sawTooth1.y, product3.u1) annotation (Line(points={{1,-20},{10,-20},\r\n            {10,-34},{18,-34}}, color={0,0,127}));\r\n    connect(product3.y, signalExtrema3.u)\r\n      annotation (Line(points={{41,-40},{58,-40}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=1,\r\n        Interval=0.0001,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>\r\nThe amplitudes of both a differentiable sinusoidal signal (frequency 9 Hz) and a non-differentiable sawtooth signal (period 1/9 s) are modulated sinusoidally (frequency 0.75 Hz).\r\n</p>\r\n<p>\r\nNote that the ContinuousSignalExtremaBlock detects extrema of both signals without sampling.\r\n</p>\r\n</html>\"));\r\n  end DemonstrateContinuousSignalExtrema;\r\n\r\n  model DemoSignalCharacteristic\r\n    \"Demonstrate characteristic values of a signal\"\r\n    extends Modelica.Icons.Example;\r\n    import Modelica.Constants.pi;\r\n    parameter Real app(final min=0)=1 \"Peak-to-peak value of pulse signal\";\r\n    parameter Real dutyCycle(final min=0, final max=1)=0.5 \"Duty cycle of pulse signal\";\r\n    parameter Real offset=0 \"Offset of pulse signal\";\r\n    parameter Modelica.Units.SI.Frequency f=50 \"Base frequency of pulse signal\";\r\n    Real y = pulse.y \"Investigated pulse signal\";\r\n    //Analytical prediction of results\r\n    parameter Real y_mean=offset + app*dutyCycle \"Mean value\";\r\n    parameter Real y_rect=abs(offset + app)*dutyCycle + abs(offset)*(1 - dutyCycle) \"Rectified mean\";\r\n    parameter Real y_rms=sqrt((offset + app)^2*dutyCycle + offset^2*(1 - dutyCycle)) \"Root mean square\";\r\n    parameter Real y1_cos=((offset + app)*( sin(dutyCycle*2*pi) - sin(0)) + offset*( sin(2*pi) - sin(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic cosine rms component\";\r\n    parameter Real y1_sin=((offset + app)*(-cos(dutyCycle*2*pi) + cos(0)) + offset*(-cos(2*pi) + cos(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic sine rms component\";\r\n    parameter Real y1_rms=sqrt(y1_cos^2+y1_sin^2) \"RMS value of first harmonic\";\r\n    parameter Real y1_arg=atan2(y1_sin,y1_cos) \"Argument of first harmonic\";\r\n    Sources.Pulse pulse(\r\n      amplitude=app,\r\n      width=dutyCycle*100,\r\n      period=1/f,\r\n      offset=offset)\r\n      annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n    Math.Mean mean(f=f, y0=y_mean)\r\n      annotation (Placement(transformation(extent={{-10,50},{10,70}})));\r\n    Math.RectifiedMean rectifiedMean(f=f, y0=y_rect)\r\n      annotation (Placement(transformation(extent={{-10,10},{10,30}})));\r\n    Math.RootMeanSquare rootMeanSquare(f=f, y0=y_rms)\r\n      annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));\r\n    Math.Harmonic harmonic(f=f, k=1,\r\n      y0Cos=y1_cos,\r\n      y0Sin=y1_sin)\r\n      annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));\r\n  equation\r\n    connect(pulse.y, mean.u) annotation (Line(points={{-39,0},{-20,0},{-20,60},{-12,\r\n            60}}, color={0,0,127}));\r\n    connect(pulse.y, rectifiedMean.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            20},{-12,20}}, color={0,0,127}));\r\n    connect(pulse.y, rootMeanSquare.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            -20},{-12,-20}}, color={0,0,127}));\r\n    connect(pulse.y, harmonic.u) annotation (Line(points={{-39,0},{-20,0},{-20,-60},\r\n            {-12,-60}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=0.5,\r\n        Interval=0.0005,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>This example demonstrates how to calculate characteristic values of the pulse signal <code>y</code></p>\r\n\r\n<table cellspacing=\\\"0\\\" cellpadding=\\\"2\\\" border=\\\"1\\\">\r\n<tr>\r\n<td>Characteristic quantity</td>\r\n<td>Numerically calculated</td>\r\n<td>Analytically calculated</td>\r\n</tr>\r\n<tr>\r\n<td>Mean</td>\r\n<td><code>mean.y</code></td>\r\n<td><code>y_mean</code></td>\r\n</tr>\r\n<tr>\r\n<td>Rectified mean</td>\r\n<td><code>rectifiedMean.y</code></td>\r\n<td><code>y_rect</code></td>\r\n</tr>\r\n<tr>\r\n<td>Root mean square</td>\r\n<td><code>rootMeanSquare.y</code></td>\r\n<td><code>y_rms</code></td>\r\n</tr>\r\n<tr>\r\n<td>First harmonic</td>\r\n<td><code>harmonic.y_rms</code><br><code>harmonic.y_arg</code></td>\r\n<td><code>y1_rms</code><br><code>y1_arg</code></td>\r\n</tr>\r\n</table>\r\n\r\n<p>The output of these blocks is updated after each period of the signal.</p>\r\n<p>\r\nUsing a simple pulse series, these values can be calculated analytically. \r\nPropagating these values as initial values for the output, \r\nwe can compare the numerical solution with the analytical solution: \r\nThe output is constant from the beginning.\r\n</p>\r\n</html>\"));\r\n  end DemoSignalCharacteristic;\r\n\r\n  package Noise \"Library of examples to demonstrate the usage of package Blocks.Noise\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n\r\n    model UniformNoise\r\n      \"Demonstrates the most simple usage of the UniformNoise block\"\r\n      extends Modelica.Icons.Example;\r\n      output Real uniformNoise2_y = uniformNoise2.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{-20,40},{0,60}})));\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise1(\r\n        samplePeriod=0.02,\r\n        y_min=-1,\r\n        y_max=3) annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise2(\r\n        samplePeriod=0.02, y_min=-1, y_max=3,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=10)\r\n        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates the most simple usage of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Noise.UniformNoise</a>\r\nblock:\r\n</p>\r\n\r\n<ul>\r\n<li> <strong>globalSeed</strong> is the <a href=\\\"modelica://Modelica.Blocks.Noise.GlobalSeed\\\">Noise.GlobalSeed</a>\r\n     block with default options (just dragged from sublibrary Noise).</li>\r\n<li> <strong>uniformNoise1</strong> is an instance of\r\n     <a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Noise.UniformNoise</a> with\r\n     samplePeriod = 0.02 s and a Uniform distribution with limits y_min=-1, y_max=3.</li>\r\n<li> <strong>uniformNoise2</strong> is identical to uniformNoise1 with the exception that\r\n      useAutomaticLocalSeed=false and fixedLocalSeed=10.</li>\r\n</ul>\r\n\r\n<p>\r\nAt every 0.02 seconds a time event occurs and a uniform random number in the band between\r\n-1 ... 3 is drawn. This random number is held constant until the next sample instant.\r\nThe result of a simulation is shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoise.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoise;\r\n\r\n    model AutomaticSeed\r\n      \"Demonstrates noise with startTime and automatic local seed for UniformNoise\"\r\n       extends Modelica.Icons.Example;\r\n       parameter SI.Time startTime = 0.5 \"Start time of noise\";\r\n       parameter Real y_off = -1.0 \"Output of block before startTime\";\r\n\r\n       output Real manualSeed1_y = manualSeed1.y;\r\n       output Real manualSeed2_y = manualSeed2.y;\r\n       output Real manualSeed3_y = manualSeed3.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=false, enableNoise=true)\r\n        annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed1(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed2(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed3(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off, y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed1(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,y_min=-1, y_max=3,\r\n        enableNoise=true)\r\n        annotation (Placement(transformation(extent={{0,20},{20,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed2(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=2,y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{0,-20},{20,0}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed3(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,y_min=-1, y_max=3,\r\n        fixedLocalSeed=3)\r\n        annotation (Placement(transformation(extent={{0,-60},{20,-40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates manual and automatic seed selection of\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">UniformNoise</a> blocks, as well\r\nas starting the noise at startTime = 0.5 s with an output value of y = -1 before this\r\ntime. All noise blocks in this example generate uniform noise in the\r\nband y_min=-1 .. y_max=3 with samplePeriod = 0.01 s.\r\n</p>\r\n\r\n<p>\r\nThe blocks automaticSeed1, automaticSeed2, automaticSeed3 use the default\r\noption to automatically initialize the pseudo random number generators\r\nof the respective block. As a result, different noise is generated, see next\r\ndiagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/AutomaticSeed1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe blocks manualSeed1, manualSeed2, manualSeed3 use manual selection of the local seed\r\n(useAutomaticLocalSeed = false). They use a fixedLocalSeed of 1, 2, and 3 respectively.\r\nAgain, different noise is generated, see next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/AutomaticSeed2.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nTry to set fixedLocalSeed = 1 in block manualSeed2. As a result, the blocks manualSeed1 and\r\nmanualSeed2 will produce exactly the same noise.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end AutomaticSeed;\r\n\r\n    model Distributions\r\n      \"Demonstrates noise with different types of distributions\"\r\n      extends Modelica.Icons.Example;\r\n      parameter SI.Period samplePeriod=0.02\r\n        \"Sample period of all blocks\";\r\n      parameter Real y_min = -1 \"Minimum value of band for random values\";\r\n      parameter Real y_max = 3 \"Maximum value of band for random values\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=\r\n            false)\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      output Real uniformNoise_y =         uniformNoise.y;\r\n      output Real truncatedNormalNoise_y = truncatedNormalNoise.y;\r\n\r\n      Integer n=if time < 0.5 then 12 else 2;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,\r\n        samplePeriod=samplePeriod,\r\n        y_min=y_min,\r\n        y_max=y_max)\r\n        annotation (Placement(transformation(extent={{-60,70},{-40,90}})));\r\n      Modelica.Blocks.Noise.TruncatedNormalNoise truncatedNormalNoise(\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,\r\n        samplePeriod=samplePeriod,\r\n        y_min=y_min,\r\n        y_max=y_max)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates different noise distributions methods that can be selected\r\nfor a Noise block. Both noise blocks use samplePeriod = 0.02 s, y_min=-1, y_max=3, and have\r\nidentical fixedLocalSeed. This means that the same random numbers are drawn for the blocks.\r\nHowever, the random numbers are differently transformed according to the selected distributions\r\n(uniform and truncated normal distribution), and therefore the blocks have different output values.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/Distributions.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nAs can be seen, uniform noise is distributed evenly between -1 and 3, and\r\ntruncated normal distribution has more values centered around the mean value 1.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Distributions;\r\n\r\n    model UniformNoiseProperties\r\n      \"Demonstrates the computation of properties for uniformly distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real y_min = 0 \"Minimum value of band\";\r\n      parameter Real y_max = 6 \"Maximum value of band\";\r\n      parameter Real pMean = (y_min + y_max)/2\r\n        \"Theoretical mean value of uniform distribution\";\r\n      parameter Real var =  (y_max - y_min)^2/12\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sqrt(var)\r\n        \"Theoretical standard deviation of uniform distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise noise(\r\n        samplePeriod=0.001,\r\n        y_min=y_min,\r\n        y_max=y_max,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Blocks.Noise.UniformNoise</a> block\r\nusing a <strong>uniform</strong> random number distribution.\r\nBlock &quot;noise&quot; defines a band of 0 .. 6 and from the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoiseProperties1.png\\\"/>\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a uniform noise in the range 0 .. 6 is 3 and its variance is\r\n3 as well. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a uniform\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoiseProperties;\r\n\r\n    model NormalNoiseProperties\r\n      \"Demonstrates the computation of properties for normally distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real mu = 3 \"Mean value for normal distribution\";\r\n      parameter Real sigma = 1 \"Standard deviation for normal distribution\";\r\n      parameter Real pMean = mu \"Theoretical mean value of normal distribution\";\r\n      parameter Real var =  sigma^2\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sigma\r\n        \"Theoretical standard deviation of normal distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.NormalNoise noise(\r\n        samplePeriod=0.001,\r\n        mu=mu,\r\n        sigma=sigma,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.NormalNoise\\\">Blocks.Noise.NormalNoise</a> block\r\nusing a <strong>normal</strong> random number distribution with mu=3, sigma=1.\r\nFrom the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/NormalNoiseProperties1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a normal noise with mu=3 is 3 and the variance of normal noise\r\nis sigma^2, so 1. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a normal\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end NormalNoiseProperties;\r\n\r\n    model Densities\r\n      \"Demonstrates how to compute distribution densities (= Probability Density Function)\"\r\n      extends Modelica.Icons.Example;\r\n      output Real uniformDensity_y = uniformDensity.y;\r\n      output Real normalDensity_y = normalDensity.y;\r\n      output Real weibullDensity_y = weibullDensity.y;\r\n\r\n      Utilities.UniformDensity\r\n                        uniformDensity(u_min=-4, u_max=4)\r\n        annotation (Placement(transformation(extent={{10,20},{30,40}})));\r\n      Modelica.Blocks.Sources.ContinuousClock clock\r\n    annotation (Placement(transformation(extent={{-80,10},{-60,30}})));\r\n      Modelica.Blocks.Sources.Constant const(k=-10)\r\n    annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));\r\n      Modelica.Blocks.Math.Add add\r\n    annotation (Placement(transformation(extent={{-46,-10},{-26,10}})));\r\n      Utilities.NormalDensity\r\n                        normalDensity(mu=0, sigma=2)\r\n        annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n      Utilities.WeibullDensity\r\n                        weibullDensity(lambda=3, k=1.5)\r\n        annotation (Placement(transformation(extent={{10,-40},{30,-20}})));\r\n    equation\r\n      connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}));\r\n      connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}));\r\n      connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}));\r\n      connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}));\r\n      connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=2e-2),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to compute the probability density functions (pdfs) of\r\nvarious distributions.\r\nIn the following diagram simulations results for the uniform, normal, and Weibull distribution\r\nare shown. The outputs of the blocks are the pdfs that are plotted over one of the\r\ninputs:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/Densities.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Densities;\r\n\r\n    model ImpureGenerator\r\n      \"Demonstrates the usage of the impure random number generator\"\r\n      extends Modelica.Icons.Example;\r\n      output Real impureRandom_y = impureRandom.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=\r\n            false) annotation (Placement(transformation(extent={{20,40},{40,60}})));\r\n\r\n      Utilities.ImpureRandom impureRandom(samplePeriod=0.01)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to use the\r\n<a href=\\\"modelica://Modelica.Math.Random.Utilities.impureRandom\\\">impureRandom(..)</a> function\r\nto generate random values at event instants. Typically, this approach is only\r\nused when implementing an own, specialized block that needs a random number\r\ngenerator. Simulation results are shown in the next figure:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ImpureGenerator.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end ImpureGenerator;\r\n\r\n    model ActuatorWithNoise\r\n      \"Demonstrates how to model measurement noise in an actuator\"\r\n    extends Modelica.Icons.Example;\r\n      Utilities.Parts.MotorWithCurrentControl motor\r\n        annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));\r\n      Utilities.Parts.Controller controller\r\n        annotation (Placement(transformation(extent={{-60,40},{-80,60}})));\r\n      Modelica.Blocks.Sources.Step speed(startTime=0.5, height=50)\r\n        annotation (Placement(transformation(extent={{20,40},{0,60}})));\r\n      Modelica.Mechanics.Rotational.Components.Gearbox gearbox(\r\n        lossTable=[0,0.85,0.8,0.1,0.1],\r\n        c=1e6,\r\n        d=1e4,\r\n        ratio=10,\r\n        w_rel(fixed=true),\r\n        b=0.0017453292519943,\r\n        phi_rel(fixed=true))\r\n        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n      Modelica.Mechanics.Translational.Components.IdealGearR2T idealGearR2T(ratio=\r\n            300) annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));\r\n      Modelica.Mechanics.Translational.Components.Mass mass(m=100)\r\n        annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n      Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(\r\n          f_constant=10000) annotation (Placement(transformation(\r\n            extent={{10,-10},{-10,10}},\r\n            origin={86,0})));\r\n      Modelica.Blocks.Nonlinear.SlewRateLimiter slewRateLimiter(Rising=50)\r\n        annotation (Placement(transformation(extent={{-20,40},{-40,60}})));\r\n      Modelica.Mechanics.Translational.Components.Mass rodMass(m=3)\r\n        annotation (Placement(transformation(extent={{-4,-10},{16,10}})));\r\n      Modelica.Mechanics.Translational.Components.SpringDamper elastoGap(c=1e8, d=\r\n            1e5,\r\n        v_rel(fixed=true),\r\n        s_rel(fixed=true))\r\n                 annotation (Placement(transformation(extent={{22,-10},{42,10}})));\r\n      inner .Modelica.Blocks.Noise.GlobalSeed globalSeed(enableNoise=true) annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n    equation\r\n      connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}));\r\n      connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}));\r\n      connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}));\r\n      connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}));\r\n      connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}));\r\n      connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}));\r\n      connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}));\r\n      connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}));\r\n      connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}));\r\n      connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}));\r\n      annotation (\r\n        experiment(StopTime=8, Interval = 0.01, Tolerance=1e-005),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example models an actuator with a noisy sensor (which is in the motor component):\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ActuatorNoiseDiagram.png\\\"/>\r\n</div>\r\n\r\n<p>\r\nThe drive train consists of a synchronous motor with a current controller (= motor) and a gear box.\r\nThe gearbox drives a rod through a linear translation model. Softly attached to the rod is\r\nanother mass representing the actual actuator (= mass). The actuator is loaded with a constant force.\r\n</p>\r\n\r\n<p>\r\nThe whole drive is steered by a rate limited speed step command through a controller model.\r\nIn the motor the shaft angle is measured and this measurement signal is modelled by adding\r\nadditive noise to the motor angle.\r\n</p>\r\n\r\n<p>\r\nIn the following figure, the position of the actuator and the motor output torque are\r\nshown with and without noise. The noise is not very strong, such that it has no visible effect\r\non the position of the actuator. The effect of the noise can be seen in the motor torque.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ActuatorNoise.png\\\"/>\r\n</div>\r\n\r\n<p>\r\nNote, the noise in all components can be easily switched off by setting parameter\r\nenableNoise = false in the globalSeed component.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end ActuatorWithNoise;\r\n\r\n    model DrydenContinuousTurbulence\r\n      \"Demonstrates how to model wind turbulence for aircraft with the BandLimitedWhiteNoise block (a simple model of vertical Dryden gust speed at low altitudes < 1000 ft)\"\r\n      extends Modelica.Icons.Example;\r\n\r\n      import Modelica.Constants.pi;\r\n\r\n      parameter SI.Velocity V =            140 * 0.5144\r\n        \"Airspeed of aircraft (typically 140kts during approach)\";\r\n      parameter SI.Velocity sigma = 0.1 *   30 * 0.5144\r\n        \"Turbulence intensity (=0.1 * wind at 20 ft, typically 30 kt)\";\r\n      parameter SI.Length   L =            600 * 0.3048\r\n        \"Scale length (= flight altitude)\";\r\n\r\n      Modelica.Blocks.Continuous.TransferFunction Hw(b=sigma*sqrt(L/pi/V)*{sqrt(3)*\r\n            L/V,1}, a={L^2/V^2,2*L/V,1},\r\n        initType=Modelica.Blocks.Types.Init.InitialState)\r\n        \"Transfer function of vertical turbulence speed according to MIL-F-8785C\"\r\n        annotation (Placement(transformation(extent={{-10,0},{10,20}})));\r\n      Modelica.Blocks.Noise.BandLimitedWhiteNoise whiteNoise(samplePeriod=\r\n           0.005)\r\n        annotation (Placement(transformation(extent={{-60,0},{-40,20}})));\r\n      constant SI.Velocity unitVelocity = 1 annotation(HideResult=true);\r\n      Modelica.Blocks.Math.Gain compareToSpeed(k=unitVelocity/V)\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n    equation\r\n      connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}));\r\n      connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}));\r\n      annotation (experiment(StopTime=100),\r\n     Documentation(info=\"<html>\r\n<p>\r\nThis example shows how to use the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\\\">BandLimitedWhiteNoise</a>\r\nto feed a Dryden continuous turbulence model. This model is used to describe turbulent wind at low altitudes\r\nthat varies randomly in space\r\n(see also <a href=\\\"https://en.wikipedia.org/wiki/Continuous_gusts\\\">wikipedia</a>).\r\n</p>\r\n\r\n<h4>Turbulence model for vertical gust speed at low altitudes</h4>\r\n\r\n<p>\r\nThe turbulence model of the Dryden form is defined by the power spectral density of the vertical turbulent velocity:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/equation-erVWhiWU.png\\\" alt=\\\"Phi_w(Omega)=sigma^2*L_w/pi*((1+3*(L_w*Omega)^2)/(1+(L_w*Omega)^2)^2)\\\"/>\r\n</div>\r\n\r\n<p>\r\nThe spectrum is parametrized with the following parameters:\r\n</p>\r\n\r\n<ul>\r\n<li> Lw is the turbulence scale.<br>In low altitudes, it is equal to the flight altitude.</li>\r\n<li> sigma is the turbulence intensity.<br>In low altitudes, it is equal to 1/10 of the\r\n     wind speed at 20 ft altitude, which is 30 kts for medium turbulence.</li>\r\n<li> Omega is the spatial frequency.<br> The turbulence model is thus defined in space and the aircraft experiences turbulence as it flies through the defined wind field.</li>\r\n<li> Omega = s/V will be used to transform the spatial definition into a temporal definition, which can be realized as a state space system.</li>\r\n<li> V is the airspeed of the aircraft.<br>It is approximately 150 kts during the approach (i.e. at low altitudes).</li>\r\n</ul>\r\n\r\n<p>\r\nUsing spectral factorization and a fixed airspeed V of the aircraft, a concrete forming filter for the vertical turbulence can be found as\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/equation-W0zl2Gay.png\\\" alt=\\\"H_w(s) = sigma*sqrt(L_w/(pi*V)) * ((1 + sqrt(3)*L_w/V*s) / (1+L_w/V*s)^2)\\\"/>,\r\n</div>\r\n\r\n<p>\r\nfor which V * (H_w(i Omega/V) * H_w(-i Omega/V) = Phi_w(Omega).\r\n</p>\r\n\r\n<h4>The input to the filter</h4>\r\n\r\n<p>\r\nThe input to the filter is white noise with a normal distribution, zero mean, and a power spectral density of 1.\r\nThat means, for a sampling time of 1s, it is parameterized with mean=0 and variance=1.\r\nHowever, in order to account for the change of noise power due to sampling, the noise must be scaled with sqrt(samplePeriod).\r\nThis is done automatically in the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\\\">BandLimitedWhiteNoise</a> block.\r\n</p>\r\n\r\n<h4>Example output</h4>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/DrydenContinuousTurbulence.png\\\"/>\r\n</div>\r\n\r\n<h4>Reference</h4>\r\n\r\n<ol>\r\n<li>Dryden Wind Turbulence model in US military standard\r\n    <a href=\\\"http://everyspec.com/MIL-SPECS/MIL-SPECS-MIL-F/MIL-F-8785C_5295/\\\">MIL-F-8785</a>.</li>\r\n</ol>\r\n</html>\"));\r\n    end DrydenContinuousTurbulence;\r\n\r\n    package Utilities \"Library of utility models used in the examples\"\r\n      extends Modelica.Icons.UtilitiesPackage;\r\n\r\n      block UniformDensity \"Calculates the density of a uniform distribution\"\r\n        import distribution = Modelica.Math.Distributions.Uniform.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real u_min \"Lower limit of u\";\r\n        parameter Real u_max \"Upper limit of u\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the uniform probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, u_min, u_max);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a uniform distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Uniform.density\\\">Math.Distributions.Uniform.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end UniformDensity;\r\n\r\n      block NormalDensity \"Calculates the density of a normal distribution\"\r\n        import distribution = Modelica.Math.Distributions.Normal.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real mu \"Expectation (mean) value of the normal distribution\";\r\n        parameter Real sigma \"Standard deviation of the normal distribution\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the normal probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, mu, sigma);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a normal distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Normal.density\\\">Math.Distributions.Normal.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end NormalDensity;\r\n\r\n      block WeibullDensity \"Calculates the density of a Weibull distribution\"\r\n        import distribution = Modelica.Math.Distributions.Weibull.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real lambda(min=0)\r\n          \"Scale parameter of the Weibull distribution\";\r\n        parameter Real k(min=0) \"Shape parameter of the Weibull distribution\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the Weibull probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, lambda, k);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a Weibull distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Weibull.density\\\">Math.Distributions.Weibull.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end WeibullDensity;\r\n\r\n      block ImpureRandom\r\n        \"Block generating random numbers with the impure random number generator\"\r\n        extends Modelica.Blocks.Interfaces.SO;\r\n\r\n        parameter SI.Period samplePeriod\r\n          \"Sample period for random number generation\";\r\n\r\n      protected\r\n         outer Modelica.Blocks.Noise.GlobalSeed globalSeed;\r\n\r\n      equation\r\n         when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure);\r\n         end when;\r\n        annotation (Documentation(info=\"<html>\r\n<p>\r\nThis block demonstrates how to implement a block using the impure\r\nrandom number generator. This block is used in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ImpureGenerator\\\">Examples.Noise.ImpureGenerator</a>.\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end ImpureRandom;\r\n\r\n      package Parts \"Parts for use in the ActuatorWithNoise examples\"\r\n        extends Modelica.Icons.Package;\r\n\r\n        model MotorWithCurrentControl\r\n          \"Synchronous machine with current controller and measurement noise\"\r\n          extends Modelica.Electrical.Machines.Icons.TransientMachine;\r\n          constant Integer m=3 \"Number of phases\";\r\n          parameter SI.Voltage VNominal=100\r\n            \"Nominal RMS voltage per phase\";\r\n          parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n          parameter SI.Frequency f=50 \"Actual frequency\";\r\n          parameter SI.Time tRamp=1 \"Frequency ramp\";\r\n          parameter SI.Torque TLoad=181.4 \"Nominal load torque\";\r\n          parameter SI.Time tStep=1.2 \"Time of load torque step\";\r\n          parameter SI.Inertia JLoad=0.29 \"Load's moment of inertia\";\r\n\r\n          Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\r\n            smpm(\r\n            p=smpmData.p,\r\n            fsNominal=smpmData.fsNominal,\r\n            Rs=smpmData.Rs,\r\n            TsRef=smpmData.TsRef,\r\n            Lszero=smpmData.Lszero,\r\n            Lssigma=smpmData.Lssigma,\r\n            Jr=smpmData.Jr,    Js=smpmData.Js,\r\n            frictionParameters=smpmData.frictionParameters,\r\n            wMechanical(fixed=true),\r\n            statorCoreParameters=smpmData.statorCoreParameters,\r\n            strayLoadParameters=smpmData.strayLoadParameters,\r\n            VsOpenCircuit=smpmData.VsOpenCircuit,\r\n            Lmd=smpmData.Lmd,\r\n            Lmq=smpmData.Lmq,\r\n            useDamperCage=smpmData.useDamperCage,\r\n            Lrsigmad=smpmData.Lrsigmad,\r\n            Lrsigmaq=smpmData.Lrsigmaq,\r\n            Rrd=smpmData.Rrd,\r\n            Rrq=smpmData.Rrq,\r\n            TrRef=smpmData.TrRef,\r\n            permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,\r\n            phiMechanical(fixed=true),\r\n            TsOperational=293.15,\r\n            alpha20s=smpmData.alpha20s,\r\n            TrOperational=293.15,\r\n            alpha20r=smpmData.alpha20r)\r\n            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n          Modelica.Electrical.Polyphase.Sources.SignalCurrent signalCurrent(final m=m)\r\n            annotation (Placement(transformation(\r\n                origin={-10,50},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Polyphase.Basic.Star star(final m=m)\r\n            annotation (Placement(transformation(extent={{-10,80},{-30,100}})));\r\n          Modelica.Electrical.Analog.Basic.Ground ground\r\n            annotation (Placement(transformation(\r\n                origin={-50,90},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.DQToThreePhase dqToThreePhase(\r\n              p=smpm.p)\r\n            annotation (Placement(transformation(extent={{-50,40},{-30,60}})));\r\n          Modelica.Electrical.Polyphase.Basic.Star starM(final m=m) annotation (Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=180,\r\n                origin={-60,-10})));\r\n          Modelica.Electrical.Analog.Basic.Ground groundM\r\n            annotation (Placement(transformation(\r\n                origin={-80,-28},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(\r\n              terminalConnection=\"Y\") annotation (Placement(transformation(extent={{-20,-30},\r\n                    {0,-10}})));\r\n          Modelica.Electrical.Machines.Sensors.RotorDisplacementAngle rotorDisplacementAngle(p=smpm.p)\r\n            annotation (Placement(transformation(\r\n                origin={20,-40},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={10,0})));\r\n          Modelica.Mechanics.Rotational.Sensors.TorqueSensor torqueSensor annotation (\r\n              Placement(transformation(\r\n                extent={{10,10},{-10,-10}},\r\n                rotation=180,\r\n                origin={50,-40})));\r\n          Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={30,0})));\r\n          Modelica.Electrical.Machines.Sensors.VoltageQuasiRMSSensor voltageQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=180,\r\n                origin={-30,-10})));\r\n          Modelica.Electrical.Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                origin={-10,0},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=0.29)\r\n            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));\r\n          parameter\r\n            Modelica.Electrical.Machines.Utilities.ParameterRecords.SM_PermanentMagnetData\r\n            smpmData(useDamperCage=false) \"Data for motor\"\r\n            annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n          Modelica.Blocks.Sources.Constant id(k=0)\r\n            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n          Modelica.Blocks.Interfaces.RealInput iq_rms1 annotation (Placement(\r\n                transformation(extent={{-140,40},{-100,80}}),iconTransformation(extent={{-140,40},\r\n                    {-100,80}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange\r\n            \"Right flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Blocks.Interfaces.RealOutput phi(unit=\"rad\")\r\n            \"Absolute angle of flange as output signal\" annotation (Placement(\r\n                transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                origin={110,80}), iconTransformation(extent={{40,70},{60,90}})));\r\n          output Real phi_motor(unit=\"rad\", displayUnit=\"deg\")=angleSensor.phi\r\n            \"Rotational position\";\r\n          output Real w(unit=\"rad/s\")=speedSensor.w \"Rotational speed\";\r\n          Modelica.Blocks.Math.Add addNoise\r\n            annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n          .Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n            samplePeriod=1/200,\r\n            y_min=-0.01,\r\n            y_max=0.01) annotation (Placement(transformation(extent={{26,76},{46,96}})));\r\n        equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}));\r\n          connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}));\r\n          connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}));\r\n          connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}));\r\n          connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}));\r\n          connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}));\r\n          connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}));\r\n          connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}));\r\n          connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}));\r\n          connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}));\r\n          connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}));\r\n          connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}));\r\n          connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}));\r\n          connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}));\r\n          connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}));\r\n          connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}));\r\n          connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}));\r\n          connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}));\r\n          connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}));\r\n          connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}));\r\n          connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}));\r\n          annotation (\r\n            Documentation(info=\"<html>\r\n<p>\r\nA synchronous machine with permanent magnets, current controller and\r\nmeasurement noise of &plusmn;0.01 rad accelerates a quadratic speed dependent load from standstill.\r\nThe rms values of d- and q-current in rotor fixed coordinate system are converted to three-phase currents,\r\nand fed to the machine. The result shows that the torque is influenced by the q-current,\r\nwhereas the stator voltage is influenced by the d-current.\r\n</p>\r\n\r\n<p>\r\nDefault machine parameters of model\r\n<a href=\\\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\\\">SM_PermanentMagnet</a>\r\nare used.\r\n</p>\r\n\r\n<p>\r\nThis motor is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\",         revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n                    100}}), graphics={Rectangle(\r\n                  extent={{40,50},{-100,100}},\r\n                  fillColor={255,170,85},\r\n                  fillPattern=FillPattern.Solid,\r\n                  pattern=LinePattern.None), Text(\r\n                extent={{-150,150},{150,110}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n        end MotorWithCurrentControl;\r\n\r\n        model Controller \"Simple position controller for actuator\"\r\n          extends Modelica.Blocks.Icons.Block;\r\n\r\n          Modelica.Blocks.Continuous.PI speed_PI(k=10, T=5e-2,\r\n            initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{38,-10},{58,10}})));\r\n          Modelica.Blocks.Math.Feedback speedFeedback\r\n            annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n          Modelica.Blocks.Continuous.Derivative positionToSpeed(initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n              T=0.01)\r\n            annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionMeasured\r\n            \"Position signal of motor\"\r\n            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionReference\r\n            \"Reference position\"\r\n            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));\r\n          Modelica.Blocks.Interfaces.RealOutput y1\r\n            \"Connector of Real output signal\"\r\n            annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Continuous.PI position_PI(T=5e-1, k=3,\r\n            initType=Modelica.Blocks.Types.Init.InitialState)\r\n            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));\r\n          Modelica.Blocks.Math.Feedback positionFeedback\r\n            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));\r\n          Modelica.Blocks.Continuous.FirstOrder busdelay(T=1e-3, initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{68,-10},{88,10}})));\r\n        equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}));\r\n          connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}));\r\n          connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}));\r\n          connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}));\r\n          connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}));\r\n          connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}));\r\n          connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}));\r\n          annotation (Icon(coordinateSystem(\r\n                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n                Text(\r\n                  extent={{-40,50},{40,-30}},\r\n                  textColor={0,0,255},\r\n                  textString=\"PI\")}),\r\n            Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",         info=\"<html>\r\n<p>\r\nA simple position controller for a drive system.\r\nThis controller is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n        end Controller;\r\n      annotation (Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",       info=\"<html>\r\n<p>\r\nParts used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n      end Parts;\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains utility models that are used for the examples.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Utilities;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains various example models that demonstrates how\r\nto utilize the blocks from sublibrary\r\n<a href=\\\"modelica://Modelica.Blocks.Noise\\\">Blocks.Noise</a>.\r\n</p>\r\n</html>\",   revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n  end Noise;\r\n\r\n  package BusUsage_Utilities\r\n    \"Utility models and connectors for example Modelica.Blocks.Examples.BusUsage\"\r\n    extends Modelica.Icons.UtilitiesPackage;\r\n    package Interfaces \"Interfaces specialised for this example\"\r\n      extends Modelica.Icons.InterfacesPackage;\r\n\r\n      expandable connector ControlBus\r\n        \"Control bus that is adapted to the signals connected to it\"\r\n        extends Modelica.Icons.SignalBus;\r\n\r\n        SI.AngularVelocity realSignal1 \"First Real signal (angular velocity)\"\r\n          annotation (HideResult=false);\r\n        SI.Velocity realSignal2 \"Second Real signal\"\r\n          annotation (HideResult=false);\r\n        Integer integerSignal \"Integer signal\" annotation (HideResult=false);\r\n        Boolean booleanSignal \"Boolean signal\" annotation (HideResult=false);\r\n        SubControlBus subControlBus \"Combined signal\"\r\n          annotation (HideResult=false);\r\n        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                        extent={{-20,2},{22,-2}},\r\n                        lineColor={255,204,51},\r\n                        lineThickness=0.5)}), Documentation(info=\"<html>\r\n<p>\r\nThis connector defines the \\\"expandable connector\\\" ControlBus that\r\nis used as bus in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\nNote, this connector contains \\\"default\\\" signals that might be utilized\r\nin a connection (the input/output causalities of the signals\r\nare determined from the connections to this bus).\r\n</p>\r\n</html>\"));\r\n\r\n      end ControlBus;\r\n\r\n      expandable connector SubControlBus\r\n        \"Sub-control bus that is adapted to the signals connected to it\"\r\n        extends Modelica.Icons.SignalSubBus;\r\n        Real myRealSignal annotation (HideResult=false);\r\n        Boolean myBooleanSignal annotation (HideResult=false);\r\n        annotation (\r\n          defaultComponentPrefixes=\"protected\",\r\n          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                  100,100}}), graphics={Rectangle(\r\n                        extent={{-20,2},{22,-2}},\r\n                        lineColor={255,204,51},\r\n                        lineThickness=0.5)}),\r\n          Documentation(info=\"<html>\r\n<p>\r\nThis connector defines the \\\"expandable connector\\\" SubControlBus that\r\nis used as sub-bus in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\nNote, this is an expandable connector which has a \\\"default\\\" set of\r\nsignals (the input/output causalities of the signals are\r\ndetermined from the connections to this bus).\r\n</p>\r\n</html>\"));\r\n\r\n      end SubControlBus;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains the bus definitions needed for the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\n</p>\r\n</html>\"));\r\n    end Interfaces;\r\n\r\n    model Part \"Component with sub-control bus\"\r\n\r\n      Interfaces.SubControlBus subControlBus annotation (Placement(\r\n            transformation(\r\n            origin={100,0},\r\n            extent={{-20,-20},{20,20}},\r\n            rotation=270)));\r\n      Sources.RealExpression realExpression(y=time) annotation (Placement(\r\n            transformation(extent={{-6,0},{20,20}})));\r\n      Sources.BooleanExpression booleanExpression(y=time >= 0.5) annotation (\r\n          Placement(transformation(extent={{-6,-30},{20,-10}})));\r\n    equation\r\n      connect(realExpression.y, subControlBus.myRealSignal) annotation (Line(\r\n          points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}));\r\n      connect(booleanExpression.y, subControlBus.myBooleanSignal) annotation (\r\n          Line(\r\n          points={{21.3,-20},{60,-20},{60,0},{100,0}}, color={255,0,255}));\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,60},{100,-60}},\r\n              fillColor={159,159,223},\r\n              fillPattern=FillPattern.Solid,\r\n              lineColor={0,0,127}), Text(\r\n              extent={{-106,124},{114,68}},\r\n              textString=\"%name\",\r\n              textColor={0,0,255})}), Documentation(info=\"<html>\r\n<p>\r\nThis model is used to demonstrate the bus usage in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"));\r\n    end Part;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains utility models and bus definitions needed for the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\n</p>\r\n</html>\"));\r\n  end BusUsage_Utilities;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains example models to demonstrate the\r\nusage of package blocks.\r\n</p>\r\n</html>\"));\r\nend Examples;\r\n\r\nannotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100.0,-100.0},{100.0,100.0}}), graphics={\r\n      Rectangle(\r\n        origin={0.0,35.1488},\r\n        fillColor={255,255,255},\r\n        extent={{-30.0,-20.1488},{30.0,20.1488}}),\r\n      Rectangle(\r\n        origin={0.0,-34.8512},\r\n        fillColor={255,255,255},\r\n        extent={{-30.0,-20.1488},{30.0,20.1488}}),\r\n      Line(\r\n        origin={-51.25,0.0},\r\n        points={{21.25,-35.0},{-13.75,-35.0},{-13.75,35.0},{6.25,35.0}}),\r\n      Polygon(\r\n        origin={-40.0,35.0},\r\n        pattern=LinePattern.None,\r\n        fillPattern=FillPattern.Solid,\r\n        points={{10.0,0.0},{-5.0,5.0},{-5.0,-5.0}}),\r\n      Line(\r\n        origin={51.25,0.0},\r\n        points={{-21.25,35.0},{13.75,35.0},{13.75,-35.0},{-6.25,-35.0}}),\r\n      Polygon(\r\n        origin={40.0,-35.0},\r\n        pattern=LinePattern.None,\r\n        fillPattern=FillPattern.Solid,\r\n        points={{-10.0,0.0},{5.0,5.0},{5.0,-5.0}})}), Documentation(info=\"<html>\r\n<p>\r\nThis library contains input/output blocks to build up block diagrams.\r\n</p>\r\n\r\n<dl>\r\n<dt><strong>Main Author:</strong></dt>\r\n<dd><a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a><br>\r\n    Deutsches Zentrum f&uuml;r Luft- und Raumfahrt (DLR)<br>\r\n    Institut f&uuml;r Systemdynamik und Regelungstechnik (SR)<br>\r\n    M&uuml;nchener Stra&szlig;e 20<br>\r\n    D-82234 We&szlig;ling<br>\r\n    Germany<br>\r\n    email: <a href=\\\"mailto:Martin.Otter@dlr.de\\\">Martin.Otter@dlr.de</a><br></dd>\r\n</dl>\r\n<p>\r\nCopyright &copy; 1998-2025, Modelica Association and contributors\r\n</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>June 23, 2004</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>:<br>\r\n       Introduced new block connectors and adapted all blocks to the new connectors.\r\n       Included subpackages Continuous, Discrete, Logical, Nonlinear from\r\n       package ModelicaAdditions.Blocks.\r\n       Included subpackage ModelicaAdditions.Table in Modelica.Blocks.Sources\r\n       and in the new package Modelica.Blocks.Tables.\r\n       Added new blocks to Blocks.Sources and Blocks.Logical.\r\n       </li>\r\n<li><em>October 21, 2002</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>\r\n       and Christian Schweiger:<br>\r\n       New subpackage Examples, additional components.\r\n       </li>\r\n<li><em>June 20, 2000</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a> and\r\n       Michael Tiller:<br>\r\n       Introduced a replaceable signal type into\r\n       Blocks.Interfaces.RealInput/RealOutput:\r\n<blockquote><pre>\r\nreplaceable type SignalType = Real\r\n</pre></blockquote>\r\n       in order that the type of the signal of an input/output block\r\n       can be changed to a physical type, for example:\r\n<blockquote><pre>\r\nSine sin1(outPort(redeclare type SignalType=Modelica.Units.SI.Torque))\r\n</pre></blockquote>\r\n      </li>\r\n<li><em>Sept. 18, 1999</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>:<br>\r\n       Renamed to Blocks. New subpackages Math, Nonlinear.\r\n       Additional components in subpackages Interfaces, Continuous\r\n       and Sources.</li>\r\n<li><em>June 30, 1999</em>\r\n       by <a href=\\\"http://www.robotic.dlr.de/Martin.Otter/\\\">Martin Otter</a>:<br>\r\n       Realized a first version, based on an existing Dymola library\r\n       of Dieter Moormann and Hilding Elmqvist.</li>\r\n</ul>\r\n</html>\"));\r\nend Blocks", "checksum": "c1723f6b347772d68a167acf0559d8a69afb3bc0", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:2-3301", "component_count": 21, "connection_count": 207, "variable_count": 49, "physical_quantity_count": 12, "parameter_count": 37, "equation_count": 102, "dependency_count": 297, "has_physical_interface": true, "interface_component_count": 12, "has_connections": true, "is_composite_model": true, "complexity_score": 783.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(realExpression.y, subControlBus.myRealSignal) annotation (Line( points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}))", "search_keywords": ["0, 0; 1, 2.1; 2, 4.2; 3, 6.3; 4, 4.2; 6,\r\n          2.1; 6, 2.1", "0,0.85,0.8,0.1,0.1", "Acceleration", "AngularVelocity", "Integer", "Real", "SI.Acceleration", "SI.AngularVelocity", "SI.Position", "SI.Velocity", "Sources.IntegerTable", "Sources.TimeTable", "Velocity", "m/s", "m/s2", "mechanical", "rad/s", "system"]}, "components": [{"name": "s", "type_name": "SI.Position", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sSmoothed", "type_name": "SI.Position", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "vLimited", "type_name": "SI.Velocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "aLimited", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "integerTable", "type_name": "Sources.IntegerTable", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "timeTable", "type_name": "Sources.TimeTable", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "w", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformNoise2_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed1_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed2_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed3_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformNoise_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "truncatedNormalNoise_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "normalDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "weibullDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "impureRandom_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "spring.flange_b", "to_connector": "inertia2.flange_a", "condition": null}, {"from_connector": "inertia1.flange_b", "to_connector": "spring.flange_a", "condition": null}, {"from_connector": "torque.flange", "to_connector": "inertia1.flange_a", "condition": null}, {"from_connector": "kinematicPTP.y[1]", "to_connector": "integrator.u", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "inertia1.flange_b", "condition": null}, {"from_connector": "loadTorque.flange", "to_connector": "inertia2.flange_b", "condition": null}, {"from_connector": "PI.y", "to_connector": "torque.tau", "condition": null}, {"from_connector": "speedSensor.w", "to_connector": "PI.u_m", "condition": null}, {"from_connector": "integrator.y", "to_connector": "PI.u_s", "condition": null}, {"from_connector": "step.y", "to_connector": "CriticalDamping.u", "condition": null}, {"from_connector": "step.y", "to_connector": "Bessel.u", "condition": null}, {"from_connector": "Butterworth.u", "to_connector": "step.y", "condition": null}, {"from_connector": "ChebyshevI.u", "to_connector": "step.y", "condition": null}, {"from_connector": "Bessel.y", "to_connector": "der1.u", "condition": null}, {"from_connector": "der1.y", "to_connector": "der2.u", "condition": null}, {"from_connector": "der2.y", "to_connector": "der3.u", "condition": null}, {"from_connector": "step.y", "to_connector": "filter_fac5.u", "condition": null}, {"from_connector": "step.y", "to_connector": "filter_fac4.u", "condition": null}, {"from_connector": "step.y", "to_connector": "filter_fac3.u", "condition": null}, {"from_connector": "positionStep.y", "to_connector": "limit_v.u", "condition": null}, {"from_connector": "limit_v.y", "to_connector": "v.u", "condition": null}, {"from_connector": "v.y", "to_connector": "limit_a.u", "condition": null}, {"from_connector": "limit_a.y", "to_connector": "positionSmoothed.u", "condition": null}, {"from_connector": "limit_a.y", "to_connector": "a.u", "condition": null}, {"from_connector": "firstOrder1.y", "to_connector": "inverseBlockConstraints.u2", "condition": null}, {"from_connector": "inverseBlockConstraints.y2", "to_connector": "firstOrder1.u", "condition": null}, {"from_connector": "firstOrder2.y", "to_connector": "feedback.u1", "condition": null}, {"from_connector": "sine.y", "to_connector": "criticalDamping.u", "condition": null}, {"from_connector": "criticalDamping.y", "to_connector": "inverseBlockConstraints.u1", "condition": null}, {"from_connector": "sine.y", "to_connector": "feedback.u2", "condition": null}, {"from_connector": "inverseBlockConstraints.y1", "to_connector": "firstOrder2.u", "condition": null}, {"from_connector": "table2.y", "to_connector": "Not1.u", "condition": null}, {"from_connector": "And1.y", "to_connector": "Or1.u2", "condition": null}, {"from_connector": "table1.y", "to_connector": "Or1.u1", "condition": null}, {"from_connector": "Not1.y", "to_connector": "And1.u1", "condition": null}, {"from_connector": "Pre1.y", "to_connector": "And1.u2", "condition": null}, {"from_connector": "Or1.y", "to_connector": "Pre1.u", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "multiSwitch.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "multiSwitch.u[2]", "condition": null}, {"from_connector": "sine.y", "to_connector": "add.u[1]", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "add.u[2]", "condition": null}, {"from_connector": "add.y", "to_connector": "showValue.numberPort", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "product.u[1]", "condition": null}, {"from_connector": "integerConstant.y", "to_connector": "product.u[2]", "condition": null}, {"from_connector": "product.y", "to_connector": "showValue1.numberPort", "condition": null}, {"from_connector": "add.y", "to_connector": "linearDependency1.u1", "condition": null}, {"from_connector": "product.y", "to_connector": "linearDependency1.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "minMax.u[1]", "condition": null}, {"from_connector": "product.y", "to_connector": "minMax.u[2]", "condition": null}, {"from_connector": "sine.y", "to_connector": "realToInteger.u", "condition": null}, {"from_connector": "realToInteger.y", "to_connector": "sum.u[1]", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "sum.u[2]", "condition": null}, {"from_connector": "integerConstant.y", "to_connector": "sum.u[3]", "condition": null}, {"from_connector": "sum.y", "to_connector": "showValue.numberPort", "condition": null}, {"from_connector": "sum.y", "to_connector": "product.u[1]", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "product.u[2]", "condition": null}, {"from_connector": "integerConstant.y", "to_connector": "triggeredAdd.u", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "triggeredAdd.trigger", "condition": null}, {"from_connector": "triggeredAdd.y", "to_connector": "showValue2.numberPort", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "multiSwitch1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "multiSwitch1.u[2]", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "and1.u[1]", "condition": null}, {"from_connector": "booleanStep.y", "to_connector": "and1.u[2]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "and1.u[3]", "condition": null}, {"from_connector": "and1.y", "to_connector": "or1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "or1.u[2]", "condition": null}, {"from_connector": "or1.y", "to_connector": "xor1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "xor1.u[2]", "condition": null}, {"from_connector": "and1.y", "to_connector": "showValue.activePort", "condition": null}, {"from_connector": "or1.y", "to_connector": "showValue2.activePort", "condition": null}, {"from_connector": "xor1.y", "to_connector": "showValue3.activePort", "condition": null}, {"from_connector": "xor1.y", "to_connector": "nand1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "nand1.u[2]", "condition": null}, {"from_connector": "nand1.y", "to_connector": "or2.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "or2.u[2]", "condition": null}, {"from_connector": "or2.y", "to_connector": "nor1.u", "condition": null}, {"from_connector": "nor1.y", "to_connector": "showValue4.activePort", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "rising.u", "condition": null}, {"from_connector": "rising.y", "to_connector": "set1.u[1]", "condition": null}, {"from_connector": "falling.y", "to_connector": "set1.u[2]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "falling.u", "condition": null}, {"from_connector": "booleanTable.y", "to_connector": "onDelay.u", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "changing.u", "condition": null}, {"from_connector": "changing.y", "to_connector": "triggeredAdd.trigger", "condition": null}, {"from_connector": "triggeredAdd.y", "to_connector": "showValue1.numberPort", "condition": null}, {"from_connector": "set1.y", "to_connector": "showValue5.activePort", "condition": null}, {"from_connector": "onDelay.y", "to_connector": "showValue6.activePort", "condition": null}, {"from_connector": "sampleTriggerSet.y", "to_connector": "rSFlipFlop.S", "condition": null}, {"from_connector": "sampleTriggerReset.y", "to_connector": "rSFlipFlop.R", "condition": null}, {"from_connector": "integerTable.y", "to_connector": "integerValue.numberPort", "condition": null}, {"from_connector": "timeTable.y", "to_connector": "realValue.numberPort", "condition": null}, {"from_connector": "booleanTable.y", "to_connector": "booleanValue.activePort", "condition": null}, {"from_connector": "sine.y", "to_connector": "controlBus.realSignal1", "condition": null}, {"from_connector": "booleanStep.y", "to_connector": "controlBus.booleanSignal", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "controlBus.integerSignal", "condition": null}, {"from_connector": "part.subControlBus", "to_connector": "controlBus.subControlBus", "condition": null}, {"from_connector": "gain.u", "to_connector": "controlBus.realSignal1", "condition": null}, {"from_connector": "currentSensor.i[1]", "to_connector": "realFFT.u", "condition": null}, {"from_connector": "voltageSensor.p", "to_connector": "sineVoltage3.p", "condition": null}, {"from_connector": "sineVoltage3.n", "to_connector": "sineVoltage1.p", "condition": null}, {"from_connector": "sineVoltage1.n", "to_connector": "ground.p", "condition": null}, {"from_connector": "ground.p", "to_connector": "voltageSensor.n", "condition": null}, {"from_connector": "thd1.u", "to_connector": "voltageSensor.v", "condition": null}, {"from_connector": "voltageSensor.v", "to_connector": "thdRMS.u", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "sinAM.amplitude", "condition": null}, {"from_connector": "frequency.y", "to_connector": "sinFM.f", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "cosAM.amplitude", "condition": null}, {"from_connector": "frequency.y", "to_connector": "cosFM.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "sinA.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "sinAminus.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "cosBminus.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "cosB.f", "condition": null}, {"from_connector": "cosBminus.y", "to_connector": "feedbackCos.u2", "condition": null}, {"from_connector": "cosB.y", "to_connector": "feedbackCos.u1", "condition": null}, {"from_connector": "sinA.y", "to_connector": "feedbackSin.u1", "condition": null}, {"from_connector": "sinAminus.y", "to_connector": "feedbackSin.u2", "condition": null}, {"from_connector": "feedbackCos.y", "to_connector": "rotator.u[1]", "condition": null}, {"from_connector": "feedbackSin.y", "to_connector": "rotator.u[2]", "condition": null}, {"from_connector": "rotator.y[2]", "to_connector": "integrator.u", "condition": null}, {"from_connector": "integrator.y", "to_connector": "rotator.angle", "condition": null}, {"from_connector": "integrator.y", "to_connector": "der1.u", "condition": null}, {"from_connector": "integrator.y", "to_connector": "wrapAngle.u", "condition": null}, {"from_connector": "feedbackCos.y", "to_connector": "toPolar.u[1]", "condition": null}, {"from_connector": "feedbackSin.y", "to_connector": "toPolar.u[2]", "condition": null}, {"from_connector": "sine.y", "to_connector": "signalExtrema1.u", "condition": null}, {"from_connector": "sine.y", "to_connector": "signalExtrema2.u", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "sine.amplitude", "condition": null}, {"from_connector": "frequency.y", "to_connector": "sine.f", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "product1.u2", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "product2.u1", "condition": null}, {"from_connector": "sine.y", "to_connector": "product1.u1", "condition": null}, {"from_connector": "sawTooth.y", "to_connector": "product2.u2", "condition": null}, {"from_connector": "product1.y", "to_connector": "signalExtrema1.u", "condition": null}, {"from_connector": "product2.y", "to_connector": "signalExtrema2.u", "condition": null}, {"from_connector": "sine1.y", "to_connector": "add.u1", "condition": null}, {"from_connector": "pulse.y", "to_connector": "add.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "product3.u2", "condition": null}, {"from_connector": "sawTooth1.y", "to_connector": "product3.u1", "condition": null}, {"from_connector": "product3.y", "to_connector": "signalExtrema3.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "rectifiedMean.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "rootMeanSquare.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "harmonic.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "variance.u", "condition": null}, {"from_connector": "mean.y", "to_connector": "meanError.u1", "condition": null}, {"from_connector": "theoreticalMean.y", "to_connector": "meanError.u2", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[1]", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[2]", "condition": null}, {"from_connector": "variance.y", "to_connector": "varianceError.u1", "condition": null}, {"from_connector": "theoreticalVariance.y", "to_connector": "varianceError.u2", "condition": null}, {"from_connector": "noise.y", "to_connector": "standardDeviation.u", "condition": null}, {"from_connector": "standardDeviation.y", "to_connector": "sigmaError.u1", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "sigmaError.u2", "condition": null}, {"from_connector": "clock.y", "to_connector": "add.u1", "condition": null}, {"from_connector": "const.y", "to_connector": "add.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "uniformDensity.u", "condition": null}, {"from_connector": "add.y", "to_connector": "normalDensity.u", "condition": null}, {"from_connector": "add.y", "to_connector": "weibullDensity.u", "condition": null}, {"from_connector": "controller.y1", "to_connector": "motor.iq_rms1", "condition": null}, {"from_connector": "motor.phi", "to_connector": "controller.positionMeasured", "condition": null}, {"from_connector": "motor.flange", "to_connector": "gearbox.flange_a", "condition": null}, {"from_connector": "gearbox.flange_b", "to_connector": "idealGearR2T.flangeR", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "mass.flange_b", "condition": null}, {"from_connector": "speed.y", "to_connector": "slewRateLimiter.u", "condition": null}, {"from_connector": "slewRateLimiter.y", "to_connector": "controller.positionReference", "condition": null}, {"from_connector": "rodMass.flange_a", "to_connector": "idealGearR2T.flangeT", "condition": null}, {"from_connector": "rodMass.flange_b", "to_connector": "elastoGap.flange_a", "condition": null}, {"from_connector": "elastoGap.flange_b", "to_connector": "mass.flange_a", "condition": null}, {"from_connector": "whiteNoise.y", "to_connector": "Hw.u", "condition": null}, {"from_connector": "Hw.y", "to_connector": "compareToSpeed.u", "condition": null}, {"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_n", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_p", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "signalCurrent.plug_p", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "angleSensor.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "dqToThreePhase.phi", "condition": null}, {"from_connector": "groundM.p", "to_connector": "terminalBox.starpoint", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "torqueSensor.flange_a", "condition": null}, {"from_connector": "voltageQuasiRMSSensor.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "starM.plug_p", "to_connector": "voltageQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "starM.pin_n", "to_connector": "groundM.p", "condition": null}, {"from_connector": "dqToThreePhase.y", "to_connector": "signalCurrent.i", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "smpm.flange", "condition": null}, {"from_connector": "torqueSensor.flange_b", "to_connector": "inertiaLoad.flange_a", "condition": null}, {"from_connector": "signalCurrent.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "voltageQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "inertiaLoad.flange_b", "to_connector": "flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "addNoise.u2", "condition": null}, {"from_connector": "addNoise.y", "to_connector": "phi", "condition": null}, {"from_connector": "uniformNoise.y", "to_connector": "addNoise.u1", "condition": null}, {"from_connector": "id.y", "to_connector": "dqToThreePhase.d", "condition": null}, {"from_connector": "iq_rms1", "to_connector": "dqToThreePhase.q", "condition": null}, {"from_connector": "speedFeedback.y", "to_connector": "speed_PI.u", "condition": null}, {"from_connector": "positionFeedback.u2", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionReference", "to_connector": "positionFeedback.u1", "condition": null}, {"from_connector": "positionFeedback.y", "to_connector": "position_PI.u", "condition": null}, {"from_connector": "position_PI.y", "to_connector": "speedFeedback.u1", "condition": null}, {"from_connector": "speed_PI.y", "to_connector": "busdelay.u", "condition": null}, {"from_connector": "y1", "to_connector": "busdelay.y", "condition": null}, {"from_connector": "positionMeasured", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionToSpeed.y", "to_connector": "speedFeedback.u2", "condition": null}, {"from_connector": "realExpression.y", "to_connector": "subControlBus.myRealSignal", "condition": null}, {"from_connector": "booleanExpression.y", "to_connector": "subControlBus.myBooleanSignal", "condition": null}], "variables": [{"name": "PID_Controller", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Filter", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FilterWithDifferentiation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FilterWithRiseTime", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s", "type_name": "SI.Position", "prefixes": [], "attributes": {}, "binding_equation": "positionStep.y \"Reference position\"", "comment": null}, {"name": "sSmoothed", "type_name": "SI.Position", "prefixes": [], "attributes": {}, "binding_equation": "positionSmoothed.y \"Smoothed position\"", "comment": null}, {"name": "vLimited", "type_name": "SI.Velocity", "prefixes": [], "attributes": {}, "binding_equation": "limit_a.y \"Limited velocity\"", "comment": null}, {"name": "aLimited", "type_name": "SI.Acceleration", "prefixes": [], "attributes": {}, "binding_equation": "a.y \"Limited acceleration\"", "comment": null}, {"name": "SlewRateLimiter", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "InverseModel", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ShowLogicalSources", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LogicalNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "RealNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BooleanNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Interaction1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BusUsage", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Rectifier6pulseFFT", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Rectifier12pulseFFT", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TotalHarmonicDistortion", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Modulation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "w", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "2*pi*ramp.y \"2*pi*f\"", "comment": null}, {"name": "SinCosEncoder", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompareSincExpSine", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DemonstrateSignalExtrema", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DemonstrateContinuousSignalExtrema", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "pulse.y \"Investigated pulse signal\"", "comment": null}, {"name": "DemoSignalCharacteristic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformNoise2_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformNoise2.y", "comment": null}, {"name": "UniformNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "manualSeed1_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed1.y", "comment": null}, {"name": "manualSeed2_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed2.y", "comment": null}, {"name": "manualSeed3_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed3.y", "comment": null}, {"name": "AutomaticSeed", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformNoise_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformNoise.y", "comment": null}, {"name": "truncatedNormalNoise_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "truncatedNormalNoise.y", "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "if time < 0.5 then 12 else 2", "comment": null}, {"name": "Distributions", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "meanError.y", "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "sigmaError.y", "comment": null}, {"name": "UniformNoiseProperties", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "NormalNoiseProperties", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformDensity.y", "comment": null}, {"name": "normalDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "normalDensity.y", "comment": null}, {"name": "weibullDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "weibullDensity.y", "comment": null}, {"name": "Densities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "impureRandom_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "impureRandom.y", "comment": null}, {"name": "ImpureGenerator", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ActuatorWithNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vLimited", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "aLimited", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "w", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "move", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Math", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "MathInteger", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "MathBoolean", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Show", "unit": "0, 0; 1, 2.1; 2, 4.2; 3, 6.3; 4, 4.2; 6,\r\n          2.1; 6, 2.1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "mat", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "f", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "distribution", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "actuator", "unit": "0,0.85,0.8,0.1,0.1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["ActuatorNoise", "ActuatorNoiseDiagram", "And1", "Arrow", "AutomaticSeed1", "AutomaticSeed2", "Bessel", "Blocks", "Blocks.Continuous", "Blocks.Interfaces", "Blocks.Noise", "BusUsage", "BusUsage2", "BusUsage3", "BusUsage_Utilities", "BusUsage_Utilities.Interfaces", "Butterworth", "ChebyshevI", "Continuous", "CriticalDamping", "Densities", "Distributions", "DrydenContinuousTurbulence", "Electrical.Machines.SpacePhasors.Blocks", "Examples.Noise", "FillPattern", "Filter1", "FilterWithRiseTime", "Hw", "ImpureGenerator", "Interaction.Show", "Interfaces", "Internal", "InverseModel", "InverseModelSchematic", "LinePattern", "Logical", "Martin", "Math", "Math.Distributions.Normal", "Math.Distributions.Uniform", "Math.Distributions.Weibull", "MathBoolean", "MathInteger", "Modelica", "Modelica.Blocks", "Modelica.Blocks.Continuous", "Modelica.Blocks.Examples", "Modelica.Blocks.Examples.BusUsage_Utilities", "Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces", "Modelica.Blocks.Examples.Noise", "Modelica.Blocks.Icons", "Modelica.Blocks.Interaction", "Modelica.Blocks.Interaction.Show", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Nonlinear", "Modelica.Blocks.Sources", "Modelica.Blocks.Types", "Modelica.Blocks.Types.AnalogFilter", "Modelica.Blocks.Types.FilterType", "Modelica.Blocks.Types.Init", "Modelica.Blocks.Types.SimpleController", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Sensors", "Modelica.Electrical.Analog.Sources", "Modelica.Electrical.Machines.BasicMachines.SynchronousMachines", "Modelica.Electrical.Machines.Examples.Transformers", "Modelica.Electrical.Machines.Icons", "Modelica.Electrical.Machines.Sensors", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Machines.Utilities.ParameterRecords", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Math.Distributions.Normal", "Modelica.Math.Distributions.Uniform", "Modelica.Math.Distributions.Weibull", "Modelica.Math.Random.Utilities", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sensors", "Modelica.Mechanics.Rotational.Sources", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Sources", "Modelica.Units", "Modelica.Units.SI", "ModelicaAdditions", "Noise", "Nonlinear", "NormalNoiseProperties1", "Not1", "Or1", "PI", "PI.limiter", "PID_controller", "PID_controller2", "Pre1", "SI", "Session3c3", "Smooth", "Sources", "StateSelect", "UniformNoise", "UniformNoiseProperties1", "Utilities", "Utilities.Parts", "W0zl2Gay", "a", "add", "addNoise", "amplitude", "and1", "angleSensor", "booleanExpression", "booleanPulse1", "booleanPulse2", "booleanStep", "booleanTable", "booleanValue", "busdelay", "changing", "clock", "compareToSpeed", "connections", "const", "constantForce", "controlBus", "controller", "cosAM", "cosB", "cosBminus", "cosFM", "criticalDamping", "currentQuasiRMSSensor", "currentSensor", "der1", "der2", "der3", "distribution", "dlr", "dlr_logo", "dqToThreePhase", "elastoGap", "en.wikipedia", "erVWhiWU", "everyspec", "falling", "feedback", "feedbackCos", "feedbackSin", "filter_fac3", "filter_fac4", "filter_fac5", "firstOrder1", "firstOrder2", "frequency", "gain", "gearbox", "globalSeed", "ground", "groundM", "harmonic", "i", "id", "idealGearR2T", "impureRandom", "inertia1", "inertia2", "inertiaLoad", "integerConstant", "integerStep", "integerTable", "integerValue", "integrator", "inverseBlockConstraints", "kinematicPTP", "limit_a", "limit_v", "linearDependency1", "loadTorque", "manualSeed1", "manualSeed2", "manualSeed3", "mass", "mean", "meanError", "minMax", "motor", "multiSwitch", "multiSwitch1", "nand1", "noise", "nor1", "normalDensity", "onDelay", "or1", "or2", "part", "positionFeedback", "positionSmoothed", "positionStep", "positionToSpeed", "position_PI", "product", "product1", "product2", "product3", "pulse", "rSFlipFlop", "ramp", "realExpression", "realFFT", "realToInteger", "realValue", "rectifiedMean", "rectifier12pulseFFTresult", "rectifier6pulseFFTresult", "rising", "rodMass", "rootMeanSquare", "rotator", "rotorDisplacementAngle", "sampleTriggerReset", "sampleTriggerSet", "sawTooth", "sawTooth1", "set1", "showValue", "showValue1", "showValue2", "showValue3", "showValue4", "showValue5", "showValue6", "sigmaError", "signalCurrent", "signalExtrema1", "signalExtrema2", "signalExtrema3", "sinA", "sinAM", "sinAminus", "sinFM", "sine", "sine1", "sineVoltage1", "sineVoltage3", "slewRateLimiter", "smpm", "smpmData", "specification.modelica", "speed", "speedFeedback", "speedSensor", "speed_PI", "spring", "standardDeviation", "star", "starM", "start", "step", "stop", "subControlBus", "sum", "table1", "table2", "terminalBox", "thd1", "thdRMS", "theoreticalMean", "theoreticalSigma", "theoreticalVariance", "timeTable", "toPolar", "torque", "torqueSensor", "triggeredAdd", "truncatedNormalNoise", "uniformDensity", "uniformNoise", "uniformNoise2", "v", "variance", "varianceError", "voltageQuasiRMSSensor", "voltageSensor", "weibullDensity", "whiteNoise", "wrapAngle", "www.dlr", "www.modelica", "www.robotic.dlr", "xor1"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse", "Modelica.Icons.UtilitiesPackage", "Modelica.Blocks.Icons.Block", "Modelica.Blocks.Interfaces.SO", "Modelica.Electrical.Machines.Icons.TransientMachine", "Modelica.Icons.InterfacesPackage", "Modelica.Icons.SignalBus", "Modelica.Icons.SignalSubBus"]}
{"fqn": "Modelica.Blocks.Examples", "kind": "package", "name": "Examples", "package_path": ["Modelica", "Blocks"], "extends": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse", "Modelica.Icons.UtilitiesPackage", "Modelica.Blocks.Icons.Block", "Modelica.Blocks.Interfaces.SO", "Modelica.Icons.Package", "Modelica.Electrical.Machines.Icons.TransientMachine", "Modelica.Icons.InterfacesPackage", "Modelica.Icons.SignalBus", "Modelica.Icons.SignalSubBus"], "imports": ["Modelica.Constants.pi", "distribution"], "parameters": [{"name": "driveAngle", "type": "SI.Angle", "default": "1.570796326794897 \"Reference distance to move\"", "description": null}, {"name": "order", "type": "Integer", "default": "2 \"Filter order\"", "description": null}, {"name": "f_cut", "type": "SI.Frequency", "default": "2 \"Cut-off frequency\"", "description": null}, {"name": "filterType", "type": "Modelica.Blocks.Types.FilterType", "default": "Modelica.Blocks.Types.FilterType.LowPass \"Type of filter (LowPass/HighPass)\"", "description": null}, {"name": "init", "type": "Modelica.Blocks.Types.Init", "default": "Modelica.Blocks.Types.Init.SteadyState \"Type of initialization (no init/steady state/initial state/initial output)\"", "description": null}, {"name": "normalized", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "riseTime", "type": "SI.Time", "default": "2 \"Time to reach the step input\"", "description": null}, {"name": "vMax", "type": "SI.Velocity", "default": "2 \"Max. velocity\"", "description": null}, {"name": "aMax", "type": "SI.Acceleration", "default": "20 \"Max. acceleration\"", "description": null}, {"name": "f1", "type": "SI.Frequency", "default": "50 \"Fundamental wave frequency\"", "description": null}, {"name": "V1", "type": "SI.Voltage", "default": "100 \"Fundamental wave RMS voltage\"", "description": null}, {"name": "V3", "type": "SI.Voltage", "default": "20 \"Third harmonic wave RMS voltage\"", "description": null}, {"name": "offset", "type": "Real", "default": "0 \"Offset of pulse signal\"", "description": null}, {"name": "f", "type": "Modelica.Units.SI.Frequency", "default": "50 \"Base frequency of pulse signal\"", "description": null}, {"name": "y_mean", "type": "Real", "default": "offset + app*dutyCycle \"Mean value\"", "description": null}, {"name": "y_rect", "type": "Real", "default": "abs(offset + app)*dutyCycle + abs(offset)*(1 - dutyCycle) \"Rectified mean\"", "description": null}, {"name": "y_rms", "type": "Real", "default": "sqrt((offset + app)^2*dutyCycle + offset^2*(1 - dutyCycle)) \"Root mean square\"", "description": null}, {"name": "y1_cos", "type": "Real", "default": "((offset + app)*( sin(dutyCycle*2*pi) - sin(0)) + offset*( sin(2*pi) - sin(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic cosine rms component\"", "description": null}, {"name": "y1_sin", "type": "Real", "default": "((offset + app)*(-cos(dutyCycle*2*pi) + cos(0)) + offset*(-cos(2*pi) + cos(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic sine rms component\"", "description": null}, {"name": "y1_rms", "type": "Real", "default": "sqrt(y1_cos^2+y1_sin^2) \"RMS value of first harmonic\"", "description": null}, {"name": "y1_arg", "type": "Real", "default": "atan2(y1_sin,y1_cos) \"Argument of first harmonic\"", "description": null}, {"name": "startTime", "type": "SI.Time", "default": "0.5 \"Start time of noise\"", "description": null}, {"name": "y_off", "type": "Real", "default": "-1.0 \"Output of block before startTime\"", "description": null}, {"name": "samplePeriod", "type": "SI.Period", "default": "0.02 \"Sample period of all blocks\"", "description": null}, {"name": "y_min", "type": "Real", "default": "0 \"Minimum value of band\"", "description": null}, {"name": "y_max", "type": "Real", "default": "6 \"Maximum value of band\"", "description": null}, {"name": "pMean", "type": "Real", "default": "mu \"Theoretical mean value of normal distribution\"", "description": null}, {"name": "var", "type": "Real", "default": "sigma^2 \"Theoretical variance of uniform distribution\"", "description": null}, {"name": "std", "type": "Real", "default": "sigma \"Theoretical standard deviation of normal distribution\"", "description": null}, {"name": "mu", "type": "Real", "default": "3 \"Mean value for normal distribution\"", "description": null}, {"name": "sigma", "type": "Real", "default": "1 \"Standard deviation for normal distribution\"", "description": null}, {"name": "V", "type": "SI.Velocity", "default": "140 * 0.5144 \"Airspeed of aircraft (typically 140kts during approach)\"", "description": null}, {"name": "L", "type": "SI.Length", "default": "600 * 0.3048 \"Scale length (= flight altitude)\"", "description": null}, {"name": "if amplitude at f_cut", "type": "Boolean", "default": "-3db", "description": null}, {"name": "otherwise unmodified filter\"", "type": "Boolean", "default": "", "description": null}, {"name": "app(final min", "type": "Real", "default": "0)=1 \"Peak-to-peak value of pulse signal\"", "description": null}, {"name": "dutyCycle(final min", "type": "Real", "default": "0, final max=1)=0.5 \"Duty cycle of pulse signal\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(realExpression.y, subControlBus.myRealSignal) annotation (Line(\r\n          points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}))", "connect(booleanExpression.y, subControlBus.myBooleanSignal) annotation (\r\n          Line(\r\n          points={{21.3,-20},{60,-20},{60,0},{100,0}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 3181, "end_line": 3186, "start_col": 5, "end_col": 76}}, {"equations": ["connect(realExpression.y, subControlBus.myRealSignal) annotation (Line(\r\n          points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}))", "connect(booleanExpression.y, subControlBus.myBooleanSignal) annotation (\r\n          Line(\r\n          points={{21.3,-20},{60,-20},{60,0},{100,0}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 3182, "end_line": 3186, "start_col": 7, "end_col": 76}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 3181, "end_line": 3181, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2991, "start_col": 9, "end_col": 70}}, {"equations": ["connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2974, "end_line": 2991, "start_col": 11, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2973, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2895, "start_col": 9, "end_col": 68}}, {"equations": ["connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2844, "end_line": 2895, "start_col": 11, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2843, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n         when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2682, "end_line": 2685, "start_col": 7, "end_col": 19}}, {"equations": ["when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2683, "end_line": 2685, "start_col": 10, "end_col": 19}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2685, "end_line": 2685, "start_col": 14, "end_col": 18}}, {"equations": ["y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2684, "end_line": 2684, "start_col": 13, "end_col": 83}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2683, "end_line": 2683, "start_col": 10, "end_col": 14}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2682, "end_line": 2682, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, lambda, k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2612, "end_line": 2613, "start_col": 7, "end_col": 40}}, {"equations": ["y = distribution(u, lambda, k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2613, "end_line": 2613, "start_col": 9, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2612, "end_line": 2612, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, mu, sigma)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2540, "end_line": 2541, "start_col": 7, "end_col": 40}}, {"equations": ["y = distribution(u, mu, sigma)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2541, "end_line": 2541, "start_col": 9, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2540, "end_line": 2540, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, u_min, u_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2469, "end_line": 2470, "start_col": 7, "end_col": 43}}, {"equations": ["y = distribution(u, u_min, u_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2470, "end_line": 2470, "start_col": 9, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2469, "end_line": 2469, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n      connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}))", "connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2380, "end_line": 2384, "start_col": 5, "end_col": 55}}, {"equations": ["connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}))", "connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2381, "end_line": 2384, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2380, "end_line": 2380, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}))", "connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}))", "connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}))", "connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}))", "connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}))", "connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}))", "connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}))", "connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}))", "connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}))", "connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2275, "end_line": 2295, "start_col": 5, "end_col": 53}}, {"equations": ["connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}))", "connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}))", "connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}))", "connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}))", "connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}))", "connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}))", "connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}))", "connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}))", "connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}))", "connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2276, "end_line": 2295, "start_col": 7, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2275, "end_line": 2275, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}))", "connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}))", "connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}))", "connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}))", "connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2151, "end_line": 2161, "start_col": 5, "end_col": 69}}, {"equations": ["connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}))", "connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}))", "connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}))", "connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}))", "connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2152, "end_line": 2161, "start_col": 7, "end_col": 69}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2151, "end_line": 2151, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2086, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2065, "end_line": 2086, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2064, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1982, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1961, "end_line": 1982, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1960, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n    connect(pulse.y, mean.u) annotation (Line(points={{-39,0},{-20,0},{-20,60},{-12,\r\n            60}}, color={0,0,127}))", "connect(pulse.y, rectifiedMean.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            20},{-12,20}}, color={0,0,127}))", "connect(pulse.y, rootMeanSquare.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            -20},{-12,-20}}, color={0,0,127}))", "connect(pulse.y, harmonic.u) annotation (Line(points={{-39,0},{-20,0},{-20,-60},\r\n            {-12,-60}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1627, "end_line": 1635, "start_col": 3, "end_col": 43}}, {"equations": ["connect(pulse.y, mean.u) annotation (Line(points={{-39,0},{-20,0},{-20,60},{-12,\r\n            60}}, color={0,0,127}))", "connect(pulse.y, rectifiedMean.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            20},{-12,20}}, color={0,0,127}))", "connect(pulse.y, rootMeanSquare.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            -20},{-12,-20}}, color={0,0,127}))", "connect(pulse.y, harmonic.u) annotation (Line(points={{-39,0},{-20,0},{-20,-60},\r\n            {-12,-60}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1628, "end_line": 1635, "start_col": 5, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1627, "end_line": 1627, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(amplitude.y, product1.u2) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,74},{-2,74}}, color={0,0,127}))", "connect(amplitude.y, product2.u1) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,26},{-2,26}}, color={0,0,127}))", "connect(sine.y, product1.u1) annotation (Line(points={{-39,80},{-20,80},{-20,\r\n            86},{-2,86}},  color={0,0,127}))", "connect(sawTooth.y, product2.u2) annotation (Line(points={{-39,20},{-20,20},\r\n            {-20,14},{-2,14}}, color={0,0,127}))", "connect(product1.y, signalExtrema1.u)\r\n      annotation (Line(points={{21,80},{58,80}}, color={0,0,127}))", "connect(product2.y, signalExtrema2.u)\r\n      annotation (Line(points={{21,20},{58,20}}, color={0,0,127}))", "connect(sine1.y, add.u1) annotation (Line(points={{-39,-40},{-32,-40},{-32,\r\n            -54},{-22,-54}}, color={0,0,127}))", "connect(pulse.y, add.u2) annotation (Line(points={{-39,-80},{-32,-80},{-32,\r\n            -66},{-22,-66}}, color={0,0,127}))", "connect(add.y, product3.u2) annotation (Line(points={{1,-60},{10,-60},{10,\r\n            -46},{18,-46}}, color={0,0,127}))", "connect(sawTooth1.y, product3.u1) annotation (Line(points={{1,-20},{10,-20},\r\n            {10,-34},{18,-34}}, color={0,0,127}))", "connect(product3.y, signalExtrema3.u)\r\n      annotation (Line(points={{41,-40},{58,-40}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1558, "end_line": 1580, "start_col": 3, "end_col": 70}}, {"equations": ["connect(amplitude.y, product1.u2) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,74},{-2,74}}, color={0,0,127}))", "connect(amplitude.y, product2.u1) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,26},{-2,26}}, color={0,0,127}))", "connect(sine.y, product1.u1) annotation (Line(points={{-39,80},{-20,80},{-20,\r\n            86},{-2,86}},  color={0,0,127}))", "connect(sawTooth.y, product2.u2) annotation (Line(points={{-39,20},{-20,20},\r\n            {-20,14},{-2,14}}, color={0,0,127}))", "connect(product1.y, signalExtrema1.u)\r\n      annotation (Line(points={{21,80},{58,80}}, color={0,0,127}))", "connect(product2.y, signalExtrema2.u)\r\n      annotation (Line(points={{21,20},{58,20}}, color={0,0,127}))", "connect(sine1.y, add.u1) annotation (Line(points={{-39,-40},{-32,-40},{-32,\r\n            -54},{-22,-54}}, color={0,0,127}))", "connect(pulse.y, add.u2) annotation (Line(points={{-39,-80},{-32,-80},{-32,\r\n            -66},{-22,-66}}, color={0,0,127}))", "connect(add.y, product3.u2) annotation (Line(points={{1,-60},{10,-60},{10,\r\n            -46},{18,-46}}, color={0,0,127}))", "connect(sawTooth1.y, product3.u1) annotation (Line(points={{1,-20},{10,-20},\r\n            {10,-34},{18,-34}}, color={0,0,127}))", "connect(product3.y, signalExtrema3.u)\r\n      annotation (Line(points={{41,-40},{58,-40}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1559, "end_line": 1580, "start_col": 5, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1558, "end_line": 1558, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(sine.y, signalExtrema1.u)\r\n      annotation (Line(points={{1,0},{20,0},{20,20},{38,20}}, color={0,0,127}))", "connect(sine.y, signalExtrema2.u) annotation (Line(points={{1,0},{20,0},{20,-20},\r\n            {38,-20}}, color={0,0,127}))", "connect(amplitude.y, sine.amplitude) annotation (Line(points={{-59,20},{-40,\r\n            20},{-40,6},{-22,6}}, color={0,0,127}))", "connect(frequency.y, sine.f) annotation (Line(points={{-59,-20},{-40,-20},{\r\n            -40,-6},{-22,-6}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1487, "end_line": 1495, "start_col": 3, "end_col": 50}}, {"equations": ["connect(sine.y, signalExtrema1.u)\r\n      annotation (Line(points={{1,0},{20,0},{20,20},{38,20}}, color={0,0,127}))", "connect(sine.y, signalExtrema2.u) annotation (Line(points={{1,0},{20,0},{20,-20},\r\n            {38,-20}}, color={0,0,127}))", "connect(amplitude.y, sine.amplitude) annotation (Line(points={{-59,20},{-40,\r\n            20},{-40,6},{-22,6}}, color={0,0,127}))", "connect(frequency.y, sine.f) annotation (Line(points={{-59,-20},{-40,-20},{\r\n            -40,-6},{-22,-6}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1488, "end_line": 1495, "start_col": 5, "end_col": 50}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1487, "end_line": 1487, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(ramp.y, sinA.f) annotation (Line(points={{-79,0},{-70,0},{-70,-26},{-62,\r\n            -26}},color={0,0,127}))", "connect(ramp.y, sinAminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,-56},\r\n            {-62,-56}}, color={0,0,127}))", "connect(ramp.y, cosBminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,14},\r\n            {-62,14}}, color={0,0,127}))", "connect(ramp.y, cosB.f) annotation (Line(points={{-79,0},{-70,0},{-70,44},{-62,\r\n            44}}, color={0,0,127}))", "connect(cosBminus.y, feedbackCos.u2)\r\n      annotation (Line(points={{-39,20},{-20,20},{-20,42}}, color={0,0,127}))", "connect(cosB.y, feedbackCos.u1)\r\n      annotation (Line(points={{-39,50},{-28,50}}, color={0,0,127}))", "connect(sinA.y, feedbackSin.u1)\r\n      annotation (Line(points={{-39,-20},{-28,-20}}, color={0,0,127}))", "connect(sinAminus.y, feedbackSin.u2)\r\n      annotation (Line(points={{-39,-50},{-20,-50},{-20,-28}}, color={0,0,127}))", "connect(feedbackCos.y, rotator.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,0},{8,0}}, color={0,0,127}))", "connect(feedbackSin.y, rotator.u[2])\r\n      annotation (Line(points={{-11,-20},{0,-20},{0,0},{8,0}}, color={0,0,127}))", "connect(rotator.y[2], integrator.u)\r\n      annotation (Line(points={{31,0},{38,0}}, color={0,0,127}))", "connect(integrator.y, rotator.angle) annotation (Line(points={{61,0},{70,0},{70,\r\n            -20},{20,-20},{20,-12}}, color={0,0,127}))", "connect(integrator.y, der1.u)\r\n      annotation (Line(points={{61,0},{78,0}}, color={0,0,127}))", "connect(integrator.y, wrapAngle.u)\r\n      annotation (Line(points={{61,0},{70,0},{70,30},{78,30}}, color={0,0,127}))", "connect(feedbackCos.y, toPolar.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,30},{8,30}}, color={0,0,127}))", "connect(feedbackSin.y, toPolar.u[2]) annotation (Line(points={{-11,-20},{0,-20},\r\n            {0,30},{8,30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1389, "end_line": 1421, "start_col": 3, "end_col": 47}}, {"equations": ["connect(ramp.y, sinA.f) annotation (Line(points={{-79,0},{-70,0},{-70,-26},{-62,\r\n            -26}},color={0,0,127}))", "connect(ramp.y, sinAminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,-56},\r\n            {-62,-56}}, color={0,0,127}))", "connect(ramp.y, cosBminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,14},\r\n            {-62,14}}, color={0,0,127}))", "connect(ramp.y, cosB.f) annotation (Line(points={{-79,0},{-70,0},{-70,44},{-62,\r\n            44}}, color={0,0,127}))", "connect(cosBminus.y, feedbackCos.u2)\r\n      annotation (Line(points={{-39,20},{-20,20},{-20,42}}, color={0,0,127}))", "connect(cosB.y, feedbackCos.u1)\r\n      annotation (Line(points={{-39,50},{-28,50}}, color={0,0,127}))", "connect(sinA.y, feedbackSin.u1)\r\n      annotation (Line(points={{-39,-20},{-28,-20}}, color={0,0,127}))", "connect(sinAminus.y, feedbackSin.u2)\r\n      annotation (Line(points={{-39,-50},{-20,-50},{-20,-28}}, color={0,0,127}))", "connect(feedbackCos.y, rotator.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,0},{8,0}}, color={0,0,127}))", "connect(feedbackSin.y, rotator.u[2])\r\n      annotation (Line(points={{-11,-20},{0,-20},{0,0},{8,0}}, color={0,0,127}))", "connect(rotator.y[2], integrator.u)\r\n      annotation (Line(points={{31,0},{38,0}}, color={0,0,127}))", "connect(integrator.y, rotator.angle) annotation (Line(points={{61,0},{70,0},{70,\r\n            -20},{20,-20},{20,-12}}, color={0,0,127}))", "connect(integrator.y, der1.u)\r\n      annotation (Line(points={{61,0},{78,0}}, color={0,0,127}))", "connect(integrator.y, wrapAngle.u)\r\n      annotation (Line(points={{61,0},{70,0},{70,30},{78,30}}, color={0,0,127}))", "connect(feedbackCos.y, toPolar.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,30},{8,30}}, color={0,0,127}))", "connect(feedbackSin.y, toPolar.u[2]) annotation (Line(points={{-11,-20},{0,-20},\r\n            {0,30},{8,30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1390, "end_line": 1421, "start_col": 5, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1389, "end_line": 1389, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(amplitude.y, sinAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,36},{-12,36}}, color={0,0,127}))", "connect(frequency.y, sinFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -46},{-12,-46}}, color={0,0,127}))", "connect(amplitude.y, cosAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,4},{-12,4}}, color={0,0,127}))", "connect(frequency.y, cosFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -76},{-12,-76}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1325, "end_line": 1333, "start_col": 3, "end_col": 48}}, {"equations": ["connect(amplitude.y, sinAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,36},{-12,36}}, color={0,0,127}))", "connect(frequency.y, sinFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -46},{-12,-46}}, color={0,0,127}))", "connect(amplitude.y, cosAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,4},{-12,4}}, color={0,0,127}))", "connect(frequency.y, cosFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -76},{-12,-76}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1326, "end_line": 1333, "start_col": 5, "end_col": 48}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1325, "end_line": 1325, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(voltageSensor.p, sineVoltage3.p) annotation (Line(points={{0,10},{0,30},{-40,30},{-40,20}}, color={0,0,255}))", "connect(sineVoltage3.n, sineVoltage1.p) annotation (Line(points={{-40,0},{-40,-10}}, color={0,0,255}))", "connect(sineVoltage1.n, ground.p) annotation (Line(points={{-40,-30},{-40,-40}}, color={0,0,255}))", "connect(ground.p, voltageSensor.n) annotation (Line(points={{-40,-40},{-40,-30},{0,-30},{0,-10}}, color={0,0,255}))", "connect(thd1.u, voltageSensor.v) annotation (Line(points={{28,20},{20,20},{20,0},{11,0}}, color={0,0,127}))", "connect(voltageSensor.v, thdRMS.u) annotation (Line(points={{11,0},{20,0},{20,-20},{28,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1249, "end_line": 1255, "start_col": 3, "end_col": 117}}, {"equations": ["connect(voltageSensor.p, sineVoltage3.p) annotation (Line(points={{0,10},{0,30},{-40,30},{-40,20}}, color={0,0,255}))", "connect(sineVoltage3.n, sineVoltage1.p) annotation (Line(points={{-40,0},{-40,-10}}, color={0,0,255}))", "connect(sineVoltage1.n, ground.p) annotation (Line(points={{-40,-30},{-40,-40}}, color={0,0,255}))", "connect(ground.p, voltageSensor.n) annotation (Line(points={{-40,-40},{-40,-30},{0,-30},{0,-10}}, color={0,0,255}))", "connect(thd1.u, voltageSensor.v) annotation (Line(points={{28,20},{20,20},{20,0},{11,0}}, color={0,0,127}))", "connect(voltageSensor.v, thdRMS.u) annotation (Line(points={{11,0},{20,0},{20,-20},{28,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1250, "end_line": 1255, "start_col": 5, "end_col": 117}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1249, "end_line": 1249, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(currentSensor.i[1], realFFT.u) annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1195, "end_line": 1196, "start_col": 3, "end_col": 119}}, {"equations": ["connect(currentSensor.i[1], realFFT.u) annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1196, "end_line": 1196, "start_col": 5, "end_col": 119}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1195, "end_line": 1195, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(currentSensor.i[1], realFFT.u)\r\n      annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}},\r\n                                                     color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1152, "end_line": 1155, "start_col": 3, "end_col": 72}}, {"equations": ["connect(currentSensor.i[1], realFFT.u)\r\n      annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}},\r\n                                                     color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1153, "end_line": 1155, "start_col": 5, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1152, "end_line": 1152, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n\r\n    connect(sine.y, controlBus.realSignal1) annotation (Line(\r\n        points={{-39,50},{12,50},{12,14},{30,14},{30,10}}, color={0,0,127}))", "connect(booleanStep.y, controlBus.booleanSignal) annotation (Line(\r\n        points={{-37,10},{30,10}}, color={255,0,255}))", "connect(integerStep.y, controlBus.integerSignal) annotation (Line(\r\n        points={{-39,-30},{0,-30},{0,6},{32,6},{32,10},{30,10}}, color={255,127,0}))", "connect(part.subControlBus, controlBus.subControlBus) annotation (Line(\r\n        points={{-40,-70},{30,-70},{30,10}},\r\n        color={255,204,51},\r\n        thickness=0.5))", "connect(gain.u, controlBus.realSignal1) annotation (Line(\r\n        points={{-38,80},{20,80},{20,18},{32,18},{32,10},{30,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1015, "end_line": 1028, "start_col": 3, "end_col": 86}}, {"equations": ["connect(sine.y, controlBus.realSignal1) annotation (Line(\r\n        points={{-39,50},{12,50},{12,14},{30,14},{30,10}}, color={0,0,127}))", "connect(booleanStep.y, controlBus.booleanSignal) annotation (Line(\r\n        points={{-37,10},{30,10}}, color={255,0,255}))", "connect(integerStep.y, controlBus.integerSignal) annotation (Line(\r\n        points={{-39,-30},{0,-30},{0,6},{32,6},{32,10},{30,10}}, color={255,127,0}))", "connect(part.subControlBus, controlBus.subControlBus) annotation (Line(\r\n        points={{-40,-70},{30,-70},{30,10}},\r\n        color={255,204,51},\r\n        thickness=0.5))", "connect(gain.u, controlBus.realSignal1) annotation (Line(\r\n        points={{-38,80},{20,80},{20,18},{32,18},{32,10},{30,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1017, "end_line": 1028, "start_col": 5, "end_col": 86}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1015, "end_line": 1015, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(integerTable.y, integerValue.numberPort) annotation (Line(\r\n        points={{-59,30},{-41.5,30}}, color={255,127,0}))", "connect(timeTable.y, realValue.numberPort) annotation (Line(\r\n        points={{-59,70},{-41.5,70}}, color={0,0,127}))", "connect(booleanTable.y, booleanValue.activePort) annotation (Line(\r\n        points={{-59,-10},{-41.5,-10}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 974, "end_line": 980, "start_col": 3, "end_col": 61}}, {"equations": ["connect(integerTable.y, integerValue.numberPort) annotation (Line(\r\n        points={{-59,30},{-41.5,30}}, color={255,127,0}))", "connect(timeTable.y, realValue.numberPort) annotation (Line(\r\n        points={{-59,70},{-41.5,70}}, color={0,0,127}))", "connect(booleanTable.y, booleanValue.activePort) annotation (Line(\r\n        points={{-59,-10},{-41.5,-10}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 975, "end_line": 980, "start_col": 5, "end_col": 61}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 974, "end_line": 974, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(booleanPulse1.y, and1.u[1]) annotation (Line(\r\n        points={{-79,70},{-68,70},{-68,72.8},{-58,72.8}}, color={255,0,255}))", "connect(booleanStep.y, and1.u[2]) annotation (Line(\r\n        points={{-79,38},{-64,38},{-64,70},{-58,70}}, color={255,0,255}))", "connect(booleanPulse2.y, and1.u[3]) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,67.2},{-58,67.2}}, color={255,0,255}))", "connect(and1.y, or1.u[1]) annotation (Line(\r\n        points={{-45.1,70},{-36.4,70},{-36.4,70.1},{-28,70.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or1.u[2]) annotation (Line(\r\n        points={{-79,6},{-40,6},{-40,65.9},{-28,65.9}}, color={255,0,255}))", "connect(or1.y, xor1.u[1]) annotation (Line(\r\n        points={{-15.1,68},{-8,68},{-8,68.1},{-2,68.1}}, color={255,0,255}))", "connect(booleanPulse2.y, xor1.u[2]) annotation (Line(\r\n        points={{-79,6},{-12,6},{-12,63.9},{-2,63.9}}, color={255,0,255}))", "connect(and1.y, showValue.activePort) annotation (Line(\r\n        points={{-45.1,70},{-42,70},{-42,84},{-37.5,84}}, color={255,0,255}))", "connect(or1.y, showValue2.activePort) annotation (Line(\r\n        points={{-15.1,68},{-12,68},{-12,84},{-3.5,84}}, color={255,0,255}))", "connect(xor1.y, showValue3.activePort) annotation (Line(\r\n        points={{10.9,66},{22.5,66}}, color={255,0,255}))", "connect(xor1.y, nand1.u[1]) annotation (Line(\r\n        points={{10.9,66},{16,66},{16,48.1},{22,48.1}}, color={255,0,255}))", "connect(booleanPulse2.y, nand1.u[2]) annotation (Line(\r\n        points={{-79,6},{16,6},{16,44},{22,44},{22,43.9}}, color={255,0,255}))", "connect(nand1.y, or2.u[1]) annotation (Line(\r\n        points={{34.9,46},{46,46},{46,46.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or2.u[2]) annotation (Line(\r\n        points={{-79,6},{42,6},{42,41.9},{46,41.9}}, color={255,0,255}))", "connect(or2.y, nor1.u) annotation (Line(\r\n        points={{58.9,44},{66.4,44}}, color={255,0,255}))", "connect(nor1.y, showValue4.activePort) annotation (Line(\r\n        points={{76.8,44},{88.5,44}}, color={255,0,255}))", "connect(booleanPulse2.y, rising.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-11},{-57.6,-11}}, color={255,0,255}))", "connect(rising.y, set1.u[1]) annotation (Line(\r\n        points={{-47.2,-11},{-38.6,-11},{-38.6,-11.5},{-30,-11.5}}, color={255,0,255}))", "connect(falling.y, set1.u[2]) annotation (Line(\r\n        points={{-47.2,-28},{-40,-28},{-40,-14.5},{-30,-14.5}}, color={255,0,255}))", "connect(booleanPulse2.y, falling.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-28},{-57.6,-28}}, color={255,0,255}))", "connect(booleanTable.y, onDelay.u) annotation (Line(\r\n        points={{-79,-90},{-57.6,-90}}, color={255,0,255}))", "connect(booleanPulse2.y, changing.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-55},{-57.6,-55}}, color={255,0,255}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{1,-50},{11.6,-50}}, color={255,127,0}))", "connect(changing.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{-47.2,-55},{-30,-55},{-30,-74},{16.4,-74},{16.4,-57.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue1.numberPort) annotation (Line(\r\n        points={{27.2,-50},{38.5,-50}}, color={255,127,0}))", "connect(set1.y, showValue5.activePort) annotation (Line(\r\n        points={{11,-13},{22.5,-13}}, color={255,0,255}))", "connect(onDelay.y, showValue6.activePort) annotation (Line(\r\n        points={{-47.2,-90},{-33.5,-90}}, color={255,0,255}))", "connect(sampleTriggerSet.y, rSFlipFlop.S) annotation (Line(\r\n        points={{54.7,-69},{60,-69},{60,-74},{68,-74}}, color={255,0,255}))", "connect(sampleTriggerReset.y, rSFlipFlop.R) annotation (Line(\r\n        points={{54.7,-91},{60,-91},{60,-86},{68,-86}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 871, "end_line": 929, "start_col": 3, "end_col": 77}}, {"equations": ["connect(booleanPulse1.y, and1.u[1]) annotation (Line(\r\n        points={{-79,70},{-68,70},{-68,72.8},{-58,72.8}}, color={255,0,255}))", "connect(booleanStep.y, and1.u[2]) annotation (Line(\r\n        points={{-79,38},{-64,38},{-64,70},{-58,70}}, color={255,0,255}))", "connect(booleanPulse2.y, and1.u[3]) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,67.2},{-58,67.2}}, color={255,0,255}))", "connect(and1.y, or1.u[1]) annotation (Line(\r\n        points={{-45.1,70},{-36.4,70},{-36.4,70.1},{-28,70.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or1.u[2]) annotation (Line(\r\n        points={{-79,6},{-40,6},{-40,65.9},{-28,65.9}}, color={255,0,255}))", "connect(or1.y, xor1.u[1]) annotation (Line(\r\n        points={{-15.1,68},{-8,68},{-8,68.1},{-2,68.1}}, color={255,0,255}))", "connect(booleanPulse2.y, xor1.u[2]) annotation (Line(\r\n        points={{-79,6},{-12,6},{-12,63.9},{-2,63.9}}, color={255,0,255}))", "connect(and1.y, showValue.activePort) annotation (Line(\r\n        points={{-45.1,70},{-42,70},{-42,84},{-37.5,84}}, color={255,0,255}))", "connect(or1.y, showValue2.activePort) annotation (Line(\r\n        points={{-15.1,68},{-12,68},{-12,84},{-3.5,84}}, color={255,0,255}))", "connect(xor1.y, showValue3.activePort) annotation (Line(\r\n        points={{10.9,66},{22.5,66}}, color={255,0,255}))", "connect(xor1.y, nand1.u[1]) annotation (Line(\r\n        points={{10.9,66},{16,66},{16,48.1},{22,48.1}}, color={255,0,255}))", "connect(booleanPulse2.y, nand1.u[2]) annotation (Line(\r\n        points={{-79,6},{16,6},{16,44},{22,44},{22,43.9}}, color={255,0,255}))", "connect(nand1.y, or2.u[1]) annotation (Line(\r\n        points={{34.9,46},{46,46},{46,46.1}}, color={255,0,255}))", "connect(booleanPulse2.y, or2.u[2]) annotation (Line(\r\n        points={{-79,6},{42,6},{42,41.9},{46,41.9}}, color={255,0,255}))", "connect(or2.y, nor1.u) annotation (Line(\r\n        points={{58.9,44},{66.4,44}}, color={255,0,255}))", "connect(nor1.y, showValue4.activePort) annotation (Line(\r\n        points={{76.8,44},{88.5,44}}, color={255,0,255}))", "connect(booleanPulse2.y, rising.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-11},{-57.6,-11}}, color={255,0,255}))", "connect(rising.y, set1.u[1]) annotation (Line(\r\n        points={{-47.2,-11},{-38.6,-11},{-38.6,-11.5},{-30,-11.5}}, color={255,0,255}))", "connect(falling.y, set1.u[2]) annotation (Line(\r\n        points={{-47.2,-28},{-40,-28},{-40,-14.5},{-30,-14.5}}, color={255,0,255}))", "connect(booleanPulse2.y, falling.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-28},{-57.6,-28}}, color={255,0,255}))", "connect(booleanTable.y, onDelay.u) annotation (Line(\r\n        points={{-79,-90},{-57.6,-90}}, color={255,0,255}))", "connect(booleanPulse2.y, changing.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-55},{-57.6,-55}}, color={255,0,255}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{1,-50},{11.6,-50}}, color={255,127,0}))", "connect(changing.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{-47.2,-55},{-30,-55},{-30,-74},{16.4,-74},{16.4,-57.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue1.numberPort) annotation (Line(\r\n        points={{27.2,-50},{38.5,-50}}, color={255,127,0}))", "connect(set1.y, showValue5.activePort) annotation (Line(\r\n        points={{11,-13},{22.5,-13}}, color={255,0,255}))", "connect(onDelay.y, showValue6.activePort) annotation (Line(\r\n        points={{-47.2,-90},{-33.5,-90}}, color={255,0,255}))", "connect(sampleTriggerSet.y, rSFlipFlop.S) annotation (Line(\r\n        points={{54.7,-69},{60,-69},{60,-74},{68,-74}}, color={255,0,255}))", "connect(sampleTriggerReset.y, rSFlipFlop.R) annotation (Line(\r\n        points={{54.7,-91},{60,-91},{60,-86},{68,-86}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 872, "end_line": 929, "start_col": 5, "end_col": 77}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 871, "end_line": 871, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(sine.y, realToInteger.u) annotation (Line(\r\n        points={{-79,70},{-62,70}}, color={0,0,127}))", "connect(realToInteger.y, sum.u[1]) annotation (Line(\r\n        points={{-39,70},{-32,70},{-32,72},{-14,72},{-14,72.8}}, color={255,127,0}))", "connect(integerStep.y, sum.u[2]) annotation (Line(\r\n        points={{-39,40},{-28,40},{-28,70},{-14,70}}, color={255,127,0}))", "connect(integerConstant.y, sum.u[3]) annotation (Line(\r\n        points={{-39,0},{-22,0},{-22,67.2},{-14,67.2}}, color={255,127,0}))", "connect(sum.y, showValue.numberPort) annotation (Line(\r\n        points={{-1.1,70},{38.5,70}}, color={255,127,0}))", "connect(sum.y, product.u[1]) annotation (Line(\r\n        points={{-1.1,70},{4,70},{4,32.1},{16,32.1}}, color={255,127,0}))", "connect(integerStep.y, product.u[2]) annotation (Line(\r\n        points={{-39,40},{-8,40},{-8,27.9},{16,27.9}}, color={255,127,0}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n        points={{28.9,30},{38.5,30}}, color={255,127,0}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{-39,0},{13.6,0}}, color={255,127,0}))", "connect(booleanPulse1.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{9,-20},{18.4,-20},{18.4,-7.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue2.numberPort) annotation (Line(\r\n        points={{29.2,0},{38.5,0}}, color={255,127,0}))", "connect(booleanPulse1.y, multiSwitch1.u[1]) annotation (Line(\r\n        points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch1.u[2]) annotation (Line(\r\n        points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 763, "end_line": 789, "start_col": 3, "end_col": 85}}, {"equations": ["connect(sine.y, realToInteger.u) annotation (Line(\r\n        points={{-79,70},{-62,70}}, color={0,0,127}))", "connect(realToInteger.y, sum.u[1]) annotation (Line(\r\n        points={{-39,70},{-32,70},{-32,72},{-14,72},{-14,72.8}}, color={255,127,0}))", "connect(integerStep.y, sum.u[2]) annotation (Line(\r\n        points={{-39,40},{-28,40},{-28,70},{-14,70}}, color={255,127,0}))", "connect(integerConstant.y, sum.u[3]) annotation (Line(\r\n        points={{-39,0},{-22,0},{-22,67.2},{-14,67.2}}, color={255,127,0}))", "connect(sum.y, showValue.numberPort) annotation (Line(\r\n        points={{-1.1,70},{38.5,70}}, color={255,127,0}))", "connect(sum.y, product.u[1]) annotation (Line(\r\n        points={{-1.1,70},{4,70},{4,32.1},{16,32.1}}, color={255,127,0}))", "connect(integerStep.y, product.u[2]) annotation (Line(\r\n        points={{-39,40},{-8,40},{-8,27.9},{16,27.9}}, color={255,127,0}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n        points={{28.9,30},{38.5,30}}, color={255,127,0}))", "connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{-39,0},{13.6,0}}, color={255,127,0}))", "connect(booleanPulse1.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{9,-20},{18.4,-20},{18.4,-7.2}}, color={255,0,255}))", "connect(triggeredAdd.y, showValue2.numberPort) annotation (Line(\r\n        points={{29.2,0},{38.5,0}}, color={255,127,0}))", "connect(booleanPulse1.y, multiSwitch1.u[1]) annotation (Line(\r\n        points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch1.u[2]) annotation (Line(\r\n        points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 764, "end_line": 789, "start_col": 5, "end_col": 85}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 763, "end_line": 763, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n  connect(booleanPulse1.y, multiSwitch.u[1]) annotation (Line(\r\n      points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch.u[2]) annotation (Line(\r\n      points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))", "connect(sine.y, add.u[1]) annotation (Line(\r\n      points={{-75,70},{-46.5,70},{-46.5,72.1},{-14,72.1}}, color={0,0,127}))", "connect(integerStep.y, add.u[2]) annotation (Line(\r\n      points={{-39,40},{-28,40},{-28,67.9},{-14,67.9}}, color={0,0,127}))", "connect(add.y, showValue.numberPort) annotation (Line(\r\n      points={{-0.98,70},{64.5,70}}, color={0,0,127}))", "connect(integerStep.y, product.u[1]) annotation (Line(\r\n      points={{-39,40},{-20,40},{-20,32.1},{6,32.1}}, color={0,0,127}))", "connect(integerConstant.y, product.u[2]) annotation (Line(\r\n      points={{-39,0},{-20,0},{-20,27.9},{6,27.9}}, color={0,0,127}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n      points={{19.02,30},{62.5,30}}, color={0,0,127}))", "connect(add.y, linearDependency1.u1) annotation (Line(\r\n      points={{-0.98,70},{20,70},{20,96},{38,96}}, color={0,0,127}))", "connect(product.y, linearDependency1.u2) annotation (Line(\r\n      points={{19.02,30},{30,30},{30,84},{38,84}}, color={0,0,127}))", "connect(add.y, minMax.u[1]) annotation (Line(\r\n      points={{-0.98,70},{48,70},{48,-2.5},{58,-2.5}}, color={0,0,127}))", "connect(product.y, minMax.u[2]) annotation (Line(\r\n      points={{19.02,30},{40,30},{40,-9.5},{58,-9.5}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 677, "end_line": 701, "start_col": 1, "end_col": 74}}, {"equations": ["connect(booleanPulse1.y, multiSwitch.u[1]) annotation (Line(\r\n      points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}))", "connect(booleanPulse2.y, multiSwitch.u[2]) annotation (Line(\r\n      points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}))", "connect(sine.y, add.u[1]) annotation (Line(\r\n      points={{-75,70},{-46.5,70},{-46.5,72.1},{-14,72.1}}, color={0,0,127}))", "connect(integerStep.y, add.u[2]) annotation (Line(\r\n      points={{-39,40},{-28,40},{-28,67.9},{-14,67.9}}, color={0,0,127}))", "connect(add.y, showValue.numberPort) annotation (Line(\r\n      points={{-0.98,70},{64.5,70}}, color={0,0,127}))", "connect(integerStep.y, product.u[1]) annotation (Line(\r\n      points={{-39,40},{-20,40},{-20,32.1},{6,32.1}}, color={0,0,127}))", "connect(integerConstant.y, product.u[2]) annotation (Line(\r\n      points={{-39,0},{-20,0},{-20,27.9},{6,27.9}}, color={0,0,127}))", "connect(product.y, showValue1.numberPort) annotation (Line(\r\n      points={{19.02,30},{62.5,30}}, color={0,0,127}))", "connect(add.y, linearDependency1.u1) annotation (Line(\r\n      points={{-0.98,70},{20,70},{20,96},{38,96}}, color={0,0,127}))", "connect(product.y, linearDependency1.u2) annotation (Line(\r\n      points={{19.02,30},{30,30},{30,84},{38,84}}, color={0,0,127}))", "connect(add.y, minMax.u[1]) annotation (Line(\r\n      points={{-0.98,70},{48,70},{48,-2.5},{58,-2.5}}, color={0,0,127}))", "connect(product.y, minMax.u[2]) annotation (Line(\r\n      points={{19.02,30},{40,30},{40,-9.5},{58,-9.5}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 678, "end_line": 701, "start_col": 3, "end_col": 74}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 677, "end_line": 677, "start_col": 1, "end_col": 9}}, {"equations": ["equation\r\n\r\n    connect(table2.y, Not1.u)\r\n      annotation (Line(points={{-59,-10},{-42,-10}}, color={255,0,255}))", "connect(And1.y, Or1.u2) annotation (Line(points={{21,-10},{28,-10},{28,22},\r\n            {38,22}}, color={255,0,255}))", "connect(table1.y, Or1.u1)\r\n      annotation (Line(points={{-59,30},{38,30}}, color={255,0,255}))", "connect(Not1.y, And1.u1)\r\n      annotation (Line(points={{-19,-10},{-2,-10}}, color={255,0,255}))", "connect(Pre1.y, And1.u2) annotation (Line(points={{-19,-50},{-10,-50},{-10,\r\n            -18},{-2,-18}}, color={255,0,255}))", "connect(Or1.y, Pre1.u) annotation (Line(points={{61,30},{68,30},{68,-70},{-60,\r\n            -70},{-60,-50},{-42,-50}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 613, "end_line": 626, "start_col": 3, "end_col": 60}}, {"equations": ["connect(table2.y, Not1.u)\r\n      annotation (Line(points={{-59,-10},{-42,-10}}, color={255,0,255}))", "connect(And1.y, Or1.u2) annotation (Line(points={{21,-10},{28,-10},{28,22},\r\n            {38,22}}, color={255,0,255}))", "connect(table1.y, Or1.u1)\r\n      annotation (Line(points={{-59,30},{38,30}}, color={255,0,255}))", "connect(Not1.y, And1.u1)\r\n      annotation (Line(points={{-19,-10},{-2,-10}}, color={255,0,255}))", "connect(Pre1.y, And1.u2) annotation (Line(points={{-19,-50},{-10,-50},{-10,\r\n            -18},{-2,-18}}, color={255,0,255}))", "connect(Or1.y, Pre1.u) annotation (Line(points={{61,30},{68,30},{68,-70},{-60,\r\n            -70},{-60,-50},{-42,-50}}, color={255,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 615, "end_line": 626, "start_col": 5, "end_col": 60}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 613, "end_line": 613, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(firstOrder1.y, inverseBlockConstraints.u2) annotation (Line(\r\n        points={{-1,30},{-6,30}}, color={0,0,127}))", "connect(inverseBlockConstraints.y2, firstOrder1.u) annotation (Line(\r\n        points={{27,30},{22,30}}, color={0,0,127}))", "connect(firstOrder2.y, feedback.u1) annotation (Line(\r\n        points={{-1,-10},{-42,-10}}, color={0,0,127}))", "connect(sine.y, criticalDamping.u) annotation (Line(\r\n        points={{-59,30},{-42,30}}, color={0,0,127}))", "connect(criticalDamping.y, inverseBlockConstraints.u1) annotation (Line(\r\n        points={{-19,30},{-12,30}}, color={0,0,127}))", "connect(sine.y, feedback.u2) annotation (Line(\r\n        points={{-59,30},{-50,30},{-50,-2}}, color={0,0,127}))", "connect(inverseBlockConstraints.y1, firstOrder2.u) annotation (Line(\r\n        points={{31,30},{40,30},{40,-10},{22,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 483, "end_line": 497, "start_col": 3, "end_col": 71}}, {"equations": ["connect(firstOrder1.y, inverseBlockConstraints.u2) annotation (Line(\r\n        points={{-1,30},{-6,30}}, color={0,0,127}))", "connect(inverseBlockConstraints.y2, firstOrder1.u) annotation (Line(\r\n        points={{27,30},{22,30}}, color={0,0,127}))", "connect(firstOrder2.y, feedback.u1) annotation (Line(\r\n        points={{-1,-10},{-42,-10}}, color={0,0,127}))", "connect(sine.y, criticalDamping.u) annotation (Line(\r\n        points={{-59,30},{-42,30}}, color={0,0,127}))", "connect(criticalDamping.y, inverseBlockConstraints.u1) annotation (Line(\r\n        points={{-19,30},{-12,30}}, color={0,0,127}))", "connect(sine.y, feedback.u2) annotation (Line(\r\n        points={{-59,30},{-50,30},{-50,-2}}, color={0,0,127}))", "connect(inverseBlockConstraints.y1, firstOrder2.u) annotation (Line(\r\n        points={{31,30},{40,30},{40,-10},{22,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 484, "end_line": 497, "start_col": 5, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 483, "end_line": 483, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}))", "connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}))", "connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}))", "connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 429, "end_line": 439, "start_col": 3, "end_col": 29}}, {"equations": ["connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}))", "connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}))", "connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}))", "connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 430, "end_line": 439, "start_col": 5, "end_col": 29}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 429, "end_line": 429, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step.y, filter_fac5.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,-10},{-22,-10}}, color={0,0,127}))", "connect(step.y, filter_fac4.u) annotation (Line(\r\n        points={{-39,30},{-22,30}}, color={0,0,127}))", "connect(step.y, filter_fac3.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,72},{-22,72}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 321, "end_line": 327, "start_col": 3, "end_col": 73}}, {"equations": ["connect(step.y, filter_fac5.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,-10},{-22,-10}}, color={0,0,127}))", "connect(step.y, filter_fac4.u) annotation (Line(\r\n        points={{-39,30},{-22,30}}, color={0,0,127}))", "connect(step.y, filter_fac3.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,72},{-22,72}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 322, "end_line": 327, "start_col": 5, "end_col": 73}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 321, "end_line": 321, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-59,50},{-42,50}}, color={0,0,127}))", "connect(Bessel.y, der1.u) annotation (Line(\r\n        points={{-19,50},{-8,50}}, color={0,0,127}))", "connect(der1.y, der2.u) annotation (Line(\r\n        points={{15,50},{28,50}}, color={0,0,127}))", "connect(der2.y, der3.u) annotation (Line(\r\n        points={{51,50},{60,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 282, "end_line": 290, "start_col": 3, "end_col": 53}}, {"equations": ["connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-59,50},{-42,50}}, color={0,0,127}))", "connect(Bessel.y, der1.u) annotation (Line(\r\n        points={{-19,50},{-8,50}}, color={0,0,127}))", "connect(der1.y, der2.u) annotation (Line(\r\n        points={{15,50},{28,50}}, color={0,0,127}))", "connect(der2.y, der3.u) annotation (Line(\r\n        points={{51,50},{60,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 283, "end_line": 290, "start_col": 5, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 282, "end_line": 282, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(step.y, CriticalDamping.u) annotation (Line(\r\n        points={{-39,50},{-22,50}}, color={0,0,127}))", "connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-39,50},{-32,50},{-32,10},{-22,10}}, color={0,0,127}))", "connect(Butterworth.u, step.y) annotation (Line(\r\n        points={{-22,-30},{-32,-30},{-32,50},{-39,50}}, color={0,0,127}))", "connect(ChebyshevI.u, step.y) annotation (Line(\r\n        points={{-22,-70},{-32,-70},{-32,50},{-39,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 232, "end_line": 240, "start_col": 3, "end_col": 75}}, {"equations": ["connect(step.y, CriticalDamping.u) annotation (Line(\r\n        points={{-39,50},{-22,50}}, color={0,0,127}))", "connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-39,50},{-32,50},{-32,10},{-22,10}}, color={0,0,127}))", "connect(Butterworth.u, step.y) annotation (Line(\r\n        points={{-22,-30},{-32,-30},{-32,50},{-39,50}}, color={0,0,127}))", "connect(ChebyshevI.u, step.y) annotation (Line(\r\n        points={{-22,-70},{-32,-70},{-32,50},{-39,50}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 233, "end_line": 240, "start_col": 5, "end_col": 75}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 232, "end_line": 232, "start_col": 3, "end_col": 11}}, {"equations": ["equation\r\n    connect(spring.flange_b, inertia2.flange_a)\r\n      annotation (Line(points={{52,-10},{60,-10}}))", "connect(inertia1.flange_b, spring.flange_a)\r\n      annotation (Line(points={{22,-10},{32,-10}}))", "connect(torque.flange, inertia1.flange_a)\r\n      annotation (Line(points={{-5,-10},{2,-10}}))", "connect(kinematicPTP.y[1], integrator.u)\r\n      annotation (Line(points={{-71,30},{-65,30}}, color={0,0,127}))", "connect(speedSensor.flange, inertia1.flange_b)\r\n      annotation (Line(points={{22,-40},{22,-10}}))", "connect(loadTorque.flange, inertia2.flange_b)\r\n      annotation (Line(points={{88,-10},{80,-10}}))", "connect(PI.y, torque.tau)\r\n      annotation (Line(points={{-35,-10},{-27,-10}}, color={0,0,127}))", "connect(speedSensor.w, PI.u_m)\r\n      annotation (Line(points={{1,-40},{-46,-40},{-46,-22}}, color={0,0,127}))", "connect(integrator.y, PI.u_s) annotation (Line(points={{-42,30},{-37,30},{-37,\r\n            11},{-67,11},{-67,-10},{-58,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 58, "end_line": 76, "start_col": 3, "end_col": 66}}, {"equations": ["connect(spring.flange_b, inertia2.flange_a)\r\n      annotation (Line(points={{52,-10},{60,-10}}))", "connect(inertia1.flange_b, spring.flange_a)\r\n      annotation (Line(points={{22,-10},{32,-10}}))", "connect(torque.flange, inertia1.flange_a)\r\n      annotation (Line(points={{-5,-10},{2,-10}}))", "connect(kinematicPTP.y[1], integrator.u)\r\n      annotation (Line(points={{-71,30},{-65,30}}, color={0,0,127}))", "connect(speedSensor.flange, inertia1.flange_b)\r\n      annotation (Line(points={{22,-40},{22,-10}}))", "connect(loadTorque.flange, inertia2.flange_b)\r\n      annotation (Line(points={{88,-10},{80,-10}}))", "connect(PI.y, torque.tau)\r\n      annotation (Line(points={{-35,-10},{-27,-10}}, color={0,0,127}))", "connect(speedSensor.w, PI.u_m)\r\n      annotation (Line(points={{1,-40},{-46,-40},{-46,-22}}, color={0,0,127}))", "connect(integrator.y, PI.u_s) annotation (Line(points={{-42,30},{-37,30},{-37,\r\n            11},{-67,11},{-67,-10},{-58,-10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 59, "end_line": 76, "start_col": 5, "end_col": 66}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 58, "end_line": 58, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    der(spring.w_rel) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 55, "end_line": 56, "start_col": 3, "end_col": 27}}, {"equations": ["der(spring.w_rel) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 56, "end_line": 56, "start_col": 5, "end_col": 27}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 55, "end_line": 55, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.ExamplesPackage | components: Real×13, SI.Position×2, SI.Velocity×1 | connections: 207 | params: driveAngle, order, f_cut | units: m/s, m", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 7, "end_line": 3216, "start_col": 1, "end_col": 13}, "code_text": "package Examples\r\n  \"Library of examples to demonstrate the usage of package Blocks\"\r\n\r\n  extends Modelica.Icons.ExamplesPackage;\r\n\r\n  model PID_Controller\r\n    \"Demonstrates the usage of a Continuous.LimPID controller\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Angle driveAngle=1.570796326794897\r\n      \"Reference distance to move\";\r\n    Modelica.Blocks.Continuous.LimPID PI(\r\n      k=100,\r\n      Ti=0.1,\r\n      yMax=12,\r\n      Ni=0.1,\r\n      initType=Modelica.Blocks.Types.Init.SteadyState,\r\n      controllerType=Modelica.Blocks.Types.SimpleController.PI,\r\n      limiter(u(start = 0)),\r\n      Td=0.1) annotation (Placement(transformation(extent={{-56,-20},{-36,0}})));\r\n    Modelica.Mechanics.Rotational.Components.Inertia inertia1(\r\n      phi(fixed=true, start=0),\r\n      J=1,\r\n      a(fixed=true, start=0)) annotation (Placement(transformation(extent={{2,-20},\r\n              {22,0}})));\r\n\r\n    Modelica.Mechanics.Rotational.Sources.Torque torque annotation (Placement(\r\n          transformation(extent={{-25,-20},{-5,0}})));\r\n    Modelica.Mechanics.Rotational.Components.SpringDamper spring(\r\n      c=1e4,\r\n      d=100,\r\n      stateSelect=StateSelect.prefer,\r\n      w_rel(fixed=true)) annotation (Placement(transformation(extent={{32,-20},\r\n              {52,0}})));\r\n    Modelica.Mechanics.Rotational.Components.Inertia inertia2(J=2) annotation (\r\n        Placement(transformation(extent={{60,-20},{80,0}})));\r\n    Modelica.Blocks.Sources.KinematicPTP kinematicPTP(\r\n      startTime=0.5,\r\n      deltaq={driveAngle},\r\n      qd_max={1},\r\n      qdd_max={1}) annotation (Placement(transformation(extent={{-92,20},{-72,\r\n              40}})));\r\n    Modelica.Blocks.Continuous.Integrator integrator(initType=Modelica.Blocks.Types.Init.InitialState)\r\n      annotation (Placement(transformation(extent={{-63,20},{-43,40}})));\r\n    Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n        Placement(transformation(extent={{22,-50},{2,-30}})));\r\n    Modelica.Mechanics.Rotational.Sources.ConstantTorque loadTorque(\r\n        tau_constant=10, useSupport=false) annotation (Placement(transformation(\r\n            extent={{98,-15},{88,-5}})));\r\n  initial equation\r\n    der(spring.w_rel) = 0;\r\n\r\n  equation\r\n    connect(spring.flange_b, inertia2.flange_a)\r\n      annotation (Line(points={{52,-10},{60,-10}}));\r\n    connect(inertia1.flange_b, spring.flange_a)\r\n      annotation (Line(points={{22,-10},{32,-10}}));\r\n    connect(torque.flange, inertia1.flange_a)\r\n      annotation (Line(points={{-5,-10},{2,-10}}));\r\n    connect(kinematicPTP.y[1], integrator.u)\r\n      annotation (Line(points={{-71,30},{-65,30}}, color={0,0,127}));\r\n    connect(speedSensor.flange, inertia1.flange_b)\r\n      annotation (Line(points={{22,-40},{22,-10}}));\r\n    connect(loadTorque.flange, inertia2.flange_b)\r\n      annotation (Line(points={{88,-10},{80,-10}}));\r\n    connect(PI.y, torque.tau)\r\n      annotation (Line(points={{-35,-10},{-27,-10}}, color={0,0,127}));\r\n    connect(speedSensor.w, PI.u_m)\r\n      annotation (Line(points={{1,-40},{-46,-40},{-46,-22}}, color={0,0,127}));\r\n    connect(integrator.y, PI.u_s) annotation (Line(points={{-42,30},{-37,30},{-37,\r\n            11},{-67,11},{-67,-10},{-58,-10}}, color={0,0,127}));\r\n    annotation (\r\n      Diagram(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Rectangle(extent={{-99,48},{-32,8}}, lineColor={255,0,0}),\r\n          Text(\r\n            extent={{-98,59},{-31,51}},\r\n            textColor={255,0,0},\r\n            textString=\"reference speed generation\"),\r\n          Text(\r\n            extent={{-98,-46},{-60,-52}},\r\n            textColor={255,0,0},\r\n            textString=\"PI controller\"),\r\n          Line(\r\n            points={{-76,-44},{-57,-23}},\r\n            color={255,0,0},\r\n            arrow={Arrow.None,Arrow.Filled}),\r\n          Rectangle(extent={{-25,6},{99,-50}}, lineColor={255,0,0}),\r\n          Text(\r\n            extent={{4,14},{71,7}},\r\n            textColor={255,0,0},\r\n            textString=\"plant (simple drive train)\")}),\r\n      experiment(StopTime=4),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis is a simple drive train controlled by a PID controller:\r\n</p>\r\n\r\n<ul>\r\n<li> The two blocks \\\"kinematic_PTP\\\" and \\\"integrator\\\" are used to generate\r\n     the reference speed (= constant acceleration phase, constant speed phase,\r\n     constant deceleration phase until inertia is at rest). To check\r\n     whether the system starts in steady state, the reference speed is\r\n     zero until time = 0.5 s and then follows the sketched trajectory.</li>\r\n\r\n<li> The block \\\"PI\\\" is an instance of \\\"Blocks.Continuous.LimPID\\\" which is\r\n     a PID controller where several practical important aspects, such as\r\n     anti-windup-compensation has been added. In this case, the control block\r\n     is used as PI controller.</li>\r\n\r\n<li> The output of the controller is a torque that drives a motor inertia\r\n     \\\"inertia1\\\". Via a compliant spring/damper component, the load\r\n     inertia \\\"inertia2\\\" is attached. A constant external torque of 10 Nm\r\n     is acting on the load inertia.</li>\r\n</ul>\r\n\r\n<p>\r\nThe PI controller is initialized in steady state (initType=SteadyState)\r\nand the drive shall also be initialized in steady state.\r\nHowever, it is not possible to initialize \\\"inertia1\\\" in SteadyState, because\r\n\\\"der(inertia1.phi)=inertia1.w=0\\\" is an input to the PI controller that\r\ndefines that the derivative of the integrator state is zero (= the same\r\ncondition that was already defined by option SteadyState of the PI controller).\r\nFurthermore, one initial condition is missing, because the absolute position\r\nof inertia1 or inertia2 is not defined. The solution shown in this examples is\r\nto initialize the angle and the angular acceleration of \\\"inertia1\\\".\r\n</p>\r\n\r\n<p>\r\nIn the following figure, results of a typical simulation are shown:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/PID_controller.png\\\"\r\n     alt=\\\"PID_controller.png\\\"><br>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/PID_controller2.png\\\"\r\n     alt=\\\"PID_controller2.png\\\">\r\n\r\n<p>\r\nIn the upper figure the reference speed (= integrator.y) and\r\nthe actual speed (= inertia1.w) are shown. As can be seen,\r\nthe system initializes in steady state, since no transients\r\nare present. The inertia follows the reference speed quite good\r\nuntil the end of the constant speed phase. Then there is a deviation.\r\nIn the lower figure the reason can be seen: The output of the\r\ncontroller (PI.y) is in its limits. The anti-windup compensation\r\nworks reasonably, since the input to the limiter (PI.limiter.u)\r\nis forced back to its limit after a transient phase.\r\n</p>\r\n\r\n</html>\",\r\n        figures = {\r\n          Figure(\r\n            title = \"Anti-windup compensation\",\r\n            identifier = \"anti-windup\",\r\n            preferred = true,\r\n            plots = {\r\n              Plot(\r\n                title = \"Reference tracking\",\r\n                identifier = \"tracking\",\r\n                curves = {\r\n                  Curve(y = integrator.y, legend = \"Reference speed\"),\r\n                  Curve(y = inertia1.w, legend = \"Actual speed\")}),\r\n              Plot(\r\n                title = \"Anti-windup limiter\",\r\n                identifier = \"limiter\",\r\n                curves = {\r\n                  Curve(y = PI.limiter.u, legend = \"Input to the anti-windup limiter\"),\r\n                  Curve(y = PI.y, legend = \"Controller output\")})},\r\n            caption = \"%(plot:tracking) Reference speed (%(variable:integrator.y)) and the actual speed (%(variable:inertia1.w)). The system initializes in steady state, since no transients are present. The inertia follows the reference speed quite good until the end of the constant speed phase. Then there is a deviation.\r\n\r\n%(plot:limiter) Here the reason for the deviation can be seen: The output of the controller (%(variable:PI.y)) is in its limits. The anti-windup compensation works reasonably, since the input to the limiter (%(variable:PI.limiter.u)) is forced back to its limit after a transient phase.\r\n\")}));\r\n  end PID_Controller;\r\n\r\n  model Filter \"Demonstrates the Continuous.Filter block with various options\"\r\n    extends Modelica.Icons.Example;\r\n    parameter Integer order=3 \"Number of order of filter\";\r\n    parameter SI.Frequency f_cut=2 \"Cut-off frequency\";\r\n    parameter Modelica.Blocks.Types.FilterType filterType=Modelica.Blocks.Types.FilterType.LowPass\r\n      \"Type of filter (LowPass/HighPass)\";\r\n    parameter Modelica.Blocks.Types.Init init=Modelica.Blocks.Types.Init.SteadyState\r\n      \"Type of initialization (no init/steady state/initial state/initial output)\";\r\n    parameter Boolean normalized=true \"= true, if amplitude at f_cut = -3db, otherwise unmodified filter\";\r\n\r\n    Modelica.Blocks.Sources.Step step(startTime=0.1, offset=0.1)\r\n      annotation (Placement(transformation(extent={{-60,40},{-40,60}})));\r\n    Modelica.Blocks.Continuous.Filter CriticalDamping(\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.CriticalDamping,\r\n      normalized=normalized,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,40},{0,60}})));\r\n    Modelica.Blocks.Continuous.Filter Bessel(\r\n      normalized=normalized,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.Bessel,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,0},{0,20}})));\r\n    Modelica.Blocks.Continuous.Filter Butterworth(\r\n      normalized=normalized,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.Butterworth,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));\r\n    Modelica.Blocks.Continuous.Filter ChebyshevI(\r\n      normalized=normalized,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.ChebyshevI,\r\n      init=init,\r\n      filterType=filterType,\r\n      order=order,\r\n      f_cut=f_cut,\r\n      f_min=0.8*f_cut)\r\n      annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n\r\n  equation\r\n    connect(step.y, CriticalDamping.u) annotation (Line(\r\n        points={{-39,50},{-22,50}}, color={0,0,127}));\r\n    connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-39,50},{-32,50},{-32,10},{-22,10}}, color={0,0,127}));\r\n    connect(Butterworth.u, step.y) annotation (Line(\r\n        points={{-22,-30},{-32,-30},{-32,50},{-39,50}}, color={0,0,127}));\r\n    connect(ChebyshevI.u, step.y) annotation (Line(\r\n        points={{-22,-70},{-32,-70},{-32,50},{-39,50}}, color={0,0,127}));\r\n    annotation (\r\n      experiment(StopTime=0.9),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis example demonstrates various options of the\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous.Filter\\\">Filter</a> block.\r\nA step input starts at 0.1 s with an offset of 0.1, in order to demonstrate\r\nthe initialization options. This step input drives 4 filter blocks that\r\nhave identical parameters, with the only exception of the used analog filter type\r\n(CriticalDamping, Bessel, Butterworth, Chebyshev of type I). All the main options\r\ncan be set via parameters and are then applied to all the 4 filters.\r\nThe default setting uses low pass filters of order 3 with a cut-off frequency of\r\n2 Hz resulting in the following outputs:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Filter1.png\\\"\r\n     alt=\\\"Filter1.png\\\">\r\n</html>\"));\r\n  end Filter;\r\n\r\n  model FilterWithDifferentiation\r\n    \"Demonstrates the use of low pass filters to determine derivatives of filters\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Frequency f_cut=2 \"Cut-off frequency\";\r\n\r\n    Modelica.Blocks.Sources.Step step(startTime=0.1, offset=0.1)\r\n      annotation (Placement(transformation(extent={{-80,40},{-60,60}})));\r\n    Modelica.Blocks.Continuous.Filter Bessel(\r\n      f_cut=f_cut,\r\n      filterType=Modelica.Blocks.Types.FilterType.LowPass,\r\n      order=3,\r\n      analogFilter=Modelica.Blocks.Types.AnalogFilter.Bessel)\r\n      annotation (Placement(transformation(extent={{-40,40},{-20,60}})));\r\n\r\n    Continuous.Der der1\r\n      annotation (Placement(transformation(extent={{-6,40},{14,60}})));\r\n    Continuous.Der der2\r\n      annotation (Placement(transformation(extent={{30,40},{50,60}})));\r\n    Continuous.Der der3\r\n      annotation (Placement(transformation(extent={{62,40},{82,60}})));\r\n  equation\r\n    connect(step.y, Bessel.u) annotation (Line(\r\n        points={{-59,50},{-42,50}}, color={0,0,127}));\r\n    connect(Bessel.y, der1.u) annotation (Line(\r\n        points={{-19,50},{-8,50}}, color={0,0,127}));\r\n    connect(der1.y, der2.u) annotation (Line(\r\n        points={{15,50},{28,50}}, color={0,0,127}));\r\n    connect(der2.y, der3.u) annotation (Line(\r\n        points={{51,50},{60,50}}, color={0,0,127}));\r\n    annotation (\r\n      experiment(StopTime=0.9),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis example demonstrates that the output of the\r\n<a href=\\\"modelica://Modelica.Blocks.Continuous.Filter\\\">Filter</a> block\r\ncan be differentiated up to the order of the filter. This feature can be\r\nused in order to make an inverse model realizable or to \\\"smooth\\\" a potential\r\ndiscontinuous control signal.\r\n</p>\r\n\r\n</html>\"));\r\n  end FilterWithDifferentiation;\r\n\r\n  model FilterWithRiseTime\r\n    \"Demonstrates to use the rise time instead of the cut-off frequency to define a filter\"\r\n    import Modelica.Constants.pi;\r\n    extends Modelica.Icons.Example;\r\n    parameter Integer order=2 \"Filter order\";\r\n    parameter SI.Time riseTime=2 \"Time to reach the step input\";\r\n\r\n    Continuous.Filter filter_fac5(f_cut=5/(2*pi*riseTime), order=order)\r\n      annotation (Placement(transformation(extent={{-20,-20},{0,0}})));\r\n    Sources.Step step(startTime=1)\r\n      annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n    Continuous.Filter filter_fac4(f_cut=4/(2*pi*riseTime), order=order)\r\n      annotation (Placement(transformation(extent={{-20,20},{0,40}})));\r\n    Continuous.Filter filter_fac3(f_cut=3/(2*pi*riseTime), order=order)\r\n      annotation (Placement(transformation(extent={{-20,62},{0,82}})));\r\n  equation\r\n    connect(step.y, filter_fac5.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,-10},{-22,-10}}, color={0,0,127}));\r\n    connect(step.y, filter_fac4.u) annotation (Line(\r\n        points={{-39,30},{-22,30}}, color={0,0,127}));\r\n    connect(step.y, filter_fac3.u) annotation (Line(\r\n        points={{-39,30},{-30,30},{-30,72},{-22,72}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=4), Documentation(info=\"<html>\r\n<p>\r\nFilters are usually parameterized with the cut-off frequency.\r\nSometimes, it is more meaningful to parameterize a filter with its\r\nrise time, i.e., the time it needs until the output reaches the end value\r\nof a step input. This is performed with the formula:\r\n</p>\r\n\r\n<blockquote><pre>\r\nf_cut = fac/(2*pi*riseTime);\r\n</pre></blockquote>\r\n\r\n<p>\r\nwhere \\\"fac\\\" is typically 3, 4, or 5. The following image shows\r\nthe results of a simulation of this example model\r\n(riseTime = 2 s, fac=3, 4, and 5):\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/FilterWithRiseTime.png\\\"\r\n     alt=\\\"FilterWithRiseTime.png\\\">\r\n\r\n<p>\r\nSince the step starts at 1 s, and the rise time is 2 s, the filter output y\r\nshall reach the value of 1 after 1+2=3 s. Depending on the factor \\\"fac\\\" this is\r\nreached with different precisions. This is summarized in the following table:\r\n</p>\r\n\r\n<blockquote><table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr>\r\n   <td>Filter order</td>\r\n   <td>Factor fac</td>\r\n   <td>Percentage of step value reached after rise time</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">1</td>\r\n   <td align=\\\"center\\\">3</td>\r\n   <td align=\\\"center\\\">95.1 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">1</td>\r\n   <td align=\\\"center\\\">4</td>\r\n   <td align=\\\"center\\\">98.2 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">1</td>\r\n   <td align=\\\"center\\\">5</td>\r\n   <td align=\\\"center\\\">99.3 %</td>\r\n</tr>\r\n\r\n<tr>\r\n   <td align=\\\"center\\\">2</td>\r\n   <td align=\\\"center\\\">3</td>\r\n   <td align=\\\"center\\\">94.7 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">2</td>\r\n   <td align=\\\"center\\\">4</td>\r\n   <td align=\\\"center\\\">98.6 %</td>\r\n</tr>\r\n<tr>\r\n   <td align=\\\"center\\\">2</td>\r\n   <td align=\\\"center\\\">5</td>\r\n   <td align=\\\"center\\\">99.6 %</td>\r\n</tr>\r\n</table></blockquote>\r\n\r\n</html>\"));\r\n  end FilterWithRiseTime;\r\n\r\n  model SlewRateLimiter\r\n    \"Demonstrate usage of Nonlinear.SlewRateLimiter\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Velocity vMax=2 \"Max. velocity\";\r\n    parameter SI.Acceleration aMax=20 \"Max. acceleration\";\r\n    SI.Position s=positionStep.y \"Reference position\";\r\n    SI.Position sSmoothed=positionSmoothed.y \"Smoothed position\";\r\n    SI.Velocity vLimited=limit_a.y \"Limited velocity\";\r\n    SI.Acceleration aLimited=a.y \"Limited acceleration\";\r\n    Modelica.Blocks.Sources.Step positionStep(startTime=0.1)\r\n      annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n    Modelica.Blocks.Nonlinear.SlewRateLimiter limit_v(\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      Rising=vMax,\r\n      y_start=positionStep.offset,\r\n      Td=0.0001)\r\n      annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n    Modelica.Blocks.Continuous.Der v\r\n      annotation (Placement(transformation(extent={{-20,-10},{0,10}})));\r\n    Modelica.Blocks.Nonlinear.SlewRateLimiter limit_a(\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      y_start=0,\r\n      Rising=20,\r\n      Td=0.0001)\r\n                annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n    Modelica.Blocks.Continuous.Integrator positionSmoothed(\r\n      k=1,\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      y_start=positionStep.offset)\r\n      annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n    Modelica.Blocks.Continuous.Der a\r\n      annotation (Placement(transformation(extent={{50,-40},{70,-20}})));\r\n  equation\r\n    connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}));\r\n    connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}));\r\n    connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}));\r\n    connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}));\r\n    connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}));\r\n\r\n    annotation (experiment(StopTime=1.0, Interval=0.001), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to use the Nonlinear.SlewRateLimiter block to limit a position step with regards to velocity and acceleration:\r\n</p>\r\n<ul>\r\n<li> The Sources.Step block <code>positionStep</code> demands an unphysical position step.</li>\r\n<li> The first SlewRateLimiter block  <code>limit_v</code> limits velocity.</li>\r\n<li> The first Der block <code>v</code> calculates velocity from the smoothed position signal.</li>\r\n<li> The second SlewRateLimiter block <code>limit_a</code> limits acceleration of the smoothed velocity signal.</li>\r\n<li> The second Der block <code>a</code> calculates acceleration from the smoothed velocity signal.</li>\r\n<li> The Integrator block <code>positionSmoothed</code> calculates smoothed position from the smoothed velocity signal.</li>\r\n</ul>\r\n<p>\r\nA position controlled drive with limited velocity and limited acceleration (i.e. torque) is able to follow the smoothed reference position.\r\n</p>\r\n</html>\"));\r\n  end SlewRateLimiter;\r\n\r\n  model InverseModel \"Demonstrates the construction of an inverse model\"\r\n    extends Modelica.Icons.Example;\r\n\r\n    Continuous.FirstOrder firstOrder1(\r\n      k=1,\r\n      T=0.3,\r\n      initType=Modelica.Blocks.Types.Init.SteadyState)\r\n      annotation (Placement(transformation(extent={{20,20},{0,40}})));\r\n    Sources.Sine sine(\r\n      f=2,\r\n      offset=1,\r\n      startTime=0.2)\r\n      annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n    Math.InverseBlockConstraints inverseBlockConstraints\r\n      annotation (Placement(transformation(extent={{-10,20},{30,40}})));\r\n    Continuous.FirstOrder firstOrder2(\r\n      k=1,\r\n      T=0.3,\r\n      initType=Modelica.Blocks.Types.Init.SteadyState)\r\n      annotation (Placement(transformation(extent={{20,-20},{0,0}})));\r\n    Math.Feedback feedback\r\n      annotation (Placement(transformation(extent={{-40,0},{-60,-20}})));\r\n    Continuous.CriticalDamping criticalDamping(n=1, f=50*sine.f)\r\n      annotation (Placement(transformation(extent={{-40,20},{-20,40}})));\r\n  equation\r\n    connect(firstOrder1.y, inverseBlockConstraints.u2) annotation (Line(\r\n        points={{-1,30},{-6,30}}, color={0,0,127}));\r\n    connect(inverseBlockConstraints.y2, firstOrder1.u) annotation (Line(\r\n        points={{27,30},{22,30}}, color={0,0,127}));\r\n    connect(firstOrder2.y, feedback.u1) annotation (Line(\r\n        points={{-1,-10},{-42,-10}}, color={0,0,127}));\r\n    connect(sine.y, criticalDamping.u) annotation (Line(\r\n        points={{-59,30},{-42,30}}, color={0,0,127}));\r\n    connect(criticalDamping.y, inverseBlockConstraints.u1) annotation (Line(\r\n        points={{-19,30},{-12,30}}, color={0,0,127}));\r\n    connect(sine.y, feedback.u2) annotation (Line(\r\n        points={{-59,30},{-50,30},{-50,-2}}, color={0,0,127}));\r\n    connect(inverseBlockConstraints.y1, firstOrder2.u) annotation (Line(\r\n        points={{31,30},{40,30},{40,-10},{22,-10}}, color={0,0,127}));\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to construct an inverse model in Modelica\r\n(for more details see <a href=\\\"https://www.modelica.org/events/Conference2005/online_proceedings/Session3/Session3c3.pdf\\\">Looye, Th&uuml;mmel, Kurze, Otter, Bals: Nonlinear Inverse Models for Control</a>).\r\n</p>\r\n\r\n<p>\r\nFor a linear, single input, single output system\r\n</p>\r\n\r\n<blockquote><pre>\r\ny = n(s)/d(s) * u   // plant model\r\n</pre></blockquote>\r\n\r\n<p>\r\nthe inverse model is derived by simply exchanging the numerator and\r\nthe denominator polynomial:\r\n</p>\r\n\r\n<blockquote><pre>\r\nu = d(s)/n(s) * y   // inverse plant model\r\n</pre></blockquote>\r\n\r\n<p>\r\nIf the denominator polynomial d(s) has a higher degree as the\r\nnumerator polynomial n(s) (which is usually the case for plant models),\r\nthen the inverse model is no longer proper, i.e., it is not causal.\r\nTo avoid this, an approximate inverse model is constructed by adding\r\na sufficient number of poles to the denominator of the inverse model.\r\nThis can be interpreted as filtering the desired output signal y:\r\n</p>\r\n\r\n<blockquote><pre>\r\nu = d(s)/(n(s)*f(s)) * y  // inverse plant model with filtered y\r\n</pre></blockquote>\r\n\r\n<p>\r\nWith Modelica it is in principal possible to construct inverse models not only\r\nfor linear but also for non-linear models and in particular for every\r\nModelica model. The basic construction mechanism is explained at hand\r\nof this example:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/InverseModelSchematic.png\\\"\r\n     alt=\\\"InverseModelSchematic.png\\\">\r\n\r\n<p>\r\nHere the first order block \\\"firstOrder1\\\" shall be inverted. This is performed\r\nby connecting its inputs and outputs with an instance of block\r\nModelica.Blocks.Math.<strong>InverseBlockConstraints</strong>. By this connection,\r\nthe inputs and outputs are exchanged. The goal is to compute the input of the\r\n\\\"firstOrder1\\\" block so that its output follows a given sine signal.\r\nFor this, the sine signal \\\"sin\\\" is first filtered with a \\\"CriticalDamping\\\"\r\nfilter of order 1 and then the output of this filter is connected to the output\r\nof the \\\"firstOrder1\\\" block (via the InverseBlockConstraints block, since\r\n2 outputs cannot be connected directly together in a block diagram).\r\n</p>\r\n\r\n<p>\r\nIn order to check the inversion, the computed input of \\\"firstOrder1\\\" is used\r\nas input in an identical block \\\"firstOrder2\\\". The output of \\\"firstOrder2\\\" should\r\nbe the given \\\"sine\\\" function. The difference is constructed with the \\\"feedback\\\"\r\nblock. Since the \\\"sine\\\" function is filtered, one cannot expect that this difference\r\nis zero. The higher the cut-off frequency of the filter, the closer is the\r\nagreement. A typical simulation result is shown in the next figure:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/InverseModel.png\\\"\r\n     alt=\\\"InverseModel.png\\\">\r\n</html>\"), experiment(StopTime=1.0));\r\n  end InverseModel;\r\n\r\n  model ShowLogicalSources\r\n    \"Demonstrates the usage of logical sources together with their diagram animation\"\r\n    extends Modelica.Icons.Example;\r\n    Sources.BooleanTable table(table={2,4,6,8}) annotation (Placement(\r\n          transformation(extent={{-60,-100},{-40,-80}})));\r\n    Sources.BooleanConstant const annotation (Placement(transformation(extent={\r\n              {-60,60},{-40,80}})));\r\n    Sources.BooleanStep step(startTime=4) annotation (Placement(transformation(\r\n            extent={{-60,20},{-40,40}})));\r\n    Sources.BooleanPulse pulse(period=1.5) annotation (Placement(transformation(\r\n            extent={{-60,-20},{-40,0}})));\r\n\r\n    Sources.SampleTrigger sample(period=0.5) annotation (Placement(\r\n          transformation(extent={{-60,-60},{-40,-40}})));\r\n    Sources.BooleanExpression booleanExpression(y=pulse.y and step.y)\r\n      annotation (Placement(transformation(extent={{20,20},{80,40}})));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis simple example demonstrates the logical sources in\r\n<a href=\\\"modelica://Modelica.Blocks.Sources\\\">Modelica.Blocks.Sources</a> and demonstrate\r\ntheir diagram animation (see \\\"small circle\\\" close to the output connector).\r\nThe \\\"booleanExpression\\\" source shows how a logical expression can be defined\r\nin its parameter menu referring to variables available on this level of the\r\nmodel.\r\n</p>\r\n\r\n</html>\"));\r\n  end ShowLogicalSources;\r\n\r\n  model LogicalNetwork1 \"Demonstrates the usage of logical blocks\"\r\n\r\n    extends Modelica.Icons.Example;\r\n    Sources.BooleanTable table2(table={1,3,5,7}) annotation (Placement(\r\n          transformation(extent={{-80,-20},{-60,0}})));\r\n    Sources.BooleanTable table1(table={2,4,6,8}) annotation (Placement(\r\n          transformation(extent={{-80,20},{-60,40}})));\r\n    Logical.Not Not1 annotation (Placement(transformation(extent={{-40,-20},{-20,\r\n              0}})));\r\n\r\n    Logical.And And1 annotation (Placement(transformation(extent={{0,-20},{20,0}})));\r\n    Logical.Or Or1 annotation (Placement(transformation(extent={{40,20},{60,40}})));\r\n    Logical.Pre Pre1 annotation (Placement(transformation(extent={{-40,-60},{-20,\r\n              -40}})));\r\n  equation\r\n\r\n    connect(table2.y, Not1.u)\r\n      annotation (Line(points={{-59,-10},{-42,-10}}, color={255,0,255}));\r\n    connect(And1.y, Or1.u2) annotation (Line(points={{21,-10},{28,-10},{28,22},\r\n            {38,22}}, color={255,0,255}));\r\n    connect(table1.y, Or1.u1)\r\n      annotation (Line(points={{-59,30},{38,30}}, color={255,0,255}));\r\n    connect(Not1.y, And1.u1)\r\n      annotation (Line(points={{-19,-10},{-2,-10}}, color={255,0,255}));\r\n    connect(Pre1.y, And1.u2) annotation (Line(points={{-19,-50},{-10,-50},{-10,\r\n            -18},{-2,-18}}, color={255,0,255}));\r\n    connect(Or1.y, Pre1.u) annotation (Line(points={{61,30},{68,30},{68,-70},{-60,\r\n            -70},{-60,-50},{-42,-50}}, color={255,0,255}));\r\n\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of logical blocks. Note, that\r\nthe Boolean values of the input and output signals are visualized\r\nin the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\nIf a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. It a\r\n\\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.\r\n</p>\r\n</html>\"));\r\n  end LogicalNetwork1;\r\n\r\nmodel RealNetwork1 \"Demonstrates the usage of blocks from Modelica.Blocks.Math\"\r\n\r\n  extends Modelica.Icons.Example;\r\n\r\n  Modelica.Blocks.Math.MultiSum add(nu=2)\r\n    annotation (Placement(transformation(extent={{-14,64},{-2,76}})));\r\n  Sources.Sine sine(amplitude=3, f=0.1)\r\n    annotation (Placement(transformation(extent={{-96,60},{-76,80}})));\r\n  Sources.Step integerStep(height=3, startTime=2)\r\n    annotation (Placement(transformation(extent={{-60,30},{-40,50}})));\r\n  Sources.Constant integerConstant(k=1)\r\n    annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n  Modelica.Blocks.Interaction.Show.RealValue showValue\r\n    annotation (Placement(transformation(extent={{66,60},{86,80}})));\r\n  Math.MultiProduct product(nu=2)\r\n    annotation (Placement(transformation(extent={{6,24},{18,36}})));\r\n  Modelica.Blocks.Interaction.Show.RealValue showValue1(significantDigits=2)\r\n    annotation (Placement(transformation(extent={{64,20},{84,40}})));\r\n  Sources.BooleanPulse booleanPulse1(period=1)\r\n    annotation (Placement(transformation(extent={{-12,-30},{8,-10}})));\r\n  Math.MultiSwitch multiSwitch(\r\n    nu=2,\r\n    expr={4,6},\r\n    y_default=2)\r\n    annotation (Placement(transformation(extent={{28,-60},{68,-40}})));\r\n  Sources.BooleanPulse booleanPulse2(period=2, width=80)\r\n    annotation (Placement(transformation(extent={{-12,-70},{8,-50}})));\r\n  Modelica.Blocks.Interaction.Show.RealValue showValue3(\r\n    use_numberPort=false,\r\n    number=multiSwitch.y,\r\n    significantDigits=1)\r\n    annotation (Placement(transformation(extent={{40,-84},{60,-64}})));\r\n  Math.LinearDependency linearDependency1(\r\n    y0=1,\r\n    k1=2,\r\n    k2=3) annotation (Placement(transformation(extent={{40,80},{60,100}})));\r\n  Math.MinMax minMax(nu=2)\r\n    annotation (Placement(transformation(extent={{58,-16},{78,4}})));\r\nequation\r\n  connect(booleanPulse1.y, multiSwitch.u[1]) annotation (Line(\r\n      points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}));\r\n  connect(booleanPulse2.y, multiSwitch.u[2]) annotation (Line(\r\n      points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}));\r\n  connect(sine.y, add.u[1]) annotation (Line(\r\n      points={{-75,70},{-46.5,70},{-46.5,72.1},{-14,72.1}}, color={0,0,127}));\r\n  connect(integerStep.y, add.u[2]) annotation (Line(\r\n      points={{-39,40},{-28,40},{-28,67.9},{-14,67.9}}, color={0,0,127}));\r\n  connect(add.y, showValue.numberPort) annotation (Line(\r\n      points={{-0.98,70},{64.5,70}}, color={0,0,127}));\r\n  connect(integerStep.y, product.u[1]) annotation (Line(\r\n      points={{-39,40},{-20,40},{-20,32.1},{6,32.1}}, color={0,0,127}));\r\n  connect(integerConstant.y, product.u[2]) annotation (Line(\r\n      points={{-39,0},{-20,0},{-20,27.9},{6,27.9}}, color={0,0,127}));\r\n  connect(product.y, showValue1.numberPort) annotation (Line(\r\n      points={{19.02,30},{62.5,30}}, color={0,0,127}));\r\n  connect(add.y, linearDependency1.u1) annotation (Line(\r\n      points={{-0.98,70},{20,70},{20,96},{38,96}}, color={0,0,127}));\r\n  connect(product.y, linearDependency1.u2) annotation (Line(\r\n      points={{19.02,30},{30,30},{30,84},{38,84}}, color={0,0,127}));\r\n  connect(add.y, minMax.u[1]) annotation (Line(\r\n      points={{-0.98,70},{48,70},{48,-2.5},{58,-2.5}}, color={0,0,127}));\r\n  connect(product.y, minMax.u[2]) annotation (Line(\r\n      points={{19.02,30},{40,30},{40,-9.5},{58,-9.5}}, color={0,0,127}));\r\n  annotation (\r\n    experiment(StopTime=10),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of mathematical Real blocks.\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Modelica.Blocks.Math</a>.\r\nNote, that\r\n</p>\r\n\r\n<ul>\r\n<li> at the right side of the model, several Math.ShowValue blocks\r\n     are present, that visualize the actual value of the respective Real\r\n     signal in a diagram animation.</li>\r\n\r\n<li> the Boolean values of the input and output signals are visualized\r\n     in the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\n     If a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. If a\r\n     \\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.</li>\r\n</ul>\r\n\r\n</html>\"));\r\nend RealNetwork1;\r\n\r\n  model IntegerNetwork1\r\n    \"Demonstrates the usage of blocks from Modelica.Blocks.MathInteger\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    MathInteger.Sum sum(nu=3)\r\n      annotation (Placement(transformation(extent={{-14,64},{-2,76}})));\r\n    Sources.Sine sine(amplitude=3, f=0.1)\r\n      annotation (Placement(transformation(extent={{-100,60},{-80,80}})));\r\n    Math.RealToInteger realToInteger\r\n      annotation (Placement(transformation(extent={{-60,60},{-40,80}})));\r\n    Sources.IntegerStep integerStep(height=3, startTime=2)\r\n      annotation (Placement(transformation(extent={{-60,30},{-40,50}})));\r\n    Sources.IntegerConstant integerConstant(k=1)\r\n      annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue\r\n      annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n    MathInteger.Product product(nu=2)\r\n      annotation (Placement(transformation(extent={{16,24},{28,36}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue1\r\n      annotation (Placement(transformation(extent={{40,20},{60,40}})));\r\n    MathInteger.TriggeredAdd triggeredAdd(use_reset=false, use_set=false)\r\n      annotation (Placement(transformation(extent={{16,-6},{28,6}})));\r\n    Sources.BooleanPulse booleanPulse1(period=1)\r\n      annotation (Placement(transformation(extent={{-12,-30},{8,-10}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue2\r\n      annotation (Placement(transformation(extent={{40,-10},{60,10}})));\r\n    MathInteger.MultiSwitch multiSwitch1(\r\n      nu=2,\r\n      expr={4,6},\r\n      y_default=2,\r\n      use_pre_as_default=false)\r\n      annotation (Placement(transformation(extent={{28,-60},{68,-40}})));\r\n    Sources.BooleanPulse booleanPulse2(period=2, width=80)\r\n      annotation (Placement(transformation(extent={{-12,-70},{8,-50}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue3(use_numberPort=\r\n          false, number=multiSwitch1.y)\r\n      annotation (Placement(transformation(extent={{40,-84},{60,-64}})));\r\n  equation\r\n    connect(sine.y, realToInteger.u) annotation (Line(\r\n        points={{-79,70},{-62,70}}, color={0,0,127}));\r\n    connect(realToInteger.y, sum.u[1]) annotation (Line(\r\n        points={{-39,70},{-32,70},{-32,72},{-14,72},{-14,72.8}}, color={255,127,0}));\r\n    connect(integerStep.y, sum.u[2]) annotation (Line(\r\n        points={{-39,40},{-28,40},{-28,70},{-14,70}}, color={255,127,0}));\r\n    connect(integerConstant.y, sum.u[3]) annotation (Line(\r\n        points={{-39,0},{-22,0},{-22,67.2},{-14,67.2}}, color={255,127,0}));\r\n    connect(sum.y, showValue.numberPort) annotation (Line(\r\n        points={{-1.1,70},{38.5,70}}, color={255,127,0}));\r\n    connect(sum.y, product.u[1]) annotation (Line(\r\n        points={{-1.1,70},{4,70},{4,32.1},{16,32.1}}, color={255,127,0}));\r\n    connect(integerStep.y, product.u[2]) annotation (Line(\r\n        points={{-39,40},{-8,40},{-8,27.9},{16,27.9}}, color={255,127,0}));\r\n    connect(product.y, showValue1.numberPort) annotation (Line(\r\n        points={{28.9,30},{38.5,30}}, color={255,127,0}));\r\n    connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{-39,0},{13.6,0}}, color={255,127,0}));\r\n    connect(booleanPulse1.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{9,-20},{18.4,-20},{18.4,-7.2}}, color={255,0,255}));\r\n    connect(triggeredAdd.y, showValue2.numberPort) annotation (Line(\r\n        points={{29.2,0},{38.5,0}}, color={255,127,0}));\r\n    connect(booleanPulse1.y, multiSwitch1.u[1]) annotation (Line(\r\n        points={{9,-20},{18,-20},{18,-48},{28,-48},{28,-48.5}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, multiSwitch1.u[2]) annotation (Line(\r\n        points={{9,-60},{18,-60},{18,-52},{28,-52},{28,-51.5}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of Integer blocks.\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.MathInteger\\\">Modelica.Blocks.MathInteger</a>.\r\nNote, that\r\n</p>\r\n\r\n<ul>\r\n<li> at the right side of the model, several MathInteger.ShowValue blocks\r\n     are present, that visualize the actual value of the respective Integer\r\n     signal in a diagram animation.</li>\r\n\r\n<li> the Boolean values of the input and output signals are visualized\r\n     in the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\n     If a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. If a\r\n     \\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.</li>\r\n\r\n</ul>\r\n\r\n</html>\"));\r\n  end IntegerNetwork1;\r\n\r\n  model BooleanNetwork1\r\n    \"Demonstrates the usage of blocks from Modelica.Blocks.MathBoolean\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue\r\n      annotation (Placement(transformation(extent={{-36,74},{-16,94}})));\r\n    MathBoolean.And and1(nu=3)\r\n      annotation (Placement(transformation(extent={{-58,64},{-46,76}})));\r\n    Sources.BooleanPulse booleanPulse1(width=20, period=1)\r\n      annotation (Placement(transformation(extent={{-100,60},{-80,80}})));\r\n    Sources.BooleanPulse booleanPulse2(period=1, width=80)\r\n      annotation (Placement(transformation(extent={{-100,-4},{-80,16}})));\r\n    Sources.BooleanStep booleanStep(startTime=1.5)\r\n      annotation (Placement(transformation(extent={{-100,28},{-80,48}})));\r\n    MathBoolean.Or or1(nu=2)\r\n      annotation (Placement(transformation(extent={{-28,62},{-16,74}})));\r\n    MathBoolean.Xor xor1(nu=2)\r\n      annotation (Placement(transformation(extent={{-2,60},{10,72}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue2\r\n      annotation (Placement(transformation(extent={{-2,74},{18,94}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue3\r\n      annotation (Placement(transformation(extent={{24,56},{44,76}})));\r\n    MathBoolean.Nand nand1(nu=2)\r\n      annotation (Placement(transformation(extent={{22,40},{34,52}})));\r\n    MathBoolean.Nor or2(nu=2)\r\n      annotation (Placement(transformation(extent={{46,38},{58,50}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue4\r\n      annotation (Placement(transformation(extent={{90,34},{110,54}})));\r\n    MathBoolean.Not nor1\r\n      annotation (Placement(transformation(extent={{68,40},{76,48}})));\r\n    MathBoolean.OnDelay onDelay(delayTime=1)\r\n      annotation (Placement(transformation(extent={{-56,-94},{-48,-86}})));\r\n    MathBoolean.RisingEdge rising\r\n      annotation (Placement(transformation(extent={{-56,-15},{-48,-7}})));\r\n    MathBoolean.MultiSwitch set1(nu=2, expr={false,true})\r\n      annotation (Placement(transformation(extent={{-30,-23},{10,-3}})));\r\n    MathBoolean.FallingEdge falling\r\n      annotation (Placement(transformation(extent={{-56,-32},{-48,-24}})));\r\n    Sources.BooleanTable booleanTable(table={2,4,6,6.5,7,9,11})\r\n      annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));\r\n    MathBoolean.ChangingEdge changing\r\n      annotation (Placement(transformation(extent={{-56,-59},{-48,-51}})));\r\n    MathInteger.TriggeredAdd triggeredAdd\r\n      annotation (Placement(transformation(extent={{14,-56},{26,-44}})));\r\n    Sources.IntegerConstant integerConstant(k=2)\r\n      annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));\r\n    Modelica.Blocks.Interaction.Show.IntegerValue showValue1\r\n      annotation (Placement(transformation(extent={{40,-60},{60,-40}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue5\r\n      annotation (Placement(transformation(extent={{24,-23},{44,-3}})));\r\n    Modelica.Blocks.Interaction.Show.BooleanValue showValue6\r\n      annotation (Placement(transformation(extent={{-32,-100},{-12,-80}})));\r\n    Logical.RSFlipFlop rSFlipFlop\r\n      annotation (Placement(transformation(extent={{70,-90},{90,-70}})));\r\n    Sources.SampleTrigger sampleTriggerSet(period=0.5, startTime=0)\r\n      annotation (Placement(transformation(extent={{40,-76},{54,-62}})));\r\n    Sources.SampleTrigger sampleTriggerReset(period=0.5, startTime=0.3)\r\n      annotation (Placement(transformation(extent={{40,-98},{54,-84}})));\r\n  equation\r\n    connect(booleanPulse1.y, and1.u[1]) annotation (Line(\r\n        points={{-79,70},{-68,70},{-68,72.8},{-58,72.8}}, color={255,0,255}));\r\n    connect(booleanStep.y, and1.u[2]) annotation (Line(\r\n        points={{-79,38},{-64,38},{-64,70},{-58,70}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, and1.u[3]) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,67.2},{-58,67.2}}, color={255,0,255}));\r\n    connect(and1.y, or1.u[1]) annotation (Line(\r\n        points={{-45.1,70},{-36.4,70},{-36.4,70.1},{-28,70.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, or1.u[2]) annotation (Line(\r\n        points={{-79,6},{-40,6},{-40,65.9},{-28,65.9}}, color={255,0,255}));\r\n    connect(or1.y, xor1.u[1]) annotation (Line(\r\n        points={{-15.1,68},{-8,68},{-8,68.1},{-2,68.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, xor1.u[2]) annotation (Line(\r\n        points={{-79,6},{-12,6},{-12,63.9},{-2,63.9}}, color={255,0,255}));\r\n    connect(and1.y, showValue.activePort) annotation (Line(\r\n        points={{-45.1,70},{-42,70},{-42,84},{-37.5,84}}, color={255,0,255}));\r\n    connect(or1.y, showValue2.activePort) annotation (Line(\r\n        points={{-15.1,68},{-12,68},{-12,84},{-3.5,84}}, color={255,0,255}));\r\n    connect(xor1.y, showValue3.activePort) annotation (Line(\r\n        points={{10.9,66},{22.5,66}}, color={255,0,255}));\r\n    connect(xor1.y, nand1.u[1]) annotation (Line(\r\n        points={{10.9,66},{16,66},{16,48.1},{22,48.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, nand1.u[2]) annotation (Line(\r\n        points={{-79,6},{16,6},{16,44},{22,44},{22,43.9}}, color={255,0,255}));\r\n    connect(nand1.y, or2.u[1]) annotation (Line(\r\n        points={{34.9,46},{46,46},{46,46.1}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, or2.u[2]) annotation (Line(\r\n        points={{-79,6},{42,6},{42,41.9},{46,41.9}}, color={255,0,255}));\r\n    connect(or2.y, nor1.u) annotation (Line(\r\n        points={{58.9,44},{66.4,44}}, color={255,0,255}));\r\n    connect(nor1.y, showValue4.activePort) annotation (Line(\r\n        points={{76.8,44},{88.5,44}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, rising.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-11},{-57.6,-11}}, color={255,0,255}));\r\n    connect(rising.y, set1.u[1]) annotation (Line(\r\n        points={{-47.2,-11},{-38.6,-11},{-38.6,-11.5},{-30,-11.5}}, color={255,0,255}));\r\n    connect(falling.y, set1.u[2]) annotation (Line(\r\n        points={{-47.2,-28},{-40,-28},{-40,-14.5},{-30,-14.5}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, falling.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-28},{-57.6,-28}}, color={255,0,255}));\r\n    connect(booleanTable.y, onDelay.u) annotation (Line(\r\n        points={{-79,-90},{-57.6,-90}}, color={255,0,255}));\r\n    connect(booleanPulse2.y, changing.u) annotation (Line(\r\n        points={{-79,6},{-62,6},{-62,-55},{-57.6,-55}}, color={255,0,255}));\r\n    connect(integerConstant.y, triggeredAdd.u) annotation (Line(\r\n        points={{1,-50},{11.6,-50}}, color={255,127,0}));\r\n    connect(changing.y, triggeredAdd.trigger) annotation (Line(\r\n        points={{-47.2,-55},{-30,-55},{-30,-74},{16.4,-74},{16.4,-57.2}}, color={255,0,255}));\r\n    connect(triggeredAdd.y, showValue1.numberPort) annotation (Line(\r\n        points={{27.2,-50},{38.5,-50}}, color={255,127,0}));\r\n    connect(set1.y, showValue5.activePort) annotation (Line(\r\n        points={{11,-13},{22.5,-13}}, color={255,0,255}));\r\n    connect(onDelay.y, showValue6.activePort) annotation (Line(\r\n        points={{-47.2,-90},{-33.5,-90}}, color={255,0,255}));\r\n    connect(sampleTriggerSet.y, rSFlipFlop.S) annotation (Line(\r\n        points={{54.7,-69},{60,-69},{60,-74},{68,-74}}, color={255,0,255}));\r\n    connect(sampleTriggerReset.y, rSFlipFlop.R) annotation (Line(\r\n        points={{54.7,-91},{60,-91},{60,-86},{68,-86}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of Boolean blocks\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.MathBoolean\\\">Modelica.Blocks.MathBoolean</a>.\r\nNote, that\r\n</p>\r\n\r\n<ul>\r\n<li> at the right side of the model, several MathBoolean.ShowValue blocks\r\n     are present, that visualize the actual value of the respective Boolean\r\n     signal in a diagram animation (\\\"green\\\" means \\\"true\\\").</li>\r\n\r\n<li> the Boolean values of the input and output signals are visualized\r\n     in the diagram animation, by the small \\\"circles\\\" close to the connectors.\r\n     If a \\\"circle\\\" is \\\"white\\\", the signal is <strong>false</strong>. If a\r\n     \\\"circle\\\" is \\\"green\\\", the signal is <strong>true</strong>.</li>\r\n\r\n</ul>\r\n\r\n</html>\"));\r\n  end BooleanNetwork1;\r\n\r\n  model Interaction1\r\n    \"Demonstrates the usage of blocks from Modelica.Blocks.Interaction.Show\"\r\n\r\n    extends Modelica.Icons.Example;\r\n\r\n    Interaction.Show.IntegerValue integerValue\r\n      annotation (Placement(transformation(extent={{-40,20},{-20,40}})));\r\n    Sources.IntegerTable integerTable(table=[0, 0; 1, 2; 2, 4; 3, 6; 4, 4; 6, 2])\r\n      annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n    Sources.TimeTable timeTable(table=[0, 0; 1, 2.1; 2, 4.2; 3, 6.3; 4, 4.2; 6,\r\n          2.1; 6, 2.1])\r\n      annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n    Interaction.Show.RealValue realValue\r\n      annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n    Sources.BooleanTable booleanTable(table={1,2,3,4,5,6,7,8,9})\r\n      annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));\r\n    Interaction.Show.BooleanValue booleanValue\r\n      annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));\r\n    Sources.RadioButtonSource start(buttonTimeTable={1,3}, reset={stop.on})\r\n      annotation (Placement(transformation(extent={{24,64},{36,76}})));\r\n    Sources.RadioButtonSource stop(buttonTimeTable={2,4}, reset={start.on})\r\n      annotation (Placement(transformation(extent={{48,64},{60,76}})));\r\n  equation\r\n    connect(integerTable.y, integerValue.numberPort) annotation (Line(\r\n        points={{-59,30},{-41.5,30}}, color={255,127,0}));\r\n    connect(timeTable.y, realValue.numberPort) annotation (Line(\r\n        points={{-59,70},{-41.5,70}}, color={0,0,127}));\r\n    connect(booleanTable.y, booleanValue.activePort) annotation (Line(\r\n        points={{-59,-10},{-41.5,-10}}, color={255,0,255}));\r\n    annotation (experiment(StopTime=10), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates a network of blocks\r\nfrom package <a href=\\\"modelica://Modelica.Blocks.Interaction\\\">Modelica.Blocks.Interaction</a>\r\nto show how diagram animations can be constructed.\r\n</p>\r\n\r\n</html>\"));\r\n  end Interaction1;\r\n\r\n  model BusUsage \"Demonstrates the usage of a signal bus\"\r\n    extends Modelica.Icons.Example;\r\n\r\n  public\r\n    Modelica.Blocks.Sources.IntegerStep integerStep(\r\n      height=1,\r\n      offset=2,\r\n      startTime=0.5) annotation (Placement(transformation(extent={{-60,-40},{-40,\r\n              -20}})));\r\n    Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=0.5) annotation (\r\n        Placement(transformation(extent={{-58,0},{-38,20}})));\r\n    Modelica.Blocks.Sources.Sine sine(f=1) annotation (Placement(\r\n          transformation(extent={{-60,40},{-40,60}})));\r\n\r\n    Modelica.Blocks.Examples.BusUsage_Utilities.Part part annotation (Placement(\r\n          transformation(extent={{-60,-80},{-40,-60}})));\r\n    Modelica.Blocks.Math.Gain gain(k=1) annotation (Placement(transformation(\r\n            extent={{-40,70},{-60,90}})));\r\n  protected\r\n    BusUsage_Utilities.Interfaces.ControlBus controlBus annotation (Placement(\r\n          transformation(\r\n          origin={30,10},\r\n          extent={{-20,20},{20,-20}},\r\n          rotation=90)));\r\n  equation\r\n\r\n    connect(sine.y, controlBus.realSignal1) annotation (Line(\r\n        points={{-39,50},{12,50},{12,14},{30,14},{30,10}}, color={0,0,127}));\r\n    connect(booleanStep.y, controlBus.booleanSignal) annotation (Line(\r\n        points={{-37,10},{30,10}}, color={255,0,255}));\r\n    connect(integerStep.y, controlBus.integerSignal) annotation (Line(\r\n        points={{-39,-30},{0,-30},{0,6},{32,6},{32,10},{30,10}}, color={255,127,0}));\r\n    connect(part.subControlBus, controlBus.subControlBus) annotation (Line(\r\n        points={{-40,-70},{30,-70},{30,10}},\r\n        color={255,204,51},\r\n        thickness=0.5));\r\n    connect(gain.u, controlBus.realSignal1) annotation (Line(\r\n        points={{-38,80},{20,80},{20,18},{32,18},{32,10},{30,10}}, color={0,0,127}));\r\n    annotation (Documentation(info=\"<html>\r\n<p><strong>Signal bus concept</strong></p>\r\n<p>\r\nIn technical systems, such as vehicles, robots or satellites, many signals\r\nare exchanged between components. In a simulation system, these signals\r\nare usually modelled by signal connections of input/output blocks.\r\nUnfortunately, the signal connection structure may become very complicated,\r\nespecially for hierarchical models.\r\n</p>\r\n\r\n<p>\r\nThe same is also true for real technical systems. To reduce complexity\r\nand get higher flexibility, many technical systems use data buses to\r\nexchange data between components. For the same reasons, it is often better\r\nto use a \\\"signal bus\\\" concept also in a Modelica model. This is demonstrated\r\nat hand of this model (Modelica.Blocks.Examples.BusUsage):\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/BusUsage.png\\\"\r\n     alt=\\\"BusUsage.png\\\">\r\n\r\n<ul>\r\n<li> Connector instance \\\"controlBus\\\" is a hierarchical connector that is\r\n     used to exchange signals between different components. It is\r\n     defined as \\\"expandable connector\\\" in order that <strong>no</strong> central definition\r\n     of the connector is needed but is automatically constructed by the\r\n     signals connected to it (see also <a href=\\\"https://specification.modelica.org/maint/3.6/connectors-and-connections.html#expandable-connectors\\\">Section&nbsp;9.1.3 <em>Expandable Connectors</em> of the Modelica&nbsp;3.6 specification</a>).</li>\r\n<li> Input/output signals can be directly connected to the \\\"controlBus\\\".</li>\r\n<li> A component, such as \\\"part\\\", can be directly connected to the \\\"controlBus\\\",\r\n     provided it has also a bus connector, or the \\\"part\\\" connector is a\r\n     sub-connector contained in the \\\"controlBus\\\".</li>\r\n</ul>\r\n\r\n<p>\r\nThe control and sub-control bus icons are provided within Modelica.Icons.\r\nIn <a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces\\\">Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces</a>\r\nthe buses for this example are defined. Both the \\\"ControlBus\\\" and the \\\"SubControlBus\\\" are\r\n<strong>expandable</strong> connectors that do not define any variable. For example,\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces.ControlBus#text\\\">Interfaces.ControlBus</a>\r\nis defined as:\r\n</p>\r\n<blockquote><pre>\r\n<strong>expandable connector</strong> ControlBus\r\n    <strong>extends</strong> Modelica.Icons.ControlBus;\r\n    <strong>annotation</strong> ();\r\n<strong>end</strong> ControlBus;\r\n</pre></blockquote>\r\n<p>\r\nNote, the \\\"annotation\\\" in the connector is important since the color\r\nand thickness of a connector line are taken from the first\r\nline element in the icon annotation of a connector class. Above, a small rectangle in the\r\ncolor of the bus is defined (and therefore this rectangle is not\r\nvisible). As a result, when connecting from an instance of this\r\nconnector to another connector instance, the connecting line has\r\nthe color of the \\\"ControlBus\\\" with double width (due to \\\"thickness=0.5\\\").\r\n</p>\r\n\r\n<p>\r\nAn <strong>expandable</strong> connector is a connector where the content of the connector\r\nis constructed by the variables connected to instances of this connector.\r\nFor example, if \\\"sine.y\\\" is connected to the \\\"controlBus\\\", a pop-up menu may appear:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/BusUsage2.png\\\"\r\n     alt=\\\"BusUsage2.png\\\">\r\n\r\n<p>\r\nThe \\\"Add variable/New name\\\" field allows the user to define the name of the signal on\r\nthe \\\"controlBus\\\". When typing \\\"realSignal1\\\" as \\\"New name\\\", a connection of the form:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>connect</strong>(sine.y, controlBus.realSignal1)\r\n</pre></blockquote>\r\n\r\n<p>\r\nis generated and the \\\"controlBus\\\" contains the new signal \\\"realSignal1\\\". Modelica tools\r\nmay give more support in order to list potential signals for a connection. Therefore, in\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces\\\">BusUsage_Utilities.Interfaces</a>\r\nthe expected implementation of the \\\"ControlBus\\\" and of the \\\"SubControlBus\\\" are given.\r\nFor example \\\"Internal.ControlBus\\\" is defined as:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>expandable connector</strong> StandardControlBus\r\n  <strong>extends</strong> BusUsage_Utilities.Interfaces.ControlBus;\r\n\r\n  <strong>import</strong> Modelica.Units.SI;\r\n  SI.AngularVelocity    realSignal1   \\\"First Real signal\\\";\r\n  SI.Velocity           realSignal2   \\\"Second Real signal\\\";\r\n  Integer               integerSignal \\\"Integer signal\\\";\r\n  Boolean               booleanSignal \\\"Boolean signal\\\";\r\n  StandardSubControlBus subControlBus \\\"Combined signal\\\";\r\n<strong>end</strong> StandardControlBus;\r\n</pre></blockquote>\r\n\r\n<p>\r\nConsequently, when connecting now from \\\"sine.y\\\" to \\\"controlBus\\\", the menu\r\nlooks differently:\r\n</p>\r\n\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/BusUsage3.png\\\"\r\n     alt=\\\"BusUsage3.png\\\">\r\n\r\n<p>\r\nNote, even if the signals from \\\"Internal.StandardControlBus\\\" are listed, these are\r\njust potential signals. The user might still add different signal names.\r\n</p>\r\n\r\n</html>\"), experiment(StopTime=2));\r\n  end BusUsage;\r\n\r\n  model Rectifier6pulseFFT \"Example of FFT block\"\r\n    extends Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse;\r\n    Modelica.Blocks.Math.RealFFT realFFT(\r\n      startTime=0.04,\r\n      f_max=2000,\r\n      f_res=5,\r\n      resultFileName=\"rectifier6pulseFFTresult.mat\")\r\n    annotation (Placement(\r\n          transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          origin={-40,-20})));\r\n  equation\r\n    connect(currentSensor.i[1], realFFT.u)\r\n      annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}},\r\n                                                     color={0,0,127}));\r\n    annotation (experiment(StopTime=0.25, Interval=0.0001),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis example is based on a&nbsp;<a href=\\\"modelica://Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse\\\">6-pulse rectifier example</a>,\r\ncalculating the harmonics with the <a href=\\\"modelica://Modelica.Blocks.Math.RealFFT\\\">FFT block</a>.\r\n</p>\r\n<p>\r\nSampling starts after the initial transients are settled - waiting for\r\n<code>2&nbsp;periods&nbsp;= 2/f&nbsp;= 0.04&nbsp;s&nbsp;= realFFT.startTime</code>.\r\nChoosing a&nbsp;maximum frequency <code>f_max&nbsp;=&nbsp;2000&nbsp;Hz</code>,\r\na&nbsp;frequency resolution <code>f_res&nbsp;=&nbsp;5&nbsp;Hz</code>\r\n(both given in the block <code>realFFT</code>) and\r\nthe default oversampling factor <code>f_max_factor&nbsp;=&nbsp;5</code>,\r\nwe have to acquire <code>n&nbsp;= 2*f_max/f_res*f_max_factor&nbsp;=&nbsp;4000</code>\r\nsampling intervals.\r\nThe resulting sampling interval is <code>samplePeriod&nbsp;=&nbsp;1/(n*f_res)&nbsp;=&nbsp;0.05&nbsp;ms</code>.\r\nThus, we have to sample for a&nbsp;period of <code>n*samplePeriod&nbsp;=&nbsp;1/f_res&nbsp;=&nbsp;0.2&nbsp;s</code>.\r\n</p>\r\n<p>\r\nThe result file &quot;rectifier6pulseFFTresult.mat&quot; can be used to plot\r\namplitudes versus frequencies.\r\nNote that for each frequency three rows exit: one with amplitude zero,\r\none with the calculated amplitude, one with amplitude zero.\r\nThus, the second column (amplitude) can be easily plotted versus the first column (frequency).\r\nAs expected, one can see the 5<sup>th</sup>, 7<sup>th</sup>, 11<sup>th</sup>,\r\n13<sup>th</sup>, 17<sup>th</sup>, 19<sup>th</sup>, 23<sup>th</sup>, 25<sup>th</sup>,\r\n&hellip; harmonic in the result.\r\n</p>\r\n</html>\"));\r\n  end Rectifier6pulseFFT;\r\n\r\n  model Rectifier12pulseFFT \"Example of FFT block\"\r\n    extends Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse;\r\n    Modelica.Blocks.Math.RealFFT realFFT(\r\n      startTime=0.04,\r\n      f_max=2000,\r\n      f_res=5,\r\n      resultFileName=\"rectifier12pulseFFTresult.mat\")\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={-40,-20})));\r\n  equation\r\n    connect(currentSensor.i[1], realFFT.u) annotation (Line(points={{-70,-11},{-70,-20},{-52,-20}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=0.25, Interval=0.0001),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis example is based on a&nbsp;<a href=\\\"modelica://Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse\\\">12-pulse rectifier example</a>,\r\ncalculating the harmonics with the <a href=\\\"modelica://Modelica.Blocks.Math.RealFFT\\\">FFT block</a>.\r\n</p>\r\n<p>\r\nSampling starts after the initial transients are settled - waiting for\r\n<code>2&nbsp;periods&nbsp;= 2/f&nbsp;= 0.04&nbsp;s&nbsp;= realFFT.startTime</code>.\r\nChoosing a&nbsp;maximum frequency <code>f_max&nbsp;=&nbsp;2000&nbsp;Hz</code>,\r\na&nbsp;frequency resolution <code>f_res&nbsp;=&nbsp;5&nbsp;Hz</code>\r\n(both given in the block <code>realFFT</code>) and\r\nthe default oversampling factor <code>f_max_factor&nbsp;=&nbsp;5</code>,\r\nwe have to acquire <code>n&nbsp;= 2*f_max/f_res*f_max_factor&nbsp;=&nbsp;4000</code>\r\nsampling intervals.\r\nThe resulting sampling interval is <code>samplePeriod&nbsp;=&nbsp;1/(n*f_res)&nbsp;=&nbsp;0.05&nbsp;ms</code>.\r\nThus, we have to sample for a&nbsp;period of <code>n*samplePeriod = 1/f_res = 0.2 s</code>.\r\n</p>\r\n<p>\r\nThe result file &quot;rectifier12pulseFFTresult.mat&quot; can be used to plot amplitudes versus frequencies.\r\nNote that for each frequency three rows exit: one with amplitude zero,\r\none with the calculated amplitude, one with amplitude zero.\r\nThus, the second column (amplitude) can be easily plotted versus the first column (frequency).\r\nAs expected, one can see the 11<sup>th</sup>, 13<sup>th</sup>, 23<sup>th</sup>, 25<sup>th</sup>,\r\n&hellip; harmonic in the result.\r\n</p>\r\n</html>\"));\r\n  end Rectifier12pulseFFT;\r\n\r\n  model TotalHarmonicDistortion \"Calculation of total harmonic distortion of voltage\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Frequency f1 = 50 \"Fundamental wave frequency\";\r\n    parameter SI.Voltage V1 = 100 \"Fundamental wave RMS voltage\";\r\n    parameter SI.Voltage V3 = 20 \"Third harmonic wave RMS voltage\";\r\n    final parameter Real THD1 = V3/V1 \"Theoretically obtained THD with respect to fundamental wave\";\r\n    final parameter Real THDrms = V3/sqrt(V1^2+V3^2) \"Theoretically obtained THD with respect to RMS\";\r\n    Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));\r\n    Modelica.Electrical.Analog.Sources.SineVoltage sineVoltage3(V=sqrt(2)*V3, f=3*f1,\r\n      startTime=0.02) annotation (Placement(transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270,\r\n          origin={-40,10})));\r\n    Modelica.Electrical.Analog.Sources.SineVoltage sineVoltage1(V=sqrt(2)*V1, f=f1,\r\n      startTime=0.02) annotation (Placement(transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270,\r\n          origin={-40,-20})));\r\n    Modelica.Electrical.Analog.Sensors.VoltageSensor voltageSensor annotation (Placement(transformation(\r\n          extent={{-10,10},{10,-10}},\r\n          rotation=270)));\r\n    Modelica.Blocks.Math.TotalHarmonicDistortion thd1(f=f1) annotation (Placement(transformation(extent={{30,10},{50,30}})));\r\n    Modelica.Blocks.Math.TotalHarmonicDistortion thdRMS(f=f1, useFirstHarmonic=false) annotation (Placement(transformation(extent={{30,-30},{50,-10}})));\r\n  equation\r\n    connect(voltageSensor.p, sineVoltage3.p) annotation (Line(points={{0,10},{0,30},{-40,30},{-40,20}}, color={0,0,255}));\r\n    connect(sineVoltage3.n, sineVoltage1.p) annotation (Line(points={{-40,0},{-40,-10}}, color={0,0,255}));\r\n    connect(sineVoltage1.n, ground.p) annotation (Line(points={{-40,-30},{-40,-40}}, color={0,0,255}));\r\n    connect(ground.p, voltageSensor.n) annotation (Line(points={{-40,-40},{-40,-30},{0,-30},{0,-10}}, color={0,0,255}));\r\n    connect(thd1.u, voltageSensor.v) annotation (Line(points={{28,20},{20,20},{20,0},{11,0}}, color={0,0,127}));\r\n    connect(voltageSensor.v, thdRMS.u) annotation (Line(points={{11,0},{20,0},{20,-20},{28,-20}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=0.1,\r\n        Interval=0.0001,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>This example compares the result of the\r\n<a href=\\\"modelica://Modelica.Blocks.Math.TotalHarmonicDistortion\\\">total harmonic distortion (THD)</a>\r\nwith respect to the fundamental wave and with respect to the total root mean square (RMS).\r\nIn this simulation model a non-sinusoidal voltage\r\nwave form is created by the superposition two voltage waves:</p>\r\n\r\n<ul>\r\n<li>Fundamental wave with RMS voltage <code>V1</code> and frequency <code>f1</code></li>\r\n<li>Third harmonic wave with RMS voltage <code>V3</code> and frequency <code>3*f1</code></li>\r\n</ul>\r\n\r\n<p>This simulation model compares numerically determined THD values with results, obtained by\r\ntheoretical calculations:</p>\r\n\r\n<ul>\r\n<li>Compare the numerically determined THD value <code>thd1.y</code> and the theoretical value <code>THD1</code>,\r\n    both with respect to the fundamental wave; also plot <code>thd1.valid</code></li>\r\n<li>Compare the numerically determined THD value <code>thdRMS.y</code> and the theoretical value <code>THDrms</code>,\r\n    both with respect to the RMS value; also plot <code>thdRMS.valid</code></li>\r\n</ul>\r\n</html>\"));\r\n  end TotalHarmonicDistortion;\r\n\r\n  model Modulation \"Demonstrate amplitude modulation and frequency modulation\"\r\n    extends Modelica.Icons.Example;\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sine(\r\n      useConstantAmplitude=true,\r\n      useConstantFrequency=true,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,60},{10,80}})));\r\n    Modelica.Blocks.Sources.Sine amplitude(\r\n      amplitude=0.5,\r\n      f=2,\r\n      offset=1)\r\n      annotation (Placement(transformation(extent={{-52,20},{-32,40}})));\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sinAM(\r\n      useConstantAmplitude=false,\r\n      useConstantFrequency=true,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,20},{10,40}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude cosAM(\r\n      useConstantAmplitude=false,\r\n      useConstantFrequency=true,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,-12},{10,8}})));\r\n    Modelica.Blocks.Sources.Sine frequency(\r\n      amplitude=50,\r\n      f=2,\r\n      offset=100)\r\n      annotation (Placement(transformation(extent={{-50,-50},{-30,-30}})));\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sinFM(\r\n      useConstantAmplitude=true,\r\n      useConstantFrequency=false,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,-50},{10,-30}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude cosFM(\r\n      useConstantAmplitude=true,\r\n      useConstantFrequency=false,\r\n      constantFrequency=100,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-10,-80},{10,-60}})));\r\n  equation\r\n    connect(amplitude.y, sinAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,36},{-12,36}}, color={0,0,127}));\r\n    connect(frequency.y, sinFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -46},{-12,-46}}, color={0,0,127}));\r\n    connect(amplitude.y, cosAM.amplitude) annotation (Line(points={{-31,30},{-20,30},\r\n            {-20,4},{-12,4}}, color={0,0,127}));\r\n    connect(frequency.y, cosFM.f) annotation (Line(points={{-29,-40},{-20,-40},{-20,\r\n            -76},{-12,-76}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=1.0, Interval=0.0001), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates amplitude modulation (AM) and frequency modulation (FM).\r\n</p>\r\n</html>\"));\r\n  end Modulation;\r\n\r\n  model SinCosEncoder \"Evaluation of a sinusoidal encoder\"\r\n    extends Modelica.Icons.Example;\r\n    import Modelica.Constants.pi;\r\n    SI.AngularVelocity w=2*pi*ramp.y \"2*pi*f\";\r\n    Sources.Ramp ramp(\r\n      height=100,\r\n      duration=1,\r\n      offset=0,\r\n      startTime=0)\r\n      annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude\r\n                                              cosB(\r\n      useConstantAmplitude=true,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,40},{-40,60}})));\r\n    Sources.CosineVariableFrequencyAndAmplitude\r\n                                              cosBminus(\r\n      useConstantAmplitude=true,\r\n      constantAmplitude=-1,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,10},{-40,30}})));\r\n    Sources.SineVariableFrequencyAndAmplitude sinA(\r\n      useConstantAmplitude=true,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));\r\n    Sources.SineVariableFrequencyAndAmplitude sinAminus(\r\n      useConstantAmplitude=true,\r\n      constantAmplitude=-1,\r\n      offset=1.5,\r\n      phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));\r\n    Math.Feedback feedbackCos\r\n      annotation (Placement(transformation(extent={{-30,40},{-10,60}})));\r\n    Math.Feedback feedbackSin\r\n      annotation (Placement(transformation(extent={{-30,-30},{-10,-10}})));\r\n    Electrical.Machines.SpacePhasors.Blocks.Rotator rotator\r\n      annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n    Continuous.Integrator integrator(k=1e6)\r\n      annotation (Placement(transformation(extent={{40,-10},{60,10}})));\r\n    Continuous.Der der1\r\n      annotation (Placement(transformation(extent={{80,-10},{100,10}})));\r\n    Math.WrapAngle wrapAngle(positiveRange=false)\r\n      annotation (Placement(transformation(extent={{80,20},{100,40}})));\r\n    Electrical.Machines.SpacePhasors.Blocks.ToPolar toPolar\r\n      annotation (Placement(transformation(extent={{10,20},{30,40}})));\r\n  equation\r\n    connect(ramp.y, sinA.f) annotation (Line(points={{-79,0},{-70,0},{-70,-26},{-62,\r\n            -26}},color={0,0,127}));\r\n    connect(ramp.y, sinAminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,-56},\r\n            {-62,-56}}, color={0,0,127}));\r\n    connect(ramp.y, cosBminus.f) annotation (Line(points={{-79,0},{-70,0},{-70,14},\r\n            {-62,14}}, color={0,0,127}));\r\n    connect(ramp.y, cosB.f) annotation (Line(points={{-79,0},{-70,0},{-70,44},{-62,\r\n            44}}, color={0,0,127}));\r\n    connect(cosBminus.y, feedbackCos.u2)\r\n      annotation (Line(points={{-39,20},{-20,20},{-20,42}}, color={0,0,127}));\r\n    connect(cosB.y, feedbackCos.u1)\r\n      annotation (Line(points={{-39,50},{-28,50}}, color={0,0,127}));\r\n    connect(sinA.y, feedbackSin.u1)\r\n      annotation (Line(points={{-39,-20},{-28,-20}}, color={0,0,127}));\r\n    connect(sinAminus.y, feedbackSin.u2)\r\n      annotation (Line(points={{-39,-50},{-20,-50},{-20,-28}}, color={0,0,127}));\r\n    connect(feedbackCos.y, rotator.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,0},{8,0}}, color={0,0,127}));\r\n    connect(feedbackSin.y, rotator.u[2])\r\n      annotation (Line(points={{-11,-20},{0,-20},{0,0},{8,0}}, color={0,0,127}));\r\n    connect(rotator.y[2], integrator.u)\r\n      annotation (Line(points={{31,0},{38,0}}, color={0,0,127}));\r\n    connect(integrator.y, rotator.angle) annotation (Line(points={{61,0},{70,0},{70,\r\n            -20},{20,-20},{20,-12}}, color={0,0,127}));\r\n    connect(integrator.y, der1.u)\r\n      annotation (Line(points={{61,0},{78,0}}, color={0,0,127}));\r\n    connect(integrator.y, wrapAngle.u)\r\n      annotation (Line(points={{61,0},{70,0},{70,30},{78,30}}, color={0,0,127}));\r\n    connect(feedbackCos.y, toPolar.u[1])\r\n      annotation (Line(points={{-11,50},{0,50},{0,30},{8,30}}, color={0,0,127}));\r\n    connect(feedbackSin.y, toPolar.u[2]) annotation (Line(points={{-11,-20},{0,-20},\r\n            {0,30},{8,30}}, color={0,0,127}));\r\n    annotation (experiment(StopTime=1.0, Interval=5e-05, Tolerance=1e-05), Documentation(info=\"<html>\r\n<p>\r\nThis examples demonstrates robust evaluation of a sin-cos-encoder.\r\n</p>\r\n<p>\r\nThe sin-cos-encoder provides four tracks:\r\n</p>\r\n<ul>\r\n<li>cosine</li>\r\n<li>minus sine</li>\r\n<li>sine</li>\r\n<li>minus cosine</li>\r\n</ul>\r\n<p>\r\nAll four tracks have the same amplitude and the same offset &gt; amplitude. Offset is used to detect loss of a track.\r\nTo remove offset, (minus sine) is subtracted from (sine) and (minus cosine) from (cosine),\r\nresulting in a cosine and a sine signal with doubled amplitude but without offset.\r\n</p>\r\n<p>\r\nInterpreting cosine and sine as real and imaginary part of a phasor, one could calculate the angle of the phasor (i.e. transform rectangular coordinates to polar coordinates).\r\nThis is not very robust if the signals are superimposed with some noise.\r\nTherefore the phasor is rotated by an angle that is obtained by a controller. The controller aims at imaginary part equal to zero.\r\nThe resulting angle is continuous, i.e. differentiating the angle results in 2*&pi;*frequency.\r\nIf desired, the angle can be wrapped to the interval [-&pi;, +&pi;].\r\n</p>\r\n</html>\"));\r\n  end SinCosEncoder;\r\n\r\n  model CompareSincExpSine \"Compare sinc and exponential sine signal\"\r\n    extends Modelica.Icons.Example;\r\n    Sources.Sinc sinc(f=5)\r\n      annotation (Placement(transformation(extent={{-10,20},{10,40}})));\r\n    Sources.ExpSine expSine1(f=5, damping=5)\r\n      annotation (Placement(transformation(extent={{-10,-20},{10,0}})));\r\n    Sources.ExpSine expSine2(\r\n      f=5,\r\n      phase=Modelica.Constants.pi/2,\r\n      damping=5)\r\n      annotation (Placement(transformation(extent={{-10,-60},{10,-40}})));\r\n    annotation (experiment(StopTime=1.0, Interval=0.0001), Documentation(info=\"<html>\r\n<p>\r\nCompare the sinc signal and an exponentially damped sine.\r\n</p>\r\n</html>\"));\r\n  end CompareSincExpSine;\r\n\r\n  model DemonstrateSignalExtrema \"Test detection of signal extrema\"\r\n    extends Modelica.Icons.Example;\r\n    Sources.Sine amplitude(\r\n      amplitude=2,\r\n      f=63,\r\n      offset=3)\r\n      annotation (Placement(transformation(extent={{-80,10},{-60,30}})));\r\n    Sources.Cosine frequency(\r\n      amplitude=45,\r\n      f=77,\r\n      offset=55)\r\n      annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));\r\n    Modelica.Blocks.Sources.SineVariableFrequencyAndAmplitude sine(\r\n        useConstantFrequency=false, phi(fixed=true))\r\n      annotation (Placement(transformation(extent={{-20,-10},{0,10}})));\r\n    Modelica.Blocks.Math.SignalExtrema signalExtrema1(Ts=1e-2)\r\n      annotation (Placement(transformation(extent={{40,10},{60,30}})));\r\n    Modelica.Blocks.Math.SignalExtrema signalExtrema2(Ts=1e-4)\r\n      annotation (Placement(transformation(extent={{40,-30},{60,-10}})));\r\n  equation\r\n    connect(sine.y, signalExtrema1.u)\r\n      annotation (Line(points={{1,0},{20,0},{20,20},{38,20}}, color={0,0,127}));\r\n    connect(sine.y, signalExtrema2.u) annotation (Line(points={{1,0},{20,0},{20,-20},\r\n            {38,-20}}, color={0,0,127}));\r\n    connect(amplitude.y, sine.amplitude) annotation (Line(points={{-59,20},{-40,\r\n            20},{-40,6},{-22,6}}, color={0,0,127}));\r\n    connect(frequency.y, sine.f) annotation (Line(points={{-59,-20},{-40,-20},{\r\n            -40,-6},{-22,-6}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=1.5,\r\n        Interval=1e-05,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>\r\nThis example uses a sinusoidal signal with amplitude varying sinusoidally in the range of [1,5] with a frequency of 63 Hz,\r\nand frequency varying according to a cosine function in the range of [10, 100] Hz with a frequency of 77 Hz.\r\n</p>\r\n<p>\r\nNote that signalExtrema1 doesn't find the extrema exactly since sampling frequency 100 Hz is too small compared to maximum frequency of the input signal,\r\nwhereas signalExtrema2 catches the extrema rather good due to the fact that sampling frequency 10 kHz is high enough.\r\n</p>\r\n</html>\"));\r\n  end DemonstrateSignalExtrema;\r\n\r\n  model DemonstrateContinuousSignalExtrema\r\n    \"Test the ContinuousSignalExtrema block\"\r\n    extends Modelica.Icons.Example;\r\n    Modelica.Blocks.Sources.Sine sine(\r\n      amplitude=1,\r\n      f=9,\r\n      offset=-2)\r\n      annotation (Placement(transformation(extent={{-60,70},{-40,90}})));\r\n    Modelica.Blocks.Sources.SawTooth sawTooth(\r\n      amplitude=2,\r\n      period=1/9,\r\n      offset=1)\r\n      annotation (Placement(transformation(extent={{-60,10},{-40,30}})));\r\n    Modelica.Blocks.Sources.Sine amplitude(\r\n      amplitude=1,\r\n      f=1.75,\r\n      offset=0)\r\n      annotation (Placement(transformation(extent={{-40,40},{-20,60}})));\r\n    Modelica.Blocks.Math.Product product1\r\n      annotation (Placement(transformation(extent={{0,70},{20,90}})));\r\n    Modelica.Blocks.Math.Product product2\r\n      annotation (Placement(transformation(extent={{0,10},{20,30}})));\r\n    Modelica.Blocks.Math.ContinuousSignalExtrema signalExtrema1\r\n      annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n    Modelica.Blocks.Math.ContinuousSignalExtrema signalExtrema2\r\n      annotation (Placement(transformation(extent={{60,10},{80,30}})));\r\n    Sources.Sine sine1(\r\n      amplitude=1,\r\n      f=7,\r\n      offset=-2)\r\n      annotation (Placement(transformation(extent={{-60,-50},{-40,-30}})));\r\n    Sources.Pulse pulse(\r\n      amplitude=2,\r\n      period=1/9,\r\n      offset=1)\r\n      annotation (Placement(transformation(extent={{-60,-90},{-40,-70}})));\r\n    Math.Add add\r\n      annotation (Placement(transformation(extent={{-20,-70},{0,-50}})));\r\n    Math.Product product3\r\n      annotation (Placement(transformation(extent={{20,-50},{40,-30}})));\r\n    Sources.SawTooth sawTooth1(\r\n      amplitude=2,\r\n      period=1/13,\r\n      offset=-1)\r\n      annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));\r\n    Math.ContinuousSignalExtrema signalExtrema3\r\n      annotation (Placement(transformation(extent={{60,-50},{80,-30}})));\r\n  equation\r\n    connect(amplitude.y, product1.u2) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,74},{-2,74}}, color={0,0,127}));\r\n    connect(amplitude.y, product2.u1) annotation (Line(points={{-19,50},{-10,50},\r\n            {-10,26},{-2,26}}, color={0,0,127}));\r\n    connect(sine.y, product1.u1) annotation (Line(points={{-39,80},{-20,80},{-20,\r\n            86},{-2,86}},  color={0,0,127}));\r\n    connect(sawTooth.y, product2.u2) annotation (Line(points={{-39,20},{-20,20},\r\n            {-20,14},{-2,14}}, color={0,0,127}));\r\n    connect(product1.y, signalExtrema1.u)\r\n      annotation (Line(points={{21,80},{58,80}}, color={0,0,127}));\r\n    connect(product2.y, signalExtrema2.u)\r\n      annotation (Line(points={{21,20},{58,20}}, color={0,0,127}));\r\n    connect(sine1.y, add.u1) annotation (Line(points={{-39,-40},{-32,-40},{-32,\r\n            -54},{-22,-54}}, color={0,0,127}));\r\n    connect(pulse.y, add.u2) annotation (Line(points={{-39,-80},{-32,-80},{-32,\r\n            -66},{-22,-66}}, color={0,0,127}));\r\n    connect(add.y, product3.u2) annotation (Line(points={{1,-60},{10,-60},{10,\r\n            -46},{18,-46}}, color={0,0,127}));\r\n    connect(sawTooth1.y, product3.u1) annotation (Line(points={{1,-20},{10,-20},\r\n            {10,-34},{18,-34}}, color={0,0,127}));\r\n    connect(product3.y, signalExtrema3.u)\r\n      annotation (Line(points={{41,-40},{58,-40}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=1,\r\n        Interval=0.0001,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>\r\nThe amplitudes of both a differentiable sinusoidal signal (frequency 9 Hz) and a non-differentiable sawtooth signal (period 1/9 s) are modulated sinusoidally (frequency 0.75 Hz).\r\n</p>\r\n<p>\r\nNote that the ContinuousSignalExtremaBlock detects extrema of both signals without sampling.\r\n</p>\r\n</html>\"));\r\n  end DemonstrateContinuousSignalExtrema;\r\n\r\n  model DemoSignalCharacteristic\r\n    \"Demonstrate characteristic values of a signal\"\r\n    extends Modelica.Icons.Example;\r\n    import Modelica.Constants.pi;\r\n    parameter Real app(final min=0)=1 \"Peak-to-peak value of pulse signal\";\r\n    parameter Real dutyCycle(final min=0, final max=1)=0.5 \"Duty cycle of pulse signal\";\r\n    parameter Real offset=0 \"Offset of pulse signal\";\r\n    parameter Modelica.Units.SI.Frequency f=50 \"Base frequency of pulse signal\";\r\n    Real y = pulse.y \"Investigated pulse signal\";\r\n    //Analytical prediction of results\r\n    parameter Real y_mean=offset + app*dutyCycle \"Mean value\";\r\n    parameter Real y_rect=abs(offset + app)*dutyCycle + abs(offset)*(1 - dutyCycle) \"Rectified mean\";\r\n    parameter Real y_rms=sqrt((offset + app)^2*dutyCycle + offset^2*(1 - dutyCycle)) \"Root mean square\";\r\n    parameter Real y1_cos=((offset + app)*( sin(dutyCycle*2*pi) - sin(0)) + offset*( sin(2*pi) - sin(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic cosine rms component\";\r\n    parameter Real y1_sin=((offset + app)*(-cos(dutyCycle*2*pi) + cos(0)) + offset*(-cos(2*pi) + cos(dutyCycle*2*pi)))/pi/sqrt(2) \"First harmonic sine rms component\";\r\n    parameter Real y1_rms=sqrt(y1_cos^2+y1_sin^2) \"RMS value of first harmonic\";\r\n    parameter Real y1_arg=atan2(y1_sin,y1_cos) \"Argument of first harmonic\";\r\n    Sources.Pulse pulse(\r\n      amplitude=app,\r\n      width=dutyCycle*100,\r\n      period=1/f,\r\n      offset=offset)\r\n      annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n    Math.Mean mean(f=f, y0=y_mean)\r\n      annotation (Placement(transformation(extent={{-10,50},{10,70}})));\r\n    Math.RectifiedMean rectifiedMean(f=f, y0=y_rect)\r\n      annotation (Placement(transformation(extent={{-10,10},{10,30}})));\r\n    Math.RootMeanSquare rootMeanSquare(f=f, y0=y_rms)\r\n      annotation (Placement(transformation(extent={{-10,-30},{10,-10}})));\r\n    Math.Harmonic harmonic(f=f, k=1,\r\n      y0Cos=y1_cos,\r\n      y0Sin=y1_sin)\r\n      annotation (Placement(transformation(extent={{-10,-70},{10,-50}})));\r\n  equation\r\n    connect(pulse.y, mean.u) annotation (Line(points={{-39,0},{-20,0},{-20,60},{-12,\r\n            60}}, color={0,0,127}));\r\n    connect(pulse.y, rectifiedMean.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            20},{-12,20}}, color={0,0,127}));\r\n    connect(pulse.y, rootMeanSquare.u) annotation (Line(points={{-39,0},{-20,0},{-20,\r\n            -20},{-12,-20}}, color={0,0,127}));\r\n    connect(pulse.y, harmonic.u) annotation (Line(points={{-39,0},{-20,0},{-20,-60},\r\n            {-12,-60}}, color={0,0,127}));\r\n    annotation (experiment(\r\n        StopTime=0.5,\r\n        Interval=0.0005,\r\n        Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>This example demonstrates how to calculate characteristic values of the pulse signal <code>y</code></p>\r\n\r\n<table cellspacing=\\\"0\\\" cellpadding=\\\"2\\\" border=\\\"1\\\">\r\n<tr>\r\n<td>Characteristic quantity</td>\r\n<td>Numerically calculated</td>\r\n<td>Analytically calculated</td>\r\n</tr>\r\n<tr>\r\n<td>Mean</td>\r\n<td><code>mean.y</code></td>\r\n<td><code>y_mean</code></td>\r\n</tr>\r\n<tr>\r\n<td>Rectified mean</td>\r\n<td><code>rectifiedMean.y</code></td>\r\n<td><code>y_rect</code></td>\r\n</tr>\r\n<tr>\r\n<td>Root mean square</td>\r\n<td><code>rootMeanSquare.y</code></td>\r\n<td><code>y_rms</code></td>\r\n</tr>\r\n<tr>\r\n<td>First harmonic</td>\r\n<td><code>harmonic.y_rms</code><br><code>harmonic.y_arg</code></td>\r\n<td><code>y1_rms</code><br><code>y1_arg</code></td>\r\n</tr>\r\n</table>\r\n\r\n<p>The output of these blocks is updated after each period of the signal.</p>\r\n<p>\r\nUsing a simple pulse series, these values can be calculated analytically. \r\nPropagating these values as initial values for the output, \r\nwe can compare the numerical solution with the analytical solution: \r\nThe output is constant from the beginning.\r\n</p>\r\n</html>\"));\r\n  end DemoSignalCharacteristic;\r\n\r\n  package Noise \"Library of examples to demonstrate the usage of package Blocks.Noise\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n\r\n    model UniformNoise\r\n      \"Demonstrates the most simple usage of the UniformNoise block\"\r\n      extends Modelica.Icons.Example;\r\n      output Real uniformNoise2_y = uniformNoise2.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{-20,40},{0,60}})));\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise1(\r\n        samplePeriod=0.02,\r\n        y_min=-1,\r\n        y_max=3) annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise2(\r\n        samplePeriod=0.02, y_min=-1, y_max=3,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=10)\r\n        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates the most simple usage of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Noise.UniformNoise</a>\r\nblock:\r\n</p>\r\n\r\n<ul>\r\n<li> <strong>globalSeed</strong> is the <a href=\\\"modelica://Modelica.Blocks.Noise.GlobalSeed\\\">Noise.GlobalSeed</a>\r\n     block with default options (just dragged from sublibrary Noise).</li>\r\n<li> <strong>uniformNoise1</strong> is an instance of\r\n     <a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Noise.UniformNoise</a> with\r\n     samplePeriod = 0.02 s and a Uniform distribution with limits y_min=-1, y_max=3.</li>\r\n<li> <strong>uniformNoise2</strong> is identical to uniformNoise1 with the exception that\r\n      useAutomaticLocalSeed=false and fixedLocalSeed=10.</li>\r\n</ul>\r\n\r\n<p>\r\nAt every 0.02 seconds a time event occurs and a uniform random number in the band between\r\n-1 ... 3 is drawn. This random number is held constant until the next sample instant.\r\nThe result of a simulation is shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoise.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoise;\r\n\r\n    model AutomaticSeed\r\n      \"Demonstrates noise with startTime and automatic local seed for UniformNoise\"\r\n       extends Modelica.Icons.Example;\r\n       parameter SI.Time startTime = 0.5 \"Start time of noise\";\r\n       parameter Real y_off = -1.0 \"Output of block before startTime\";\r\n\r\n       output Real manualSeed1_y = manualSeed1.y;\r\n       output Real manualSeed2_y = manualSeed2.y;\r\n       output Real manualSeed3_y = manualSeed3.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=false, enableNoise=true)\r\n        annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed1(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed2(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed3(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off, y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed1(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,y_min=-1, y_max=3,\r\n        enableNoise=true)\r\n        annotation (Placement(transformation(extent={{0,20},{20,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed2(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=2,y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{0,-20},{20,0}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed3(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,y_min=-1, y_max=3,\r\n        fixedLocalSeed=3)\r\n        annotation (Placement(transformation(extent={{0,-60},{20,-40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates manual and automatic seed selection of\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">UniformNoise</a> blocks, as well\r\nas starting the noise at startTime = 0.5 s with an output value of y = -1 before this\r\ntime. All noise blocks in this example generate uniform noise in the\r\nband y_min=-1 .. y_max=3 with samplePeriod = 0.01 s.\r\n</p>\r\n\r\n<p>\r\nThe blocks automaticSeed1, automaticSeed2, automaticSeed3 use the default\r\noption to automatically initialize the pseudo random number generators\r\nof the respective block. As a result, different noise is generated, see next\r\ndiagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/AutomaticSeed1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe blocks manualSeed1, manualSeed2, manualSeed3 use manual selection of the local seed\r\n(useAutomaticLocalSeed = false). They use a fixedLocalSeed of 1, 2, and 3 respectively.\r\nAgain, different noise is generated, see next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/AutomaticSeed2.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nTry to set fixedLocalSeed = 1 in block manualSeed2. As a result, the blocks manualSeed1 and\r\nmanualSeed2 will produce exactly the same noise.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end AutomaticSeed;\r\n\r\n    model Distributions\r\n      \"Demonstrates noise with different types of distributions\"\r\n      extends Modelica.Icons.Example;\r\n      parameter SI.Period samplePeriod=0.02\r\n        \"Sample period of all blocks\";\r\n      parameter Real y_min = -1 \"Minimum value of band for random values\";\r\n      parameter Real y_max = 3 \"Maximum value of band for random values\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=\r\n            false)\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      output Real uniformNoise_y =         uniformNoise.y;\r\n      output Real truncatedNormalNoise_y = truncatedNormalNoise.y;\r\n\r\n      Integer n=if time < 0.5 then 12 else 2;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,\r\n        samplePeriod=samplePeriod,\r\n        y_min=y_min,\r\n        y_max=y_max)\r\n        annotation (Placement(transformation(extent={{-60,70},{-40,90}})));\r\n      Modelica.Blocks.Noise.TruncatedNormalNoise truncatedNormalNoise(\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,\r\n        samplePeriod=samplePeriod,\r\n        y_min=y_min,\r\n        y_max=y_max)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates different noise distributions methods that can be selected\r\nfor a Noise block. Both noise blocks use samplePeriod = 0.02 s, y_min=-1, y_max=3, and have\r\nidentical fixedLocalSeed. This means that the same random numbers are drawn for the blocks.\r\nHowever, the random numbers are differently transformed according to the selected distributions\r\n(uniform and truncated normal distribution), and therefore the blocks have different output values.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/Distributions.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nAs can be seen, uniform noise is distributed evenly between -1 and 3, and\r\ntruncated normal distribution has more values centered around the mean value 1.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Distributions;\r\n\r\n    model UniformNoiseProperties\r\n      \"Demonstrates the computation of properties for uniformly distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real y_min = 0 \"Minimum value of band\";\r\n      parameter Real y_max = 6 \"Maximum value of band\";\r\n      parameter Real pMean = (y_min + y_max)/2\r\n        \"Theoretical mean value of uniform distribution\";\r\n      parameter Real var =  (y_max - y_min)^2/12\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sqrt(var)\r\n        \"Theoretical standard deviation of uniform distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise noise(\r\n        samplePeriod=0.001,\r\n        y_min=y_min,\r\n        y_max=y_max,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Blocks.Noise.UniformNoise</a> block\r\nusing a <strong>uniform</strong> random number distribution.\r\nBlock &quot;noise&quot; defines a band of 0 .. 6 and from the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoiseProperties1.png\\\"/>\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a uniform noise in the range 0 .. 6 is 3 and its variance is\r\n3 as well. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a uniform\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoiseProperties;\r\n\r\n    model NormalNoiseProperties\r\n      \"Demonstrates the computation of properties for normally distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real mu = 3 \"Mean value for normal distribution\";\r\n      parameter Real sigma = 1 \"Standard deviation for normal distribution\";\r\n      parameter Real pMean = mu \"Theoretical mean value of normal distribution\";\r\n      parameter Real var =  sigma^2\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sigma\r\n        \"Theoretical standard deviation of normal distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.NormalNoise noise(\r\n        samplePeriod=0.001,\r\n        mu=mu,\r\n        sigma=sigma,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.NormalNoise\\\">Blocks.Noise.NormalNoise</a> block\r\nusing a <strong>normal</strong> random number distribution with mu=3, sigma=1.\r\nFrom the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/NormalNoiseProperties1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a normal noise with mu=3 is 3 and the variance of normal noise\r\nis sigma^2, so 1. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a normal\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end NormalNoiseProperties;\r\n\r\n    model Densities\r\n      \"Demonstrates how to compute distribution densities (= Probability Density Function)\"\r\n      extends Modelica.Icons.Example;\r\n      output Real uniformDensity_y = uniformDensity.y;\r\n      output Real normalDensity_y = normalDensity.y;\r\n      output Real weibullDensity_y = weibullDensity.y;\r\n\r\n      Utilities.UniformDensity\r\n                        uniformDensity(u_min=-4, u_max=4)\r\n        annotation (Placement(transformation(extent={{10,20},{30,40}})));\r\n      Modelica.Blocks.Sources.ContinuousClock clock\r\n    annotation (Placement(transformation(extent={{-80,10},{-60,30}})));\r\n      Modelica.Blocks.Sources.Constant const(k=-10)\r\n    annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));\r\n      Modelica.Blocks.Math.Add add\r\n    annotation (Placement(transformation(extent={{-46,-10},{-26,10}})));\r\n      Utilities.NormalDensity\r\n                        normalDensity(mu=0, sigma=2)\r\n        annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n      Utilities.WeibullDensity\r\n                        weibullDensity(lambda=3, k=1.5)\r\n        annotation (Placement(transformation(extent={{10,-40},{30,-20}})));\r\n    equation\r\n      connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}));\r\n      connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}));\r\n      connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}));\r\n      connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}));\r\n      connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=2e-2),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to compute the probability density functions (pdfs) of\r\nvarious distributions.\r\nIn the following diagram simulations results for the uniform, normal, and Weibull distribution\r\nare shown. The outputs of the blocks are the pdfs that are plotted over one of the\r\ninputs:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/Densities.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Densities;\r\n\r\n    model ImpureGenerator\r\n      \"Demonstrates the usage of the impure random number generator\"\r\n      extends Modelica.Icons.Example;\r\n      output Real impureRandom_y = impureRandom.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=\r\n            false) annotation (Placement(transformation(extent={{20,40},{40,60}})));\r\n\r\n      Utilities.ImpureRandom impureRandom(samplePeriod=0.01)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to use the\r\n<a href=\\\"modelica://Modelica.Math.Random.Utilities.impureRandom\\\">impureRandom(..)</a> function\r\nto generate random values at event instants. Typically, this approach is only\r\nused when implementing an own, specialized block that needs a random number\r\ngenerator. Simulation results are shown in the next figure:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ImpureGenerator.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end ImpureGenerator;\r\n\r\n    model ActuatorWithNoise\r\n      \"Demonstrates how to model measurement noise in an actuator\"\r\n    extends Modelica.Icons.Example;\r\n      Utilities.Parts.MotorWithCurrentControl motor\r\n        annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));\r\n      Utilities.Parts.Controller controller\r\n        annotation (Placement(transformation(extent={{-60,40},{-80,60}})));\r\n      Modelica.Blocks.Sources.Step speed(startTime=0.5, height=50)\r\n        annotation (Placement(transformation(extent={{20,40},{0,60}})));\r\n      Modelica.Mechanics.Rotational.Components.Gearbox gearbox(\r\n        lossTable=[0,0.85,0.8,0.1,0.1],\r\n        c=1e6,\r\n        d=1e4,\r\n        ratio=10,\r\n        w_rel(fixed=true),\r\n        b=0.0017453292519943,\r\n        phi_rel(fixed=true))\r\n        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n      Modelica.Mechanics.Translational.Components.IdealGearR2T idealGearR2T(ratio=\r\n            300) annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));\r\n      Modelica.Mechanics.Translational.Components.Mass mass(m=100)\r\n        annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n      Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(\r\n          f_constant=10000) annotation (Placement(transformation(\r\n            extent={{10,-10},{-10,10}},\r\n            origin={86,0})));\r\n      Modelica.Blocks.Nonlinear.SlewRateLimiter slewRateLimiter(Rising=50)\r\n        annotation (Placement(transformation(extent={{-20,40},{-40,60}})));\r\n      Modelica.Mechanics.Translational.Components.Mass rodMass(m=3)\r\n        annotation (Placement(transformation(extent={{-4,-10},{16,10}})));\r\n      Modelica.Mechanics.Translational.Components.SpringDamper elastoGap(c=1e8, d=\r\n            1e5,\r\n        v_rel(fixed=true),\r\n        s_rel(fixed=true))\r\n                 annotation (Placement(transformation(extent={{22,-10},{42,10}})));\r\n      inner .Modelica.Blocks.Noise.GlobalSeed globalSeed(enableNoise=true) annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n    equation\r\n      connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}));\r\n      connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}));\r\n      connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}));\r\n      connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}));\r\n      connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}));\r\n      connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}));\r\n      connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}));\r\n      connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}));\r\n      connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}));\r\n      connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}));\r\n      annotation (\r\n        experiment(StopTime=8, Interval = 0.01, Tolerance=1e-005),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example models an actuator with a noisy sensor (which is in the motor component):\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ActuatorNoiseDiagram.png\\\"/>\r\n</div>\r\n\r\n<p>\r\nThe drive train consists of a synchronous motor with a current controller (= motor) and a gear box.\r\nThe gearbox drives a rod through a linear translation model. Softly attached to the rod is\r\nanother mass representing the actual actuator (= mass). The actuator is loaded with a constant force.\r\n</p>\r\n\r\n<p>\r\nThe whole drive is steered by a rate limited speed step command through a controller model.\r\nIn the motor the shaft angle is measured and this measurement signal is modelled by adding\r\nadditive noise to the motor angle.\r\n</p>\r\n\r\n<p>\r\nIn the following figure, the position of the actuator and the motor output torque are\r\nshown with and without noise. The noise is not very strong, such that it has no visible effect\r\non the position of the actuator. The effect of the noise can be seen in the motor torque.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ActuatorNoise.png\\\"/>\r\n</div>\r\n\r\n<p>\r\nNote, the noise in all components can be easily switched off by setting parameter\r\nenableNoise = false in the globalSeed component.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end ActuatorWithNoise;\r\n\r\n    model DrydenContinuousTurbulence\r\n      \"Demonstrates how to model wind turbulence for aircraft with the BandLimitedWhiteNoise block (a simple model of vertical Dryden gust speed at low altitudes < 1000 ft)\"\r\n      extends Modelica.Icons.Example;\r\n\r\n      import Modelica.Constants.pi;\r\n\r\n      parameter SI.Velocity V =            140 * 0.5144\r\n        \"Airspeed of aircraft (typically 140kts during approach)\";\r\n      parameter SI.Velocity sigma = 0.1 *   30 * 0.5144\r\n        \"Turbulence intensity (=0.1 * wind at 20 ft, typically 30 kt)\";\r\n      parameter SI.Length   L =            600 * 0.3048\r\n        \"Scale length (= flight altitude)\";\r\n\r\n      Modelica.Blocks.Continuous.TransferFunction Hw(b=sigma*sqrt(L/pi/V)*{sqrt(3)*\r\n            L/V,1}, a={L^2/V^2,2*L/V,1},\r\n        initType=Modelica.Blocks.Types.Init.InitialState)\r\n        \"Transfer function of vertical turbulence speed according to MIL-F-8785C\"\r\n        annotation (Placement(transformation(extent={{-10,0},{10,20}})));\r\n      Modelica.Blocks.Noise.BandLimitedWhiteNoise whiteNoise(samplePeriod=\r\n           0.005)\r\n        annotation (Placement(transformation(extent={{-60,0},{-40,20}})));\r\n      constant SI.Velocity unitVelocity = 1 annotation(HideResult=true);\r\n      Modelica.Blocks.Math.Gain compareToSpeed(k=unitVelocity/V)\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n    equation\r\n      connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}));\r\n      connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}));\r\n      annotation (experiment(StopTime=100),\r\n     Documentation(info=\"<html>\r\n<p>\r\nThis example shows how to use the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\\\">BandLimitedWhiteNoise</a>\r\nto feed a Dryden continuous turbulence model. This model is used to describe turbulent wind at low altitudes\r\nthat varies randomly in space\r\n(see also <a href=\\\"https://en.wikipedia.org/wiki/Continuous_gusts\\\">wikipedia</a>).\r\n</p>\r\n\r\n<h4>Turbulence model for vertical gust speed at low altitudes</h4>\r\n\r\n<p>\r\nThe turbulence model of the Dryden form is defined by the power spectral density of the vertical turbulent velocity:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/equation-erVWhiWU.png\\\" alt=\\\"Phi_w(Omega)=sigma^2*L_w/pi*((1+3*(L_w*Omega)^2)/(1+(L_w*Omega)^2)^2)\\\"/>\r\n</div>\r\n\r\n<p>\r\nThe spectrum is parametrized with the following parameters:\r\n</p>\r\n\r\n<ul>\r\n<li> Lw is the turbulence scale.<br>In low altitudes, it is equal to the flight altitude.</li>\r\n<li> sigma is the turbulence intensity.<br>In low altitudes, it is equal to 1/10 of the\r\n     wind speed at 20 ft altitude, which is 30 kts for medium turbulence.</li>\r\n<li> Omega is the spatial frequency.<br> The turbulence model is thus defined in space and the aircraft experiences turbulence as it flies through the defined wind field.</li>\r\n<li> Omega = s/V will be used to transform the spatial definition into a temporal definition, which can be realized as a state space system.</li>\r\n<li> V is the airspeed of the aircraft.<br>It is approximately 150 kts during the approach (i.e. at low altitudes).</li>\r\n</ul>\r\n\r\n<p>\r\nUsing spectral factorization and a fixed airspeed V of the aircraft, a concrete forming filter for the vertical turbulence can be found as\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/equation-W0zl2Gay.png\\\" alt=\\\"H_w(s) = sigma*sqrt(L_w/(pi*V)) * ((1 + sqrt(3)*L_w/V*s) / (1+L_w/V*s)^2)\\\"/>,\r\n</div>\r\n\r\n<p>\r\nfor which V * (H_w(i Omega/V) * H_w(-i Omega/V) = Phi_w(Omega).\r\n</p>\r\n\r\n<h4>The input to the filter</h4>\r\n\r\n<p>\r\nThe input to the filter is white noise with a normal distribution, zero mean, and a power spectral density of 1.\r\nThat means, for a sampling time of 1s, it is parameterized with mean=0 and variance=1.\r\nHowever, in order to account for the change of noise power due to sampling, the noise must be scaled with sqrt(samplePeriod).\r\nThis is done automatically in the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\\\">BandLimitedWhiteNoise</a> block.\r\n</p>\r\n\r\n<h4>Example output</h4>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/DrydenContinuousTurbulence.png\\\"/>\r\n</div>\r\n\r\n<h4>Reference</h4>\r\n\r\n<ol>\r\n<li>Dryden Wind Turbulence model in US military standard\r\n    <a href=\\\"http://everyspec.com/MIL-SPECS/MIL-SPECS-MIL-F/MIL-F-8785C_5295/\\\">MIL-F-8785</a>.</li>\r\n</ol>\r\n</html>\"));\r\n    end DrydenContinuousTurbulence;\r\n\r\n    package Utilities \"Library of utility models used in the examples\"\r\n      extends Modelica.Icons.UtilitiesPackage;\r\n\r\n      block UniformDensity \"Calculates the density of a uniform distribution\"\r\n        import distribution = Modelica.Math.Distributions.Uniform.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real u_min \"Lower limit of u\";\r\n        parameter Real u_max \"Upper limit of u\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the uniform probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, u_min, u_max);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a uniform distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Uniform.density\\\">Math.Distributions.Uniform.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end UniformDensity;\r\n\r\n      block NormalDensity \"Calculates the density of a normal distribution\"\r\n        import distribution = Modelica.Math.Distributions.Normal.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real mu \"Expectation (mean) value of the normal distribution\";\r\n        parameter Real sigma \"Standard deviation of the normal distribution\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the normal probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, mu, sigma);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a normal distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Normal.density\\\">Math.Distributions.Normal.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end NormalDensity;\r\n\r\n      block WeibullDensity \"Calculates the density of a Weibull distribution\"\r\n        import distribution = Modelica.Math.Distributions.Weibull.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real lambda(min=0)\r\n          \"Scale parameter of the Weibull distribution\";\r\n        parameter Real k(min=0) \"Shape parameter of the Weibull distribution\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the Weibull probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, lambda, k);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a Weibull distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Weibull.density\\\">Math.Distributions.Weibull.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end WeibullDensity;\r\n\r\n      block ImpureRandom\r\n        \"Block generating random numbers with the impure random number generator\"\r\n        extends Modelica.Blocks.Interfaces.SO;\r\n\r\n        parameter SI.Period samplePeriod\r\n          \"Sample period for random number generation\";\r\n\r\n      protected\r\n         outer Modelica.Blocks.Noise.GlobalSeed globalSeed;\r\n\r\n      equation\r\n         when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure);\r\n         end when;\r\n        annotation (Documentation(info=\"<html>\r\n<p>\r\nThis block demonstrates how to implement a block using the impure\r\nrandom number generator. This block is used in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ImpureGenerator\\\">Examples.Noise.ImpureGenerator</a>.\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end ImpureRandom;\r\n\r\n      package Parts \"Parts for use in the ActuatorWithNoise examples\"\r\n        extends Modelica.Icons.Package;\r\n\r\n        model MotorWithCurrentControl\r\n          \"Synchronous machine with current controller and measurement noise\"\r\n          extends Modelica.Electrical.Machines.Icons.TransientMachine;\r\n          constant Integer m=3 \"Number of phases\";\r\n          parameter SI.Voltage VNominal=100\r\n            \"Nominal RMS voltage per phase\";\r\n          parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n          parameter SI.Frequency f=50 \"Actual frequency\";\r\n          parameter SI.Time tRamp=1 \"Frequency ramp\";\r\n          parameter SI.Torque TLoad=181.4 \"Nominal load torque\";\r\n          parameter SI.Time tStep=1.2 \"Time of load torque step\";\r\n          parameter SI.Inertia JLoad=0.29 \"Load's moment of inertia\";\r\n\r\n          Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\r\n            smpm(\r\n            p=smpmData.p,\r\n            fsNominal=smpmData.fsNominal,\r\n            Rs=smpmData.Rs,\r\n            TsRef=smpmData.TsRef,\r\n            Lszero=smpmData.Lszero,\r\n            Lssigma=smpmData.Lssigma,\r\n            Jr=smpmData.Jr,    Js=smpmData.Js,\r\n            frictionParameters=smpmData.frictionParameters,\r\n            wMechanical(fixed=true),\r\n            statorCoreParameters=smpmData.statorCoreParameters,\r\n            strayLoadParameters=smpmData.strayLoadParameters,\r\n            VsOpenCircuit=smpmData.VsOpenCircuit,\r\n            Lmd=smpmData.Lmd,\r\n            Lmq=smpmData.Lmq,\r\n            useDamperCage=smpmData.useDamperCage,\r\n            Lrsigmad=smpmData.Lrsigmad,\r\n            Lrsigmaq=smpmData.Lrsigmaq,\r\n            Rrd=smpmData.Rrd,\r\n            Rrq=smpmData.Rrq,\r\n            TrRef=smpmData.TrRef,\r\n            permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,\r\n            phiMechanical(fixed=true),\r\n            TsOperational=293.15,\r\n            alpha20s=smpmData.alpha20s,\r\n            TrOperational=293.15,\r\n            alpha20r=smpmData.alpha20r)\r\n            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n          Modelica.Electrical.Polyphase.Sources.SignalCurrent signalCurrent(final m=m)\r\n            annotation (Placement(transformation(\r\n                origin={-10,50},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Polyphase.Basic.Star star(final m=m)\r\n            annotation (Placement(transformation(extent={{-10,80},{-30,100}})));\r\n          Modelica.Electrical.Analog.Basic.Ground ground\r\n            annotation (Placement(transformation(\r\n                origin={-50,90},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.DQToThreePhase dqToThreePhase(\r\n              p=smpm.p)\r\n            annotation (Placement(transformation(extent={{-50,40},{-30,60}})));\r\n          Modelica.Electrical.Polyphase.Basic.Star starM(final m=m) annotation (Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=180,\r\n                origin={-60,-10})));\r\n          Modelica.Electrical.Analog.Basic.Ground groundM\r\n            annotation (Placement(transformation(\r\n                origin={-80,-28},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(\r\n              terminalConnection=\"Y\") annotation (Placement(transformation(extent={{-20,-30},\r\n                    {0,-10}})));\r\n          Modelica.Electrical.Machines.Sensors.RotorDisplacementAngle rotorDisplacementAngle(p=smpm.p)\r\n            annotation (Placement(transformation(\r\n                origin={20,-40},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={10,0})));\r\n          Modelica.Mechanics.Rotational.Sensors.TorqueSensor torqueSensor annotation (\r\n              Placement(transformation(\r\n                extent={{10,10},{-10,-10}},\r\n                rotation=180,\r\n                origin={50,-40})));\r\n          Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={30,0})));\r\n          Modelica.Electrical.Machines.Sensors.VoltageQuasiRMSSensor voltageQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=180,\r\n                origin={-30,-10})));\r\n          Modelica.Electrical.Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                origin={-10,0},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=0.29)\r\n            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));\r\n          parameter\r\n            Modelica.Electrical.Machines.Utilities.ParameterRecords.SM_PermanentMagnetData\r\n            smpmData(useDamperCage=false) \"Data for motor\"\r\n            annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n          Modelica.Blocks.Sources.Constant id(k=0)\r\n            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n          Modelica.Blocks.Interfaces.RealInput iq_rms1 annotation (Placement(\r\n                transformation(extent={{-140,40},{-100,80}}),iconTransformation(extent={{-140,40},\r\n                    {-100,80}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange\r\n            \"Right flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Blocks.Interfaces.RealOutput phi(unit=\"rad\")\r\n            \"Absolute angle of flange as output signal\" annotation (Placement(\r\n                transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                origin={110,80}), iconTransformation(extent={{40,70},{60,90}})));\r\n          output Real phi_motor(unit=\"rad\", displayUnit=\"deg\")=angleSensor.phi\r\n            \"Rotational position\";\r\n          output Real w(unit=\"rad/s\")=speedSensor.w \"Rotational speed\";\r\n          Modelica.Blocks.Math.Add addNoise\r\n            annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n          .Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n            samplePeriod=1/200,\r\n            y_min=-0.01,\r\n            y_max=0.01) annotation (Placement(transformation(extent={{26,76},{46,96}})));\r\n        equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}));\r\n          connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}));\r\n          connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}));\r\n          connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}));\r\n          connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}));\r\n          connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}));\r\n          connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}));\r\n          connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}));\r\n          connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}));\r\n          connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}));\r\n          connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}));\r\n          connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}));\r\n          connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}));\r\n          connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}));\r\n          connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}));\r\n          connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}));\r\n          connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}));\r\n          connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}));\r\n          connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}));\r\n          connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}));\r\n          connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}));\r\n          annotation (\r\n            Documentation(info=\"<html>\r\n<p>\r\nA synchronous machine with permanent magnets, current controller and\r\nmeasurement noise of &plusmn;0.01 rad accelerates a quadratic speed dependent load from standstill.\r\nThe rms values of d- and q-current in rotor fixed coordinate system are converted to three-phase currents,\r\nand fed to the machine. The result shows that the torque is influenced by the q-current,\r\nwhereas the stator voltage is influenced by the d-current.\r\n</p>\r\n\r\n<p>\r\nDefault machine parameters of model\r\n<a href=\\\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\\\">SM_PermanentMagnet</a>\r\nare used.\r\n</p>\r\n\r\n<p>\r\nThis motor is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\",         revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n                    100}}), graphics={Rectangle(\r\n                  extent={{40,50},{-100,100}},\r\n                  fillColor={255,170,85},\r\n                  fillPattern=FillPattern.Solid,\r\n                  pattern=LinePattern.None), Text(\r\n                extent={{-150,150},{150,110}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n        end MotorWithCurrentControl;\r\n\r\n        model Controller \"Simple position controller for actuator\"\r\n          extends Modelica.Blocks.Icons.Block;\r\n\r\n          Modelica.Blocks.Continuous.PI speed_PI(k=10, T=5e-2,\r\n            initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{38,-10},{58,10}})));\r\n          Modelica.Blocks.Math.Feedback speedFeedback\r\n            annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n          Modelica.Blocks.Continuous.Derivative positionToSpeed(initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n              T=0.01)\r\n            annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionMeasured\r\n            \"Position signal of motor\"\r\n            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionReference\r\n            \"Reference position\"\r\n            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));\r\n          Modelica.Blocks.Interfaces.RealOutput y1\r\n            \"Connector of Real output signal\"\r\n            annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Continuous.PI position_PI(T=5e-1, k=3,\r\n            initType=Modelica.Blocks.Types.Init.InitialState)\r\n            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));\r\n          Modelica.Blocks.Math.Feedback positionFeedback\r\n            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));\r\n          Modelica.Blocks.Continuous.FirstOrder busdelay(T=1e-3, initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{68,-10},{88,10}})));\r\n        equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}));\r\n          connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}));\r\n          connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}));\r\n          connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}));\r\n          connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}));\r\n          connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}));\r\n          connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}));\r\n          annotation (Icon(coordinateSystem(\r\n                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n                Text(\r\n                  extent={{-40,50},{40,-30}},\r\n                  textColor={0,0,255},\r\n                  textString=\"PI\")}),\r\n            Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",         info=\"<html>\r\n<p>\r\nA simple position controller for a drive system.\r\nThis controller is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n        end Controller;\r\n      annotation (Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",       info=\"<html>\r\n<p>\r\nParts used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n      end Parts;\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains utility models that are used for the examples.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Utilities;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains various example models that demonstrates how\r\nto utilize the blocks from sublibrary\r\n<a href=\\\"modelica://Modelica.Blocks.Noise\\\">Blocks.Noise</a>.\r\n</p>\r\n</html>\",   revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n  end Noise;\r\n\r\n  package BusUsage_Utilities\r\n    \"Utility models and connectors for example Modelica.Blocks.Examples.BusUsage\"\r\n    extends Modelica.Icons.UtilitiesPackage;\r\n    package Interfaces \"Interfaces specialised for this example\"\r\n      extends Modelica.Icons.InterfacesPackage;\r\n\r\n      expandable connector ControlBus\r\n        \"Control bus that is adapted to the signals connected to it\"\r\n        extends Modelica.Icons.SignalBus;\r\n\r\n        SI.AngularVelocity realSignal1 \"First Real signal (angular velocity)\"\r\n          annotation (HideResult=false);\r\n        SI.Velocity realSignal2 \"Second Real signal\"\r\n          annotation (HideResult=false);\r\n        Integer integerSignal \"Integer signal\" annotation (HideResult=false);\r\n        Boolean booleanSignal \"Boolean signal\" annotation (HideResult=false);\r\n        SubControlBus subControlBus \"Combined signal\"\r\n          annotation (HideResult=false);\r\n        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                  -100},{100,100}}), graphics={Rectangle(\r\n                        extent={{-20,2},{22,-2}},\r\n                        lineColor={255,204,51},\r\n                        lineThickness=0.5)}), Documentation(info=\"<html>\r\n<p>\r\nThis connector defines the \\\"expandable connector\\\" ControlBus that\r\nis used as bus in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\nNote, this connector contains \\\"default\\\" signals that might be utilized\r\nin a connection (the input/output causalities of the signals\r\nare determined from the connections to this bus).\r\n</p>\r\n</html>\"));\r\n\r\n      end ControlBus;\r\n\r\n      expandable connector SubControlBus\r\n        \"Sub-control bus that is adapted to the signals connected to it\"\r\n        extends Modelica.Icons.SignalSubBus;\r\n        Real myRealSignal annotation (HideResult=false);\r\n        Boolean myBooleanSignal annotation (HideResult=false);\r\n        annotation (\r\n          defaultComponentPrefixes=\"protected\",\r\n          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                  100,100}}), graphics={Rectangle(\r\n                        extent={{-20,2},{22,-2}},\r\n                        lineColor={255,204,51},\r\n                        lineThickness=0.5)}),\r\n          Documentation(info=\"<html>\r\n<p>\r\nThis connector defines the \\\"expandable connector\\\" SubControlBus that\r\nis used as sub-bus in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\nNote, this is an expandable connector which has a \\\"default\\\" set of\r\nsignals (the input/output causalities of the signals are\r\ndetermined from the connections to this bus).\r\n</p>\r\n</html>\"));\r\n\r\n      end SubControlBus;\r\n\r\n      annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains the bus definitions needed for the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\n</p>\r\n</html>\"));\r\n    end Interfaces;\r\n\r\n    model Part \"Component with sub-control bus\"\r\n\r\n      Interfaces.SubControlBus subControlBus annotation (Placement(\r\n            transformation(\r\n            origin={100,0},\r\n            extent={{-20,-20},{20,20}},\r\n            rotation=270)));\r\n      Sources.RealExpression realExpression(y=time) annotation (Placement(\r\n            transformation(extent={{-6,0},{20,20}})));\r\n      Sources.BooleanExpression booleanExpression(y=time >= 0.5) annotation (\r\n          Placement(transformation(extent={{-6,-30},{20,-10}})));\r\n    equation\r\n      connect(realExpression.y, subControlBus.myRealSignal) annotation (Line(\r\n          points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}));\r\n      connect(booleanExpression.y, subControlBus.myBooleanSignal) annotation (\r\n          Line(\r\n          points={{21.3,-20},{60,-20},{60,0},{100,0}}, color={255,0,255}));\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={Rectangle(\r\n              extent={{-100,60},{100,-60}},\r\n              fillColor={159,159,223},\r\n              fillPattern=FillPattern.Solid,\r\n              lineColor={0,0,127}), Text(\r\n              extent={{-106,124},{114,68}},\r\n              textString=\"%name\",\r\n              textColor={0,0,255})}), Documentation(info=\"<html>\r\n<p>\r\nThis model is used to demonstrate the bus usage in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a>.\r\n</p>\r\n</html>\"));\r\n    end Part;\r\n\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains utility models and bus definitions needed for the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BusUsage\\\">BusUsage</a> example.\r\n</p>\r\n</html>\"));\r\n  end BusUsage_Utilities;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains example models to demonstrate the\r\nusage of package blocks.\r\n</p>\r\n</html>\"));\r\nend Examples", "checksum": "81311ee7f012113458e134d6302856572f35b4bf", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:7-3216", "component_count": 21, "connection_count": 207, "variable_count": 49, "physical_quantity_count": 12, "parameter_count": 37, "equation_count": 102, "dependency_count": 292, "has_physical_interface": true, "interface_component_count": 12, "has_connections": true, "is_composite_model": true, "complexity_score": 783.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(realExpression.y, subControlBus.myRealSignal) annotation (Line( points={{21.3,10},{88,10},{88,6},{98,6},{98,0},{100,0}}, color={0,0,127}))", "search_keywords": ["0, 0; 1, 2.1; 2, 4.2; 3, 6.3; 4, 4.2; 6,\r\n          2.1; 6, 2.1", "0,0.85,0.8,0.1,0.1", "Acceleration", "AngularVelocity", "Integer", "Real", "SI.Acceleration", "SI.AngularVelocity", "SI.Position", "SI.Velocity", "Sources.IntegerTable", "Sources.TimeTable", "Velocity", "m/s", "m/s2", "mechanical", "rad/s", "system"]}, "components": [{"name": "s", "type_name": "SI.Position", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sSmoothed", "type_name": "SI.Position", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "vLimited", "type_name": "SI.Velocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "aLimited", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "integerTable", "type_name": "Sources.IntegerTable", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "timeTable", "type_name": "Sources.TimeTable", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "w", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "y", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformNoise2_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed1_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed2_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed3_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformNoise_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "truncatedNormalNoise_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "normalDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "weibullDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "impureRandom_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "spring.flange_b", "to_connector": "inertia2.flange_a", "condition": null}, {"from_connector": "inertia1.flange_b", "to_connector": "spring.flange_a", "condition": null}, {"from_connector": "torque.flange", "to_connector": "inertia1.flange_a", "condition": null}, {"from_connector": "kinematicPTP.y[1]", "to_connector": "integrator.u", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "inertia1.flange_b", "condition": null}, {"from_connector": "loadTorque.flange", "to_connector": "inertia2.flange_b", "condition": null}, {"from_connector": "PI.y", "to_connector": "torque.tau", "condition": null}, {"from_connector": "speedSensor.w", "to_connector": "PI.u_m", "condition": null}, {"from_connector": "integrator.y", "to_connector": "PI.u_s", "condition": null}, {"from_connector": "step.y", "to_connector": "CriticalDamping.u", "condition": null}, {"from_connector": "step.y", "to_connector": "Bessel.u", "condition": null}, {"from_connector": "Butterworth.u", "to_connector": "step.y", "condition": null}, {"from_connector": "ChebyshevI.u", "to_connector": "step.y", "condition": null}, {"from_connector": "Bessel.y", "to_connector": "der1.u", "condition": null}, {"from_connector": "der1.y", "to_connector": "der2.u", "condition": null}, {"from_connector": "der2.y", "to_connector": "der3.u", "condition": null}, {"from_connector": "step.y", "to_connector": "filter_fac5.u", "condition": null}, {"from_connector": "step.y", "to_connector": "filter_fac4.u", "condition": null}, {"from_connector": "step.y", "to_connector": "filter_fac3.u", "condition": null}, {"from_connector": "positionStep.y", "to_connector": "limit_v.u", "condition": null}, {"from_connector": "limit_v.y", "to_connector": "v.u", "condition": null}, {"from_connector": "v.y", "to_connector": "limit_a.u", "condition": null}, {"from_connector": "limit_a.y", "to_connector": "positionSmoothed.u", "condition": null}, {"from_connector": "limit_a.y", "to_connector": "a.u", "condition": null}, {"from_connector": "firstOrder1.y", "to_connector": "inverseBlockConstraints.u2", "condition": null}, {"from_connector": "inverseBlockConstraints.y2", "to_connector": "firstOrder1.u", "condition": null}, {"from_connector": "firstOrder2.y", "to_connector": "feedback.u1", "condition": null}, {"from_connector": "sine.y", "to_connector": "criticalDamping.u", "condition": null}, {"from_connector": "criticalDamping.y", "to_connector": "inverseBlockConstraints.u1", "condition": null}, {"from_connector": "sine.y", "to_connector": "feedback.u2", "condition": null}, {"from_connector": "inverseBlockConstraints.y1", "to_connector": "firstOrder2.u", "condition": null}, {"from_connector": "table2.y", "to_connector": "Not1.u", "condition": null}, {"from_connector": "And1.y", "to_connector": "Or1.u2", "condition": null}, {"from_connector": "table1.y", "to_connector": "Or1.u1", "condition": null}, {"from_connector": "Not1.y", "to_connector": "And1.u1", "condition": null}, {"from_connector": "Pre1.y", "to_connector": "And1.u2", "condition": null}, {"from_connector": "Or1.y", "to_connector": "Pre1.u", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "multiSwitch.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "multiSwitch.u[2]", "condition": null}, {"from_connector": "sine.y", "to_connector": "add.u[1]", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "add.u[2]", "condition": null}, {"from_connector": "add.y", "to_connector": "showValue.numberPort", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "product.u[1]", "condition": null}, {"from_connector": "integerConstant.y", "to_connector": "product.u[2]", "condition": null}, {"from_connector": "product.y", "to_connector": "showValue1.numberPort", "condition": null}, {"from_connector": "add.y", "to_connector": "linearDependency1.u1", "condition": null}, {"from_connector": "product.y", "to_connector": "linearDependency1.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "minMax.u[1]", "condition": null}, {"from_connector": "product.y", "to_connector": "minMax.u[2]", "condition": null}, {"from_connector": "sine.y", "to_connector": "realToInteger.u", "condition": null}, {"from_connector": "realToInteger.y", "to_connector": "sum.u[1]", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "sum.u[2]", "condition": null}, {"from_connector": "integerConstant.y", "to_connector": "sum.u[3]", "condition": null}, {"from_connector": "sum.y", "to_connector": "showValue.numberPort", "condition": null}, {"from_connector": "sum.y", "to_connector": "product.u[1]", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "product.u[2]", "condition": null}, {"from_connector": "integerConstant.y", "to_connector": "triggeredAdd.u", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "triggeredAdd.trigger", "condition": null}, {"from_connector": "triggeredAdd.y", "to_connector": "showValue2.numberPort", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "multiSwitch1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "multiSwitch1.u[2]", "condition": null}, {"from_connector": "booleanPulse1.y", "to_connector": "and1.u[1]", "condition": null}, {"from_connector": "booleanStep.y", "to_connector": "and1.u[2]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "and1.u[3]", "condition": null}, {"from_connector": "and1.y", "to_connector": "or1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "or1.u[2]", "condition": null}, {"from_connector": "or1.y", "to_connector": "xor1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "xor1.u[2]", "condition": null}, {"from_connector": "and1.y", "to_connector": "showValue.activePort", "condition": null}, {"from_connector": "or1.y", "to_connector": "showValue2.activePort", "condition": null}, {"from_connector": "xor1.y", "to_connector": "showValue3.activePort", "condition": null}, {"from_connector": "xor1.y", "to_connector": "nand1.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "nand1.u[2]", "condition": null}, {"from_connector": "nand1.y", "to_connector": "or2.u[1]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "or2.u[2]", "condition": null}, {"from_connector": "or2.y", "to_connector": "nor1.u", "condition": null}, {"from_connector": "nor1.y", "to_connector": "showValue4.activePort", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "rising.u", "condition": null}, {"from_connector": "rising.y", "to_connector": "set1.u[1]", "condition": null}, {"from_connector": "falling.y", "to_connector": "set1.u[2]", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "falling.u", "condition": null}, {"from_connector": "booleanTable.y", "to_connector": "onDelay.u", "condition": null}, {"from_connector": "booleanPulse2.y", "to_connector": "changing.u", "condition": null}, {"from_connector": "changing.y", "to_connector": "triggeredAdd.trigger", "condition": null}, {"from_connector": "triggeredAdd.y", "to_connector": "showValue1.numberPort", "condition": null}, {"from_connector": "set1.y", "to_connector": "showValue5.activePort", "condition": null}, {"from_connector": "onDelay.y", "to_connector": "showValue6.activePort", "condition": null}, {"from_connector": "sampleTriggerSet.y", "to_connector": "rSFlipFlop.S", "condition": null}, {"from_connector": "sampleTriggerReset.y", "to_connector": "rSFlipFlop.R", "condition": null}, {"from_connector": "integerTable.y", "to_connector": "integerValue.numberPort", "condition": null}, {"from_connector": "timeTable.y", "to_connector": "realValue.numberPort", "condition": null}, {"from_connector": "booleanTable.y", "to_connector": "booleanValue.activePort", "condition": null}, {"from_connector": "sine.y", "to_connector": "controlBus.realSignal1", "condition": null}, {"from_connector": "booleanStep.y", "to_connector": "controlBus.booleanSignal", "condition": null}, {"from_connector": "integerStep.y", "to_connector": "controlBus.integerSignal", "condition": null}, {"from_connector": "part.subControlBus", "to_connector": "controlBus.subControlBus", "condition": null}, {"from_connector": "gain.u", "to_connector": "controlBus.realSignal1", "condition": null}, {"from_connector": "currentSensor.i[1]", "to_connector": "realFFT.u", "condition": null}, {"from_connector": "voltageSensor.p", "to_connector": "sineVoltage3.p", "condition": null}, {"from_connector": "sineVoltage3.n", "to_connector": "sineVoltage1.p", "condition": null}, {"from_connector": "sineVoltage1.n", "to_connector": "ground.p", "condition": null}, {"from_connector": "ground.p", "to_connector": "voltageSensor.n", "condition": null}, {"from_connector": "thd1.u", "to_connector": "voltageSensor.v", "condition": null}, {"from_connector": "voltageSensor.v", "to_connector": "thdRMS.u", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "sinAM.amplitude", "condition": null}, {"from_connector": "frequency.y", "to_connector": "sinFM.f", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "cosAM.amplitude", "condition": null}, {"from_connector": "frequency.y", "to_connector": "cosFM.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "sinA.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "sinAminus.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "cosBminus.f", "condition": null}, {"from_connector": "ramp.y", "to_connector": "cosB.f", "condition": null}, {"from_connector": "cosBminus.y", "to_connector": "feedbackCos.u2", "condition": null}, {"from_connector": "cosB.y", "to_connector": "feedbackCos.u1", "condition": null}, {"from_connector": "sinA.y", "to_connector": "feedbackSin.u1", "condition": null}, {"from_connector": "sinAminus.y", "to_connector": "feedbackSin.u2", "condition": null}, {"from_connector": "feedbackCos.y", "to_connector": "rotator.u[1]", "condition": null}, {"from_connector": "feedbackSin.y", "to_connector": "rotator.u[2]", "condition": null}, {"from_connector": "rotator.y[2]", "to_connector": "integrator.u", "condition": null}, {"from_connector": "integrator.y", "to_connector": "rotator.angle", "condition": null}, {"from_connector": "integrator.y", "to_connector": "der1.u", "condition": null}, {"from_connector": "integrator.y", "to_connector": "wrapAngle.u", "condition": null}, {"from_connector": "feedbackCos.y", "to_connector": "toPolar.u[1]", "condition": null}, {"from_connector": "feedbackSin.y", "to_connector": "toPolar.u[2]", "condition": null}, {"from_connector": "sine.y", "to_connector": "signalExtrema1.u", "condition": null}, {"from_connector": "sine.y", "to_connector": "signalExtrema2.u", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "sine.amplitude", "condition": null}, {"from_connector": "frequency.y", "to_connector": "sine.f", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "product1.u2", "condition": null}, {"from_connector": "amplitude.y", "to_connector": "product2.u1", "condition": null}, {"from_connector": "sine.y", "to_connector": "product1.u1", "condition": null}, {"from_connector": "sawTooth.y", "to_connector": "product2.u2", "condition": null}, {"from_connector": "product1.y", "to_connector": "signalExtrema1.u", "condition": null}, {"from_connector": "product2.y", "to_connector": "signalExtrema2.u", "condition": null}, {"from_connector": "sine1.y", "to_connector": "add.u1", "condition": null}, {"from_connector": "pulse.y", "to_connector": "add.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "product3.u2", "condition": null}, {"from_connector": "sawTooth1.y", "to_connector": "product3.u1", "condition": null}, {"from_connector": "product3.y", "to_connector": "signalExtrema3.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "rectifiedMean.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "rootMeanSquare.u", "condition": null}, {"from_connector": "pulse.y", "to_connector": "harmonic.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "variance.u", "condition": null}, {"from_connector": "mean.y", "to_connector": "meanError.u1", "condition": null}, {"from_connector": "theoreticalMean.y", "to_connector": "meanError.u2", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[1]", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[2]", "condition": null}, {"from_connector": "variance.y", "to_connector": "varianceError.u1", "condition": null}, {"from_connector": "theoreticalVariance.y", "to_connector": "varianceError.u2", "condition": null}, {"from_connector": "noise.y", "to_connector": "standardDeviation.u", "condition": null}, {"from_connector": "standardDeviation.y", "to_connector": "sigmaError.u1", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "sigmaError.u2", "condition": null}, {"from_connector": "clock.y", "to_connector": "add.u1", "condition": null}, {"from_connector": "const.y", "to_connector": "add.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "uniformDensity.u", "condition": null}, {"from_connector": "add.y", "to_connector": "normalDensity.u", "condition": null}, {"from_connector": "add.y", "to_connector": "weibullDensity.u", "condition": null}, {"from_connector": "controller.y1", "to_connector": "motor.iq_rms1", "condition": null}, {"from_connector": "motor.phi", "to_connector": "controller.positionMeasured", "condition": null}, {"from_connector": "motor.flange", "to_connector": "gearbox.flange_a", "condition": null}, {"from_connector": "gearbox.flange_b", "to_connector": "idealGearR2T.flangeR", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "mass.flange_b", "condition": null}, {"from_connector": "speed.y", "to_connector": "slewRateLimiter.u", "condition": null}, {"from_connector": "slewRateLimiter.y", "to_connector": "controller.positionReference", "condition": null}, {"from_connector": "rodMass.flange_a", "to_connector": "idealGearR2T.flangeT", "condition": null}, {"from_connector": "rodMass.flange_b", "to_connector": "elastoGap.flange_a", "condition": null}, {"from_connector": "elastoGap.flange_b", "to_connector": "mass.flange_a", "condition": null}, {"from_connector": "whiteNoise.y", "to_connector": "Hw.u", "condition": null}, {"from_connector": "Hw.y", "to_connector": "compareToSpeed.u", "condition": null}, {"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_n", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_p", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "signalCurrent.plug_p", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "angleSensor.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "dqToThreePhase.phi", "condition": null}, {"from_connector": "groundM.p", "to_connector": "terminalBox.starpoint", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "torqueSensor.flange_a", "condition": null}, {"from_connector": "voltageQuasiRMSSensor.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "starM.plug_p", "to_connector": "voltageQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "starM.pin_n", "to_connector": "groundM.p", "condition": null}, {"from_connector": "dqToThreePhase.y", "to_connector": "signalCurrent.i", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "smpm.flange", "condition": null}, {"from_connector": "torqueSensor.flange_b", "to_connector": "inertiaLoad.flange_a", "condition": null}, {"from_connector": "signalCurrent.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "voltageQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "inertiaLoad.flange_b", "to_connector": "flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "addNoise.u2", "condition": null}, {"from_connector": "addNoise.y", "to_connector": "phi", "condition": null}, {"from_connector": "uniformNoise.y", "to_connector": "addNoise.u1", "condition": null}, {"from_connector": "id.y", "to_connector": "dqToThreePhase.d", "condition": null}, {"from_connector": "iq_rms1", "to_connector": "dqToThreePhase.q", "condition": null}, {"from_connector": "speedFeedback.y", "to_connector": "speed_PI.u", "condition": null}, {"from_connector": "positionFeedback.u2", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionReference", "to_connector": "positionFeedback.u1", "condition": null}, {"from_connector": "positionFeedback.y", "to_connector": "position_PI.u", "condition": null}, {"from_connector": "position_PI.y", "to_connector": "speedFeedback.u1", "condition": null}, {"from_connector": "speed_PI.y", "to_connector": "busdelay.u", "condition": null}, {"from_connector": "y1", "to_connector": "busdelay.y", "condition": null}, {"from_connector": "positionMeasured", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionToSpeed.y", "to_connector": "speedFeedback.u2", "condition": null}, {"from_connector": "realExpression.y", "to_connector": "subControlBus.myRealSignal", "condition": null}, {"from_connector": "booleanExpression.y", "to_connector": "subControlBus.myBooleanSignal", "condition": null}], "variables": [{"name": "PID_Controller", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Filter", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FilterWithDifferentiation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "FilterWithRiseTime", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "s", "type_name": "SI.Position", "prefixes": [], "attributes": {}, "binding_equation": "positionStep.y \"Reference position\"", "comment": null}, {"name": "sSmoothed", "type_name": "SI.Position", "prefixes": [], "attributes": {}, "binding_equation": "positionSmoothed.y \"Smoothed position\"", "comment": null}, {"name": "vLimited", "type_name": "SI.Velocity", "prefixes": [], "attributes": {}, "binding_equation": "limit_a.y \"Limited velocity\"", "comment": null}, {"name": "aLimited", "type_name": "SI.Acceleration", "prefixes": [], "attributes": {}, "binding_equation": "a.y \"Limited acceleration\"", "comment": null}, {"name": "SlewRateLimiter", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "InverseModel", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ShowLogicalSources", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "LogicalNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "RealNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "IntegerNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BooleanNetwork1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Interaction1", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "BusUsage", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Rectifier6pulseFFT", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Rectifier12pulseFFT", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TotalHarmonicDistortion", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Modulation", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "w", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "2*pi*ramp.y \"2*pi*f\"", "comment": null}, {"name": "SinCosEncoder", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CompareSincExpSine", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DemonstrateSignalExtrema", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "DemonstrateContinuousSignalExtrema", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "y", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "pulse.y \"Investigated pulse signal\"", "comment": null}, {"name": "DemoSignalCharacteristic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformNoise2_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformNoise2.y", "comment": null}, {"name": "UniformNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "manualSeed1_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed1.y", "comment": null}, {"name": "manualSeed2_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed2.y", "comment": null}, {"name": "manualSeed3_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed3.y", "comment": null}, {"name": "AutomaticSeed", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformNoise_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformNoise.y", "comment": null}, {"name": "truncatedNormalNoise_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "truncatedNormalNoise.y", "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "if time < 0.5 then 12 else 2", "comment": null}, {"name": "Distributions", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "meanError.y", "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "sigmaError.y", "comment": null}, {"name": "UniformNoiseProperties", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "NormalNoiseProperties", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformDensity.y", "comment": null}, {"name": "normalDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "normalDensity.y", "comment": null}, {"name": "weibullDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "weibullDensity.y", "comment": null}, {"name": "Densities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "impureRandom_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "impureRandom.y", "comment": null}, {"name": "ImpureGenerator", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ActuatorWithNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "vLimited", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "aLimited", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "w", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "move", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Math", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "MathInteger", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "MathBoolean", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Show", "unit": "0, 0; 1, 2.1; 2, 4.2; 3, 6.3; 4, 4.2; 6,\r\n          2.1; 6, 2.1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "mat", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "f", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "distribution", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "actuator", "unit": "0,0.85,0.8,0.1,0.1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["ActuatorNoise", "ActuatorNoiseDiagram", "And1", "Arrow", "AutomaticSeed1", "AutomaticSeed2", "Bessel", "Blocks", "Blocks.Continuous", "Blocks.Noise", "BusUsage", "BusUsage2", "BusUsage3", "BusUsage_Utilities", "BusUsage_Utilities.Interfaces", "Butterworth", "ChebyshevI", "Continuous", "CriticalDamping", "Densities", "Distributions", "DrydenContinuousTurbulence", "Electrical.Machines.SpacePhasors.Blocks", "Examples.Noise", "FillPattern", "Filter1", "FilterWithRiseTime", "Hw", "ImpureGenerator", "Interaction.Show", "Interfaces", "Internal", "InverseModel", "InverseModelSchematic", "LinePattern", "Logical", "Math", "Math.Distributions.Normal", "Math.Distributions.Uniform", "Math.Distributions.Weibull", "MathBoolean", "MathInteger", "Modelica", "Modelica.Blocks", "Modelica.Blocks.Continuous", "Modelica.Blocks.Examples", "Modelica.Blocks.Examples.BusUsage_Utilities", "Modelica.Blocks.Examples.BusUsage_Utilities.Interfaces", "Modelica.Blocks.Examples.Noise", "Modelica.Blocks.Icons", "Modelica.Blocks.Interaction", "Modelica.Blocks.Interaction.Show", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Nonlinear", "Modelica.Blocks.Sources", "Modelica.Blocks.Types", "Modelica.Blocks.Types.AnalogFilter", "Modelica.Blocks.Types.FilterType", "Modelica.Blocks.Types.Init", "Modelica.Blocks.Types.SimpleController", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Sensors", "Modelica.Electrical.Analog.Sources", "Modelica.Electrical.Machines.BasicMachines.SynchronousMachines", "Modelica.Electrical.Machines.Examples.Transformers", "Modelica.Electrical.Machines.Icons", "Modelica.Electrical.Machines.Sensors", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Machines.Utilities.ParameterRecords", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Math.Distributions.Normal", "Modelica.Math.Distributions.Uniform", "Modelica.Math.Distributions.Weibull", "Modelica.Math.Random.Utilities", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sensors", "Modelica.Mechanics.Rotational.Sources", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Sources", "Modelica.Units", "Modelica.Units.SI", "Noise", "Nonlinear", "NormalNoiseProperties1", "Not1", "Or1", "PI", "PI.limiter", "PID_controller", "PID_controller2", "Pre1", "SI", "Session3c3", "Smooth", "Sources", "StateSelect", "UniformNoise", "UniformNoiseProperties1", "Utilities", "Utilities.Parts", "W0zl2Gay", "a", "add", "addNoise", "amplitude", "and1", "angleSensor", "booleanExpression", "booleanPulse1", "booleanPulse2", "booleanStep", "booleanTable", "booleanValue", "busdelay", "changing", "clock", "compareToSpeed", "connections", "const", "constantForce", "controlBus", "controller", "cosAM", "cosB", "cosBminus", "cosFM", "criticalDamping", "currentQuasiRMSSensor", "currentSensor", "der1", "der2", "der3", "distribution", "dlr_logo", "dqToThreePhase", "elastoGap", "en.wikipedia", "erVWhiWU", "everyspec", "falling", "feedback", "feedbackCos", "feedbackSin", "filter_fac3", "filter_fac4", "filter_fac5", "firstOrder1", "firstOrder2", "frequency", "gain", "gearbox", "globalSeed", "ground", "groundM", "harmonic", "i", "id", "idealGearR2T", "impureRandom", "inertia1", "inertia2", "inertiaLoad", "integerConstant", "integerStep", "integerTable", "integerValue", "integrator", "inverseBlockConstraints", "kinematicPTP", "limit_a", "limit_v", "linearDependency1", "loadTorque", "manualSeed1", "manualSeed2", "manualSeed3", "mass", "mean", "meanError", "minMax", "motor", "multiSwitch", "multiSwitch1", "nand1", "noise", "nor1", "normalDensity", "onDelay", "or1", "or2", "part", "positionFeedback", "positionSmoothed", "positionStep", "positionToSpeed", "position_PI", "product", "product1", "product2", "product3", "pulse", "rSFlipFlop", "ramp", "realExpression", "realFFT", "realToInteger", "realValue", "rectifiedMean", "rectifier12pulseFFTresult", "rectifier6pulseFFTresult", "rising", "rodMass", "rootMeanSquare", "rotator", "rotorDisplacementAngle", "sampleTriggerReset", "sampleTriggerSet", "sawTooth", "sawTooth1", "set1", "showValue", "showValue1", "showValue2", "showValue3", "showValue4", "showValue5", "showValue6", "sigmaError", "signalCurrent", "signalExtrema1", "signalExtrema2", "signalExtrema3", "sinA", "sinAM", "sinAminus", "sinFM", "sine", "sine1", "sineVoltage1", "sineVoltage3", "slewRateLimiter", "smpm", "smpmData", "specification.modelica", "speed", "speedFeedback", "speedSensor", "speed_PI", "spring", "standardDeviation", "star", "starM", "start", "step", "stop", "subControlBus", "sum", "table1", "table2", "terminalBox", "thd1", "thdRMS", "theoreticalMean", "theoreticalSigma", "theoreticalVariance", "timeTable", "toPolar", "torque", "torqueSensor", "triggeredAdd", "truncatedNormalNoise", "uniformDensity", "uniformNoise", "uniformNoise2", "v", "variance", "varianceError", "voltageQuasiRMSSensor", "voltageSensor", "weibullDensity", "whiteNoise", "wrapAngle", "www.dlr", "www.modelica", "xor1"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier6pulse", "Modelica.Electrical.Machines.Examples.Transformers.Rectifier12pulse", "Modelica.Icons.UtilitiesPackage", "Modelica.Blocks.Icons.Block", "Modelica.Blocks.Interfaces.SO", "Modelica.Icons.Package", "Modelica.Electrical.Machines.Icons.TransientMachine", "Modelica.Icons.InterfacesPackage", "Modelica.Icons.SignalBus", "Modelica.Icons.SignalSubBus"]}
{"fqn": "Modelica.Blocks.Examples.Noise", "kind": "package", "name": "Noise", "package_path": ["Modelica", "Blocks", "Examples"], "extends": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Icons.UtilitiesPackage", "Modelica.Blocks.Icons.Block", "Modelica.Blocks.Interfaces.SO", "Modelica.Icons.Package", "Modelica.Electrical.Machines.Icons.TransientMachine"], "imports": ["Modelica.Constants.pi", "distribution"], "parameters": [{"name": "startTime", "type": "SI.Time", "default": "0.5 \"Start time of noise\"", "description": null}, {"name": "y_off", "type": "Real", "default": "-1.0 \"Output of block before startTime\"", "description": null}, {"name": "samplePeriod", "type": "SI.Period", "default": "0.02 \"Sample period of all blocks\"", "description": null}, {"name": "y_min", "type": "Real", "default": "0 \"Minimum value of band\"", "description": null}, {"name": "y_max", "type": "Real", "default": "6 \"Maximum value of band\"", "description": null}, {"name": "pMean", "type": "Real", "default": "mu \"Theoretical mean value of normal distribution\"", "description": null}, {"name": "var", "type": "Real", "default": "sigma^2 \"Theoretical variance of uniform distribution\"", "description": null}, {"name": "std", "type": "Real", "default": "sigma \"Theoretical standard deviation of normal distribution\"", "description": null}, {"name": "mu", "type": "Real", "default": "3 \"Mean value for normal distribution\"", "description": null}, {"name": "sigma", "type": "Real", "default": "1 \"Standard deviation for normal distribution\"", "description": null}, {"name": "V", "type": "SI.Velocity", "default": "140 * 0.5144 \"Airspeed of aircraft (typically 140kts during approach)\"", "description": null}, {"name": "L", "type": "SI.Length", "default": "600 * 0.3048 \"Scale length (= flight altitude)\"", "description": null}], "equations": [{"equations": ["equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2991, "start_col": 9, "end_col": 70}}, {"equations": ["connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2974, "end_line": 2991, "start_col": 11, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2973, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2895, "start_col": 9, "end_col": 68}}, {"equations": ["connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2844, "end_line": 2895, "start_col": 11, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2843, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n         when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2682, "end_line": 2685, "start_col": 7, "end_col": 19}}, {"equations": ["when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2683, "end_line": 2685, "start_col": 10, "end_col": 19}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2685, "end_line": 2685, "start_col": 14, "end_col": 18}}, {"equations": ["y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2684, "end_line": 2684, "start_col": 13, "end_col": 83}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2683, "end_line": 2683, "start_col": 10, "end_col": 14}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2682, "end_line": 2682, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, lambda, k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2612, "end_line": 2613, "start_col": 7, "end_col": 40}}, {"equations": ["y = distribution(u, lambda, k)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2613, "end_line": 2613, "start_col": 9, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2612, "end_line": 2612, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, mu, sigma)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2540, "end_line": 2541, "start_col": 7, "end_col": 40}}, {"equations": ["y = distribution(u, mu, sigma)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2541, "end_line": 2541, "start_col": 9, "end_col": 40}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2540, "end_line": 2540, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n        y = distribution(u, u_min, u_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2469, "end_line": 2470, "start_col": 7, "end_col": 43}}, {"equations": ["y = distribution(u, u_min, u_max)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2470, "end_line": 2470, "start_col": 9, "end_col": 43}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2469, "end_line": 2469, "start_col": 7, "end_col": 15}}, {"equations": ["equation\r\n      connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}))", "connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2380, "end_line": 2384, "start_col": 5, "end_col": 55}}, {"equations": ["connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}))", "connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2381, "end_line": 2384, "start_col": 7, "end_col": 55}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2380, "end_line": 2380, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}))", "connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}))", "connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}))", "connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}))", "connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}))", "connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}))", "connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}))", "connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}))", "connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}))", "connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2275, "end_line": 2295, "start_col": 5, "end_col": 53}}, {"equations": ["connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}))", "connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}))", "connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}))", "connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}))", "connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}))", "connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}))", "connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}))", "connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}))", "connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}))", "connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2276, "end_line": 2295, "start_col": 7, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2275, "end_line": 2275, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}))", "connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}))", "connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}))", "connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}))", "connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2151, "end_line": 2161, "start_col": 5, "end_col": 69}}, {"equations": ["connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}))", "connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}))", "connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}))", "connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}))", "connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2152, "end_line": 2161, "start_col": 7, "end_col": 69}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2151, "end_line": 2151, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2086, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2065, "end_line": 2086, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2064, "start_col": 5, "end_col": 13}}, {"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1982, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1961, "end_line": 1982, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1960, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.ExamplesPackage | components: Real×12, Integer×1 | connections: 62 | params: startTime, y_off, samplePeriod | units: 2, 0,0.85,0.8,0.1,0.", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1680, "end_line": 3100, "start_col": 3, "end_col": 12}, "code_text": "package Noise \"Library of examples to demonstrate the usage of package Blocks.Noise\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n\r\n    model UniformNoise\r\n      \"Demonstrates the most simple usage of the UniformNoise block\"\r\n      extends Modelica.Icons.Example;\r\n      output Real uniformNoise2_y = uniformNoise2.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{-20,40},{0,60}})));\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise1(\r\n        samplePeriod=0.02,\r\n        y_min=-1,\r\n        y_max=3) annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise2(\r\n        samplePeriod=0.02, y_min=-1, y_max=3,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=10)\r\n        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates the most simple usage of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Noise.UniformNoise</a>\r\nblock:\r\n</p>\r\n\r\n<ul>\r\n<li> <strong>globalSeed</strong> is the <a href=\\\"modelica://Modelica.Blocks.Noise.GlobalSeed\\\">Noise.GlobalSeed</a>\r\n     block with default options (just dragged from sublibrary Noise).</li>\r\n<li> <strong>uniformNoise1</strong> is an instance of\r\n     <a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Noise.UniformNoise</a> with\r\n     samplePeriod = 0.02 s and a Uniform distribution with limits y_min=-1, y_max=3.</li>\r\n<li> <strong>uniformNoise2</strong> is identical to uniformNoise1 with the exception that\r\n      useAutomaticLocalSeed=false and fixedLocalSeed=10.</li>\r\n</ul>\r\n\r\n<p>\r\nAt every 0.02 seconds a time event occurs and a uniform random number in the band between\r\n-1 ... 3 is drawn. This random number is held constant until the next sample instant.\r\nThe result of a simulation is shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoise.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoise;\r\n\r\n    model AutomaticSeed\r\n      \"Demonstrates noise with startTime and automatic local seed for UniformNoise\"\r\n       extends Modelica.Icons.Example;\r\n       parameter SI.Time startTime = 0.5 \"Start time of noise\";\r\n       parameter Real y_off = -1.0 \"Output of block before startTime\";\r\n\r\n       output Real manualSeed1_y = manualSeed1.y;\r\n       output Real manualSeed2_y = manualSeed2.y;\r\n       output Real manualSeed3_y = manualSeed3.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=false, enableNoise=true)\r\n        annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed1(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed2(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));\r\n      Modelica.Blocks.Noise.UniformNoise automaticSeed3(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off, y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed1(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,y_min=-1, y_max=3,\r\n        enableNoise=true)\r\n        annotation (Placement(transformation(extent={{0,20},{20,40}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed2(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=2,y_min=-1, y_max=3)\r\n        annotation (Placement(transformation(extent={{0,-20},{20,0}})));\r\n      Modelica.Blocks.Noise.UniformNoise manualSeed3(\r\n        samplePeriod=0.01,\r\n        startTime=startTime,\r\n        y_off=y_off,\r\n        useAutomaticLocalSeed=false,y_min=-1, y_max=3,\r\n        fixedLocalSeed=3)\r\n        annotation (Placement(transformation(extent={{0,-60},{20,-40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates manual and automatic seed selection of\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">UniformNoise</a> blocks, as well\r\nas starting the noise at startTime = 0.5 s with an output value of y = -1 before this\r\ntime. All noise blocks in this example generate uniform noise in the\r\nband y_min=-1 .. y_max=3 with samplePeriod = 0.01 s.\r\n</p>\r\n\r\n<p>\r\nThe blocks automaticSeed1, automaticSeed2, automaticSeed3 use the default\r\noption to automatically initialize the pseudo random number generators\r\nof the respective block. As a result, different noise is generated, see next\r\ndiagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/AutomaticSeed1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe blocks manualSeed1, manualSeed2, manualSeed3 use manual selection of the local seed\r\n(useAutomaticLocalSeed = false). They use a fixedLocalSeed of 1, 2, and 3 respectively.\r\nAgain, different noise is generated, see next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/AutomaticSeed2.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nTry to set fixedLocalSeed = 1 in block manualSeed2. As a result, the blocks manualSeed1 and\r\nmanualSeed2 will produce exactly the same noise.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end AutomaticSeed;\r\n\r\n    model Distributions\r\n      \"Demonstrates noise with different types of distributions\"\r\n      extends Modelica.Icons.Example;\r\n      parameter SI.Period samplePeriod=0.02\r\n        \"Sample period of all blocks\";\r\n      parameter Real y_min = -1 \"Minimum value of band for random values\";\r\n      parameter Real y_max = 3 \"Maximum value of band for random values\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=\r\n            false)\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      output Real uniformNoise_y =         uniformNoise.y;\r\n      output Real truncatedNormalNoise_y = truncatedNormalNoise.y;\r\n\r\n      Integer n=if time < 0.5 then 12 else 2;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,\r\n        samplePeriod=samplePeriod,\r\n        y_min=y_min,\r\n        y_max=y_max)\r\n        annotation (Placement(transformation(extent={{-60,70},{-40,90}})));\r\n      Modelica.Blocks.Noise.TruncatedNormalNoise truncatedNormalNoise(\r\n        useAutomaticLocalSeed=false,\r\n        fixedLocalSeed=1,\r\n        samplePeriod=samplePeriod,\r\n        y_min=y_min,\r\n        y_max=y_max)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates different noise distributions methods that can be selected\r\nfor a Noise block. Both noise blocks use samplePeriod = 0.02 s, y_min=-1, y_max=3, and have\r\nidentical fixedLocalSeed. This means that the same random numbers are drawn for the blocks.\r\nHowever, the random numbers are differently transformed according to the selected distributions\r\n(uniform and truncated normal distribution), and therefore the blocks have different output values.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/Distributions.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nAs can be seen, uniform noise is distributed evenly between -1 and 3, and\r\ntruncated normal distribution has more values centered around the mean value 1.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Distributions;\r\n\r\n    model UniformNoiseProperties\r\n      \"Demonstrates the computation of properties for uniformly distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real y_min = 0 \"Minimum value of band\";\r\n      parameter Real y_max = 6 \"Maximum value of band\";\r\n      parameter Real pMean = (y_min + y_max)/2\r\n        \"Theoretical mean value of uniform distribution\";\r\n      parameter Real var =  (y_max - y_min)^2/12\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sqrt(var)\r\n        \"Theoretical standard deviation of uniform distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise noise(\r\n        samplePeriod=0.001,\r\n        y_min=y_min,\r\n        y_max=y_max,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Blocks.Noise.UniformNoise</a> block\r\nusing a <strong>uniform</strong> random number distribution.\r\nBlock &quot;noise&quot; defines a band of 0 .. 6 and from the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoiseProperties1.png\\\"/>\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a uniform noise in the range 0 .. 6 is 3 and its variance is\r\n3 as well. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a uniform\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoiseProperties;\r\n\r\n    model NormalNoiseProperties\r\n      \"Demonstrates the computation of properties for normally distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real mu = 3 \"Mean value for normal distribution\";\r\n      parameter Real sigma = 1 \"Standard deviation for normal distribution\";\r\n      parameter Real pMean = mu \"Theoretical mean value of normal distribution\";\r\n      parameter Real var =  sigma^2\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sigma\r\n        \"Theoretical standard deviation of normal distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.NormalNoise noise(\r\n        samplePeriod=0.001,\r\n        mu=mu,\r\n        sigma=sigma,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.NormalNoise\\\">Blocks.Noise.NormalNoise</a> block\r\nusing a <strong>normal</strong> random number distribution with mu=3, sigma=1.\r\nFrom the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/NormalNoiseProperties1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a normal noise with mu=3 is 3 and the variance of normal noise\r\nis sigma^2, so 1. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a normal\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end NormalNoiseProperties;\r\n\r\n    model Densities\r\n      \"Demonstrates how to compute distribution densities (= Probability Density Function)\"\r\n      extends Modelica.Icons.Example;\r\n      output Real uniformDensity_y = uniformDensity.y;\r\n      output Real normalDensity_y = normalDensity.y;\r\n      output Real weibullDensity_y = weibullDensity.y;\r\n\r\n      Utilities.UniformDensity\r\n                        uniformDensity(u_min=-4, u_max=4)\r\n        annotation (Placement(transformation(extent={{10,20},{30,40}})));\r\n      Modelica.Blocks.Sources.ContinuousClock clock\r\n    annotation (Placement(transformation(extent={{-80,10},{-60,30}})));\r\n      Modelica.Blocks.Sources.Constant const(k=-10)\r\n    annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));\r\n      Modelica.Blocks.Math.Add add\r\n    annotation (Placement(transformation(extent={{-46,-10},{-26,10}})));\r\n      Utilities.NormalDensity\r\n                        normalDensity(mu=0, sigma=2)\r\n        annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n      Utilities.WeibullDensity\r\n                        weibullDensity(lambda=3, k=1.5)\r\n        annotation (Placement(transformation(extent={{10,-40},{30,-20}})));\r\n    equation\r\n      connect(clock.y, add.u1) annotation (Line(\r\n      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}}, color={0,0,127}));\r\n      connect(const.y, add.u2) annotation (Line(\r\n      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}}, color={0,0,127}));\r\n      connect(add.y, uniformDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,30},{8,30}}, color={0,0,127}));\r\n      connect(add.y, normalDensity.u) annotation (Line(\r\n      points={{-25,0},{8,0}}, color={0,0,127}));\r\n      connect(add.y, weibullDensity.u) annotation (Line(\r\n      points={{-25,0},{-14,0},{-14,-30},{8,-30}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=2e-2),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to compute the probability density functions (pdfs) of\r\nvarious distributions.\r\nIn the following diagram simulations results for the uniform, normal, and Weibull distribution\r\nare shown. The outputs of the blocks are the pdfs that are plotted over one of the\r\ninputs:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/Densities.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Densities;\r\n\r\n    model ImpureGenerator\r\n      \"Demonstrates the usage of the impure random number generator\"\r\n      extends Modelica.Icons.Example;\r\n      output Real impureRandom_y = impureRandom.y;\r\n\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=\r\n            false) annotation (Placement(transformation(extent={{20,40},{40,60}})));\r\n\r\n      Utilities.ImpureRandom impureRandom(samplePeriod=0.01)\r\n        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));\r\n     annotation (experiment(StopTime=2), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to use the\r\n<a href=\\\"modelica://Modelica.Math.Random.Utilities.impureRandom\\\">impureRandom(..)</a> function\r\nto generate random values at event instants. Typically, this approach is only\r\nused when implementing an own, specialized block that needs a random number\r\ngenerator. Simulation results are shown in the next figure:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ImpureGenerator.png\\\">\r\n</blockquote>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end ImpureGenerator;\r\n\r\n    model ActuatorWithNoise\r\n      \"Demonstrates how to model measurement noise in an actuator\"\r\n    extends Modelica.Icons.Example;\r\n      Utilities.Parts.MotorWithCurrentControl motor\r\n        annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));\r\n      Utilities.Parts.Controller controller\r\n        annotation (Placement(transformation(extent={{-60,40},{-80,60}})));\r\n      Modelica.Blocks.Sources.Step speed(startTime=0.5, height=50)\r\n        annotation (Placement(transformation(extent={{20,40},{0,60}})));\r\n      Modelica.Mechanics.Rotational.Components.Gearbox gearbox(\r\n        lossTable=[0,0.85,0.8,0.1,0.1],\r\n        c=1e6,\r\n        d=1e4,\r\n        ratio=10,\r\n        w_rel(fixed=true),\r\n        b=0.0017453292519943,\r\n        phi_rel(fixed=true))\r\n        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n      Modelica.Mechanics.Translational.Components.IdealGearR2T idealGearR2T(ratio=\r\n            300) annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));\r\n      Modelica.Mechanics.Translational.Components.Mass mass(m=100)\r\n        annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n      Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(\r\n          f_constant=10000) annotation (Placement(transformation(\r\n            extent={{10,-10},{-10,10}},\r\n            origin={86,0})));\r\n      Modelica.Blocks.Nonlinear.SlewRateLimiter slewRateLimiter(Rising=50)\r\n        annotation (Placement(transformation(extent={{-20,40},{-40,60}})));\r\n      Modelica.Mechanics.Translational.Components.Mass rodMass(m=3)\r\n        annotation (Placement(transformation(extent={{-4,-10},{16,10}})));\r\n      Modelica.Mechanics.Translational.Components.SpringDamper elastoGap(c=1e8, d=\r\n            1e5,\r\n        v_rel(fixed=true),\r\n        s_rel(fixed=true))\r\n                 annotation (Placement(transformation(extent={{22,-10},{42,10}})));\r\n      inner .Modelica.Blocks.Noise.GlobalSeed globalSeed(enableNoise=true) annotation (Placement(transformation(extent={{60,60},{80,80}})));\r\n    equation\r\n      connect(controller.y1, motor.iq_rms1) annotation (Line(\r\n          points={{-81,50},{-94,50},{-94,6},{-88,6}}, color={0,0,127}));\r\n      connect(motor.phi, controller.positionMeasured) annotation (Line(\r\n          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}}, color={0,0,127}));\r\n      connect(motor.flange, gearbox.flange_a) annotation (Line(\r\n          points={{-66,0},{-60,0}}));\r\n      connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(\r\n          points={{-40,0},{-32,0}}));\r\n      connect(constantForce.flange, mass.flange_b) annotation (Line(\r\n          points={{76,0},{70,0}}, color={0,127,0}));\r\n      connect(speed.y, slewRateLimiter.u) annotation (Line(\r\n          points={{-1,50},{-18,50}}, color={0,0,127}));\r\n      connect(slewRateLimiter.y, controller.positionReference) annotation (Line(\r\n          points={{-41,50},{-50,50},{-50,56},{-58,56}}, color={0,0,127}));\r\n      connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(\r\n          points={{-4,0},{-12,0}}, color={0,127,0}));\r\n      connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(\r\n          points={{16,0},{22,0}}, color={0,127,0}));\r\n      connect(elastoGap.flange_b, mass.flange_a) annotation (Line(\r\n          points={{42,0},{50,0}}, color={0,127,0}));\r\n      annotation (\r\n        experiment(StopTime=8, Interval = 0.01, Tolerance=1e-005),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example models an actuator with a noisy sensor (which is in the motor component):\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ActuatorNoiseDiagram.png\\\"/>\r\n</div>\r\n\r\n<p>\r\nThe drive train consists of a synchronous motor with a current controller (= motor) and a gear box.\r\nThe gearbox drives a rod through a linear translation model. Softly attached to the rod is\r\nanother mass representing the actual actuator (= mass). The actuator is loaded with a constant force.\r\n</p>\r\n\r\n<p>\r\nThe whole drive is steered by a rate limited speed step command through a controller model.\r\nIn the motor the shaft angle is measured and this measurement signal is modelled by adding\r\nadditive noise to the motor angle.\r\n</p>\r\n\r\n<p>\r\nIn the following figure, the position of the actuator and the motor output torque are\r\nshown with and without noise. The noise is not very strong, such that it has no visible effect\r\non the position of the actuator. The effect of the noise can be seen in the motor torque.\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/ActuatorNoise.png\\\"/>\r\n</div>\r\n\r\n<p>\r\nNote, the noise in all components can be easily switched off by setting parameter\r\nenableNoise = false in the globalSeed component.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end ActuatorWithNoise;\r\n\r\n    model DrydenContinuousTurbulence\r\n      \"Demonstrates how to model wind turbulence for aircraft with the BandLimitedWhiteNoise block (a simple model of vertical Dryden gust speed at low altitudes < 1000 ft)\"\r\n      extends Modelica.Icons.Example;\r\n\r\n      import Modelica.Constants.pi;\r\n\r\n      parameter SI.Velocity V =            140 * 0.5144\r\n        \"Airspeed of aircraft (typically 140kts during approach)\";\r\n      parameter SI.Velocity sigma = 0.1 *   30 * 0.5144\r\n        \"Turbulence intensity (=0.1 * wind at 20 ft, typically 30 kt)\";\r\n      parameter SI.Length   L =            600 * 0.3048\r\n        \"Scale length (= flight altitude)\";\r\n\r\n      Modelica.Blocks.Continuous.TransferFunction Hw(b=sigma*sqrt(L/pi/V)*{sqrt(3)*\r\n            L/V,1}, a={L^2/V^2,2*L/V,1},\r\n        initType=Modelica.Blocks.Types.Init.InitialState)\r\n        \"Transfer function of vertical turbulence speed according to MIL-F-8785C\"\r\n        annotation (Placement(transformation(extent={{-10,0},{10,20}})));\r\n      Modelica.Blocks.Noise.BandLimitedWhiteNoise whiteNoise(samplePeriod=\r\n           0.005)\r\n        annotation (Placement(transformation(extent={{-60,0},{-40,20}})));\r\n      constant SI.Velocity unitVelocity = 1 annotation(HideResult=true);\r\n      Modelica.Blocks.Math.Gain compareToSpeed(k=unitVelocity/V)\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n    equation\r\n      connect(whiteNoise.y, Hw.u) annotation (Line(\r\n          points={{-39,10},{-12,10}}, color={0,0,127}));\r\n      connect(Hw.y, compareToSpeed.u) annotation (Line(\r\n          points={{11,10},{38,10}}, color={0,0,127}));\r\n      annotation (experiment(StopTime=100),\r\n     Documentation(info=\"<html>\r\n<p>\r\nThis example shows how to use the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\\\">BandLimitedWhiteNoise</a>\r\nto feed a Dryden continuous turbulence model. This model is used to describe turbulent wind at low altitudes\r\nthat varies randomly in space\r\n(see also <a href=\\\"https://en.wikipedia.org/wiki/Continuous_gusts\\\">wikipedia</a>).\r\n</p>\r\n\r\n<h4>Turbulence model for vertical gust speed at low altitudes</h4>\r\n\r\n<p>\r\nThe turbulence model of the Dryden form is defined by the power spectral density of the vertical turbulent velocity:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/equation-erVWhiWU.png\\\" alt=\\\"Phi_w(Omega)=sigma^2*L_w/pi*((1+3*(L_w*Omega)^2)/(1+(L_w*Omega)^2)^2)\\\"/>\r\n</div>\r\n\r\n<p>\r\nThe spectrum is parametrized with the following parameters:\r\n</p>\r\n\r\n<ul>\r\n<li> Lw is the turbulence scale.<br>In low altitudes, it is equal to the flight altitude.</li>\r\n<li> sigma is the turbulence intensity.<br>In low altitudes, it is equal to 1/10 of the\r\n     wind speed at 20 ft altitude, which is 30 kts for medium turbulence.</li>\r\n<li> Omega is the spatial frequency.<br> The turbulence model is thus defined in space and the aircraft experiences turbulence as it flies through the defined wind field.</li>\r\n<li> Omega = s/V will be used to transform the spatial definition into a temporal definition, which can be realized as a state space system.</li>\r\n<li> V is the airspeed of the aircraft.<br>It is approximately 150 kts during the approach (i.e. at low altitudes).</li>\r\n</ul>\r\n\r\n<p>\r\nUsing spectral factorization and a fixed airspeed V of the aircraft, a concrete forming filter for the vertical turbulence can be found as\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/equation-W0zl2Gay.png\\\" alt=\\\"H_w(s) = sigma*sqrt(L_w/(pi*V)) * ((1 + sqrt(3)*L_w/V*s) / (1+L_w/V*s)^2)\\\"/>,\r\n</div>\r\n\r\n<p>\r\nfor which V * (H_w(i Omega/V) * H_w(-i Omega/V) = Phi_w(Omega).\r\n</p>\r\n\r\n<h4>The input to the filter</h4>\r\n\r\n<p>\r\nThe input to the filter is white noise with a normal distribution, zero mean, and a power spectral density of 1.\r\nThat means, for a sampling time of 1s, it is parameterized with mean=0 and variance=1.\r\nHowever, in order to account for the change of noise power due to sampling, the noise must be scaled with sqrt(samplePeriod).\r\nThis is done automatically in the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\\\">BandLimitedWhiteNoise</a> block.\r\n</p>\r\n\r\n<h4>Example output</h4>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/DrydenContinuousTurbulence.png\\\"/>\r\n</div>\r\n\r\n<h4>Reference</h4>\r\n\r\n<ol>\r\n<li>Dryden Wind Turbulence model in US military standard\r\n    <a href=\\\"http://everyspec.com/MIL-SPECS/MIL-SPECS-MIL-F/MIL-F-8785C_5295/\\\">MIL-F-8785</a>.</li>\r\n</ol>\r\n</html>\"));\r\n    end DrydenContinuousTurbulence;\r\n\r\n    package Utilities \"Library of utility models used in the examples\"\r\n      extends Modelica.Icons.UtilitiesPackage;\r\n\r\n      block UniformDensity \"Calculates the density of a uniform distribution\"\r\n        import distribution = Modelica.Math.Distributions.Uniform.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real u_min \"Lower limit of u\";\r\n        parameter Real u_max \"Upper limit of u\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the uniform probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, u_min, u_max);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a uniform distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Uniform.density\\\">Math.Distributions.Uniform.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end UniformDensity;\r\n\r\n      block NormalDensity \"Calculates the density of a normal distribution\"\r\n        import distribution = Modelica.Math.Distributions.Normal.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real mu \"Expectation (mean) value of the normal distribution\";\r\n        parameter Real sigma \"Standard deviation of the normal distribution\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the normal probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, mu, sigma);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a normal distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Normal.density\\\">Math.Distributions.Normal.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end NormalDensity;\r\n\r\n      block WeibullDensity \"Calculates the density of a Weibull distribution\"\r\n        import distribution = Modelica.Math.Distributions.Weibull.density;\r\n        extends Modelica.Blocks.Icons.Block;\r\n\r\n        parameter Real lambda(min=0)\r\n          \"Scale parameter of the Weibull distribution\";\r\n        parameter Real k(min=0) \"Shape parameter of the Weibull distribution\";\r\n\r\n        Modelica.Blocks.Interfaces.RealInput u \"Real input signal\" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n        Modelica.Blocks.Interfaces.RealOutput y\r\n          \"Density of the input signal according to the Weibull probability density function\"\r\n          annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n      equation\r\n        y = distribution(u, lambda, k);\r\n\r\n        annotation (Icon(graphics={\r\n              Polygon(\r\n                points={{0,94},{-8,72},{8,72},{0,94}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n              Line(points={{0,76},{0,-72}}, color={192,192,192}),\r\n              Line(points={{-86,-82},{72,-82}},\r\n                                            color={192,192,192}),\r\n              Polygon(\r\n                points={{92,-82},{70,-74},{70,-90},{92,-82}},\r\n                lineColor={192,192,192},\r\n                fillColor={192,192,192},\r\n                fillPattern=FillPattern.Solid),\r\n          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,\r\n                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{\r\n                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},\r\n                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},\r\n                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{\r\n                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,\r\n                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,\r\n                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,\r\n                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,\r\n                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,\r\n                -75.8975},{70,-75.953}},\r\n                smooth=Smooth.Bezier)}), Documentation(info=\"<html>\r\n<p>\r\nThis block determines the probability density y of a Weibull distribution for the given input signal u\r\n(for details of this density function see\r\n<a href=\\\"modelica://Modelica.Math.Distributions.Weibull.density\\\">Math.Distributions.Weibull.density</a>).\r\n</p>\r\n\r\n<p>\r\nThis block is demonstrated in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.Densities\\\">Examples.Noise.Densities</a> .\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end WeibullDensity;\r\n\r\n      block ImpureRandom\r\n        \"Block generating random numbers with the impure random number generator\"\r\n        extends Modelica.Blocks.Interfaces.SO;\r\n\r\n        parameter SI.Period samplePeriod\r\n          \"Sample period for random number generation\";\r\n\r\n      protected\r\n         outer Modelica.Blocks.Noise.GlobalSeed globalSeed;\r\n\r\n      equation\r\n         when {initial(), sample(samplePeriod,samplePeriod)} then\r\n            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure);\r\n         end when;\r\n        annotation (Documentation(info=\"<html>\r\n<p>\r\nThis block demonstrates how to implement a block using the impure\r\nrandom number generator. This block is used in the example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ImpureGenerator\\\">Examples.Noise.ImpureGenerator</a>.\r\n</p>\r\n</html>\",       revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n      end ImpureRandom;\r\n\r\n      package Parts \"Parts for use in the ActuatorWithNoise examples\"\r\n        extends Modelica.Icons.Package;\r\n\r\n        model MotorWithCurrentControl\r\n          \"Synchronous machine with current controller and measurement noise\"\r\n          extends Modelica.Electrical.Machines.Icons.TransientMachine;\r\n          constant Integer m=3 \"Number of phases\";\r\n          parameter SI.Voltage VNominal=100\r\n            \"Nominal RMS voltage per phase\";\r\n          parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n          parameter SI.Frequency f=50 \"Actual frequency\";\r\n          parameter SI.Time tRamp=1 \"Frequency ramp\";\r\n          parameter SI.Torque TLoad=181.4 \"Nominal load torque\";\r\n          parameter SI.Time tStep=1.2 \"Time of load torque step\";\r\n          parameter SI.Inertia JLoad=0.29 \"Load's moment of inertia\";\r\n\r\n          Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\r\n            smpm(\r\n            p=smpmData.p,\r\n            fsNominal=smpmData.fsNominal,\r\n            Rs=smpmData.Rs,\r\n            TsRef=smpmData.TsRef,\r\n            Lszero=smpmData.Lszero,\r\n            Lssigma=smpmData.Lssigma,\r\n            Jr=smpmData.Jr,    Js=smpmData.Js,\r\n            frictionParameters=smpmData.frictionParameters,\r\n            wMechanical(fixed=true),\r\n            statorCoreParameters=smpmData.statorCoreParameters,\r\n            strayLoadParameters=smpmData.strayLoadParameters,\r\n            VsOpenCircuit=smpmData.VsOpenCircuit,\r\n            Lmd=smpmData.Lmd,\r\n            Lmq=smpmData.Lmq,\r\n            useDamperCage=smpmData.useDamperCage,\r\n            Lrsigmad=smpmData.Lrsigmad,\r\n            Lrsigmaq=smpmData.Lrsigmaq,\r\n            Rrd=smpmData.Rrd,\r\n            Rrq=smpmData.Rrq,\r\n            TrRef=smpmData.TrRef,\r\n            permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,\r\n            phiMechanical(fixed=true),\r\n            TsOperational=293.15,\r\n            alpha20s=smpmData.alpha20s,\r\n            TrOperational=293.15,\r\n            alpha20r=smpmData.alpha20r)\r\n            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n          Modelica.Electrical.Polyphase.Sources.SignalCurrent signalCurrent(final m=m)\r\n            annotation (Placement(transformation(\r\n                origin={-10,50},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Polyphase.Basic.Star star(final m=m)\r\n            annotation (Placement(transformation(extent={{-10,80},{-30,100}})));\r\n          Modelica.Electrical.Analog.Basic.Ground ground\r\n            annotation (Placement(transformation(\r\n                origin={-50,90},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.DQToThreePhase dqToThreePhase(\r\n              p=smpm.p)\r\n            annotation (Placement(transformation(extent={{-50,40},{-30,60}})));\r\n          Modelica.Electrical.Polyphase.Basic.Star starM(final m=m) annotation (Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=180,\r\n                origin={-60,-10})));\r\n          Modelica.Electrical.Analog.Basic.Ground groundM\r\n            annotation (Placement(transformation(\r\n                origin={-80,-28},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(\r\n              terminalConnection=\"Y\") annotation (Placement(transformation(extent={{-20,-30},\r\n                    {0,-10}})));\r\n          Modelica.Electrical.Machines.Sensors.RotorDisplacementAngle rotorDisplacementAngle(p=smpm.p)\r\n            annotation (Placement(transformation(\r\n                origin={20,-40},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={10,0})));\r\n          Modelica.Mechanics.Rotational.Sensors.TorqueSensor torqueSensor annotation (\r\n              Placement(transformation(\r\n                extent={{10,10},{-10,-10}},\r\n                rotation=180,\r\n                origin={50,-40})));\r\n          Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={30,0})));\r\n          Modelica.Electrical.Machines.Sensors.VoltageQuasiRMSSensor voltageQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=180,\r\n                origin={-30,-10})));\r\n          Modelica.Electrical.Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                origin={-10,0},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=0.29)\r\n            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));\r\n          parameter\r\n            Modelica.Electrical.Machines.Utilities.ParameterRecords.SM_PermanentMagnetData\r\n            smpmData(useDamperCage=false) \"Data for motor\"\r\n            annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n          Modelica.Blocks.Sources.Constant id(k=0)\r\n            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n          Modelica.Blocks.Interfaces.RealInput iq_rms1 annotation (Placement(\r\n                transformation(extent={{-140,40},{-100,80}}),iconTransformation(extent={{-140,40},\r\n                    {-100,80}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange\r\n            \"Right flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Blocks.Interfaces.RealOutput phi(unit=\"rad\")\r\n            \"Absolute angle of flange as output signal\" annotation (Placement(\r\n                transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                origin={110,80}), iconTransformation(extent={{40,70},{60,90}})));\r\n          output Real phi_motor(unit=\"rad\", displayUnit=\"deg\")=angleSensor.phi\r\n            \"Rotational position\";\r\n          output Real w(unit=\"rad/s\")=speedSensor.w \"Rotational speed\";\r\n          Modelica.Blocks.Math.Add addNoise\r\n            annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n          .Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n            samplePeriod=1/200,\r\n            y_min=-0.01,\r\n            y_max=0.01) annotation (Placement(transformation(extent={{26,76},{46,96}})));\r\n        equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}));\r\n          connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}));\r\n          connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}));\r\n          connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}));\r\n          connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}));\r\n          connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}));\r\n          connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}));\r\n          connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}));\r\n          connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}));\r\n          connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}));\r\n          connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}));\r\n          connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}));\r\n          connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}));\r\n          connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}));\r\n          connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}));\r\n          connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}));\r\n          connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}));\r\n          connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}));\r\n          connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}));\r\n          connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}));\r\n          connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}));\r\n          annotation (\r\n            Documentation(info=\"<html>\r\n<p>\r\nA synchronous machine with permanent magnets, current controller and\r\nmeasurement noise of &plusmn;0.01 rad accelerates a quadratic speed dependent load from standstill.\r\nThe rms values of d- and q-current in rotor fixed coordinate system are converted to three-phase currents,\r\nand fed to the machine. The result shows that the torque is influenced by the q-current,\r\nwhereas the stator voltage is influenced by the d-current.\r\n</p>\r\n\r\n<p>\r\nDefault machine parameters of model\r\n<a href=\\\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\\\">SM_PermanentMagnet</a>\r\nare used.\r\n</p>\r\n\r\n<p>\r\nThis motor is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\",         revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n                    100}}), graphics={Rectangle(\r\n                  extent={{40,50},{-100,100}},\r\n                  fillColor={255,170,85},\r\n                  fillPattern=FillPattern.Solid,\r\n                  pattern=LinePattern.None), Text(\r\n                extent={{-150,150},{150,110}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n        end MotorWithCurrentControl;\r\n\r\n        model Controller \"Simple position controller for actuator\"\r\n          extends Modelica.Blocks.Icons.Block;\r\n\r\n          Modelica.Blocks.Continuous.PI speed_PI(k=10, T=5e-2,\r\n            initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{38,-10},{58,10}})));\r\n          Modelica.Blocks.Math.Feedback speedFeedback\r\n            annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n          Modelica.Blocks.Continuous.Derivative positionToSpeed(initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n              T=0.01)\r\n            annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionMeasured\r\n            \"Position signal of motor\"\r\n            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionReference\r\n            \"Reference position\"\r\n            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));\r\n          Modelica.Blocks.Interfaces.RealOutput y1\r\n            \"Connector of Real output signal\"\r\n            annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Continuous.PI position_PI(T=5e-1, k=3,\r\n            initType=Modelica.Blocks.Types.Init.InitialState)\r\n            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));\r\n          Modelica.Blocks.Math.Feedback positionFeedback\r\n            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));\r\n          Modelica.Blocks.Continuous.FirstOrder busdelay(T=1e-3, initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{68,-10},{88,10}})));\r\n        equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}));\r\n          connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}));\r\n          connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}));\r\n          connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}));\r\n          connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}));\r\n          connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}));\r\n          connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}));\r\n          annotation (Icon(coordinateSystem(\r\n                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n                Text(\r\n                  extent={{-40,50},{40,-30}},\r\n                  textColor={0,0,255},\r\n                  textString=\"PI\")}),\r\n            Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",         info=\"<html>\r\n<p>\r\nA simple position controller for a drive system.\r\nThis controller is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n        end Controller;\r\n      annotation (Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",       info=\"<html>\r\n<p>\r\nParts used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n      end Parts;\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains utility models that are used for the examples.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end Utilities;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis package contains various example models that demonstrates how\r\nto utilize the blocks from sublibrary\r\n<a href=\\\"modelica://Modelica.Blocks.Noise\\\">Blocks.Noise</a>.\r\n</p>\r\n</html>\",   revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n  end Noise", "checksum": "d307afb5338751d01cb844f9e9236c564f1585a6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:1680-3100", "component_count": 13, "connection_count": 62, "variable_count": 21, "physical_quantity_count": 2, "parameter_count": 12, "equation_count": 36, "dependency_count": 124, "has_physical_interface": true, "interface_component_count": 12, "has_connections": true, "is_composite_model": true, "complexity_score": 254.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(speedFeedback.y, speed_PI.u) annotation (Line( points={{29,0},{36,0}}, color={0,0,127}))", "search_keywords": ["0,0.85,0.8,0.1,0.1", "Integer", "Real", "system"]}, "components": [{"name": "uniformNoise2_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed1_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed2_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "manualSeed3_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformNoise_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "truncatedNormalNoise_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "uniformDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "normalDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "weibullDensity_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "impureRandom_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "noise.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "variance.u", "condition": null}, {"from_connector": "mean.y", "to_connector": "meanError.u1", "condition": null}, {"from_connector": "theoreticalMean.y", "to_connector": "meanError.u2", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[1]", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[2]", "condition": null}, {"from_connector": "variance.y", "to_connector": "varianceError.u1", "condition": null}, {"from_connector": "theoreticalVariance.y", "to_connector": "varianceError.u2", "condition": null}, {"from_connector": "noise.y", "to_connector": "standardDeviation.u", "condition": null}, {"from_connector": "standardDeviation.y", "to_connector": "sigmaError.u1", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "sigmaError.u2", "condition": null}, {"from_connector": "clock.y", "to_connector": "add.u1", "condition": null}, {"from_connector": "const.y", "to_connector": "add.u2", "condition": null}, {"from_connector": "add.y", "to_connector": "uniformDensity.u", "condition": null}, {"from_connector": "add.y", "to_connector": "normalDensity.u", "condition": null}, {"from_connector": "add.y", "to_connector": "weibullDensity.u", "condition": null}, {"from_connector": "controller.y1", "to_connector": "motor.iq_rms1", "condition": null}, {"from_connector": "motor.phi", "to_connector": "controller.positionMeasured", "condition": null}, {"from_connector": "motor.flange", "to_connector": "gearbox.flange_a", "condition": null}, {"from_connector": "gearbox.flange_b", "to_connector": "idealGearR2T.flangeR", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "mass.flange_b", "condition": null}, {"from_connector": "speed.y", "to_connector": "slewRateLimiter.u", "condition": null}, {"from_connector": "slewRateLimiter.y", "to_connector": "controller.positionReference", "condition": null}, {"from_connector": "rodMass.flange_a", "to_connector": "idealGearR2T.flangeT", "condition": null}, {"from_connector": "rodMass.flange_b", "to_connector": "elastoGap.flange_a", "condition": null}, {"from_connector": "elastoGap.flange_b", "to_connector": "mass.flange_a", "condition": null}, {"from_connector": "whiteNoise.y", "to_connector": "Hw.u", "condition": null}, {"from_connector": "Hw.y", "to_connector": "compareToSpeed.u", "condition": null}, {"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_n", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_p", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "signalCurrent.plug_p", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "angleSensor.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "dqToThreePhase.phi", "condition": null}, {"from_connector": "groundM.p", "to_connector": "terminalBox.starpoint", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "torqueSensor.flange_a", "condition": null}, {"from_connector": "voltageQuasiRMSSensor.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "starM.plug_p", "to_connector": "voltageQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "starM.pin_n", "to_connector": "groundM.p", "condition": null}, {"from_connector": "dqToThreePhase.y", "to_connector": "signalCurrent.i", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "smpm.flange", "condition": null}, {"from_connector": "torqueSensor.flange_b", "to_connector": "inertiaLoad.flange_a", "condition": null}, {"from_connector": "signalCurrent.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "voltageQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "inertiaLoad.flange_b", "to_connector": "flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "addNoise.u2", "condition": null}, {"from_connector": "addNoise.y", "to_connector": "phi", "condition": null}, {"from_connector": "uniformNoise.y", "to_connector": "addNoise.u1", "condition": null}, {"from_connector": "id.y", "to_connector": "dqToThreePhase.d", "condition": null}, {"from_connector": "iq_rms1", "to_connector": "dqToThreePhase.q", "condition": null}, {"from_connector": "speedFeedback.y", "to_connector": "speed_PI.u", "condition": null}, {"from_connector": "positionFeedback.u2", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionReference", "to_connector": "positionFeedback.u1", "condition": null}, {"from_connector": "positionFeedback.y", "to_connector": "position_PI.u", "condition": null}, {"from_connector": "position_PI.y", "to_connector": "speedFeedback.u1", "condition": null}, {"from_connector": "speed_PI.y", "to_connector": "busdelay.u", "condition": null}, {"from_connector": "y1", "to_connector": "busdelay.y", "condition": null}, {"from_connector": "positionMeasured", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionToSpeed.y", "to_connector": "speedFeedback.u2", "condition": null}], "variables": [{"name": "uniformNoise2_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformNoise2.y", "comment": null}, {"name": "UniformNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "manualSeed1_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed1.y", "comment": null}, {"name": "manualSeed2_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed2.y", "comment": null}, {"name": "manualSeed3_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "manualSeed3.y", "comment": null}, {"name": "AutomaticSeed", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformNoise_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformNoise.y", "comment": null}, {"name": "truncatedNormalNoise_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "truncatedNormalNoise.y", "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "if time < 0.5 then 12 else 2", "comment": null}, {"name": "Distributions", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "meanError.y", "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "sigmaError.y", "comment": null}, {"name": "UniformNoiseProperties", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "NormalNoiseProperties", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uniformDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "uniformDensity.y", "comment": null}, {"name": "normalDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "normalDensity.y", "comment": null}, {"name": "weibullDensity_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "weibullDensity.y", "comment": null}, {"name": "Densities", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "impureRandom_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "impureRandom.y", "comment": null}, {"name": "ImpureGenerator", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ActuatorWithNoise", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "distribution", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "actuator", "unit": "0,0.85,0.8,0.1,0.1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["ActuatorNoise", "ActuatorNoiseDiagram", "AutomaticSeed1", "AutomaticSeed2", "Blocks", "Blocks.Noise", "Densities", "Distributions", "DrydenContinuousTurbulence", "Examples.Noise", "FillPattern", "Hw", "ImpureGenerator", "LinePattern", "Math.Distributions.Normal", "Math.Distributions.Uniform", "Math.Distributions.Weibull", "Modelica.Blocks", "Modelica.Blocks.Continuous", "Modelica.Blocks.Examples.Noise", "Modelica.Blocks.Icons", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Nonlinear", "Modelica.Blocks.Sources", "Modelica.Blocks.Types.Init", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.BasicMachines.SynchronousMachines", "Modelica.Electrical.Machines.Icons", "Modelica.Electrical.Machines.Sensors", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Machines.Utilities.ParameterRecords", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Math.Distributions.Normal", "Modelica.Math.Distributions.Uniform", "Modelica.Math.Distributions.Weibull", "Modelica.Math.Random.Utilities", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sensors", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Sources", "Noise", "NormalNoiseProperties1", "SI", "Smooth", "UniformNoise", "UniformNoiseProperties1", "Utilities", "Utilities.Parts", "W0zl2Gay", "add", "addNoise", "angleSensor", "busdelay", "clock", "compareToSpeed", "const", "constantForce", "controller", "currentQuasiRMSSensor", "distribution", "dlr_logo", "dqToThreePhase", "elastoGap", "en.wikipedia", "erVWhiWU", "everyspec", "gearbox", "globalSeed", "ground", "groundM", "i", "id", "idealGearR2T", "impureRandom", "inertiaLoad", "manualSeed1", "manualSeed2", "manualSeed3", "mass", "mean", "meanError", "motor", "noise", "normalDensity", "positionFeedback", "positionToSpeed", "position_PI", "rodMass", "rotorDisplacementAngle", "sigmaError", "signalCurrent", "slewRateLimiter", "smpm", "smpmData", "speed", "speedFeedback", "speedSensor", "speed_PI", "standardDeviation", "star", "starM", "terminalBox", "theoreticalMean", "theoreticalSigma", "theoreticalVariance", "torqueSensor", "truncatedNormalNoise", "uniformDensity", "uniformNoise", "uniformNoise2", "v", "variance", "varianceError", "voltageQuasiRMSSensor", "weibullDensity", "whiteNoise", "www.dlr"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example", "Modelica.Icons.UtilitiesPackage", "Modelica.Blocks.Icons.Block", "Modelica.Blocks.Interfaces.SO", "Modelica.Icons.Package", "Modelica.Electrical.Machines.Icons.TransientMachine"]}
{"fqn": "Modelica.Fluid.Valves.BaseClasses", "kind": "package", "name": "BaseClasses", "package_path": ["Modelica", "Fluid", "Valves"], "extends": ["Modelica.Icons.BasesPackage", "Modelica.Fluid.Interfaces.PartialTwoPortTransport", "Modelica.Blocks.Interfaces.SISO", "Modelica.Icons.VariantsPackage", "Modelica.Icons.Function", "baseFun"], "imports": ["Modelica.Fluid.Types.CvTypes"], "parameters": [{"name": "CvData", "type": "Modelica.Fluid.Types.CvTypes", "default": "Modelica.Fluid.Types.CvTypes.OpPoint \"Selection of flow coefficient\" parameter SI.Area Av( fixed= CvData == Modelica.Fluid.Types.CvTypes.Av, start=m_flow_nominal/(sqrt(rho_nominal*", "description": null}, {"name": "uMin", "type": "Real", "default": "0 \"Lower limit of input signal\"", "description": null}], "equations": [{"equations": ["algorithm\r\n      rc := if pos > delta then rangeability^(pos-1) else\r\n              pos/delta*rangeability^(delta-1)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 825, "end_line": 827, "start_col": 5, "end_col": 48}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 825, "end_line": 825, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm\r\n      rc := pos*pos"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 817, "end_line": 818, "start_col": 5, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 817, "end_line": 817, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm\r\n      rc := 1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 811, "end_line": 812, "start_col": 5, "end_col": 15}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 811, "end_line": 811, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm\r\n      rc := pos"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 805, "end_line": 806, "start_col": 5, "end_col": 17}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 805, "end_line": 805, "start_col": 5, "end_col": 14}}, {"equations": ["equation\r\n      // Isenthalpic state transformation (no storage and no loss of energy)\r\n      port_a.h_outflow = inStream(port_b.h_outflow)", "port_b.h_outflow = inStream(port_a.h_outflow)", "connect(filter.y, opening_filtered) annotation (Line(\r\n          points={{48.7,51},{60,51},{60,50},{70,50}}, color={0,0,127}))", "if filteredOpening then\r\n         connect(filter.y, opening_actual)", "else\r\n         connect(opening, opening_actual)", "end if", "connect(minLimiter.y, filter.u) annotation (Line(\r\n          points={{24.7,51},{32.6,51}}, color={0,0,127}))", "connect(minLimiter.u, opening) annotation (Line(\r\n          points={{8.6,51},{0,51},{0,90}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 648, "end_line": 665, "start_col": 5, "end_col": 62}}, {"equations": ["port_a.h_outflow = inStream(port_b.h_outflow)", "port_b.h_outflow = inStream(port_a.h_outflow)", "connect(filter.y, opening_filtered) annotation (Line(\r\n          points={{48.7,51},{60,51},{60,50},{70,50}}, color={0,0,127}))", "if filteredOpening then\r\n         connect(filter.y, opening_actual)", "else\r\n         connect(opening, opening_actual)", "end if", "connect(minLimiter.y, filter.u) annotation (Line(\r\n          points={{24.7,51},{32.6,51}}, color={0,0,127}))", "connect(minLimiter.u, opening) annotation (Line(\r\n          points={{8.6,51},{0,51},{0,90}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 650, "end_line": 665, "start_col": 7, "end_col": 62}}, {"equations": ["if filteredOpening then\r\n         connect(filter.y, opening_actual)", "else\r\n         connect(opening, opening_actual)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 656, "end_line": 660, "start_col": 7, "end_col": 13}}, {"equations": ["connect(opening, opening_actual)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 659, "end_line": 659, "start_col": 10, "end_col": 43}}, {"equations": ["connect(filter.y, opening_actual)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 657, "end_line": 657, "start_col": 10, "end_col": 44}}, {"equations": ["port_b.h_outflow = inStream(port_a.h_outflow)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 651, "end_line": 651, "start_col": 7, "end_col": 52}}, {"equations": ["port_a.h_outflow = inStream(port_b.h_outflow)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 650, "end_line": 650, "start_col": 7, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 648, "end_line": 648, "start_col": 5, "end_col": 13}}, {"equations": ["initial equation\r\n      if CvData == CvTypes.Kv then\r\n        Av = Kv*Kv2Av \"Unit conversion\"", "elseif CvData == CvTypes.Cv then\r\n        Av = Cv*Cv2Av \"Unit conversion\"", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 641, "end_line": 646, "start_col": 5, "end_col": 14}}, {"equations": ["if CvData == CvTypes.Kv then\r\n        Av = Kv*Kv2Av \"Unit conversion\"", "elseif CvData == CvTypes.Cv then\r\n        Av = Cv*Cv2Av \"Unit conversion\"", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 642, "end_line": 646, "start_col": 7, "end_col": 14}}, {"equations": ["elseif CvData == CvTypes.Cv then\r\n        Av = Cv*Cv2Av \"Unit conversion\""], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 644, "end_line": 645, "start_col": 7, "end_col": 41}}, {"equations": ["Av = Cv*Cv2Av \"Unit conversion\""], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 645, "end_line": 645, "start_col": 9, "end_col": 41}}, {"equations": ["Av = Kv*Kv2Av \"Unit conversion\""], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 643, "end_line": 643, "start_col": 9, "end_col": 41}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 641, "end_line": 641, "start_col": 13, "end_col": 21}}, {"equations": ["equation\r\n      y = smooth(0, noEvent( if u < uMin then uMin else u))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 573, "end_line": 574, "start_col": 5, "end_col": 61}}, {"equations": ["y = smooth(0, noEvent( if u < uMin then uMin else u))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 574, "end_line": 574, "start_col": 7, "end_col": 61}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 573, "end_line": 573, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.BasesPackage | components: SI.Area×1, Real×1 | connections: 5 | params: CvData, uMin | eq: algorithm rc := if(条件なら)(条件なら) pos > delta the", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo", "start_line": 481, "end_line": 838, "start_col": 3, "end_col": 18}, "code_text": "package BaseClasses\r\n    \"Base classes used in the Valves package (only of interest to build new component models)\"\r\n    extends Modelica.Icons.BasesPackage;\r\n    partial model PartialValve \"Base model for valves\"\r\n\r\n      import Modelica.Fluid.Types.CvTypes;\r\n      extends Modelica.Fluid.Interfaces.PartialTwoPortTransport(\r\n        dp_start = dp_nominal,\r\n        m_flow_small = if system.use_eps_Re then system.eps_m_flow*m_flow_nominal else system.m_flow_small,\r\n        m_flow_start = m_flow_nominal);\r\n\r\n      parameter Modelica.Fluid.Types.CvTypes CvData=Modelica.Fluid.Types.CvTypes.OpPoint\r\n        \"Selection of flow coefficient\"\r\n       annotation(Dialog(group = \"Flow coefficient\"));\r\n      parameter SI.Area Av(\r\n        fixed= CvData == Modelica.Fluid.Types.CvTypes.Av,\r\n        start=m_flow_nominal/(sqrt(rho_nominal*dp_nominal))*valveCharacteristic(\r\n            opening_nominal)) \"Av (metric) flow coefficient\"\r\n       annotation(Dialog(group = \"Flow coefficient\",\r\n                         enable = (CvData==Modelica.Fluid.Types.CvTypes.Av)));\r\n      parameter Real Kv = 0 \"Kv (metric) flow coefficient [m3/h]\"\r\n      annotation(Dialog(group = \"Flow coefficient\",\r\n                        enable = (CvData==Modelica.Fluid.Types.CvTypes.Kv)));\r\n      parameter Real Cv = 0 \"Cv (US) flow coefficient [USG/min]\"\r\n      annotation(Dialog(group = \"Flow coefficient\",\r\n                        enable = (CvData==Modelica.Fluid.Types.CvTypes.Cv)));\r\n      parameter SI.Pressure dp_nominal \"Nominal pressure drop\"\r\n      annotation(Dialog(group=\"Nominal operating point\"));\r\n      parameter Medium.MassFlowRate m_flow_nominal \"Nominal mass flowrate\"\r\n      annotation(Dialog(group=\"Nominal operating point\"));\r\n      parameter Medium.Density rho_nominal=Medium.density_pTX(Medium.p_default, Medium.T_default, Medium.X_default)\r\n        \"Nominal inlet density\"\r\n      annotation(Dialog(group=\"Nominal operating point\",\r\n                        enable = (CvData==Modelica.Fluid.Types.CvTypes.OpPoint)));\r\n      parameter Real opening_nominal(min=0,max=1)=1 \"Nominal opening\"\r\n      annotation(Dialog(group=\"Nominal operating point\",\r\n                        enable = (CvData==Modelica.Fluid.Types.CvTypes.OpPoint)));\r\n\r\n      parameter Boolean filteredOpening=false\r\n        \"= true, if opening is filtered with a 2nd order CriticalDamping filter\"\r\n        annotation(Dialog(group=\"Filtered opening\"),choices(checkBox=true));\r\n      parameter SI.Time riseTime=1\r\n        \"Rise time of the filter (time to reach 99.6 % of an opening step)\"\r\n        annotation(Dialog(group=\"Filtered opening\",enable=filteredOpening));\r\n      parameter Real leakageOpening(min=0,max=1)=1e-3\r\n        \"The opening signal is limited by leakageOpening (to improve the numerics)\"\r\n        annotation(Dialog(group=\"Filtered opening\",enable=filteredOpening));\r\n      parameter Boolean checkValve=false \"Reverse flow stopped\"\r\n        annotation(Dialog(tab=\"Assumptions\"));\r\n\r\n      replaceable function valveCharacteristic =\r\n          Modelica.Fluid.Valves.BaseClasses.ValveCharacteristics.linear\r\n        constrainedby\r\n        Modelica.Fluid.Valves.BaseClasses.ValveCharacteristics.baseFun\r\n        \"Inherent flow characteristic\"\r\n        annotation(choicesAllMatching=true);\r\n    protected\r\n      parameter SI.Pressure dp_small=if system.use_eps_Re then dp_nominal/m_flow_nominal*m_flow_small else system.dp_small\r\n        \"Regularisation of zero flow\"\r\n       annotation(Dialog(tab=\"Advanced\"));\r\n\r\n    public\r\n      constant SI.Area Kv2Av = 27.7e-6 \"Conversion factor\";\r\n      constant SI.Area Cv2Av = 24.0e-6 \"Conversion factor\";\r\n\r\n      Modelica.Blocks.Interfaces.RealInput opening(min=0, max=1)\r\n        \"Valve position in the range 0..1\"\r\n                                       annotation (Placement(transformation(\r\n            origin={0,90},\r\n            extent={{-20,-20},{20,20}},\r\n            rotation=270), iconTransformation(\r\n            extent={{-20,-20},{20,20}},\r\n            rotation=270,\r\n            origin={0,80})));\r\n\r\n      Modelica.Blocks.Interfaces.RealOutput opening_filtered if filteredOpening\r\n        \"Filtered valve position in the range 0..1\"\r\n        annotation (Placement(transformation(extent={{60,40},{80,60}}),\r\n            iconTransformation(extent={{60,50},{80,70}})));\r\n\r\n      Modelica.Blocks.Continuous.Filter filter(order=2, f_cut=5/(2*Modelica.Constants.pi\r\n            *riseTime)) if filteredOpening\r\n        annotation (Placement(transformation(extent={{34,44},{48,58}})));\r\n\r\n    protected\r\n      Modelica.Blocks.Interfaces.RealOutput opening_actual\r\n        annotation (Placement(transformation(extent={{60,10},{80,30}})));\r\n\r\n    block MinLimiter \"Limit the signal above a threshold\"\r\n     parameter Real uMin=0 \"Lower limit of input signal\";\r\n      extends Modelica.Blocks.Interfaces.SISO;\r\n\r\n    equation\r\n      y = smooth(0, noEvent( if u < uMin then uMin else u));\r\n      annotation (\r\n        Documentation(info=\"<html>\r\n<p>\r\nThe block passes its input signal as output signal\r\nas long as the input is above uMin. If this is not the case,\r\ny=uMin is passed as output.\r\n</p>\r\n</html>\"), Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={\r\n        Line(points={{0,-90},{0,68}}, color={192,192,192}),\r\n        Polygon(\r\n          points={{0,90},{-8,68},{8,68},{0,90}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-90,0},{68,0}}, color={192,192,192}),\r\n        Polygon(\r\n          points={{90,0},{68,-8},{68,8},{90,0}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-80,-70},{-50,-70},{50,70},{64,90}}),\r\n        Text(\r\n          extent={{-150,-150},{150,-110}},\r\n          textString=\"uMin=%uMin\"),\r\n        Text(\r\n          extent={{-150,150},{150,110}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255})}),\r\n        Diagram(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={\r\n        Line(points={{0,-60},{0,50}}, color={192,192,192}),\r\n        Polygon(\r\n          points={{0,60},{-5,50},{5,50},{0,60}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-60,0},{50,0}}, color={192,192,192}),\r\n        Polygon(\r\n          points={{60,0},{50,-5},{50,5},{60,0}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-50,-40},{-30,-40},{30,40},{50,40}}),\r\n        Text(\r\n          extent={{46,-6},{68,-18}},\r\n          textColor={128,128,128},\r\n          textString=\"u\"),\r\n        Text(\r\n          extent={{-30,70},{-5,50}},\r\n          textColor={128,128,128},\r\n          textString=\"y\"),\r\n        Text(\r\n          extent={{-58,-54},{-28,-42}},\r\n          textColor={128,128,128},\r\n          textString=\"uMin\"),\r\n        Text(\r\n          extent={{26,40},{66,56}},\r\n          textColor={128,128,128},\r\n          textString=\"uMax\")}));\r\n    end MinLimiter;\r\n\r\n      MinLimiter minLimiter(uMin=leakageOpening)\r\n        annotation (Placement(transformation(extent={{10,44},{24,58}})));\r\n    initial equation\r\n      if CvData == CvTypes.Kv then\r\n        Av = Kv*Kv2Av \"Unit conversion\";\r\n      elseif CvData == CvTypes.Cv then\r\n        Av = Cv*Cv2Av \"Unit conversion\";\r\n      end if;\r\n\r\n    equation\r\n      // Isenthalpic state transformation (no storage and no loss of energy)\r\n      port_a.h_outflow = inStream(port_b.h_outflow);\r\n      port_b.h_outflow = inStream(port_a.h_outflow);\r\n\r\n      connect(filter.y, opening_filtered) annotation (Line(\r\n          points={{48.7,51},{60,51},{60,50},{70,50}}, color={0,0,127}));\r\n\r\n      if filteredOpening then\r\n         connect(filter.y, opening_actual);\r\n      else\r\n         connect(opening, opening_actual);\r\n      end if;\r\n\r\n      connect(minLimiter.y, filter.u) annotation (Line(\r\n          points={{24.7,51},{32.6,51}}, color={0,0,127}));\r\n      connect(minLimiter.u, opening) annotation (Line(\r\n          points={{8.6,51},{0,51},{0,90}}, color={0,0,127}));\r\n      annotation (\r\n        Icon(coordinateSystem(\r\n            preserveAspectRatio=true,\r\n            extent={{-100,-100},{100,100}}), graphics={\r\n            Line(points={{0,52},{0,0}}),\r\n            Rectangle(\r\n              extent={{-20,60},{20,52}},\r\n              fillPattern=FillPattern.Solid),\r\n            Polygon(\r\n              points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,50}},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Polygon(\r\n              points=DynamicSelect({{-100,0},{100,-0},{100,0},{0,0},{-100,-0},{\r\n                  -100,0}}, {{-100,50*opening_actual},{-100,50*opening_actual},{100,-50*\r\n                  opening},{100,50*opening_actual},{0,0},{-100,-50*opening_actual},{-100,50*\r\n                  opening}}),\r\n              fillColor={0,255,0},\r\n              lineColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Polygon(points={{-100,50},{100,-50},{100,50},{0,0},{-100,-50},{-100,\r\n                  50}}),\r\n            Ellipse(visible=filteredOpening,\r\n              extent={{-40,94},{40,14}},\r\n              lineColor={0,0,127},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Line(visible=filteredOpening,\r\n              points={{-20,25},{-20,63},{0,41},{20,63},{20,25}},\r\n              thickness=0.5),\r\n            Line(visible=filteredOpening,\r\n              points={{40,60},{60,60}},\r\n              color={0,0,127})}),\r\n        Documentation(info=\"<html>\r\n<p>This is the base model for the <code>ValveIncompressible</code>, <code>ValveVaporizing</code>, and <code>ValveCompressible</code> valve models. The model is based on the IEC 534 / ISA S.75 standards for valve sizing.</p>\r\n<p>The model optionally supports reverse flow conditions (assuming symmetrical behaviour) or check valve operation, and has been suitably regularized, compared to the equations in the standard, in order to avoid numerical singularities around zero pressure drop operating conditions.</p>\r\n<p>The model assumes adiabatic operation (no heat losses to the ambient); changes in kinetic energy\r\nfrom inlet to outlet are neglected in the energy balance.</p>\r\n<p><strong>Modelling options</strong></p>\r\n<p>The following options are available to specify the valve flow coefficient in fully open conditions:</p>\r\n<ul><li><code>CvData = Modelica.Fluid.Types.CvTypes.Av</code>: the flow coefficient is given by the metric <code>Av</code> coefficient (m^2).</li>\r\n<li><code>CvData = Modelica.Fluid.Types.CvTypes.Kv</code>: the flow coefficient is given by the metric <code>Kv</code> coefficient (m^3/h).</li>\r\n<li><code>CvData = Modelica.Fluid.Types.CvTypes.Cv</code>: the flow coefficient is given by the US <code>Cv</code> coefficient (USG/min).</li>\r\n<li><code>CvData = Modelica.Fluid.Types.CvTypes.OpPoint</code>: the flow is computed from the nominal operating point specified by <code>p_nominal</code>, <code>dp_nominal</code>, <code>m_flow_nominal</code>, <code>rho_nominal</code>, <code>opening_nominal</code>.</li>\r\n</ul>\r\n<p>The nominal pressure drop <code>dp_nominal</code> must always be specified; to avoid numerical singularities, the flow characteristic is modified for pressure drops less than <code>b*dp_nominal</code> (the default value is 1% of the nominal pressure drop). Increase this parameter if numerical problems occur in valves with very low pressure drops.</p>\r\n<p>If <code>checkValve</code> is true, then the flow is stopped when the outlet pressure is higher than the inlet pressure; otherwise, reverse flow takes place. Use this option only when needed, as it increases the numerical complexity of the problem.</p>\r\n<p>The valve opening characteristic <code>valveCharacteristic</code>, linear by default, can be replaced by any user-defined function. Quadratic and equal percentage with customizable rangeability are already provided by the library. The characteristics for constant port_a.p and port_b.p pressures with continuously changing opening are shown in the next two figures:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Fluid/Valves/BaseClasses/ValveCharacteristics1a.png\\\"\r\n     alt=\\\"ValveCharacteristics1a.png\\\"><br>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Fluid/Valves/BaseClasses/ValveCharacteristics1b.png\\\"\r\n     alt=\\\"Components/ValveCharacteristics1b.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe treatment of parameters <strong>Kv</strong> and <strong>Cv</strong> is\r\nexplained in detail in the\r\n<a href=\\\"modelica://Modelica.Fluid.UsersGuide.ComponentDefinition.ValveCharacteristics\\\">User's Guide</a>.\r\n</p>\r\n\r\n<p>\r\nWith the optional parameter \\\"filteredOpening\\\", the opening can be filtered with a\r\n<strong>second order, criticalDamping</strong> filter so that the\r\nopening demand is delayed by parameter \\\"riseTime\\\". The filtered opening is then available\r\nvia the output signal \\\"opening_filtered\\\" and is used to control the valve equations.\r\nThis approach approximates the driving device of a valve. The \\\"riseTime\\\" parameter\r\nis used to compute the cut-off frequency of the filter by the equation: f_cut = 5/(2*pi*riseTime).\r\nIt defines the time that is needed until opening_filtered reaches 99.6 % of\r\na step input of opening. The icon of a valve changes in the following way\r\n(left image: filteredOpening=false, right image: filteredOpening=true):\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Fluid/Valves/BaseClasses/FilteredValveIcon.png\\\"\r\n     alt=\\\"FilteredValveIcon.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nIf \\\"filteredOpening = <strong>true</strong>\\\", the input signal \\\"opening\\\" is limited\r\nby parameter <strong>leakageOpening</strong>, i.e., if \\\"opening\\\" becomes smaller as\r\n\\\"leakageOpening\\\", then \\\"leakageOpening\\\" is used instead of \\\"opening\\\" as input\r\nfor the filter. The reason is that \\\"opening=0\\\" might structurally change the equations of the\r\nfluid network leading to a singularity. If a small leakage flow is introduced\r\n(which is often anyway present in reality), the singularity might be avoided.\r\n</p>\r\n\r\n<p>\r\nIn the next figure, \\\"opening\\\" and \\\"filtered_opening\\\" are shown in the case that\r\nfilteredOpening = <strong>true</strong>, riseTime = 1 s, and leakageOpening = 0.02.\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Fluid/Valves/BaseClasses/ValveFilteredOpening.png\\\"\r\n     alt=\\\"ValveFilteredOpening.png\\\">\r\n</blockquote>\r\n\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>Sept. 5, 2010</em>\r\n    by <a href=\\\"mailto:martin.otter@dlr.de\\\">Martin Otter</a>:<br>\r\n    Optional filtering of opening introduced, based on a proposal\r\n    from Mike Barth (Universitaet der Bundeswehr Hamburg) +\r\n    Documentation improved.</li>\r\n<li><em>2 Nov 2005</em>\r\n    by <a href=\\\"mailto:francesco.casella@polimi.it\\\">Francesco Casella</a>:<br>\r\n       Adapted from the ThermoPower library.</li>\r\n</ul>\r\n</html>\"));\r\n    end PartialValve;\r\n\r\n  package ValveCharacteristics \"Functions for valve characteristics\"\r\n    extends Modelica.Icons.VariantsPackage;\r\n    partial function baseFun \"Base class for valve characteristics\"\r\n      extends Modelica.Icons.Function;\r\n      input Real pos(min=0, max=1)\r\n          \"Opening position (0: closed, 1: fully open)\";\r\n      output Real rc \"Relative flow coefficient (per unit)\";\r\n      annotation (Documentation(info=\"<html>\r\n<p>\r\nThis is a partial function that defines the interface of valve\r\ncharacteristics. The function returns \\\"rc = valveCharacteristic\\\" as function of the\r\nopening \\\"pos\\\" (in the range 0..1):\r\n</p>\r\n\r\n<blockquote><pre>\r\n    dp = (zeta_TOT/2) * rho * velocity^2\r\nm_flow =    sqrt(2/zeta_TOT) * Av * sqrt(rho * dp)\r\nm_flow = valveCharacteristic * Av * sqrt(rho * dp)\r\nm_flow =                  rc * Av * sqrt(rho * dp)\r\n</pre></blockquote>\r\n\r\n</html>\"));\r\n    end baseFun;\r\n\r\n    function linear \"Linear characteristic\"\r\n      extends baseFun;\r\n    algorithm\r\n      rc := pos;\r\n    end linear;\r\n\r\n    function one \"Constant characteristic\"\r\n      extends baseFun;\r\n    algorithm\r\n      rc := 1;\r\n    end one;\r\n\r\n    function quadratic \"Quadratic characteristic\"\r\n      extends baseFun;\r\n    algorithm\r\n      rc := pos*pos;\r\n    end quadratic;\r\n\r\n    function equalPercentage \"Equal percentage characteristic\"\r\n      extends baseFun;\r\n      input Real rangeability = 20 \"Rangeability\" annotation(Dialog);\r\n      input Real delta = 0.01 annotation(Dialog);\r\n    algorithm\r\n      rc := if pos > delta then rangeability^(pos-1) else\r\n              pos/delta*rangeability^(delta-1);\r\n      annotation (Documentation(info=\"<html>\r\nThis characteristic is such that the relative change of the flow coefficient is proportional to the change in the opening position:\r\n<p> d(rc)/d(pos) = k d(pos).</p>\r\n<p> The constant k is expressed in terms of the rangeability, i.e., the ratio between the maximum and the minimum useful flow coefficient:</p>\r\n<p> rangeability = exp(k) = rc(1.0)/rc(0.0).</p>\r\n<p> The theoretical characteristic has a non-zero opening when pos = 0; the implemented characteristic is modified so that the valve closes linearly when pos &lt; delta.</p>\r\n</html>\"));\r\n    end equalPercentage;\r\n\r\n  end ValveCharacteristics;\r\n  end BaseClasses", "checksum": "e1d4c5622f5e9d3d43f0dbcf16a892dbc99dc38c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Valves.mo:481-838", "component_count": 2, "connection_count": 5, "variable_count": 15, "physical_quantity_count": 0, "parameter_count": 2, "equation_count": 25, "dependency_count": 27, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": true, "complexity_score": 45.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "algorithm rc := if(条件なら) pos > delta then rangeability^(pos-1) else(それ以外) pos/delta*rangeability^(delta-1)", "search_keywords": ["Real", "SI.Area", "system"]}, "components": [{"name": "Cv2Av", "type_name": "SI.Area", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "rc", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Relative flow coefficient (per unit)"}], "connections": [{"from_connector": "filter.y", "to_connector": "opening_filtered", "condition": null}, {"from_connector": "filter.y", "to_connector": "opening_actual", "condition": null}, {"from_connector": "opening", "to_connector": "opening_actual", "condition": null}, {"from_connector": "minLimiter.y", "to_connector": "filter.u", "condition": null}, {"from_connector": "minLimiter.u", "to_connector": "opening", "condition": null}], "variables": [{"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "smooth(0, noEvent( if u < uMin then uMin else u))", "comment": null}, {"name": "MinLimiter", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "CvData", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "CvTypes.Cv then\r\n        Av = Cv*Cv2Av \"Unit conversion\"", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "connect", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "PartialValve", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "pos", "type_name": "Real", "prefixes": ["input"], "attributes": {"min": "0", "max": "1"}, "binding_equation": null, "comment": "\"Opening position (0: closed, 1: fully open)\""}, {"name": "rc", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Relative flow coefficient (per unit)\""}, {"name": "baseFun", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "linear", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "one", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "quadratic", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "rangeability", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "20 \"Rangeability\" \r\n      input Real delta = 0.01 \r\n    algorithm\r\n      rc := if pos > delta then rangeability^(pos-1) else\r\n              pos/delta*rangeability^(delta-1)", "comment": null}, {"name": "equalPercentage", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "ValveCharacteristics", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["CvTypes", "FillPattern", "FilteredValveIcon", "Medium", "Modelica.Blocks.Continuous", "Modelica.Blocks.Interfaces", "Modelica.Constants", "Modelica.Fluid.Interfaces", "Modelica.Fluid.Types", "Modelica.Fluid.Types.CvTypes", "Modelica.Fluid.UsersGuide.ComponentDefinition", "Modelica.Fluid.Valves.BaseClasses.ValveCharacteristics", "Modelica.Icons", "SI", "ValveCharacteristics1a", "ValveCharacteristics1b", "ValveFilteredOpening", "dlr", "filter", "francesco", "i", "martin", "minLimiter", "polimi", "port_a", "port_b", "system"], "inheritance_chain": ["Modelica.Icons.BasesPackage", "Modelica.Fluid.Interfaces.PartialTwoPortTransport", "Modelica.Blocks.Interfaces.SISO", "Modelica.Icons.VariantsPackage", "Modelica.Icons.Function", "baseFun"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Pipes.DynamicPipesWithTraceSubstances.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Pipes", "DynamicPipesWithTraceSubstances"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Pipes\\DynamicPipesWithTraceSubstances.mo", "start_line": 166, "end_line": 166, "start_col": 15, "end_col": 36}, "code_text": "package Medium=Medium", "checksum": "f25daef1822792a132bdcd03f44631c685834fad", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Pipes\\DynamicPipesWithTraceSubstances.mo:166-166", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "ModelicaTest.Fluid.TestComponents.Fittings.TestSharpEdgedOrifice.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Fittings", "TestSharpEdgedOrifice"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Fittings\\TestSharpEdgedOrifice.mo", "start_line": 23, "end_line": 23, "start_col": 15, "end_col": 38}, "code_text": "package Medium = Medium", "checksum": "264d3eba769376c7a36a078f4effd0565e938c0f", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Fittings\\TestSharpEdgedOrifice.mo:23-23", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "ModelicaTest.MultiBody.Frames", "kind": "package", "name": "Frames", "package_path": ["ModelicaTest", "MultiBody"], "extends": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example"], "imports": ["Modelica.Mechanics.MultiBody.Frames.", "TM", "Modelica.Mechanics.MultiBody.Frames.Quaternions"], "parameters": [{"name": "T1", "type": "TM.Orientation", "default": "TM.from_nxy({1, 0, 0}, {0, 1, 0})", "description": null}, {"name": "T2", "type": "TM.Orientation", "default": "TM.from_nxy({1, 0, 0}, {0,-1, 0})", "description": null}, {"name": "T3", "type": "TM.Orientation", "default": "TM.from_nxy({1, 0, 0}, {0, 0, 1})", "description": null}, {"name": "T4", "type": "TM.Orientation", "default": "TM.from_nxy({1, 0, 0}, {0, 0,-1})", "description": null}, {"name": "T5", "type": "TM.Orientation", "default": "TM.from_nxy({-1, 0, 0}, {0, 1, 0})", "description": null}, {"name": "T6", "type": "TM.Orientation", "default": "TM.from_nxy({-1, 0, 0}, {0,-1, 0})", "description": null}, {"name": "T7", "type": "TM.Orientation", "default": "TM.from_nxy({-1, 0, 0}, {0, 0, 1})", "description": null}, {"name": "T8", "type": "TM.Orientation", "default": "TM.from_nxy({-1, 0, 0}, {0, 0,-1})", "description": null}, {"name": "T9", "type": "TM.Orientation", "default": "TM.from_nxy({0, 1, 0}, { 1, 0, 0})", "description": null}, {"name": "T10", "type": "TM.Orientation", "default": "TM.from_nxy({0, 1, 0}, {-1, 0, 0})", "description": null}, {"name": "T11", "type": "TM.Orientation", "default": "TM.from_nxy({0, 1, 0}, { 0, 0, 1})", "description": null}, {"name": "T12", "type": "TM.Orientation", "default": "TM.from_nxy({0, 1, 0}, { 0, 0,-1})", "description": null}, {"name": "T13", "type": "TM.Orientation", "default": "TM.from_nxy({0,-1, 0}, { 1, 0, 0})", "description": null}, {"name": "T14", "type": "TM.Orientation", "default": "TM.from_nxy({0,-1, 0}, {-1, 0, 0})", "description": null}, {"name": "T15", "type": "TM.Orientation", "default": "TM.from_nxy({0,-1, 0}, { 0, 0, 1})", "description": null}, {"name": "T16", "type": "TM.Orientation", "default": "TM.from_nxy({0,-1, 0}, { 0, 0,-1})", "description": null}, {"name": "T17", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0, 1}, { 1, 0, 0})", "description": null}, {"name": "T18", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0, 1}, {-1, 0, 0})", "description": null}, {"name": "T19", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0, 1}, { 0, 1, 0})", "description": null}, {"name": "T20", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0, 1}, { 0,-1, 0})", "description": null}, {"name": "T21", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0,-1}, { 1, 0, 0})", "description": null}, {"name": "T22", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0,-1}, {-1, 0, 0})", "description": null}, {"name": "T23", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0,-1}, { 0, 1, 0})", "description": null}, {"name": "T24", "type": "TM.Orientation", "default": "TM.from_nxy({0, 0,-1}, { 0,-1, 0})", "description": null}], "equations": [{"equations": ["equation\r\n      connect(bar2.frame_a, world.frame_b) annotation (Line(\r\n          points={{-20,30},{-60,30}},\r\n          thickness=0.5))", "connect(spring1.frame_b, body.frame_a) annotation (Line(\r\n          points={{-40,-10},{-40,-30},{-20,-30}},\r\n          thickness=0.5))", "connect(spring2.frame_b, body.frame_b) annotation (Line(\r\n          points={{20,-10},{20,-30},{0,-30}},\r\n          thickness=0.5))", "connect(bar2.frame_b, spring2.frame_a) annotation (Line(\r\n          points={{0,30},{20,30},{20,10}},\r\n          thickness=0.5))", "connect(spring1.frame_a, world.frame_b) annotation (Line(\r\n          points={{-40,10},{-40,30},{-60,30}},\r\n          thickness=0.5))", "connect(FrameTorque1.frame_b, body.frame_b) annotation (Line(\r\n          points={{30,-30},{0,-30}},\r\n          thickness=0.5))", "connect(Constant1.y, FrameTorque1.torque) annotation (Line(points={{69,-30},{52,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 1018, "end_line": 1037, "start_col": 5, "end_col": 112}}, {"equations": ["connect(bar2.frame_a, world.frame_b) annotation (Line(\r\n          points={{-20,30},{-60,30}},\r\n          thickness=0.5))", "connect(spring1.frame_b, body.frame_a) annotation (Line(\r\n          points={{-40,-10},{-40,-30},{-20,-30}},\r\n          thickness=0.5))", "connect(spring2.frame_b, body.frame_b) annotation (Line(\r\n          points={{20,-10},{20,-30},{0,-30}},\r\n          thickness=0.5))", "connect(bar2.frame_b, spring2.frame_a) annotation (Line(\r\n          points={{0,30},{20,30},{20,10}},\r\n          thickness=0.5))", "connect(spring1.frame_a, world.frame_b) annotation (Line(\r\n          points={{-40,10},{-40,30},{-60,30}},\r\n          thickness=0.5))", "connect(FrameTorque1.frame_b, body.frame_b) annotation (Line(\r\n          points={{30,-30},{0,-30}},\r\n          thickness=0.5))", "connect(Constant1.y, FrameTorque1.torque) annotation (Line(points={{69,-30},{52,-30}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 1019, "end_line": 1037, "start_col": 7, "end_col": 112}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 1018, "end_line": 1018, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.ExamplesPackage | components: Quaternions.Orientation×24, SI.AngularVelocity×4, MultiBody.Frames.Orientation×1 | connections: 7 | params:", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 965, "end_line": 1108, "start_col": 3, "end_col": 13}, "code_text": "package Frames \"Test functions of package Frames\"\r\n    extends Modelica.Icons.ExamplesPackage;\r\n    model AngularVelocity \"Test angular velocity functions\"\r\n\r\n      import Modelica.Mechanics.MultiBody.Frames.{angularVelocity1, angularVelocity2, resolve1};\r\n      extends Modelica.Icons.Example;\r\n      MultiBody.Frames.Orientation R=body.frame_a.R;\r\n      SI.AngularVelocity wa[3]=angularVelocity2(R);\r\n      SI.AngularVelocity w1[3]=resolve1(R, wa);\r\n      SI.AngularVelocity w2[3]=angularVelocity1(R);\r\n      SI.AngularVelocity w_err[3]=w2 - w1;\r\n      inner MultiBody.World world annotation (Placement(\r\n            transformation(extent={{-80,20},{-60,40}})));\r\n      MultiBody.Parts.FixedTranslation bar2(r={0.8,0,0},\r\n          animation=false) annotation (Placement(transformation(extent={{-20,20},{0,40}})));\r\n      MultiBody.Forces.Spring spring1(\r\n        width=0.1,\r\n        coilWidth=0.005,\r\n        numberOfWindings=5,\r\n        c=20,\r\n        s_unstretched=0) annotation (Placement(transformation(\r\n            origin={-40,0},\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=270)));\r\n      MultiBody.Parts.BodyShape body(\r\n        m=1,\r\n        I_11=1,\r\n        I_22=1,\r\n        I_33=1,\r\n        r={0.4,0,0},\r\n        r_CM={0.2,0,0},\r\n        width=0.05,\r\n        angles_start={0.174532925199433,0.174532925199433,0.174532925199433},\r\n        a_0(each fixed=false),\r\n        angles_fixed=true,\r\n        r_0(each fixed=true, start={0.2,-0.5,0.1}),\r\n        v_0(each fixed=true),\r\n        w_0_fixed=true,\r\n        z_0_fixed=false) annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));\r\n      MultiBody.Forces.Spring spring2(\r\n        c=20,\r\n        s_unstretched=0,\r\n        width=0.1,\r\n        coilWidth=0.005,\r\n        numberOfWindings=5) annotation (Placement(transformation(\r\n            origin={20,0},\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=270)));\r\n      MultiBody.Forces.WorldTorque FrameTorque1(\r\n          resolveInFrame=MultiBody.Types.ResolveInFrameB.frame_b)\r\n        annotation (Placement(transformation(extent={{50,-40},{30,-20}})));\r\n      Modelica.Blocks.Sources.Constant Constant1[3](k={10,0,0}) annotation (\r\n          Placement(transformation(extent={{90,-40},{70,-20}})));\r\n    equation\r\n      connect(bar2.frame_a, world.frame_b) annotation (Line(\r\n          points={{-20,30},{-60,30}},\r\n          thickness=0.5));\r\n      connect(spring1.frame_b, body.frame_a) annotation (Line(\r\n          points={{-40,-10},{-40,-30},{-20,-30}},\r\n          thickness=0.5));\r\n      connect(spring2.frame_b, body.frame_b) annotation (Line(\r\n          points={{20,-10},{20,-30},{0,-30}},\r\n          thickness=0.5));\r\n      connect(bar2.frame_b, spring2.frame_a) annotation (Line(\r\n          points={{0,30},{20,30},{20,10}},\r\n          thickness=0.5));\r\n      connect(spring1.frame_a, world.frame_b) annotation (Line(\r\n          points={{-40,10},{-40,30},{-60,30}},\r\n          thickness=0.5));\r\n      connect(FrameTorque1.frame_b, body.frame_b) annotation (Line(\r\n          points={{30,-30},{0,-30}},\r\n          thickness=0.5));\r\n      connect(Constant1.y, FrameTorque1.torque) annotation (Line(points={{69,-30},{52,-30}}, color={0,0,127}));\r\n      annotation (experiment(StopTime=1.1));\r\n    end AngularVelocity;\r\n\r\n    model QuaternionFromT\r\n      extends Modelica.Icons.Example;\r\n      import TM = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices;\r\n      import Modelica.Mechanics.MultiBody.Frames.Quaternions;\r\n\r\n      parameter TM.Orientation T1 = TM.from_nxy({1, 0, 0}, {0, 1, 0});\r\n      parameter TM.Orientation T2 = TM.from_nxy({1, 0, 0}, {0,-1, 0});\r\n      parameter TM.Orientation T3 = TM.from_nxy({1, 0, 0}, {0, 0, 1});\r\n      parameter TM.Orientation T4 = TM.from_nxy({1, 0, 0}, {0, 0,-1});\r\n\r\n      parameter TM.Orientation T5 = TM.from_nxy({-1, 0, 0}, {0, 1, 0});\r\n      parameter TM.Orientation T6 = TM.from_nxy({-1, 0, 0}, {0,-1, 0});\r\n      parameter TM.Orientation T7 = TM.from_nxy({-1, 0, 0}, {0, 0, 1});\r\n      parameter TM.Orientation T8 = TM.from_nxy({-1, 0, 0}, {0, 0,-1});\r\n\r\n      parameter TM.Orientation T9 =  TM.from_nxy({0, 1, 0}, { 1, 0, 0});\r\n      parameter TM.Orientation T10 = TM.from_nxy({0, 1, 0}, {-1, 0, 0});\r\n      parameter TM.Orientation T11 = TM.from_nxy({0, 1, 0}, { 0, 0, 1});\r\n      parameter TM.Orientation T12 = TM.from_nxy({0, 1, 0}, { 0, 0,-1});\r\n\r\n      parameter TM.Orientation T13 = TM.from_nxy({0,-1, 0}, { 1, 0, 0});\r\n      parameter TM.Orientation T14 = TM.from_nxy({0,-1, 0}, {-1, 0, 0});\r\n      parameter TM.Orientation T15 = TM.from_nxy({0,-1, 0}, { 0, 0, 1});\r\n      parameter TM.Orientation T16 = TM.from_nxy({0,-1, 0}, { 0, 0,-1});\r\n\r\n      parameter TM.Orientation T17 = TM.from_nxy({0, 0, 1}, { 1, 0, 0});\r\n      parameter TM.Orientation T18 = TM.from_nxy({0, 0, 1}, {-1, 0, 0});\r\n      parameter TM.Orientation T19 = TM.from_nxy({0, 0, 1}, { 0, 1, 0});\r\n      parameter TM.Orientation T20 = TM.from_nxy({0, 0, 1}, { 0,-1, 0});\r\n\r\n      parameter TM.Orientation T21 = TM.from_nxy({0, 0,-1}, { 1, 0, 0});\r\n      parameter TM.Orientation T22 = TM.from_nxy({0, 0,-1}, {-1, 0, 0});\r\n      parameter TM.Orientation T23 = TM.from_nxy({0, 0,-1}, { 0, 1, 0});\r\n      parameter TM.Orientation T24 = TM.from_nxy({0, 0,-1}, { 0,-1, 0});\r\n\r\n      Quaternions.Orientation Q1 =  Quaternions.from_T(T1);\r\n      Quaternions.Orientation Q2 =  Quaternions.from_T(T2);\r\n      Quaternions.Orientation Q3 =  Quaternions.from_T(T3);\r\n      Quaternions.Orientation Q4 =  Quaternions.from_T(T4);\r\n\r\n      Quaternions.Orientation Q5 =  Quaternions.from_T(T5);\r\n      Quaternions.Orientation Q6 =  Quaternions.from_T(T6);\r\n      Quaternions.Orientation Q7 =  Quaternions.from_T(T7);\r\n      Quaternions.Orientation Q8 =  Quaternions.from_T(T8);\r\n\r\n      Quaternions.Orientation Q9 =  Quaternions.from_T(T9);\r\n      Quaternions.Orientation Q10 = Quaternions.from_T(T10);\r\n      Quaternions.Orientation Q11 = Quaternions.from_T(T11);\r\n      Quaternions.Orientation Q12 = Quaternions.from_T(T12);\r\n\r\n      Quaternions.Orientation Q13 = Quaternions.from_T(T13);\r\n      Quaternions.Orientation Q14 = Quaternions.from_T(T14);\r\n      Quaternions.Orientation Q15 = Quaternions.from_T(T15);\r\n      Quaternions.Orientation Q16 = Quaternions.from_T(T16);\r\n\r\n      Quaternions.Orientation Q17 = Quaternions.from_T(T17);\r\n      Quaternions.Orientation Q18 = Quaternions.from_T(T18);\r\n      Quaternions.Orientation Q19 = Quaternions.from_T(T19);\r\n      Quaternions.Orientation Q20 = Quaternions.from_T(T20);\r\n\r\n      Quaternions.Orientation Q21 = Quaternions.from_T(T21);\r\n      Quaternions.Orientation Q22 = Quaternions.from_T(T22);\r\n      Quaternions.Orientation Q23 = Quaternions.from_T(T23);\r\n      Quaternions.Orientation Q24 = Quaternions.from_T(T24);\r\n\r\n      annotation (experiment(StopTime=0.1, Interval=0.1));\r\n    end QuaternionFromT;\r\n  end Frames", "checksum": "335d7122dcf6d3e90be92bbeb71c8e96bf21ab69", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo:965-1108", "component_count": 29, "connection_count": 7, "variable_count": 32, "physical_quantity_count": 5, "parameter_count": 24, "equation_count": 3, "dependency_count": 22, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 94.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(bar2.frame_a, world.frame_b) annotation (Line( points={{-20,30},{-60,30}}, thickness=0.5))", "search_keywords": ["AngularVelocity", "MultiBody.Frames.Orientation", "Quaternions.Orientation", "SI.AngularVelocity", "rad/s", "system"]}, "components": [{"name": "R", "type_name": "MultiBody.Frames.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "wa", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": null}, {"name": "w1", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": null}, {"name": "w2", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": null}, {"name": "w_err", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": null}, {"name": "Q1", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q2", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q3", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q4", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q5", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q6", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q7", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q8", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q9", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q10", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q11", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q12", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q13", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q14", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q15", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q16", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q17", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q18", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q19", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q20", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q21", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q22", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q23", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Q24", "type_name": "Quaternions.Orientation", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "bar2.frame_a", "to_connector": "world.frame_b", "condition": null}, {"from_connector": "spring1.frame_b", "to_connector": "body.frame_a", "condition": null}, {"from_connector": "spring2.frame_b", "to_connector": "body.frame_b", "condition": null}, {"from_connector": "bar2.frame_b", "to_connector": "spring2.frame_a", "condition": null}, {"from_connector": "spring1.frame_a", "to_connector": "world.frame_b", "condition": null}, {"from_connector": "FrameTorque1.frame_b", "to_connector": "body.frame_b", "condition": null}, {"from_connector": "Constant1.y", "to_connector": "FrameTorque1.torque", "condition": null}], "variables": [{"name": "R", "type_name": "MultiBody.Frames.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "body.frame_a.R", "comment": null}, {"name": "wa", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "angularVelocity2(R)", "comment": null}, {"name": "w1", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "resolve1(R, wa)", "comment": null}, {"name": "w2", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "angularVelocity1(R)", "comment": null}, {"name": "w_err", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "w2 - w1", "comment": null}, {"name": "AngularVelocity", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "TM", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices", "comment": null}, {"name": "Q1", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T1)", "comment": null}, {"name": "Q2", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T2)", "comment": null}, {"name": "Q3", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T3)", "comment": null}, {"name": "Q4", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T4)", "comment": null}, {"name": "Q5", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T5)", "comment": null}, {"name": "Q6", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T6)", "comment": null}, {"name": "Q7", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T7)", "comment": null}, {"name": "Q8", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T8)", "comment": null}, {"name": "Q9", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T9)", "comment": null}, {"name": "Q10", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T10)", "comment": null}, {"name": "Q11", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T11)", "comment": null}, {"name": "Q12", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T12)", "comment": null}, {"name": "Q13", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T13)", "comment": null}, {"name": "Q14", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T14)", "comment": null}, {"name": "Q15", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T15)", "comment": null}, {"name": "Q16", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T16)", "comment": null}, {"name": "Q17", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T17)", "comment": null}, {"name": "Q18", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T18)", "comment": null}, {"name": "Q19", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T19)", "comment": null}, {"name": "Q20", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T20)", "comment": null}, {"name": "Q21", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T21)", "comment": null}, {"name": "Q22", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T22)", "comment": null}, {"name": "Q23", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T23)", "comment": null}, {"name": "Q24", "type_name": "Quaternions.Orientation", "prefixes": [], "attributes": {}, "binding_equation": "Quaternions.from_T(T24)", "comment": null}, {"name": "QuaternionFromT", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "wa", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "w1", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "w2", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "w_err", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "functions", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Constant1", "FrameTorque1", "Modelica.Blocks.Sources", "Modelica.Icons", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Frames.", "Modelica.Mechanics.MultiBody.Frames.Quaternions", "MultiBody", "MultiBody.Forces", "MultiBody.Frames", "MultiBody.Parts", "MultiBody.Types.ResolveInFrameB", "Quaternions", "SI", "TM", "bar2", "body", "body.frame_a", "spring1", "spring2", "world"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage", "Modelica.Icons.Example"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.NewFittings.PartialFittingTest.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "NewFittings", "PartialFittingTest"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\NewFittings.mo", "start_line": 6, "end_line": 6, "start_col": 17, "end_col": 63}, "code_text": "package Medium = Modelica.Media.Air.DryAirNasa", "checksum": "644cb5903f3a48706dae6524b8b56d3dcc20dab9", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\NewFittings.mo:6-6", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Media.Air"], "inheritance_chain": []}
{"fqn": "Modelica.Magnetic.FluxTubes.Shapes.FixedShape", "kind": "package", "name": "FixedShape", "package_path": ["Modelica", "Magnetic", "FluxTubes", "Shapes"], "extends": ["Modelica.Icons.VariantsPackage"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.VariantsPackage", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Shapes\\FixedShape\\package.mo", "start_line": 2, "end_line": 17, "start_col": 1, "end_col": 15}, "code_text": "package FixedShape \"Flux tubes with fixed shape during simulation and linear or non-linear material characteristics\"\r\n  extends Modelica.Icons.VariantsPackage;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nPlease have a look at <a href=\\\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.ReluctanceForceCalculation\\\">UsersGuide.ReluctanceForceCalculation</a> for an explanation of the different flux tube categories and resulting sub-packages.\r\n</p>\r\n\r\n<p>\r\nDue to the restrictions on reluctance force calculation outlined there, flux tube elements with a possibly non-linear material characteristic mu_r(B) must have a fixed shape during simulation of converter motion. Hence, the dimensions of these flux tubes are defined as parameters in the model components that extend the base class <a href=\\\"modelica://Modelica.Magnetic.FluxTubes.BaseClasses.FixedShape\\\">BaseClasses.FixedShape</a>.</p>\r\n\r\n<p>\r\nFor initial design of magnetic circuits, the relative permeability of possibly non-linear flux tube elements can easily be set to a constant value mu_rConst (non-linearPermeability set to false). In some cases, this can simplify the rough geometric design of a device's magnetic circuit. Once an initial geometry is found, the magnetic subsystem can be simulated and fine-tuned with more realistic non-linear characteristics of ferromagnetic materials. Doing so requires setting of the parameter non-linearPermeability to true and selection of one of the soft magnetic materials of <a href=\\\"modelica://Modelica.Magnetic.FluxTubes.Material.SoftMagnetic\\\">Material.SoftMagnetic</a>.\r\n</p>\r\n</html>\"));\r\nend FixedShape", "checksum": "cb7377b9c7f5fc5e04655c53163e780737aa9ae8", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Shapes\\FixedShape\\package.mo:2-17", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 7, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["BaseClasses", "Material", "Modelica.Icons", "Modelica.Magnetic.FluxTubes.BaseClasses", "Modelica.Magnetic.FluxTubes.Material", "Modelica.Magnetic.FluxTubes.UsersGuide", "UsersGuide"], "inheritance_chain": ["Modelica.Icons.VariantsPackage"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Pipes.DynamicPipesWithTraceSubstances.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Pipes", "DynamicPipesWithTraceSubstances"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Pipes\\DynamicPipesWithTraceSubstances.mo", "start_line": 87, "end_line": 87, "start_col": 15, "end_col": 38}, "code_text": "package Medium = Medium", "checksum": "264d3eba769376c7a36a078f4effd0565e938c0f", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Pipes\\DynamicPipesWithTraceSubstances.mo:87-87", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Blocks.Examples.Noise.Utilities.Parts", "kind": "package", "name": "Parts", "package_path": ["Modelica", "Blocks", "Examples", "Noise", "Utilities"], "extends": ["Modelica.Icons.Package", "Modelica.Electrical.Machines.Icons.TransientMachine", "Modelica.Blocks.Icons.Block"], "imports": [], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "f", "type": "SI.Frequency", "default": "50 \"Actual frequency\"", "description": null}, {"name": "tRamp", "type": "SI.Time", "default": "1 \"Frequency ramp\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "181.4 \"Nominal load torque\"", "description": null}, {"name": "tStep", "type": "SI.Time", "default": "1.2 \"Time of load torque step\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2991, "start_col": 9, "end_col": 70}}, {"equations": ["connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}))", "connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}))", "connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}))", "connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}))", "connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}))", "connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}))", "connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}))", "connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}))", "connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2974, "end_line": 2991, "start_col": 11, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2973, "end_line": 2973, "start_col": 9, "end_col": 17}}, {"equations": ["equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2895, "start_col": 9, "end_col": 68}}, {"equations": ["connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2844, "end_line": 2895, "start_col": 11, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2843, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Package | components: Integer×1, Real×1 | connections: 34 | params: VNominal, fNominal, f | units: rad, rad/s | eq: equation connect(spee", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2713, "end_line": 3050, "start_col": 7, "end_col": 16}, "code_text": "package Parts \"Parts for use in the ActuatorWithNoise examples\"\r\n        extends Modelica.Icons.Package;\r\n\r\n        model MotorWithCurrentControl\r\n          \"Synchronous machine with current controller and measurement noise\"\r\n          extends Modelica.Electrical.Machines.Icons.TransientMachine;\r\n          constant Integer m=3 \"Number of phases\";\r\n          parameter SI.Voltage VNominal=100\r\n            \"Nominal RMS voltage per phase\";\r\n          parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n          parameter SI.Frequency f=50 \"Actual frequency\";\r\n          parameter SI.Time tRamp=1 \"Frequency ramp\";\r\n          parameter SI.Torque TLoad=181.4 \"Nominal load torque\";\r\n          parameter SI.Time tStep=1.2 \"Time of load torque step\";\r\n          parameter SI.Inertia JLoad=0.29 \"Load's moment of inertia\";\r\n\r\n          Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\r\n            smpm(\r\n            p=smpmData.p,\r\n            fsNominal=smpmData.fsNominal,\r\n            Rs=smpmData.Rs,\r\n            TsRef=smpmData.TsRef,\r\n            Lszero=smpmData.Lszero,\r\n            Lssigma=smpmData.Lssigma,\r\n            Jr=smpmData.Jr,    Js=smpmData.Js,\r\n            frictionParameters=smpmData.frictionParameters,\r\n            wMechanical(fixed=true),\r\n            statorCoreParameters=smpmData.statorCoreParameters,\r\n            strayLoadParameters=smpmData.strayLoadParameters,\r\n            VsOpenCircuit=smpmData.VsOpenCircuit,\r\n            Lmd=smpmData.Lmd,\r\n            Lmq=smpmData.Lmq,\r\n            useDamperCage=smpmData.useDamperCage,\r\n            Lrsigmad=smpmData.Lrsigmad,\r\n            Lrsigmaq=smpmData.Lrsigmaq,\r\n            Rrd=smpmData.Rrd,\r\n            Rrq=smpmData.Rrq,\r\n            TrRef=smpmData.TrRef,\r\n            permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,\r\n            phiMechanical(fixed=true),\r\n            TsOperational=293.15,\r\n            alpha20s=smpmData.alpha20s,\r\n            TrOperational=293.15,\r\n            alpha20r=smpmData.alpha20r)\r\n            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n          Modelica.Electrical.Polyphase.Sources.SignalCurrent signalCurrent(final m=m)\r\n            annotation (Placement(transformation(\r\n                origin={-10,50},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Polyphase.Basic.Star star(final m=m)\r\n            annotation (Placement(transformation(extent={{-10,80},{-30,100}})));\r\n          Modelica.Electrical.Analog.Basic.Ground ground\r\n            annotation (Placement(transformation(\r\n                origin={-50,90},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.DQToThreePhase dqToThreePhase(\r\n              p=smpm.p)\r\n            annotation (Placement(transformation(extent={{-50,40},{-30,60}})));\r\n          Modelica.Electrical.Polyphase.Basic.Star starM(final m=m) annotation (Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=180,\r\n                origin={-60,-10})));\r\n          Modelica.Electrical.Analog.Basic.Ground groundM\r\n            annotation (Placement(transformation(\r\n                origin={-80,-28},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(\r\n              terminalConnection=\"Y\") annotation (Placement(transformation(extent={{-20,-30},\r\n                    {0,-10}})));\r\n          Modelica.Electrical.Machines.Sensors.RotorDisplacementAngle rotorDisplacementAngle(p=smpm.p)\r\n            annotation (Placement(transformation(\r\n                origin={20,-40},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={10,0})));\r\n          Modelica.Mechanics.Rotational.Sensors.TorqueSensor torqueSensor annotation (\r\n              Placement(transformation(\r\n                extent={{10,10},{-10,-10}},\r\n                rotation=180,\r\n                origin={50,-40})));\r\n          Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={30,0})));\r\n          Modelica.Electrical.Machines.Sensors.VoltageQuasiRMSSensor voltageQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=180,\r\n                origin={-30,-10})));\r\n          Modelica.Electrical.Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                origin={-10,0},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=0.29)\r\n            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));\r\n          parameter\r\n            Modelica.Electrical.Machines.Utilities.ParameterRecords.SM_PermanentMagnetData\r\n            smpmData(useDamperCage=false) \"Data for motor\"\r\n            annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n          Modelica.Blocks.Sources.Constant id(k=0)\r\n            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n          Modelica.Blocks.Interfaces.RealInput iq_rms1 annotation (Placement(\r\n                transformation(extent={{-140,40},{-100,80}}),iconTransformation(extent={{-140,40},\r\n                    {-100,80}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange\r\n            \"Right flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Blocks.Interfaces.RealOutput phi(unit=\"rad\")\r\n            \"Absolute angle of flange as output signal\" annotation (Placement(\r\n                transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                origin={110,80}), iconTransformation(extent={{40,70},{60,90}})));\r\n          output Real phi_motor(unit=\"rad\", displayUnit=\"deg\")=angleSensor.phi\r\n            \"Rotational position\";\r\n          output Real w(unit=\"rad/s\")=speedSensor.w \"Rotational speed\";\r\n          Modelica.Blocks.Math.Add addNoise\r\n            annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n          .Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n            samplePeriod=1/200,\r\n            y_min=-0.01,\r\n            y_max=0.01) annotation (Placement(transformation(extent={{26,76},{46,96}})));\r\n        equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}));\r\n          connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}));\r\n          connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}));\r\n          connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}));\r\n          connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}));\r\n          connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}));\r\n          connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}));\r\n          connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}));\r\n          connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}));\r\n          connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}));\r\n          connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}));\r\n          connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}));\r\n          connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}));\r\n          connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}));\r\n          connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}));\r\n          connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}));\r\n          connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}));\r\n          connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}));\r\n          connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}));\r\n          connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}));\r\n          connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}));\r\n          annotation (\r\n            Documentation(info=\"<html>\r\n<p>\r\nA synchronous machine with permanent magnets, current controller and\r\nmeasurement noise of &plusmn;0.01 rad accelerates a quadratic speed dependent load from standstill.\r\nThe rms values of d- and q-current in rotor fixed coordinate system are converted to three-phase currents,\r\nand fed to the machine. The result shows that the torque is influenced by the q-current,\r\nwhereas the stator voltage is influenced by the d-current.\r\n</p>\r\n\r\n<p>\r\nDefault machine parameters of model\r\n<a href=\\\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\\\">SM_PermanentMagnet</a>\r\nare used.\r\n</p>\r\n\r\n<p>\r\nThis motor is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\",         revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n                    100}}), graphics={Rectangle(\r\n                  extent={{40,50},{-100,100}},\r\n                  fillColor={255,170,85},\r\n                  fillPattern=FillPattern.Solid,\r\n                  pattern=LinePattern.None), Text(\r\n                extent={{-150,150},{150,110}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n        end MotorWithCurrentControl;\r\n\r\n        model Controller \"Simple position controller for actuator\"\r\n          extends Modelica.Blocks.Icons.Block;\r\n\r\n          Modelica.Blocks.Continuous.PI speed_PI(k=10, T=5e-2,\r\n            initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{38,-10},{58,10}})));\r\n          Modelica.Blocks.Math.Feedback speedFeedback\r\n            annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n          Modelica.Blocks.Continuous.Derivative positionToSpeed(initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n              T=0.01)\r\n            annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionMeasured\r\n            \"Position signal of motor\"\r\n            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));\r\n          Modelica.Blocks.Interfaces.RealInput positionReference\r\n            \"Reference position\"\r\n            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));\r\n          Modelica.Blocks.Interfaces.RealOutput y1\r\n            \"Connector of Real output signal\"\r\n            annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n          Modelica.Blocks.Continuous.PI position_PI(T=5e-1, k=3,\r\n            initType=Modelica.Blocks.Types.Init.InitialState)\r\n            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));\r\n          Modelica.Blocks.Math.Feedback positionFeedback\r\n            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));\r\n          Modelica.Blocks.Continuous.FirstOrder busdelay(T=1e-3, initType=Modelica.Blocks.Types.Init.InitialOutput)\r\n            annotation (Placement(transformation(extent={{68,-10},{88,10}})));\r\n        equation\r\n          connect(speedFeedback.y, speed_PI.u) annotation (Line(\r\n              points={{29,0},{36,0}}, color={0,0,127}));\r\n          connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(\r\n              points={{-80,52},{-80,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionReference, positionFeedback.u1) annotation (Line(\r\n              points={{-120,60},{-88,60}}, color={0,0,127}));\r\n          connect(positionFeedback.y, position_PI.u) annotation (Line(\r\n              points={{-71,60},{-62,60}}, color={0,0,127}));\r\n          connect(position_PI.y, speedFeedback.u1) annotation (Line(\r\n              points={{-39,60},{0,60},{0,0},{12,0}}, color={0,0,127}));\r\n          connect(speed_PI.y, busdelay.u) annotation (Line(\r\n              points={{59,0},{66,0}}, color={0,0,127}));\r\n          connect(y1, busdelay.y) annotation (Line(\r\n              points={{110,0},{89,0}}, color={0,0,127}));\r\n          connect(positionMeasured, positionToSpeed.u) annotation (Line(\r\n              points={{-120,-60},{-62,-60}}, color={0,0,127}));\r\n          connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(\r\n              points={{-39,-60},{20,-60},{20,-8}}, color={0,0,127}));\r\n          annotation (Icon(coordinateSystem(\r\n                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n                Text(\r\n                  extent={{-40,50},{40,-30}},\r\n                  textColor={0,0,255},\r\n                  textString=\"PI\")}),\r\n            Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",         info=\"<html>\r\n<p>\r\nA simple position controller for a drive system.\r\nThis controller is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n        end Controller;\r\n      annotation (Documentation(revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\",       info=\"<html>\r\n<p>\r\nParts used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\"));\r\n      end Parts", "checksum": "217f0b854ba7a03da09f2f058f0c1c40c2cb8949", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:2713-3050", "component_count": 2, "connection_count": 34, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 7, "equation_count": 6, "dependency_count": 52, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": true, "complexity_score": 115.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "equation connect(speedFeedback.y, speed_PI.u) annotation (Line( points={{29,0},{36,0}}, color={0,0,127}))", "search_keywords": ["Integer", "Real", "rad", "rad/s", "system"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "w", "type_name": "Real", "prefixes": ["output"], "modifications": {"unit": "\"rad/s\""}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_n", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_p", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "signalCurrent.plug_p", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "angleSensor.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "dqToThreePhase.phi", "condition": null}, {"from_connector": "groundM.p", "to_connector": "terminalBox.starpoint", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "torqueSensor.flange_a", "condition": null}, {"from_connector": "voltageQuasiRMSSensor.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "starM.plug_p", "to_connector": "voltageQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "starM.pin_n", "to_connector": "groundM.p", "condition": null}, {"from_connector": "dqToThreePhase.y", "to_connector": "signalCurrent.i", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "smpm.flange", "condition": null}, {"from_connector": "torqueSensor.flange_b", "to_connector": "inertiaLoad.flange_a", "condition": null}, {"from_connector": "signalCurrent.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "voltageQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "inertiaLoad.flange_b", "to_connector": "flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "addNoise.u2", "condition": null}, {"from_connector": "addNoise.y", "to_connector": "phi", "condition": null}, {"from_connector": "uniformNoise.y", "to_connector": "addNoise.u1", "condition": null}, {"from_connector": "id.y", "to_connector": "dqToThreePhase.d", "condition": null}, {"from_connector": "iq_rms1", "to_connector": "dqToThreePhase.q", "condition": null}, {"from_connector": "speedFeedback.y", "to_connector": "speed_PI.u", "condition": null}, {"from_connector": "positionFeedback.u2", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionReference", "to_connector": "positionFeedback.u1", "condition": null}, {"from_connector": "positionFeedback.y", "to_connector": "position_PI.u", "condition": null}, {"from_connector": "position_PI.y", "to_connector": "speedFeedback.u1", "condition": null}, {"from_connector": "speed_PI.y", "to_connector": "busdelay.u", "condition": null}, {"from_connector": "y1", "to_connector": "busdelay.y", "condition": null}, {"from_connector": "positionMeasured", "to_connector": "positionToSpeed.u", "condition": null}, {"from_connector": "positionToSpeed.y", "to_connector": "speedFeedback.u2", "condition": null}], "variables": [{"name": "phi_motor", "type_name": "Real", "prefixes": ["output"], "attributes": {"unit": "rad", "displayUnit": "deg"}, "binding_equation": "angleSensor.phi\r\n            \"Rotational position\"", "comment": null}, {"name": "w", "type_name": "Real", "prefixes": ["output"], "attributes": {"unit": "rad/s"}, "binding_equation": "speedSensor.w \"Rotational speed\"", "comment": null}, {"name": "MotorWithCurrentControl", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Controller", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "phi_motor", "unit": "rad", "display_unit": "deg", "quantity": null, "nominal": null}, {"name": "w", "unit": "rad/s", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Examples.Noise", "FillPattern", "LinePattern", "Modelica.Blocks.Continuous", "Modelica.Blocks.Examples.Noise", "Modelica.Blocks.Icons", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Sources", "Modelica.Blocks.Types.Init", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.BasicMachines.SynchronousMachines", "Modelica.Electrical.Machines.Icons", "Modelica.Electrical.Machines.Sensors", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Machines.Utilities.ParameterRecords", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sensors", "SI", "addNoise", "angleSensor", "busdelay", "currentQuasiRMSSensor", "dlr_logo", "dqToThreePhase", "ground", "groundM", "id", "inertiaLoad", "positionFeedback", "positionToSpeed", "position_PI", "rotorDisplacementAngle", "signalCurrent", "smpm", "smpmData", "speedFeedback", "speedSensor", "speed_PI", "star", "starM", "terminalBox", "torqueSensor", "uniformNoise", "v", "voltageQuasiRMSSensor", "www.dlr"], "inheritance_chain": ["Modelica.Icons.Package", "Modelica.Electrical.Machines.Icons.TransientMachine", "Modelica.Blocks.Icons.Block"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Vessels.TestSimpleTank.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Vessels", "TestSimpleTank"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Vessels\\TestSimpleTank.mo", "start_line": 8, "end_line": 9, "start_col": 15, "end_col": 57}, "code_text": "package Medium =\r\n        Modelica.Media.Water.ConstantPropertyLiquidWater", "checksum": "ec1149da62d8d063ae4bd69bdb66dc0df86daf57", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Vessels\\TestSimpleTank.mo:8-9", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Media.Water"], "inheritance_chain": []}
{"fqn": "Modelica.Fluid.Examples.TraceSubstances.RoomCO2WithControls.Medium", "kind": "package", "name": "Medium", "package_path": ["Modelica", "Fluid", "Examples", "TraceSubstances", "RoomCO2WithControls"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Examples\\TraceSubstances.mo", "start_line": 172, "end_line": 172, "start_col": 52, "end_col": 75}, "code_text": "package Medium = Medium", "checksum": "264d3eba769376c7a36a078f4effd0565e938c0f", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Examples\\TraceSubstances.mo:172-172", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "ModelicaTest.Fluid.TestComponents.Fittings.TestMultiPortTraceSubstances.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Fittings", "TestMultiPortTraceSubstances"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Fittings\\TestMultiPortTraceSubstances.mo", "start_line": 82, "end_line": 83, "start_col": 62, "end_col": 15}, "code_text": "package Medium =\r\n        Medium", "checksum": "16235663bca0b6f7459771eb3c1c78d88b8c65c9", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Fittings\\TestMultiPortTraceSubstances.mo:82-83", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Media.Interfaces.Types.TwoPhase", "kind": "package", "name": "TwoPhase", "package_path": ["Modelica", "Media", "Interfaces", "Types"], "extends": ["Icons.Package", "Modelica.Media.Interfaces.Types.Basic.FluidConstants"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Icons.Package | components: Temperature×4, Boolean×4, AbsolutePressure×2", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 6787, "end_line": 6829, "start_col": 5, "end_col": 17}, "code_text": "package TwoPhase\r\n      \"The two phase fluid version of a record used in several degrees of detail\"\r\n      extends Icons.Package;\r\n\r\n      record FluidConstants \"Extended fluid constants\"\r\n        extends Modelica.Media.Interfaces.Types.Basic.FluidConstants;\r\n        Temperature criticalTemperature \"Critical temperature\";\r\n        AbsolutePressure criticalPressure \"Critical pressure\";\r\n        MolarVolume criticalMolarVolume \"Critical molar Volume\";\r\n        Real acentricFactor \"Pitzer acentric factor\";\r\n        Temperature triplePointTemperature \"Triple point temperature\";\r\n        AbsolutePressure triplePointPressure \"Triple point pressure\";\r\n        Temperature meltingPoint \"Melting point at 101325 Pa\";\r\n        Temperature normalBoilingPoint \"Normal boiling point (at 101325 Pa)\";\r\n        DipoleMoment dipoleMoment\r\n          \"Dipole moment of molecule in Debye (1 debye = 3.33564e-30 C.m)\";\r\n        Boolean hasIdealGasHeatCapacity=false\r\n          \"= true, if ideal gas heat capacity is available\";\r\n        Boolean hasCriticalData=false \"= true, if critical data are known\";\r\n        Boolean hasDipoleMoment=false \"= true, if a dipole moment known\";\r\n        Boolean hasFundamentalEquation=false \"= true, if a fundamental equation\";\r\n        Boolean hasLiquidHeatCapacity=false\r\n          \"= true, if liquid heat capacity is available\";\r\n        Boolean hasSolidHeatCapacity=false\r\n          \"= true, if solid heat capacity is available\";\r\n        Boolean hasAccurateViscosityData=false\r\n          \"= true, if accurate data for a viscosity function is available\";\r\n        Boolean hasAccurateConductivityData=false\r\n          \"= true, if accurate data for thermal conductivity is available\";\r\n        Boolean hasVapourPressureCurve=false\r\n          \"= true, if vapour pressure data, e.g., Antoine coefficients are known\";\r\n        Boolean hasAcentricFactor=false\r\n          \"= true, if Pitzer acentric factor is known\";\r\n        SpecificEnthalpy HCRIT0=0.0\r\n          \"Critical specific enthalpy of the fundamental equation\";\r\n        SpecificEntropy SCRIT0=0.0\r\n          \"Critical specific entropy of the fundamental equation\";\r\n        SpecificEnthalpy deltah=0.0\r\n          \"Difference between specific enthalpy model (h_m) and f.eq. (h_f) (h_m - h_f)\";\r\n        SpecificEntropy deltas=0.0\r\n          \"Difference between specific enthalpy model (s_m) and f.eq. (s_f) (s_m - s_f)\";\r\n      end FluidConstants;\r\n    end TwoPhase", "checksum": "eb9947ce976509b33237b13ab309aa9a7ecfe619", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo:6787-6829", "component_count": 12, "connection_count": 0, "variable_count": 24, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 5, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 24.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["AbsolutePressure", "Boolean", "MolarVolume", "Real", "Temperature", "library"]}, "components": [{"name": "criticalTemperature", "type_name": "Temperature", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical temperature"}, {"name": "criticalPressure", "type_name": "AbsolutePressure", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical pressure"}, {"name": "criticalMolarVolume", "type_name": "MolarVolume", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Critical molar Volume"}, {"name": "acentricFactor", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Pitzer acentric factor"}, {"name": "triplePointTemperature", "type_name": "Temperature", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Triple point temperature"}, {"name": "triplePointPressure", "type_name": "AbsolutePressure", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Triple point pressure"}, {"name": "meltingPoint", "type_name": "Temperature", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Melting point at 101325 Pa"}, {"name": "normalBoilingPoint", "type_name": "Temperature", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Normal boiling point (at 101325 Pa)"}, {"name": "hasCriticalData", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "if", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "hasDipoleMoment", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "hasFundamentalEquation", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "criticalTemperature", "type_name": "Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Critical temperature\""}, {"name": "criticalPressure", "type_name": "AbsolutePressure", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Critical pressure\""}, {"name": "criticalMolarVolume", "type_name": "MolarVolume", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Critical molar Volume\""}, {"name": "acentricFactor", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Pitzer acentric factor\""}, {"name": "triplePointTemperature", "type_name": "Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Triple point temperature\""}, {"name": "triplePointPressure", "type_name": "AbsolutePressure", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Triple point pressure\""}, {"name": "meltingPoint", "type_name": "Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Melting point at 101325 Pa\""}, {"name": "normalBoilingPoint", "type_name": "Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Normal boiling point (at 101325 Pa)\""}, {"name": "dipoleMoment", "type_name": "DipoleMoment", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Dipole moment of molecule in Debye (1 debye = 3.33564e-30 C.m)\""}, {"name": "hasIdealGasHeatCapacity", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if ideal gas heat capacity is available\"", "comment": null}, {"name": "hasCriticalData", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false \"= true, if critical data are known\"", "comment": null}, {"name": "hasDipoleMoment", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false \"= true, if a dipole moment known\"", "comment": null}, {"name": "hasFundamentalEquation", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false \"= true, if a fundamental equation\"", "comment": null}, {"name": "hasLiquidHeatCapacity", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if liquid heat capacity is available\"", "comment": null}, {"name": "hasSolidHeatCapacity", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if solid heat capacity is available\"", "comment": null}, {"name": "hasAccurateViscosityData", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if accurate data for a viscosity function is available\"", "comment": null}, {"name": "hasAccurateConductivityData", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if accurate data for thermal conductivity is available\"", "comment": null}, {"name": "hasVapourPressureCurve", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if vapour pressure data, e.g., Antoine coefficients are known\"", "comment": null}, {"name": "hasAcentricFactor", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": "false\r\n          \"= true, if Pitzer acentric factor is known\"", "comment": null}, {"name": "HCRIT0", "type_name": "SpecificEnthalpy", "prefixes": [], "attributes": {}, "binding_equation": "0.0\r\n          \"Critical specific enthalpy of the fundamental equation\"", "comment": null}, {"name": "SCRIT0", "type_name": "SpecificEntropy", "prefixes": [], "attributes": {}, "binding_equation": "0.0\r\n          \"Critical specific entropy of the fundamental equation\"", "comment": null}, {"name": "deltah", "type_name": "SpecificEnthalpy", "prefixes": [], "attributes": {}, "binding_equation": "0.0\r\n          \"Difference between specific enthalpy model (h_m) and f.eq. (h_f) (h_m - h_f)\"", "comment": null}, {"name": "deltas", "type_name": "SpecificEntropy", "prefixes": [], "attributes": {}, "binding_equation": "0.0\r\n          \"Difference between specific enthalpy model (s_m) and f.eq. (s_f) (s_m - s_f)\"", "comment": null}, {"name": "FluidConstants", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["C", "Icons", "Modelica.Media.Interfaces.Types.Basic", "e", "f"], "inheritance_chain": ["Icons.Package", "Modelica.Media.Interfaces.Types.Basic.FluidConstants"]}
{"fqn": "Modelica.Thermal.HeatTransfer.Fahrenheit", "kind": "package", "name": "Fahrenheit", "package_path": ["Modelica", "Thermal", "HeatTransfer"], "extends": ["Modelica.Icons.VariantsPackage"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.VariantsPackage", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Thermal\\HeatTransfer\\Fahrenheit\\package.mo", "start_line": 2, "end_line": 23, "start_col": 1, "end_col": 15}, "code_text": "package Fahrenheit \"Components with Fahrenheit input and/or output\"\r\n  extends Modelica.Icons.VariantsPackage;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThe components of this package are provided for the convenience of\r\npeople working mostly with Fahrenheit units, since all models\r\nin package HeatTransfer are based on Kelvin units.\r\n</p>\r\n<p>\r\nNote, that in package Modelica.Units.Conversions, functions are provided\r\nto convert between the units Kelvin, degree Celsius, degree Fahrenheit\r\nand degree Rankine. These functions allow, e.g., a direct conversion\r\nof units at all places where Kelvin is required as parameter.\r\nExample:\r\n</p>\r\n<blockquote><pre>\r\n<strong>import</strong> Modelica.Units.Conversions.from_degF;\r\nModelica.Thermal.HeatTransfer.HeatCapacitor C(T0 = from_degF(70));\r\n</pre></blockquote>\r\n</html>\"));\r\nend Fahrenheit", "checksum": "4c6ae83ccde2d4be091ec995e331dcca3cca5621", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Thermal\\HeatTransfer\\Fahrenheit\\package.mo:2-23", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 5, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Icons", "Modelica.Thermal.HeatTransfer", "Modelica.Units", "Modelica.Units.Conversions", "e"], "inheritance_chain": ["Modelica.Icons.VariantsPackage"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Machines.TestControlledPump.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Machines", "TestControlledPump"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Machines\\TestControlledPump.mo", "start_line": 32, "end_line": 32, "start_col": 15, "end_col": 66}, "code_text": "package Medium = Modelica.Media.Water.StandardWater", "checksum": "dbd7e2cf0e23251c26735f936cdf34a316eb10fe", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Machines\\TestControlledPump.mo:32-32", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Media.Water"], "inheritance_chain": []}
{"fqn": "Modelica.Electrical.QuasiStatic.Polyphase.Interfaces", "kind": "package", "name": "Interfaces", "package_path": ["Modelica", "Electrical", "QuasiStatic", "Polyphase"], "extends": ["Modelica.Icons.InterfacesPackage"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.InterfacesPackage", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Interfaces\\package.mo", "start_line": 2, "end_line": 4, "start_col": 1, "end_col": 15}, "code_text": "package Interfaces \"Interfaces for AC polyphase models\"\r\n  extends Modelica.Icons.InterfacesPackage;\r\nend Interfaces", "checksum": "d8ee6903835a28e19f3bd512e2d61b4b842169fc", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Interfaces\\package.mo:2-4", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.InterfacesPackage"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Pipes.DynamicPipeEnergyConservationCheck.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Pipes", "DynamicPipeEnergyConservationCheck"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Pipes\\DynamicPipeEnergyConservationCheck.mo", "start_line": 25, "end_line": 25, "start_col": 15, "end_col": 66}, "code_text": "package Medium = Modelica.Media.Water.StandardWater", "checksum": "dbd7e2cf0e23251c26735f936cdf34a316eb10fe", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Pipes\\DynamicPipeEnergyConservationCheck.mo:25-25", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Media.Water"], "inheritance_chain": []}
{"fqn": "ModelicaTest.Fluid.TestComponents.Machines.TestControlledPump.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Machines", "TestControlledPump"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Machines\\TestControlledPump.mo", "start_line": 53, "end_line": 53, "start_col": 15, "end_col": 66}, "code_text": "package Medium = Modelica.Media.Water.StandardWater", "checksum": "dbd7e2cf0e23251c26735f936cdf34a316eb10fe", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Machines\\TestControlledPump.mo:53-53", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Media.Water"], "inheritance_chain": []}
{"fqn": "ModelicaTest.Fluid.TestComponents.Valves.TestValveCharacteristics.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Valves", "TestValveCharacteristics"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Valves\\TestValveCharacteristics.mo", "start_line": 63, "end_line": 63, "start_col": 15, "end_col": 66}, "code_text": "package Medium = Modelica.Media.Water.StandardWater", "checksum": "dbd7e2cf0e23251c26735f936cdf34a316eb10fe", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Valves\\TestValveCharacteristics.mo:63-63", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Media.Water"], "inheritance_chain": []}
{"fqn": "ModelicaTest.Fluid.TestComponents.Sources.TestSources.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Sources", "TestSources"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Sources\\TestSources.mo", "start_line": 87, "end_line": 88, "start_col": 61, "end_col": 15}, "code_text": "package Medium =\r\n        Medium", "checksum": "16235663bca0b6f7459771eb3c1c78d88b8c65c9", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Sources\\TestSources.mo:87-88", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Magnetic.FundamentalWave.Examples.Components", "kind": "package", "name": "Components", "package_path": ["Modelica", "Magnetic", "FundamentalWave", "Examples"], "extends": ["Modelica.Icons.ExamplesPackage"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.ExamplesPackage", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FundamentalWave\\Examples\\Components\\package.mo", "start_line": 2, "end_line": 4, "start_col": 1, "end_col": 15}, "code_text": "package Components \"Examples of components of the FundamentalWave library\"\r\n  extends Modelica.Icons.ExamplesPackage;\r\nend Components", "checksum": "3683eff2ba7dc1edaa922d4bb0d68acfb22266ce", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FundamentalWave\\Examples\\Components\\package.mo:2-4", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.ExamplesPackage"]}
{"fqn": "Modelica.Fluid.Examples.AST_BatchPlant.BaseClasses.TankWithTopPorts.Medium", "kind": "package", "name": "Medium", "package_path": ["Modelica", "Fluid", "Examples", "AST_BatchPlant", "BaseClasses", "TankWithTopPorts"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Examples\\AST_BatchPlant.mo", "start_line": 1484, "end_line": 1485, "start_col": 68, "end_col": 26}, "code_text": "package\r\n          Medium = Medium", "checksum": "816c4fd5c951992cb1b6475eef9604b4155cd874", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Examples\\AST_BatchPlant.mo:1484-1485", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Media.CompressibleLiquids.LinearColdWater", "kind": "package", "name": "LinearColdWater", "package_path": ["Modelica", "Media", "CompressibleLiquids"], "extends": ["Media.Interfaces.PartialLinearFluid", "dynamicViscosity", "thermalConductivity"], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    lambda := 0.572"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\CompressibleLiquids.mo", "start_line": 46, "end_line": 47, "start_col": 3, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\CompressibleLiquids.mo", "start_line": 46, "end_line": 46, "start_col": 3, "end_col": 12}}, {"equations": ["algorithm\r\n    eta := 1.5e-3"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\CompressibleLiquids.mo", "start_line": 40, "end_line": 41, "start_col": 3, "end_col": 19}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\CompressibleLiquids.mo", "start_line": 40, "end_line": 40, "start_col": 3, "end_col": 12}}], "docstring": "extends Media.Interfaces.PartialLinearFluid | eq: algorithm lambda := 0.572", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\CompressibleLiquids.mo", "start_line": 25, "end_line": 50, "start_col": 3, "end_col": 22}, "code_text": "package LinearColdWater \"Cold water model with linear compressibility\"\r\n    extends Media.Interfaces.PartialLinearFluid(\r\n      mediumName=\"Linear cold water\",\r\n      constantJacobian=true,\r\n      reference_p=101325,\r\n      reference_T=278.15,\r\n      reference_d=997.05,\r\n      reference_h=104929,\r\n      reference_s=100.0,\r\n      cp_const=4181.9,\r\n      beta_const=2.5713e-4,\r\n      kappa_const=4.5154e-10,\r\n      MM_const=0.018015268);\r\n\r\n  redeclare function extends dynamicViscosity \"Dynamic viscosity of water\"\r\n  algorithm\r\n    eta := 1.5e-3;\r\n  end dynamicViscosity;\r\n\r\n  redeclare function extends thermalConductivity\r\n      \"Thermal conductivity of water\"\r\n  algorithm\r\n    lambda := 0.572;\r\n  end thermalConductivity;\r\n\r\n  end LinearColdWater", "checksum": "a7dcf79cd5aa725873c392493fe653ab5b962d87", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\CompressibleLiquids.mo:25-50", "component_count": 0, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 4, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 4.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "equation_summary": "algorithm lambda := 0.572", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [{"name": "dynamicViscosity", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "thermalConductivity", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["Media.Interfaces"], "inheritance_chain": ["Media.Interfaces.PartialLinearFluid", "dynamicViscosity", "thermalConductivity"]}
{"fqn": "ModelicaTest.Fluid.TestComponents.Sensors.TestTraceSubstances.Medium", "kind": "package", "name": "Medium", "package_path": ["ModelicaTest", "Fluid", "TestComponents", "Sensors", "TestTraceSubstances"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Sensors\\TestTraceSubstances.mo", "start_line": 16, "end_line": 17, "start_col": 67, "end_col": 30}, "code_text": "package\r\n      Medium =         Medium", "checksum": "182dd6a16583f711725eaf5d64df96ac5433df26", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestComponents\\Sensors\\TestTraceSubstances.mo:16-17", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "library", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "package", "search_keywords": ["library"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "ObsoleteModelica4.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricMultiPhaseCageWinding", "kind": "model", "name": "SymmetricMultiPhaseCageWinding", "package_path": ["ObsoleteModelica4", "Magnetic", "FundamentalWave", "BasicMachines", "Components"], "extends": ["Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "m", "type": "Integer", "default": "3 \"Number of phases\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"Enable / disable (=fixed temperatures) thermal port\" parameter SI.Resistance RRef \"Winding resistance per phase at TRef\"", "description": null}, {"name": "effectiveTurns", "type": "Real", "default": "1 \"Effective number of turns\"", "description": null}, {"name": "alpha20(start", "type": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "default": "0) \"Temperature coefficient of winding at 20 degC\"", "description": null}, {"name": "Lsigma \"Cage stray inductance\"", "type": "SI.Inductance", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2715, "start_col": 11, "end_col": 64}}, {"equations": ["connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}))", "connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}))", "connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}))", "connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}))", "connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}))", "connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}))", "connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}))", "connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2698, "end_line": 2715, "start_col": 13, "end_col": 64}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2697, "end_line": 2697, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Icons.ObsoleteModel | components: SI.Current×1 | connections: 9 | params: m, useHeatPort, effectiveTurns | units: A, m | eq: equation connect(p", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 2635, "end_line": 2753, "start_col": 11, "end_col": 45}, "code_text": "model SymmetricMultiPhaseCageWinding \"Symmetrical rotor cage\"\r\n            import Modelica.Constants.pi;\r\n            extends Modelica.Icons.ObsoleteModel;\r\n            extends Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended;\r\n            parameter Integer m=3 \"Number of phases\";\r\n            parameter Boolean useHeatPort=false\r\n              \"Enable / disable (=fixed temperatures) thermal port\"\r\n              annotation (Evaluate=true);\r\n            parameter SI.Resistance RRef\r\n              \"Winding resistance per phase at TRef\";\r\n            parameter SI.Temperature TRef(start=293.15)\r\n              \"Reference temperature of winding\";\r\n            parameter\r\n              Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20\r\n              alpha20(start=0) \"Temperature coefficient of winding at 20 degC\";\r\n            final parameter SI.LinearTemperatureCoefficient alphaRef=\r\n                Modelica.Electrical.Machines.Thermal.convertAlpha(\r\n                      alpha20,\r\n                      TRef,\r\n                      293.15) \"Temperature coefficient of winding at reference temperature\";\r\n            parameter SI.Temperature TOperational(start=293.15)\r\n              \"Operational temperature of winding\"\r\n              annotation (Dialog(enable=not useHeatPort));\r\n            parameter SI.Inductance Lsigma \"Cage stray inductance\";\r\n            parameter Real effectiveTurns=1 \"Effective number of turns\";\r\n            SI.Current i[m]=strayInductor.i \"Cage currents\";\r\n            Modelica.Magnetic.FundamentalWave.Components.PolyphaseElectroMagneticConverter\r\n              winding(\r\n              final m=m,\r\n              final effectiveTurns=fill(effectiveTurns, m),\r\n              final orientation=\r\n                  Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m))\r\n              \"Symmetric winding\" annotation (Placement(transformation(\r\n                  origin={0,-10},\r\n                  extent={{-10,-10},{10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Inductor strayInductor(final m=m,\r\n                final L=fill(Lsigma, m)) annotation (Placement(transformation(\r\n                  origin={-20,-30},\r\n                  extent={{10,-10},{-10,10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Resistor resistor(\r\n              final useHeatPort=useHeatPort,\r\n              final m=m,\r\n              final R=fill(RRef, m),\r\n              final T_ref=fill(TRef, m),\r\n              final alpha=fill(alphaRef, m),\r\n              final T=fill(TOperational, m)) annotation (Placement(transformation(\r\n                  origin={-20,-70},\r\n                  extent={{10,10},{-10,-10}},\r\n                  rotation=90)));\r\n            Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n                Placement(transformation(extent={{30,-30},{50,-10}})));\r\n            Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n                  transformation(\r\n                  origin={70,-20},\r\n                  extent={{-10,10},{10,-10}},\r\n                  rotation=270)));\r\n            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortWinding if useHeatPort \"Heat ports of winding resistor\" annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n            Modelica.Thermal.HeatTransfer.Components.ThermalCollector thermalCollector(final m=m) if useHeatPort \"Connector of thermal rotor resistance heat ports\" annotation (Placement(transformation(extent={{-50,-90},{-30,-70}})));\r\n            Modelica.Electrical.Polyphase.Basic.Star starAuxiliary(final m=m)\r\n              annotation (Placement(transformation(extent={{30,-90},{50,-70}})));\r\n          equation\r\n            connect(port_p, winding.port_p)\r\n              annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}));\r\n            connect(winding.port_n, port_n) annotation (Line(points={{10,0},\r\n                    {100,0}}, color={255,128,0}));\r\n            connect(ground.p, star.pin_n) annotation (Line(points={{60,-20},{56,-20},\r\n                    {50,-20}}, color={0,0,255}));\r\n            connect(strayInductor.plug_n, resistor.plug_p)\r\n              annotation (Line(points={{-20,-40},{-20,-60}}, color={0,0,255}));\r\n            connect(strayInductor.plug_p, winding.plug_p) annotation (Line(\r\n                points={{-20,-20},{-10,-20}}, color={0,0,255}));\r\n            connect(star.plug_p, winding.plug_n) annotation (Line(\r\n                points={{30,-20},{10,-20}}, color={0,0,255}));\r\n            connect(thermalCollector.port_a, resistor.heatPort) annotation (Line(\r\n                points={{-40,-70},{-30,-70}}, color={191,0,0}));\r\n            connect(thermalCollector.port_b, heatPortWinding) annotation (Line(\r\n                points={{-40,-90},{-40,-100},{0,-100}}, color={191,0,0}));\r\n            connect(resistor.plug_n, starAuxiliary.plug_p) annotation (Line(\r\n                points={{-20,-80},{30,-80}}, color={0,0,255}));\r\n            annotation (defaultComponentName=\"cage\", obsolete=\"Obsolete model, see #1536 (https://github.com/modelica/ModelicaStandardLibrary/issues/1536) and #3030 (https://github.com/modelica/ModelicaStandardLibrary/issues/3030), use Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding instead\",\r\n              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n                      {100,100}}), graphics={Ellipse(\r\n                          extent={{-80,80},{80,-80}},\r\n                          fillColor={175,175,175},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,76},{20,36}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,46},{68,6}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{28,-8},{68,-48}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-20,-36},{20,-76}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-68,-6},{-28,-46}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Ellipse(\r\n                          extent={{-66,50},{-26,10}},\r\n                          fillColor={255,255,255},\r\n                          fillPattern=FillPattern.Solid),Line(points={{-80,0},{-100,\r\n                    0}}, color={255,128,0}),Line(points={{100,0},{80,0}}, color={\r\n                    255,128,0}),Text(\r\n                          extent={{0,100},{0,140}},\r\n                          lineColor={0,0,255},\r\n                          textString=\"%name\")}),\r\n              Documentation(info=\"<html>\r\n<p>\r\nObsolete symmetric cage model, see\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/1536\\\">#1536</a> and\r\n<a href=\\\"https://github.com/modelica/ModelicaStandardLibrary/issues/3030\\\">#3030</a>, use\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.BasicMachines.Components.SymmetricPolyphaseCageWinding\\\">SymmetricPolyphaseCageWinding</a> instead.\r\n</p>\r\n</html>\"));\r\n          end SymmetricMultiPhaseCageWinding", "checksum": "f145f3be4aa63bddffba2228eaa5745f0d01d8e2", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:2635-2753", "component_count": 1, "connection_count": 9, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 5, "equation_count": 3, "dependency_count": 22, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 34.5, "model_type": "basic", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "model", "equation_summary": "equation connect(port_p, winding.port_p) annotation (Line(points={{-100,0},{-10,0}}, color={255,128,0}))", "search_keywords": ["ElectricCurrent", "SI.Current", "basic", "electrical", "mechanical"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": null}], "connections": [{"from_connector": "port_p", "to_connector": "winding.port_p", "condition": null}, {"from_connector": "winding.port_n", "to_connector": "port_n", "condition": null}, {"from_connector": "ground.p", "to_connector": "star.pin_n", "condition": null}, {"from_connector": "strayInductor.plug_n", "to_connector": "resistor.plug_p", "condition": null}, {"from_connector": "strayInductor.plug_p", "to_connector": "winding.plug_p", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "winding.plug_n", "condition": null}, {"from_connector": "thermalCollector.port_a", "to_connector": "resistor.heatPort", "condition": null}, {"from_connector": "thermalCollector.port_b", "to_connector": "heatPortWinding", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "starAuxiliary.plug_p", "condition": null}], "variables": [{"name": "alpha20", "type_name": "Modelica.Electrical.Machines.Thermal.LinearTemperatureCoefficient20", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Temperature coefficient of winding at 20 degC\""}, {"name": "i", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": "strayInductor.i \"Cage currents\"", "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "turns", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Functions", "Modelica.Icons", "Modelica.Magnetic.FundamentalWave.BasicMachines.Components", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Magnetic.FundamentalWave.Interfaces", "Modelica.Thermal.HeatTransfer.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "SI", "github", "ground", "resistor", "star", "starAuxiliary", "strayInductor", "thermalCollector", "winding"], "inheritance_chain": ["Modelica.Icons.ObsoleteModel", "Modelica.Magnetic.FundamentalWave.Interfaces.TwoPortExtended"]}
{"fqn": "ObsoleteModelica4.Mechanics.Translational.Interfaces.PartialElementaryTwoFlangesAndSupport", "kind": "model", "name": "PartialElementaryTwoFlangesAndSupport", "package_path": ["ObsoleteModelica4", "Mechanics", "Translational", "Interfaces"], "extends": ["Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"], "imports": [], "parameters": [{"name": "useSupport", "type": "Boolean", "default": "false \"= true, if support flange enabled, otherwise implicitly grounded\" extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges", "description": null}], "equations": [{"equations": ["equation\r\n          s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1285, "start_col": 9, "end_col": 69}}, {"equations": ["s_a = flange_a.s - internalSupport.s", "s_b = flange_b.s - internalSupport.s", "connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}))", "connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1285, "start_col": 11, "end_col": 69}}, {"equations": ["s_b = flange_b.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1281, "end_line": 1281, "start_col": 11, "end_col": 47}}, {"equations": ["s_a = flange_a.s - internalSupport.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1280, "end_line": 1280, "start_col": 11, "end_col": 47}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1279, "end_line": 1279, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.ObsoleteModel | components: SI.Length×2 | connections: 2 | params: useSupport | units: m, m | eq: equation s_a = flange_a.s - internalSup", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1257, "end_line": 1321, "start_col": 9, "end_col": 50}, "code_text": "partial model PartialElementaryTwoFlangesAndSupport\r\n          \"Obsolete partial model. Use PartialElementaryTwoFlangesAndSupport2.\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          parameter Boolean useSupport=false\r\n            \"= true, if support flange enabled, otherwise implicitly grounded\"\r\n            annotation (\r\n            Evaluate=true,\r\n            HideResult=true,\r\n            choices(checkBox=true));\r\n          extends Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges;\r\n          SI.Length s_a \"Distance between left flange and support\";\r\n          SI.Length s_b \"Distance between right flange and support\";\r\n        protected\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalSupport(f=-flange_a.f - flange_b.f)\r\n            \"Internal support/housing of component as a model with connector flange (flange is either connected to support, if useSupport=true, or connected to fixed, if useSupport=false)\"\r\n            annotation (Placement(transformation(extent={{-10,-90},{10,-70}})));\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed if not useSupport\r\n            \"Fixed support/housing, if not useSupport\"\r\n            annotation (Placement(transformation(extent={{10,-97},{30,-77}})));\r\n        public\r\n          Modelica.Mechanics.Translational.Interfaces.Support support if useSupport \"Support/housing of component\"\r\n            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));\r\n        equation\r\n          s_a = flange_a.s - internalSupport.s;\r\n          s_b = flange_b.s - internalSupport.s;\r\n          connect(internalSupport.flange, support) annotation (Line(\r\n              points={{0,-80},{0,-100}}, color={0,127,0}));\r\n          connect(fixed.flange, internalSupport.flange) annotation (Line(\r\n              points={{20,-87},{20,-80},{0,-80}}, color={0,127,0}));\r\n          annotation (\r\n            obsolete = \"Obsolete model - use Modelica.Mechanics.Translational.Interfaces.PartialElementaryTwoFlangesAndSupport2 instead\",\r\n            Documentation(info=\"<html>\r\n<p>\r\nThis is a 1-dim. translational component with two flanges and an additional support.\r\nIt is used e.g., to build up elementary ideal gear components. The component\r\ncontains the force balance, i.e., the sum of the forces of the connectors\r\nis zero (therefore, components that are based on PartialGear cannot have\r\na mass). The support connector needs to be connected\r\nto avoid the unphysical behavior that the\r\nsupport force is required to be zero (= the default value, if the\r\nconnector is not connected).\r\n</p>\r\n\r\n</html>\"),\r\n            Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},\r\n                    {100,100}}), graphics={Text(\r\n                      extent={{-38,-98},{-6,-96}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if useSupport)\"),Text(\r\n                      extent={{24,-97},{64,-98}},\r\n                      lineColor={95,95,95},\r\n                      textString=\"(if not useSupport)\")}),\r\n            Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n                    100,100}}), graphics={Line(\r\n                      visible=not useSupport,\r\n                      points={{-50,-120},{-30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-120},{-10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-10,-120},{10,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{10,-120},{30,-100}}),Line(\r\n                      visible=not useSupport,\r\n                      points={{-30,-100},{30,-100}})}));\r\n        end PartialElementaryTwoFlangesAndSupport", "checksum": "d80e2abe917cdcb0b6a72e0cdfdac1fc8c355f3f", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:1257-1321", "component_count": 2, "connection_count": 2, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 1, "equation_count": 5, "dependency_count": 10, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 15.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation s_a = flange_a.s - internalSupport.s", "search_keywords": ["Length", "SI.Length", "mechanical", "system"]}, "components": [{"name": "s_a", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between left flange and support"}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance between right flange and support"}], "connections": [{"from_connector": "internalSupport.flange", "to_connector": "support", "condition": null}, {"from_connector": "fixed.flange", "to_connector": "internalSupport.flange", "condition": null}], "variables": [{"name": "s_a", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange_a.s - internalSupport.s", "comment": "\"Distance between left flange and support\""}, {"name": "s_b", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Distance between right flange and support\""}], "physical_quantities": [{"name": "s_a", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "s_b", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}], "dependencies": ["Modelica.Icons", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "SI", "e", "fixed", "flange_a", "flange_b", "i", "internalSupport"], "inheritance_chain": ["Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.Translational.Interfaces.PartialTwoFlanges"]}
{"fqn": "ObsoleteModelica4.Mechanics.MultiBody.Joints.Revolute", "kind": "model", "name": "Revolute", "package_path": ["ObsoleteModelica4", "Mechanics", "MultiBody", "Joints"], "extends": ["Modelica.Icons.ObsoleteModel"], "imports": [], "parameters": [{"name": "useAxisFlange", "type": "Boolean", "default": "false \"= true, if axis flange is enabled\" parameter Boolean animation=true \"= true, if animation shall be enabled (show axis as cylinder)\"", "description": null}, {"name": "n", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,0,1} \"Axis of rotation resolved in frame_a (= same as in frame_b)\" parameter SI.Angle phi_offset=0 \"Relative angle offset (angle = phi_offset + phi)\"", "description": null}, {"name": "cylinderLength", "type": "SI.Distance", "default": "world.defaultJointLength \"Length of cylinder representing the joint axis\" parameter SI.Distance cylinderDiameter=world.defaultJointWidth \"Diameter of cylinder representing the join", "description": null}], "equations": [{"equations": ["equation\r\n          Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 812, "start_col": 9, "end_col": 41}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)", "assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")", "assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")", "angle = phi_offset + phi", "w = der(phi)", "a = der(w)", "// relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0", "if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if", "// d'Alemberts principle\r\n          tau = -frame_b.t*e", "// Connection to internal connectors\r\n          phi = internalAxis.phi", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}))", "connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 812, "start_col": 11, "end_col": 41}}, {"equations": ["phi = internalAxis.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 805, "end_line": 805, "start_col": 11, "end_col": 33}}, {"equations": ["tau = -frame_b.t*e"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 802, "end_line": 802, "start_col": 11, "end_col": 29}}, {"equations": ["if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)", "else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 789, "end_line": 799, "start_col": 11, "end_col": 17}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)", "frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)", "frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 798, "start_col": 13, "end_col": 89}}, {"equations": ["frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 798, "end_line": 798, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 797, "end_line": 797, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 796, "end_line": 796, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 795, "end_line": 795, "start_col": 13, "end_col": 96}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)", "frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)", "frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)", "frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 793, "start_col": 13, "end_col": 89}}, {"equations": ["frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 793, "end_line": 793, "start_col": 13, "end_col": 88}}, {"equations": ["frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 792, "end_line": 792, "start_col": 13, "end_col": 88}}, {"equations": ["frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 791, "end_line": 791, "start_col": 13, "end_col": 95}}, {"equations": ["R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 790, "end_line": 790, "start_col": 13, "end_col": 95}}, {"equations": ["frame_b.r_0 = frame_a.r_0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 787, "end_line": 787, "start_col": 11, "end_col": 36}}, {"equations": ["a = der(w)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 784, "end_line": 784, "start_col": 11, "end_col": 21}}, {"equations": ["w = der(phi)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 783, "end_line": 783, "start_col": 11, "end_col": 23}}, {"equations": ["angle = phi_offset + phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 782, "end_line": 782, "start_col": 11, "end_col": 35}}, {"equations": ["assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 779, "end_line": 780, "start_col": 11, "end_col": 68}}, {"equations": ["assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 777, "end_line": 778, "start_col": 11, "end_col": 68}}, {"equations": ["Connections.branch(frame_a.R, frame_b.R)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 775, "end_line": 775, "start_col": 11, "end_col": 51}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 774, "end_line": 774, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.ObsoleteModel | components: SI.Torque×1, SI.Angle×1 | connections: 3 | params: useAxisFlange, n, cylinderLength | units: N.m, 3 | eq: equ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 687, "end_line": 952, "start_col": 9, "end_col": 21}, "code_text": "model Revolute \"Revolute joint (1 rotational degree-of-freedom, 2 potential states, optional axis flange, optional angle offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. rotational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{10,90},{-10,110}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. rotational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-70,90},{-50,110}})));\r\n\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{-116,-16},{-84,16}})));\r\n          Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b\r\n            \"Coordinate system fixed to the joint with one cut-force and cut-torque\"\r\n            annotation (Placement(transformation(extent={{84,-16},{116,16}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true\r\n            \"= true, if animation shall be enabled (show axis as cylinder)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={0,0,1}\r\n            \"Axis of rotation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Angle phi_offset=0\r\n            \"Relative angle offset (angle = phi_offset + phi)\";\r\n          parameter SI.Distance cylinderLength=world.defaultJointLength\r\n            \"Length of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance cylinderDiameter=world.defaultJointWidth\r\n            \"Diameter of cylinder representing the joint axis\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color cylinderColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             annotation (unassignedMessage=\"\r\nThe rotation angle phi of a revolute joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the revolute joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\";\r\n          SI.AngularAcceleration a(start=0)\r\n            \"Second derivative of angle phi (relative angular acceleration)\";\r\n          SI.Torque tau \"Driving torque in direction of axis of rotation\";\r\n          SI.Angle angle \"= phi_offset + phi\";\r\n\r\n        protected\r\n          outer Modelica.Mechanics.MultiBody.World world;\r\n          parameter Real e[3](each final unit=\"1\")=Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of rotation axis, resolved in frame_a (= same as in frame_b)\";\r\n          Modelica.Mechanics.MultiBody.Frames.Orientation R_rel\r\n            \"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\";\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape cylinder(\r\n            shapeType=\"cylinder\",\r\n            color=cylinderColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=cylinderLength,\r\n            width=cylinderDiameter,\r\n            height=cylinderDiameter,\r\n            lengthDirection=e,\r\n            widthDirection={0,1,0},\r\n            r_shape=-e*(cylinderLength/2),\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n\r\n        protected\r\n          Modelica.Mechanics.Rotational.Components.Fixed fixed\r\n            \"support flange is fixed to ground\"\r\n            annotation (Placement(transformation(extent={{-70,70},{-50,90}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.InternalSupport internalAxis(tau=tau)\r\n            annotation (Placement(transformation(extent={{-10,90},{10,70}})));\r\n          Modelica.Mechanics.Rotational.Sources.ConstantTorque constantTorque(tau_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,70},{20,90}})));\r\n        equation\r\n          Connections.branch(frame_a.R, frame_b.R);\r\n\r\n          assert(cardinality(frame_a) > 0,\r\n            \"Connector frame_a of revolute joint is not connected\");\r\n          assert(cardinality(frame_b) > 0,\r\n            \"Connector frame_b of revolute joint is not connected\");\r\n\r\n          angle = phi_offset + phi;\r\n          w = der(phi);\r\n          a = der(w);\r\n\r\n          // relationships between quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0;\r\n\r\n          if Connections.rooted(frame_a.R) then\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(e, phi_offset + phi, w);\r\n            frame_b.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_a.R, R_rel);\r\n            frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.f);\r\n            frame_a.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_b.t);\r\n          else\r\n            R_rel = Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w);\r\n            frame_a.R = Modelica.Mechanics.MultiBody.Frames.absoluteRotation(frame_b.R, R_rel);\r\n            frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.f);\r\n            frame_b.t = -Modelica.Mechanics.MultiBody.Frames.resolve1(R_rel, frame_a.t);\r\n          end if;\r\n\r\n          // d'Alemberts principle\r\n          tau = -frame_b.t*e;\r\n\r\n          // Connection to internal connectors\r\n          phi = internalAxis.phi;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-60,80},{-60,100}}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{0,80},{0,100}}));\r\n          connect(constantTorque.flange, internalAxis.flange) annotation (Line(\r\n              points={{20,80},{0,80}}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Revolute instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-60},{-30,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(\r\n                  extent={{30,-60},{100,60}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={255,255,255},\r\n                  radius=10),\r\n                Rectangle(extent={{-100,60},{-30,-60}}, lineColor={64,64,64}, radius=10),\r\n                Rectangle(extent={{30,60},{100,-60}}, lineColor={64,64,64}, radius=10),\r\n                Text(\r\n                  extent={{-90,14},{-54,-11}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  extent={{51,11},{87,-14}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,80},{-20,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,80},{20,60}}),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{-10,100},{10,50}},\r\n                  fillPattern=FillPattern.VerticalCylinder,\r\n                  fillColor={192,192,192}),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{-10,30},{10,30},{30,50},{-30,50},{-10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Rectangle(\r\n                  extent={{-30,11},{30,-10}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Polygon(\r\n                  visible=useAxisFlange,\r\n                  points={{10,30},{30,50},{30,-50},{10,-30},{10,30}},\r\n                  lineColor={64,64,64},\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid),\r\n                Text(\r\n                  extent={{-150,-110},{150,-80}},\r\n                  textString=\"n=%n\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-155},{150,-115}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-20,70},{-60,70},{-60,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{20,70},{50,70},{50,60}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-90,100},{-30,100}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-30,100},{-50,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-49,100},{-70,80}}),\r\n                Line(\r\n                  visible=useAxisFlange,\r\n                  points={{-70,100},{-90,80}}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,70},{150,110}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b rotates around axis n which is fixed in frame_a.\r\nThe two frames coincide when the rotation angle \\\"phi = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Rotational\\\">Modelica.Mechanics.Rotational</a>\r\nlibrary.\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the rotation angle \\\"phi\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the joint angle and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIf a <strong>planar loop</strong> is present, e.g., consisting of 4 revolute joints\r\nwhere the joint axes are all parallel to each other, then there is no\r\nlonger a unique mathematical solution and the symbolic algorithms will\r\nfail. Usually, an error message will be printed pointing out this\r\nsituation. In this case, one revolute joint of the loop has to be replaced\r\nby a Joints.RevolutePlanarLoopConstraint joint. The\r\neffect is that from the 5 constraints of a usual revolute joint,\r\n3 constraints are removed and replaced by appropriate known\r\nvariables (e.g., the force in the direction of the axis of rotation is\r\ntreated as known with value equal to zero; for standard revolute joints,\r\nthis force is an unknown quantity).\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a revolute\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {0,0,1}, phi.start = 45<sup>o</sup>).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Revolute.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Revolute", "checksum": "d63733217c7728c2854803fe21d9fe6e375e7e7d", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:687-952", "component_count": 2, "connection_count": 3, "variable_count": 7, "physical_quantity_count": 2, "parameter_count": 3, "equation_count": 23, "dependency_count": 27, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 37.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation Connections.branch(frame_a.R, frame_b.R)", "search_keywords": ["N.m", "SI.Angle", "SI.Torque", "Torque", "mechanical", "system"]}, "components": [{"name": "tau", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Driving torque in direction of axis of rotation"}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "= phi_offset + phi"}], "connections": [{"from_connector": "fixed.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalAxis.flange", "to_connector": "axis", "condition": null}, {"from_connector": "constantTorque.flange", "to_connector": "internalAxis.flange", "condition": null}], "variables": [{"name": "cylinderColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of cylinder representing the joint axis\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient\r\n            specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use joint angle phi and w=der(phi) as states\" \r\n\r\n          SI.Angle phi(start=0, final stateSelect=stateSelect)\r\n            \"Relative rotation angle from frame_a to frame_b\"\r\n             \r\n          SI.AngularVelocity w(start=0, stateSelect=stateSelect)\r\n            \"First derivative of angle phi (relative angular velocity)\"", "comment": null}, {"name": "a", "type_name": "SI.AngularAcceleration", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Second derivative of angle phi (relative angular acceleration)\""}, {"name": "tau", "type_name": "SI.Torque", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Driving torque in direction of axis of rotation\""}, {"name": "angle", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"= phi_offset + phi\""}, {"name": "world", "type_name": "Modelica.Mechanics.MultiBody.World", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "R_rel", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Frames.planarRotation(-e, phi_offset + phi, w)", "comment": "\"Relative orientation object from frame_a to frame_b or from frame_b to frame_a\""}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "tau", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "phi", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Connections", "FillPattern", "Joints", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Mechanics", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "Modelica.Mechanics.MultiBody.Visualizers.Advanced", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sources", "Revolute", "SI", "StateSelect", "constantTorque", "e", "fixed", "frame_a", "frame_b", "internalAxis", "phi", "world"], "inheritance_chain": ["Modelica.Icons.ObsoleteModel"]}
{"fqn": "ObsoleteModelica4.Mechanics.MultiBody.Joints.Prismatic", "kind": "model", "name": "Prismatic", "package_path": ["ObsoleteModelica4", "Mechanics", "MultiBody", "Joints"], "extends": ["Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint"], "imports": [], "parameters": [{"name": "useAxisFlange", "type": "Boolean", "default": "false \"= true, if axis flange is enabled\" parameter Boolean animation=true \"= true, if animation shall be enabled\"", "description": null}, {"name": "n", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{1,0,0} \"Axis of translation resolved in frame_a (= same as in frame_b)\" parameter SI.Position s_offset=0 \"Relative distance offset (distance between frame_a and frame_b = s_offset", "description": null}, {"name": "boxWidthDirection", "type": "Modelica.Mechanics.MultiBody.Types.Axis", "default": "{0,1,0} \"Vector in width direction of box, resolved in frame_a\" parameter SI.Distance boxWidth=world.defaultJointWidth \"Width of prismatic joint box\" parameter SI.Distance boxHeigh", "description": null}, {"name": "animation", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "if animation shall be enabled\"", "type": "Boolean", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n          v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 587, "start_col": 9, "end_col": 59}}, {"equations": ["v = der(s)", "a = der(v)", "// relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))", "frame_b.R = frame_a.R", "// Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f", "zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)", "// d'Alemberts principle\r\n          f = -e*frame_b.f", "// Connection to internal connectors\r\n          s = internalAxis.s", "connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}))", "connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}))", "connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 587, "start_col": 11, "end_col": 59}}, {"equations": ["s = internalAxis.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 580, "end_line": 580, "start_col": 11, "end_col": 29}}, {"equations": ["f = -e*frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 577, "end_line": 577, "start_col": 11, "end_col": 27}}, {"equations": ["zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 574, "end_line": 574, "start_col": 11, "end_col": 80}}, {"equations": ["zeros(3) = frame_a.f + frame_b.f"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 573, "end_line": 573, "start_col": 11, "end_col": 43}}, {"equations": ["frame_b.R = frame_a.R"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 570, "end_line": 570, "start_col": 11, "end_col": 32}}, {"equations": ["frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 569, "end_line": 569, "start_col": 11, "end_col": 112}}, {"equations": ["a = der(v)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 566, "end_line": 566, "start_col": 11, "end_col": 21}}, {"equations": ["v = der(s)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 565, "end_line": 565, "start_col": 11, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 564, "end_line": 564, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.ObsoleteModel | components: SI.Acceleration×1, SI.Force×1 | connections: 3 | params: useAxisFlange, n, boxWidthDirection | units: m/s, m/", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 489, "end_line": 685, "start_col": 9, "end_col": 22}, "code_text": "model Prismatic \"Prismatic joint (1 translational degree-of-freedom, 2 potential states, optional axis flange, optional distance offset)\"\r\n          extends Modelica.Icons.ObsoleteModel;\r\n          extends Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint;\r\n\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_a axis if useAxisFlange\r\n            \"1-dim. translational flange that drives the joint\"\r\n            annotation (Placement(transformation(extent={{90,50},{70,70}})));\r\n          Modelica.Mechanics.Translational.Interfaces.Flange_b support if useAxisFlange\r\n            \"1-dim. translational flange of the drive support (assumed to be fixed in the world frame, NOT in the joint)\"\r\n            annotation (Placement(transformation(extent={{-30,50},{-50,70}})));\r\n\r\n          parameter Boolean useAxisFlange=false \"= true, if axis flange is enabled\"\r\n            annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n          parameter Boolean animation=true \"= true, if animation shall be enabled\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis n={1,0,0}\r\n            \"Axis of translation resolved in frame_a (= same as in frame_b)\"\r\n            annotation (Evaluate=true);\r\n          parameter SI.Position s_offset=0\r\n            \"Relative distance offset (distance between frame_a and frame_b = s_offset + s)\";\r\n          parameter Modelica.Mechanics.MultiBody.Types.Axis boxWidthDirection={0,1,0}\r\n            \"Vector in width direction of box, resolved in frame_a\"\r\n            annotation (Evaluate=true, Dialog(tab=\"Animation\", group=\r\n                  \"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxWidth=world.defaultJointWidth\r\n            \"Width of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter SI.Distance boxHeight=boxWidth \"Height of prismatic joint box\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.Color boxColor=Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            annotation (Dialog(colorSelector=true, tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            annotation (Dialog(tab=\"Animation\", group=\"if animation = true\", enable=animation));\r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" annotation(Dialog(tab=\"Advanced\"));\r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\";\r\n\r\n          SI.Position s(start=0, final stateSelect=stateSelect)\r\n            \"Relative distance between frame_a and frame_b\"\r\n            annotation (unassignedMessage=\"\r\nThe relative distance s of a prismatic joint cannot be determined.\r\nPossible reasons:\r\n- A non-zero mass might be missing on either side of the parts\r\n  connected to the prismatic joint.\r\n- Too many StateSelect.always are defined and the model\r\n  has less degrees of freedom as specified with this setting\r\n  (remove all StateSelect.always settings).\r\n\");\r\n\r\n          SI.Velocity v(start=0,final stateSelect=stateSelect)\r\n            \"First derivative of s (relative velocity)\";\r\n          SI.Acceleration a(start=0) \"Second derivative of s (relative acceleration)\";\r\n          SI.Force f \"Actuation force in direction of joint axis\";\r\n\r\n        protected\r\n          Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape box(\r\n            shapeType=\"box\",\r\n            color=boxColor,\r\n            specularCoefficient=specularCoefficient,\r\n            length=if noEvent(abs(s + s_offset) > 1.e-6) then s + s_offset else 1.e-6,\r\n            width=boxWidth,\r\n            height=boxHeight,\r\n            lengthDirection=e,\r\n            widthDirection=boxWidthDirection,\r\n            r=frame_a.r_0,\r\n            R=frame_a.R) if world.enableAnimation and animation;\r\n          Modelica.Mechanics.Translational.Components.Fixed fixed\r\n            annotation (Placement(transformation(extent={{-50,30},{-30,50}})));\r\n          Modelica.Mechanics.Translational.Interfaces.InternalSupport internalAxis(f = f)\r\n            annotation (Placement(transformation(extent={{70,50},{90,30}})));\r\n          Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(f_constant=0) if not useAxisFlange\r\n            annotation (Placement(transformation(extent={{40,30},{60,50}})));\r\n        equation\r\n          v = der(s);\r\n          a = der(v);\r\n\r\n          // relationships between kinematic quantities of frame_a and of frame_b\r\n          frame_b.r_0 = frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frame_a.R, e*(s_offset + s));\r\n          frame_b.R = frame_a.R;\r\n\r\n          // Force and torque balance\r\n          zeros(3) = frame_a.f + frame_b.f;\r\n          zeros(3) = frame_a.t + frame_b.t + cross(e*(s_offset + s), frame_b.f);\r\n\r\n          // d'Alemberts principle\r\n          f = -e*frame_b.f;\r\n\r\n          // Connection to internal connectors\r\n          s = internalAxis.s;\r\n\r\n          connect(fixed.flange, support) annotation (Line(\r\n              points={{-40,40},{-40,60}}, color={0,127,0}));\r\n          connect(internalAxis.flange, axis) annotation (Line(\r\n              points={{80,40},{80,60}}, color={0,127,0}));\r\n          connect(constantForce.flange, internalAxis.flange) annotation (Line(\r\n              points={{60,40},{80,40}}, color={0,127,0}));\r\n          annotation (obsolete = \"Obsolete model - use Modelica.Mechanics.MultiBody.Joints.Prismatic instead\",\r\n            Icon(coordinateSystem(\r\n                preserveAspectRatio=true,\r\n                extent={{-100,-100},{100,100}}), graphics={\r\n                Rectangle(\r\n                  extent={{-100,-50},{-30,41}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-100,40},{-30,50}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,-30},{100,20}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Rectangle(\r\n                  extent={{-30,20},{100,30}},\r\n                  pattern=LinePattern.None,\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Line(points={{-30,-50},{-30,50}}),\r\n                Line(points={{100,-30},{100,21}}),\r\n                Text(\r\n                  extent={{60,12},{96,-13}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"b\"),\r\n                Text(\r\n                  extent={{-95,13},{-60,-9}},\r\n                  lineColor={128,128,128},\r\n                  textString=\"a\"),\r\n                Text(\r\n                  visible=useAxisFlange,\r\n                  extent={{-150,-135},{150,-95}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  extent={{-150,-90},{150,-60}},\r\n                  textString=\"n=%n\"),\r\n                Rectangle(\r\n                  visible=useAxisFlange,\r\n                  extent={{90,30},{100,70}},\r\n                  pattern=LinePattern.None,\r\n                  fillColor={192,192,192},\r\n                  fillPattern=FillPattern.Solid,\r\n                  lineColor={0,0,255}),\r\n                Text(\r\n                  visible=not useAxisFlange,\r\n                  extent={{-150,60},{150,100}},\r\n                  textString=\"%name\",\r\n                  lineColor={0,0,255})}),\r\n            Documentation(info=\"<html>\r\n<p>\r\nJoint where frame_b is translated along axis n which is fixed in frame_a.\r\nThe two frames coincide when the relative distance \\\"s = 0\\\".\r\n</p>\r\n\r\n<p>\r\nOptionally, two additional 1-dimensional mechanical flanges\r\n(flange \\\"axis\\\" represents the driving flange and\r\nflange \\\"support\\\" represents the bearing) can be enabled via\r\nparameter <strong>useAxisFlange</strong>. The enabled axis flange can be\r\ndriven with elements of the\r\n<a href=\\\"modelica://Modelica.Mechanics.Translational\\\">Modelica.Mechanics.Translational</a>\r\nlibrary.\r\n\r\n</p>\r\n\r\n<p>\r\nIn the \\\"Advanced\\\" menu it can be defined via parameter <strong>stateSelect</strong>\r\nthat the relative distance \\\"s\\\" and its derivative shall be definitely\r\nused as states by setting stateSelect=StateSelect.always.\r\nDefault is StateSelect.prefer to use the relative distance and its\r\nderivative as preferred states. The states are usually selected automatically.\r\nIn certain situations, especially when closed kinematic loops are present,\r\nit might be slightly more efficient, when using the StateSelect.always setting.\r\n</p>\r\n\r\n<p>\r\nIn the following figure the animation of a prismatic\r\njoint is shown. The light blue coordinate system is\r\nframe_a and the dark blue coordinate system is\r\nframe_b of the joint. The black arrow is parameter\r\nvector \\\"n\\\" defining the translation axis\r\n(here: n = {1,1,0}).\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Joints/Prismatic.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n        end Prismatic", "checksum": "823f774f486652a0b864e7d33a8723448e10a15a", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:489-685", "component_count": 2, "connection_count": 3, "variable_count": 4, "physical_quantity_count": 4, "parameter_count": 5, "equation_count": 11, "dependency_count": 23, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 26.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation v = der(s)", "search_keywords": ["Acceleration", "Force", "SI.Acceleration", "SI.Force", "Velocity", "m/s", "m/s2", "mechanical", "system"]}, "components": [{"name": "a", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Second derivative of s (relative acceleration)"}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Actuation force in direction of joint axis"}], "connections": [{"from_connector": "fixed.flange", "to_connector": "support", "condition": null}, {"from_connector": "internalAxis.flange", "to_connector": "axis", "condition": null}, {"from_connector": "constantForce.flange", "to_connector": "internalAxis.flange", "condition": null}], "variables": [{"name": "boxColor", "type_name": "Modelica.Mechanics.MultiBody.Types.Color", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.JointColor\r\n            \"Color of prismatic joint box\"\r\n            \r\n          input Modelica.Mechanics.MultiBody.Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n            \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n            \r\n          parameter StateSelect stateSelect=StateSelect.prefer\r\n            \"Priority to use distance s and v=der(s) as states\" \r\n          final parameter Real e[3](each final unit=\"1\")=\r\n             Modelica.Math.Vectors.normalizeWithAssert(n)\r\n            \"Unit vector in direction of prismatic axis n\"", "comment": null}, {"name": "v", "type_name": "equation", "prefixes": [], "attributes": {"start": "0", "stateSelect": "stateSelect"}, "binding_equation": "der(s)", "comment": "\"First derivative of s (relative velocity)\""}, {"name": "a", "type_name": "SI.Acceleration", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Second derivative of s (relative acceleration)\""}, {"name": "f", "type_name": "SI.Force", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Actuation force in direction of joint axis\""}], "physical_quantities": [{"name": "v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "a", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}, {"name": "f", "unit": "N", "display_unit": null, "quantity": "Force", "nominal": null}, {"name": "Advanced", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "LinePattern", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Mechanics", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "Modelica.Mechanics.MultiBody.Visualizers.Advanced", "Modelica.Mechanics.Translational.Components", "Modelica.Mechanics.Translational.Interfaces", "Modelica.Mechanics.Translational.Sources", "Prismatic", "SI", "StateSelect", "constantForce", "fixed", "frame_a", "frame_b", "internalAxis", "world"], "inheritance_chain": ["Modelica.Icons.ObsoleteModel", "Modelica.Mechanics.MultiBody.Interfaces.PartialElementaryJoint"]}
{"fqn": "Modelica.Blocks.Examples.Noise.Utilities.Parts.MotorWithCurrentControl", "kind": "model", "name": "MotorWithCurrentControl", "package_path": ["Modelica", "Blocks", "Examples", "Noise", "Utilities", "Parts"], "extends": ["Modelica.Electrical.Machines.Icons.TransientMachine"], "imports": [], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "f", "type": "SI.Frequency", "default": "50 \"Actual frequency\"", "description": null}, {"name": "tRamp", "type": "SI.Time", "default": "1 \"Frequency ramp\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "181.4 \"Nominal load torque\"", "description": null}, {"name": "tStep", "type": "SI.Time", "default": "1.2 \"Time of load torque step\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2895, "start_col": 9, "end_col": 68}}, {"equations": ["connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}))", "connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}))", "connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}))", "connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}))", "connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}))", "connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}))", "connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}))", "connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}))", "connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}))", "connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}))", "connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}))", "connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}))", "connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}))", "connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}))", "connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}))", "connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}))", "connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}))", "connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}))", "connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}))", "connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}))", "connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}))", "connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2844, "end_line": 2895, "start_col": 11, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2843, "end_line": 2843, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Electrical.Machines.Icons.TransientMachine | components: Integer×1, Real×1 | connections: 25 | params: VNominal, fNominal, f | units: rad, rad/", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2716, "end_line": 2944, "start_col": 9, "end_col": 36}, "code_text": "model MotorWithCurrentControl\r\n          \"Synchronous machine with current controller and measurement noise\"\r\n          extends Modelica.Electrical.Machines.Icons.TransientMachine;\r\n          constant Integer m=3 \"Number of phases\";\r\n          parameter SI.Voltage VNominal=100\r\n            \"Nominal RMS voltage per phase\";\r\n          parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n          parameter SI.Frequency f=50 \"Actual frequency\";\r\n          parameter SI.Time tRamp=1 \"Frequency ramp\";\r\n          parameter SI.Torque TLoad=181.4 \"Nominal load torque\";\r\n          parameter SI.Time tStep=1.2 \"Time of load torque step\";\r\n          parameter SI.Inertia JLoad=0.29 \"Load's moment of inertia\";\r\n\r\n          Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\r\n            smpm(\r\n            p=smpmData.p,\r\n            fsNominal=smpmData.fsNominal,\r\n            Rs=smpmData.Rs,\r\n            TsRef=smpmData.TsRef,\r\n            Lszero=smpmData.Lszero,\r\n            Lssigma=smpmData.Lssigma,\r\n            Jr=smpmData.Jr,    Js=smpmData.Js,\r\n            frictionParameters=smpmData.frictionParameters,\r\n            wMechanical(fixed=true),\r\n            statorCoreParameters=smpmData.statorCoreParameters,\r\n            strayLoadParameters=smpmData.strayLoadParameters,\r\n            VsOpenCircuit=smpmData.VsOpenCircuit,\r\n            Lmd=smpmData.Lmd,\r\n            Lmq=smpmData.Lmq,\r\n            useDamperCage=smpmData.useDamperCage,\r\n            Lrsigmad=smpmData.Lrsigmad,\r\n            Lrsigmaq=smpmData.Lrsigmaq,\r\n            Rrd=smpmData.Rrd,\r\n            Rrq=smpmData.Rrq,\r\n            TrRef=smpmData.TrRef,\r\n            permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,\r\n            phiMechanical(fixed=true),\r\n            TsOperational=293.15,\r\n            alpha20s=smpmData.alpha20s,\r\n            TrOperational=293.15,\r\n            alpha20r=smpmData.alpha20r)\r\n            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n          Modelica.Electrical.Polyphase.Sources.SignalCurrent signalCurrent(final m=m)\r\n            annotation (Placement(transformation(\r\n                origin={-10,50},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Polyphase.Basic.Star star(final m=m)\r\n            annotation (Placement(transformation(extent={{-10,80},{-30,100}})));\r\n          Modelica.Electrical.Analog.Basic.Ground ground\r\n            annotation (Placement(transformation(\r\n                origin={-50,90},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.DQToThreePhase dqToThreePhase(\r\n              p=smpm.p)\r\n            annotation (Placement(transformation(extent={{-50,40},{-30,60}})));\r\n          Modelica.Electrical.Polyphase.Basic.Star starM(final m=m) annotation (Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=180,\r\n                origin={-60,-10})));\r\n          Modelica.Electrical.Analog.Basic.Ground groundM\r\n            annotation (Placement(transformation(\r\n                origin={-80,-28},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(\r\n              terminalConnection=\"Y\") annotation (Placement(transformation(extent={{-20,-30},\r\n                    {0,-10}})));\r\n          Modelica.Electrical.Machines.Sensors.RotorDisplacementAngle rotorDisplacementAngle(p=smpm.p)\r\n            annotation (Placement(transformation(\r\n                origin={20,-40},\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={10,0})));\r\n          Modelica.Mechanics.Rotational.Sensors.TorqueSensor torqueSensor annotation (\r\n              Placement(transformation(\r\n                extent={{10,10},{-10,-10}},\r\n                rotation=180,\r\n                origin={50,-40})));\r\n          Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (\r\n              Placement(transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=90,\r\n                origin={30,0})));\r\n          Modelica.Electrical.Machines.Sensors.VoltageQuasiRMSSensor voltageQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                extent={{-10,10},{10,-10}},\r\n                rotation=180,\r\n                origin={-30,-10})));\r\n          Modelica.Electrical.Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor\r\n            annotation (Placement(transformation(\r\n                origin={-10,0},\r\n                extent={{-10,-10},{10,10}},\r\n                rotation=270)));\r\n          Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=0.29)\r\n            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));\r\n          parameter\r\n            Modelica.Electrical.Machines.Utilities.ParameterRecords.SM_PermanentMagnetData\r\n            smpmData(useDamperCage=false) \"Data for motor\"\r\n            annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n          Modelica.Blocks.Sources.Constant id(k=0)\r\n            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));\r\n          Modelica.Blocks.Interfaces.RealInput iq_rms1 annotation (Placement(\r\n                transformation(extent={{-140,40},{-100,80}}),iconTransformation(extent={{-140,40},\r\n                    {-100,80}})));\r\n          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange\r\n            \"Right flange of shaft\"\r\n            annotation (Placement(transformation(extent={{90,-10},{110,10}})));\r\n          Modelica.Blocks.Interfaces.RealOutput phi(unit=\"rad\")\r\n            \"Absolute angle of flange as output signal\" annotation (Placement(\r\n                transformation(\r\n                extent={{-10,-10},{10,10}},\r\n                origin={110,80}), iconTransformation(extent={{40,70},{60,90}})));\r\n          output Real phi_motor(unit=\"rad\", displayUnit=\"deg\")=angleSensor.phi\r\n            \"Rotational position\";\r\n          output Real w(unit=\"rad/s\")=speedSensor.w \"Rotational speed\";\r\n          Modelica.Blocks.Math.Add addNoise\r\n            annotation (Placement(transformation(extent={{60,70},{80,90}})));\r\n          .Modelica.Blocks.Noise.UniformNoise uniformNoise(\r\n            samplePeriod=1/200,\r\n            y_min=-0.01,\r\n            y_max=0.01) annotation (Placement(transformation(extent={{26,76},{46,96}})));\r\n        equation\r\n          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(\r\n                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}));\r\n          connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(\r\n                points={{14,-30},{6,-30},{-4,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(\r\n              points={{-16,-26},{-16,-30}}, color={0,0,255}));\r\n          connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(\r\n              points={{-4,-26},{-4,-30}}, color={0,0,255}));\r\n          connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{0,-40},{6,-40},{10,-40}}));\r\n          connect(signalCurrent.plug_p, star.plug_p) annotation (Line(\r\n              points={{-10,60},{-10,90}}, color={0,0,255}));\r\n          connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(\r\n              points={{10,-10},{10,-40}}));\r\n          connect(angleSensor.phi, dqToThreePhase.phi) annotation (Line(points={{10,11},\r\n                  {10,30},{-40,30},{-40,38}},          color={0,0,127}));\r\n          connect(groundM.p, terminalBox.starpoint) annotation (Line(\r\n              points={{-70,-28},{-20,-28},{-20,-24}}, color={0,0,255}));\r\n          connect(smpm.flange, torqueSensor.flange_a) annotation (Line(\r\n              points={{0,-40},{40,-40}}));\r\n          connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (\r\n              Line(\r\n              points={{-20,-10},{-10,-10},{-10,-24}}, color={0,0,255}));\r\n          connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(\r\n              points={{-50,-10},{-40,-10}}, color={0,0,255}));\r\n          connect(starM.pin_n, groundM.p) annotation (Line(\r\n              points={{-70,-10},{-70,-28}}, color={0,0,255}));\r\n          connect(dqToThreePhase.y, signalCurrent.i) annotation (Line(points={{\r\n                  -29,50},{-22,50},{-22,50}}, color={0,0,127}));\r\n          connect(speedSensor.flange, smpm.flange) annotation (Line(\r\n              points={{30,-10},{30,-40},{0,-40}}));\r\n          connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(\r\n              points={{60,-40},{60,-40},{70,-40}}));\r\n          connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (\r\n             Line(\r\n              points={{-10,40},{-10,10}}, color={0,0,255}));\r\n          connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)\r\n            annotation (Line(\r\n              points={{-10,-10},{-20,-10}}, color={0,0,255}));\r\n          connect(inertiaLoad.flange_b, flange) annotation (Line(\r\n              points={{90,-40},{90,-40},{90,0},{100,0}}));\r\n          connect(angleSensor.phi, addNoise.u2) annotation (Line(\r\n              points={{10,11},{10,30},{50,30},{50,74},{58,74}}, color={0,0,127}));\r\n          connect(addNoise.y, phi) annotation (Line(\r\n              points={{81,80},{110,80}}, color={0,0,127}));\r\n          connect(uniformNoise.y, addNoise.u1) annotation (Line(\r\n              points={{47,86},{58,86}}, color={0,0,127}));\r\n          connect(id.y, dqToThreePhase.d) annotation (Line(points={{-69,70},{-60,\r\n                  70},{-60,56},{-52,56}}, color={0,0,127}));\r\n          connect(iq_rms1, dqToThreePhase.q) annotation (Line(points={{-120,60},\r\n                  {-100,60},{-100,44},{-52,44}}, color={0,0,127}));\r\n          annotation (\r\n            Documentation(info=\"<html>\r\n<p>\r\nA synchronous machine with permanent magnets, current controller and\r\nmeasurement noise of &plusmn;0.01 rad accelerates a quadratic speed dependent load from standstill.\r\nThe rms values of d- and q-current in rotor fixed coordinate system are converted to three-phase currents,\r\nand fed to the machine. The result shows that the torque is influenced by the q-current,\r\nwhereas the stator voltage is influenced by the d-current.\r\n</p>\r\n\r\n<p>\r\nDefault machine parameters of model\r\n<a href=\\\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_PermanentMagnet\\\">SM_PermanentMagnet</a>\r\nare used.\r\n</p>\r\n\r\n<p>\r\nThis motor is used in the\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.Noise.ActuatorWithNoise\\\">Examples.Noise.ActuatorWithNoise</a>\r\nactuator example\r\n</p>\r\n</html>\",         revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"), Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n                    100}}), graphics={Rectangle(\r\n                  extent={{40,50},{-100,100}},\r\n                  fillColor={255,170,85},\r\n                  fillPattern=FillPattern.Solid,\r\n                  pattern=LinePattern.None), Text(\r\n                extent={{-150,150},{150,110}},\r\n                textString=\"%name\",\r\n                textColor={0,0,255})}));\r\n        end MotorWithCurrentControl", "checksum": "9e620a08f7cc2bce8d144da7981ee482bc995ad7", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:2716-2944", "component_count": 2, "connection_count": 25, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 7, "equation_count": 3, "dependency_count": 42, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": true, "complexity_score": 85.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}))", "search_keywords": ["Integer", "Real", "rad", "rad/s", "system"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "w", "type_name": "Real", "prefixes": ["output"], "modifications": {"unit": "\"rad/s\""}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_n", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "rotorDisplacementAngle.plug_p", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "smpm.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "smpm.plug_sp", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "signalCurrent.plug_p", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "angleSensor.flange", "to_connector": "rotorDisplacementAngle.flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "dqToThreePhase.phi", "condition": null}, {"from_connector": "groundM.p", "to_connector": "terminalBox.starpoint", "condition": null}, {"from_connector": "smpm.flange", "to_connector": "torqueSensor.flange_a", "condition": null}, {"from_connector": "voltageQuasiRMSSensor.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "starM.plug_p", "to_connector": "voltageQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "starM.pin_n", "to_connector": "groundM.p", "condition": null}, {"from_connector": "dqToThreePhase.y", "to_connector": "signalCurrent.i", "condition": null}, {"from_connector": "speedSensor.flange", "to_connector": "smpm.flange", "condition": null}, {"from_connector": "torqueSensor.flange_b", "to_connector": "inertiaLoad.flange_a", "condition": null}, {"from_connector": "signalCurrent.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "voltageQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "inertiaLoad.flange_b", "to_connector": "flange", "condition": null}, {"from_connector": "angleSensor.phi", "to_connector": "addNoise.u2", "condition": null}, {"from_connector": "addNoise.y", "to_connector": "phi", "condition": null}, {"from_connector": "uniformNoise.y", "to_connector": "addNoise.u1", "condition": null}, {"from_connector": "id.y", "to_connector": "dqToThreePhase.d", "condition": null}, {"from_connector": "iq_rms1", "to_connector": "dqToThreePhase.q", "condition": null}], "variables": [{"name": "phi_motor", "type_name": "Real", "prefixes": ["output"], "attributes": {"unit": "rad", "displayUnit": "deg"}, "binding_equation": "angleSensor.phi\r\n            \"Rotational position\"", "comment": null}, {"name": "w", "type_name": "Real", "prefixes": ["output"], "attributes": {"unit": "rad/s"}, "binding_equation": "speedSensor.w \"Rotational speed\"", "comment": null}], "physical_quantities": [{"name": "phi_motor", "unit": "rad", "display_unit": "deg", "quantity": null, "nominal": null}, {"name": "w", "unit": "rad/s", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Examples.Noise", "FillPattern", "LinePattern", "Modelica.Blocks.Examples.Noise", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Sources", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.BasicMachines.SynchronousMachines", "Modelica.Electrical.Machines.Icons", "Modelica.Electrical.Machines.Sensors", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Machines.Utilities.ParameterRecords", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Interfaces", "Modelica.Mechanics.Rotational.Sensors", "SI", "addNoise", "angleSensor", "currentQuasiRMSSensor", "dlr_logo", "dqToThreePhase", "ground", "groundM", "id", "inertiaLoad", "rotorDisplacementAngle", "signalCurrent", "smpm", "smpmData", "speedSensor", "star", "starM", "terminalBox", "torqueSensor", "uniformNoise", "v", "voltageQuasiRMSSensor", "www.dlr"], "inheritance_chain": ["Modelica.Electrical.Machines.Icons.TransientMachine"]}
{"fqn": "Modelica.Blocks.Examples.Noise.NormalNoiseProperties", "kind": "model", "name": "NormalNoiseProperties", "package_path": ["Modelica", "Blocks", "Examples", "Noise"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "mu", "type": "Real", "default": "3 \"Mean value for normal distribution\"", "description": null}, {"name": "sigma", "type": "Real", "default": "1 \"Standard deviation for normal distribution\"", "description": null}, {"name": "pMean", "type": "Real", "default": "mu \"Theoretical mean value of normal distribution\"", "description": null}, {"name": "var", "type": "Real", "default": "sigma^2 \"Theoretical variance of uniform distribution\"", "description": null}, {"name": "std", "type": "Real", "default": "sigma \"Theoretical standard deviation of normal distribution\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2086, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2065, "end_line": 2086, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2064, "end_line": 2064, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.Example | components: Real×2 | connections: 11 | params: mu, sigma, pMean | units: 2 | eq: equation connect(noise.y, mean.u) annotation (", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 2025, "end_line": 2127, "start_col": 5, "end_col": 30}, "code_text": "model NormalNoiseProperties\r\n      \"Demonstrates the computation of properties for normally distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real mu = 3 \"Mean value for normal distribution\";\r\n      parameter Real sigma = 1 \"Standard deviation for normal distribution\";\r\n      parameter Real pMean = mu \"Theoretical mean value of normal distribution\";\r\n      parameter Real var =  sigma^2\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sigma\r\n        \"Theoretical standard deviation of normal distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.NormalNoise noise(\r\n        samplePeriod=0.001,\r\n        mu=mu,\r\n        sigma=sigma,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.NormalNoise\\\">Blocks.Noise.NormalNoise</a> block\r\nusing a <strong>normal</strong> random number distribution with mu=3, sigma=1.\r\nFrom the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/NormalNoiseProperties1.png\\\">\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a normal noise with mu=3 is 3 and the variance of normal noise\r\nis sigma^2, so 1. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a normal\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end NormalNoiseProperties", "checksum": "98c02fc19905f83591770111371a9c2295390336", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:2025-2127", "component_count": 2, "connection_count": 11, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 5, "equation_count": 3, "dependency_count": 21, "has_physical_interface": true, "interface_component_count": 2, "has_connections": true, "is_composite_model": true, "complexity_score": 42.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(noise.y, mean.u) annotation (Line( points={{-59,70},{-42,70}}, color={0,0,127}))", "search_keywords": ["Real", "system"]}, "components": [{"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "noise.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "variance.u", "condition": null}, {"from_connector": "mean.y", "to_connector": "meanError.u1", "condition": null}, {"from_connector": "theoreticalMean.y", "to_connector": "meanError.u2", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[1]", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[2]", "condition": null}, {"from_connector": "variance.y", "to_connector": "varianceError.u1", "condition": null}, {"from_connector": "theoreticalVariance.y", "to_connector": "varianceError.u2", "condition": null}, {"from_connector": "noise.y", "to_connector": "standardDeviation.u", "condition": null}, {"from_connector": "standardDeviation.y", "to_connector": "sigmaError.u1", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "sigmaError.u2", "condition": null}], "variables": [{"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "meanError.y", "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "sigmaError.y", "comment": null}], "physical_quantities": [{"name": "distribution", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Blocks", "Blocks.Noise", "Modelica.Blocks", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Sources", "Modelica.Icons", "NormalNoiseProperties1", "dlr_logo", "mean", "meanError", "noise", "sigmaError", "standardDeviation", "theoreticalMean", "theoreticalSigma", "theoreticalVariance", "v", "variance", "varianceError", "www.dlr"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Blocks.Examples.Noise.UniformNoiseProperties", "kind": "model", "name": "UniformNoiseProperties", "package_path": ["Modelica", "Blocks", "Examples", "Noise"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "y_min", "type": "Real", "default": "0 \"Minimum value of band\"", "description": null}, {"name": "y_max", "type": "Real", "default": "6 \"Maximum value of band\"", "description": null}, {"name": "pMean", "type": "Real", "default": "(y_min + y_max)/2 \"Theoretical mean value of uniform distribution\"", "description": null}, {"name": "var", "type": "Real", "default": "(y_max - y_min)^2/12 \"Theoretical variance of uniform distribution\"", "description": null}, {"name": "std", "type": "Real", "default": "sqrt(var) \"Theoretical standard deviation of uniform distribution\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1982, "start_col": 5, "end_col": 84}}, {"equations": ["connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}))", "connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}))", "connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}))", "connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}))", "connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}))", "connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}))", "connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}))", "connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}))", "connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}))", "connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1961, "end_line": 1982, "start_col": 7, "end_col": 84}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1960, "end_line": 1960, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.Example | components: Real×2 | connections: 11 | params: y_min, y_max, pMean | units: 2 | eq: equation connect(noise.y, mean.u) annotatio", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 1920, "end_line": 2023, "start_col": 5, "end_col": 31}, "code_text": "model UniformNoiseProperties\r\n      \"Demonstrates the computation of properties for uniformly distributed noise\"\r\n      extends Modelica.Icons.Example;\r\n      parameter Real y_min = 0 \"Minimum value of band\";\r\n      parameter Real y_max = 6 \"Maximum value of band\";\r\n      parameter Real pMean = (y_min + y_max)/2\r\n        \"Theoretical mean value of uniform distribution\";\r\n      parameter Real var =  (y_max - y_min)^2/12\r\n        \"Theoretical variance of uniform distribution\";\r\n      parameter Real std =  sqrt(var)\r\n        \"Theoretical standard deviation of uniform distribution\";\r\n      inner Modelica.Blocks.Noise.GlobalSeed globalSeed\r\n        annotation (Placement(transformation(extent={{80,60},{100,80}})));\r\n      output Real meanError_y = meanError.y;\r\n      output Real sigmaError_y = sigmaError.y;\r\n\r\n      Modelica.Blocks.Noise.UniformNoise noise(\r\n        samplePeriod=0.001,\r\n        y_min=y_min,\r\n        y_max=y_max,\r\n        useAutomaticLocalSeed=false)\r\n        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));\r\n      Modelica.Blocks.Math.ContinuousMean mean\r\n        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));\r\n      Modelica.Blocks.Math.Variance variance\r\n        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)\r\n        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));\r\n      Modelica.Blocks.Math.Feedback meanError\r\n        annotation (Placement(transformation(extent={{40,60},{60,80}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)\r\n        annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n      Modelica.Blocks.Math.Feedback varianceError\r\n        annotation (Placement(transformation(extent={{40,0},{60,20}})));\r\n      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)\r\n        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));\r\n      Modelica.Blocks.Math.StandardDeviation standardDeviation\r\n        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));\r\n      Modelica.Blocks.Math.Feedback sigmaError\r\n        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));\r\n    equation\r\n      connect(noise.y, mean.u) annotation (Line(\r\n          points={{-59,70},{-42,70}}, color={0,0,127}));\r\n      connect(noise.y, variance.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,10},{-42,10}}, color={0,0,127}));\r\n      connect(mean.y, meanError.u1) annotation (Line(\r\n          points={{-19,70},{42,70}}, color={0,0,127}));\r\n      connect(theoreticalMean.y, meanError.u2) annotation (Line(\r\n          points={{11,50},{50,50},{50,62}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(\r\n          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}}, color={0,0,127}));\r\n      connect(variance.y, varianceError.u1) annotation (Line(\r\n          points={{-19,10},{42,10}}, color={0,0,127}));\r\n      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(\r\n          points={{41.02,-30},{50,-30},{50,2}}, color={0,0,127}));\r\n      connect(noise.y, standardDeviation.u) annotation (Line(\r\n          points={{-59,70},{-52,70},{-52,-70},{-42,-70}}, color={0,0,127}));\r\n      connect(standardDeviation.y, sigmaError.u1) annotation (Line(\r\n          points={{-19,-70},{42,-70}}, color={0,0,127}));\r\n      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(\r\n          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}}, color={0,0,127}));\r\n     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),\r\n        Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates statistical properties of the\r\n<a href=\\\"modelica://Modelica.Blocks.Noise.UniformNoise\\\">Blocks.Noise.UniformNoise</a> block\r\nusing a <strong>uniform</strong> random number distribution.\r\nBlock &quot;noise&quot; defines a band of 0 .. 6 and from the generated noise the mean and the variance\r\nis computed with blocks of package <a href=\\\"modelica://Modelica.Blocks.Math\\\">Blocks.Math</a>.\r\nSimulation results are shown in the next diagram:\r\n</p>\r\n\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Examples/Noise/UniformNoiseProperties1.png\\\"/>\r\n</blockquote>\r\n\r\n<p>\r\nThe mean value of a uniform noise in the range 0 .. 6 is 3 and its variance is\r\n3 as well. The simulation results above show good agreement (after a short initial phase).\r\nThis demonstrates that the random number generator and the mapping to a uniform\r\ndistribution have good statistical properties.\r\n</p>\r\n</html>\",     revisions=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th>Date</th> <th align=\\\"left\\\">Description</th></tr>\r\n\r\n<tr><td> June 22, 2015 </td>\r\n    <td>\r\n\r\n<table border=\\\"0\\\">\r\n<tr><td>\r\n         <img src=\\\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\\\" alt=\\\"DLR logo\\\">\r\n</td><td valign=\\\"bottom\\\">\r\n         Initial version implemented by\r\n         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>\r\n         <a href=\\\"https://www.dlr.de/sr/en\\\">DLR Institute of System Dynamics and Control</a>\r\n</td></tr></table>\r\n</td></tr>\r\n\r\n</table>\r\n</html>\"));\r\n    end UniformNoiseProperties", "checksum": "27885b08e59245420f84860feb1d735d01b2395d", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:1920-2023", "component_count": 2, "connection_count": 11, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 5, "equation_count": 3, "dependency_count": 21, "has_physical_interface": true, "interface_component_count": 2, "has_connections": true, "is_composite_model": true, "complexity_score": 42.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(noise.y, mean.u) annotation (Line( points={{-59,70},{-42,70}}, color={0,0,127}))", "search_keywords": ["Real", "system"]}, "components": [{"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "noise.y", "to_connector": "mean.u", "condition": null}, {"from_connector": "noise.y", "to_connector": "variance.u", "condition": null}, {"from_connector": "mean.y", "to_connector": "meanError.u1", "condition": null}, {"from_connector": "theoreticalMean.y", "to_connector": "meanError.u2", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[1]", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "theoreticalVariance.u[2]", "condition": null}, {"from_connector": "variance.y", "to_connector": "varianceError.u1", "condition": null}, {"from_connector": "theoreticalVariance.y", "to_connector": "varianceError.u2", "condition": null}, {"from_connector": "noise.y", "to_connector": "standardDeviation.u", "condition": null}, {"from_connector": "standardDeviation.y", "to_connector": "sigmaError.u1", "condition": null}, {"from_connector": "theoreticalSigma.y", "to_connector": "sigmaError.u2", "condition": null}], "variables": [{"name": "meanError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "meanError.y", "comment": null}, {"name": "sigmaError_y", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "sigmaError.y", "comment": null}], "physical_quantities": [{"name": "distribution", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Blocks", "Blocks.Noise", "Modelica.Blocks", "Modelica.Blocks.Math", "Modelica.Blocks.Noise", "Modelica.Blocks.Sources", "Modelica.Icons", "UniformNoiseProperties1", "dlr_logo", "mean", "meanError", "noise", "sigmaError", "standardDeviation", "theoreticalMean", "theoreticalSigma", "theoreticalVariance", "v", "variance", "varianceError", "www.dlr"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Blocks.Examples.SlewRateLimiter", "kind": "model", "name": "SlewRateLimiter", "package_path": ["Modelica", "Blocks", "Examples"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "vMax", "type": "SI.Velocity", "default": "2 \"Max. velocity\"", "description": null}, {"name": "aMax", "type": "SI.Acceleration", "default": "20 \"Max. acceleration\"", "description": null}], "equations": [{"equations": ["equation\r\n    connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}))", "connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}))", "connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}))", "connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 429, "end_line": 439, "start_col": 3, "end_col": 29}}, {"equations": ["connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}))", "connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}))", "connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}))", "connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 430, "end_line": 439, "start_col": 5, "end_col": 29}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 429, "end_line": 429, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.Example | components: SI.Position×2, SI.Velocity×1, SI.Acceleration×1 | connections: 5 | params: vMax, aMax | units: m/s, m/s2 | eq: equa", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo", "start_line": 397, "end_line": 457, "start_col": 3, "end_col": 22}, "code_text": "model SlewRateLimiter\r\n    \"Demonstrate usage of Nonlinear.SlewRateLimiter\"\r\n    extends Modelica.Icons.Example;\r\n    parameter SI.Velocity vMax=2 \"Max. velocity\";\r\n    parameter SI.Acceleration aMax=20 \"Max. acceleration\";\r\n    SI.Position s=positionStep.y \"Reference position\";\r\n    SI.Position sSmoothed=positionSmoothed.y \"Smoothed position\";\r\n    SI.Velocity vLimited=limit_a.y \"Limited velocity\";\r\n    SI.Acceleration aLimited=a.y \"Limited acceleration\";\r\n    Modelica.Blocks.Sources.Step positionStep(startTime=0.1)\r\n      annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n    Modelica.Blocks.Nonlinear.SlewRateLimiter limit_v(\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      Rising=vMax,\r\n      y_start=positionStep.offset,\r\n      Td=0.0001)\r\n      annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n    Modelica.Blocks.Continuous.Der v\r\n      annotation (Placement(transformation(extent={{-20,-10},{0,10}})));\r\n    Modelica.Blocks.Nonlinear.SlewRateLimiter limit_a(\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      y_start=0,\r\n      Rising=20,\r\n      Td=0.0001)\r\n                annotation (Placement(transformation(extent={{10,-10},{30,10}})));\r\n    Modelica.Blocks.Continuous.Integrator positionSmoothed(\r\n      k=1,\r\n      initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n      y_start=positionStep.offset)\r\n      annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n    Modelica.Blocks.Continuous.Der a\r\n      annotation (Placement(transformation(extent={{50,-40},{70,-20}})));\r\n  equation\r\n    connect(positionStep.y, limit_v.u)\r\n      annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}));\r\n    connect(limit_v.y, v.u)\r\n      annotation (Line(points={{-29,0},{-22,0}}, color={0,0,127}));\r\n    connect(v.y, limit_a.u)\r\n      annotation (Line(points={{1,0},{8,0}}, color={0,0,127}));\r\n    connect(limit_a.y, positionSmoothed.u)\r\n      annotation (Line(points={{31,0},{39.5,0},{48,0}}, color={0,0,127}));\r\n    connect(limit_a.y, a.u) annotation (Line(points={{31,0},{40,0},{40,-30},{48,-30}},\r\n          color={0,0,127}));\r\n\r\n    annotation (experiment(StopTime=1.0, Interval=0.001), Documentation(info=\"<html>\r\n<p>\r\nThis example demonstrates how to use the Nonlinear.SlewRateLimiter block to limit a position step with regards to velocity and acceleration:\r\n</p>\r\n<ul>\r\n<li> The Sources.Step block <code>positionStep</code> demands an unphysical position step.</li>\r\n<li> The first SlewRateLimiter block  <code>limit_v</code> limits velocity.</li>\r\n<li> The first Der block <code>v</code> calculates velocity from the smoothed position signal.</li>\r\n<li> The second SlewRateLimiter block <code>limit_a</code> limits acceleration of the smoothed velocity signal.</li>\r\n<li> The second Der block <code>a</code> calculates acceleration from the smoothed velocity signal.</li>\r\n<li> The Integrator block <code>positionSmoothed</code> calculates smoothed position from the smoothed velocity signal.</li>\r\n</ul>\r\n<p>\r\nA position controlled drive with limited velocity and limited acceleration (i.e. torque) is able to follow the smoothed reference position.\r\n</p>\r\n</html>\"));\r\n  end SlewRateLimiter", "checksum": "e65ff6aa4aeaa73c0f0170c9277316fec02525e0", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\package.mo:397-457", "component_count": 4, "connection_count": 5, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 2, "equation_count": 3, "dependency_count": 15, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 27.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(positionStep.y, limit_v.u) annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}))", "search_keywords": ["Acceleration", "SI.Acceleration", "SI.Position", "SI.Velocity", "Velocity", "m/s", "m/s2", "mechanical", "system"]}, "components": [{"name": "s", "type_name": "SI.Position", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "sSmoothed", "type_name": "SI.Position", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "vLimited", "type_name": "SI.Velocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "aLimited", "type_name": "SI.Acceleration", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "positionStep.y", "to_connector": "limit_v.u", "condition": null}, {"from_connector": "limit_v.y", "to_connector": "v.u", "condition": null}, {"from_connector": "v.y", "to_connector": "limit_a.u", "condition": null}, {"from_connector": "limit_a.y", "to_connector": "positionSmoothed.u", "condition": null}, {"from_connector": "limit_a.y", "to_connector": "a.u", "condition": null}], "variables": [{"name": "s", "type_name": "SI.Position", "prefixes": [], "attributes": {}, "binding_equation": "positionStep.y \"Reference position\"", "comment": null}, {"name": "sSmoothed", "type_name": "SI.Position", "prefixes": [], "attributes": {}, "binding_equation": "positionSmoothed.y \"Smoothed position\"", "comment": null}, {"name": "vLimited", "type_name": "SI.Velocity", "prefixes": [], "attributes": {}, "binding_equation": "limit_a.y \"Limited velocity\"", "comment": null}, {"name": "aLimited", "type_name": "SI.Acceleration", "prefixes": [], "attributes": {}, "binding_equation": "a.y \"Limited acceleration\"", "comment": null}], "physical_quantities": [{"name": "vLimited", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "aLimited", "unit": "m/s2", "display_unit": null, "quantity": "Acceleration", "nominal": null}], "dependencies": ["Modelica.Blocks.Continuous", "Modelica.Blocks.Nonlinear", "Modelica.Blocks.Sources", "Modelica.Blocks.Types.Init", "Modelica.Icons", "Nonlinear", "SI", "Sources", "a", "i", "limit_a", "limit_v", "positionSmoothed", "positionStep", "v"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.ComplexBlocks.Examples.ShowTransferFunction", "kind": "model", "name": "ShowTransferFunction", "package_path": ["Modelica", "ComplexBlocks", "Examples"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "m", "type": "Modelica.Units.SI.Mass", "default": "0.2 \"Mass\"", "description": null}, {"name": "d", "type": "Modelica.Units.SI.TranslationalDampingConstant", "default": "0.01 \"Damping coefficient (not the damping ratio)\"", "description": null}, {"name": "c", "type": "Modelica.Units.SI.TranslationalSpringConstant", "default": "0.1 \"Stiffness\"", "description": null}, {"name": "wMin", "type": "Real", "default": "0.01 \"Lower bound for frequency sweep\"", "description": null}, {"name": "wMax", "type": "Real", "default": "100 \"Upper bound for frequency sweep\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(const.y, transferFunction.u)\r\n    annotation (Line(points={{-59,0},{-50.5,0},{-42,0}}, color={85,170,255}))", "connect(logFrequencySweep.y, transferFunction.w)\r\n    annotation (Line(points={{-59,-30},{-30,-30},{-30,-12}}, color={0,0,127}))", "connect(transferFunction.y, complexToPolar.u)\r\n    annotation (Line(points={{-19,0},{-2,0}}, color={85,170,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexBlocks\\Examples\\ShowTransferFunction.mo", "start_line": 34, "end_line": 40, "start_col": 1, "end_col": 68}}, {"equations": ["connect(const.y, transferFunction.u)\r\n    annotation (Line(points={{-59,0},{-50.5,0},{-42,0}}, color={85,170,255}))", "connect(logFrequencySweep.y, transferFunction.w)\r\n    annotation (Line(points={{-59,-30},{-30,-30},{-30,-12}}, color={0,0,127}))", "connect(transferFunction.y, complexToPolar.u)\r\n    annotation (Line(points={{-19,0},{-2,0}}, color={85,170,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexBlocks\\Examples\\ShowTransferFunction.mo", "start_line": 35, "end_line": 40, "start_col": 3, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexBlocks\\Examples\\ShowTransferFunction.mo", "start_line": 34, "end_line": 34, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Icons.Example | components: Real×2, Modelica.Units.SI.Angle×1 | connections: 3 | params: m, d, c | units: :, : | eq: equation connect(const.y, ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexBlocks\\Examples\\ShowTransferFunction.mo", "start_line": 2, "end_line": 55, "start_col": 1, "end_col": 25}, "code_text": "model ShowTransferFunction \"Test complex transfer function block\"\r\n  extends Modelica.Icons.Example;\r\n  parameter Modelica.Units.SI.Mass m = 0.2 \"Mass\";\r\n  parameter Modelica.Units.SI.TranslationalDampingConstant d = 0.01 \"Damping coefficient (not the damping ratio)\";\r\n  parameter Modelica.Units.SI.TranslationalSpringConstant c = 0.1 \"Stiffness\";\r\nprotected\r\n  final constant Modelica.Units.SI.Mass oneUnitMass = 1\r\n    \"Helping constant to satisfy unit check\";\r\n  final constant Modelica.Units.SI.TranslationalDampingConstant oneUnitDampingConstant = 1\r\n    \"Helping constant to satisfy unit check\";\r\n  final constant Modelica.Units.SI.TranslationalSpringConstant oneUnitSpringConstant = 1\r\n    \"Helping constant to satisfy unit check\";\r\npublic\r\n  final parameter Real b[:]={-m/oneUnitMass} \"Unitless numerator polynomial coefficients {-m} of the transfer function\";\r\n  final parameter Real a[:]={m/oneUnitMass, d/oneUnitDampingConstant, c/oneUnitSpringConstant}\r\n    \"Unitless denominator polynomial coefficients {m,d,c} of the transfer function\";\r\n  parameter Real wMin=0.01 \"Lower bound for frequency sweep\";\r\n  parameter Real wMax=100 \"Upper bound for frequency sweep\";\r\n  Real lg_w=log10(logFrequencySweep.y) \"Logarithm of frequency\";\r\n  Real dB=20*log10(complexToPolar.len) \"Magnitude of the transfer function in decibel\";\r\n  Modelica.Units.SI.Angle phi(displayUnit=\"deg\")=complexToPolar.phi \"Argument of the transfer function\";\r\n  Modelica.Blocks.Sources.LogFrequencySweep logFrequencySweep(\r\n    duration=1,\r\n    wMin=wMin,\r\n    wMax=wMax) annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));\r\n  Modelica.ComplexBlocks.Sources.ComplexConstant const(k(re=1, im=0))\r\n    annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n  Modelica.ComplexBlocks.ComplexMath.TransferFunction transferFunction(final b=b,\r\n      final a=a)\r\n    annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n  Modelica.ComplexBlocks.ComplexMath.ComplexToPolar complexToPolar\r\n    annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\nequation\r\n  connect(const.y, transferFunction.u)\r\n    annotation (Line(points={{-59,0},{-50.5,0},{-42,0}}, color={85,170,255}));\r\n  connect(logFrequencySweep.y, transferFunction.w)\r\n    annotation (Line(points={{-59,-30},{-30,-30},{-30,-12}}, color={0,0,127}));\r\n  connect(transferFunction.y, complexToPolar.u)\r\n    annotation (Line(points={{-19,0},{-2,0}}, color={85,170,255}));\r\n  annotation (\r\n    experiment(StopTime=1, Interval=0.001), Documentation(info=\"<html>\r\n<p>This example shows the response of a PT2 (mechanical spring-mass-damper system with\r\nan acceleration acting on the mass) defined by its transfer function</p>\r\n<blockquote><pre>\r\n              -m\r\nH(jw)=-------------------\r\n      m*(jw)^2 + d*jw + c\r\n</pre></blockquote>\r\n<p>Frequency performs a logarithmic ramp from 0.01 to 100 s^-1.</p>\r\n<p>\r\nPlot the magnitude locus (in dB) dB versus lg_w and the phase locus versus lg_w.\r\n</p>\r\n</html>\"));\r\nend ShowTransferFunction", "checksum": "f32a2ae1bd011ab83846d5d687b43422fbc12090", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\ComplexBlocks\\Examples\\ShowTransferFunction.mo:2-55", "component_count": 3, "connection_count": 3, "variable_count": 3, "physical_quantity_count": 2, "parameter_count": 5, "equation_count": 3, "dependency_count": 9, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 20.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(const.y, transferFunction.u) annotation (Line(points={{-59,0},{-50.5,0},{-42,0}}, color={85,170,255}))", "search_keywords": ["Modelica.Units.SI.Angle", "Real", "system"]}, "components": [{"name": "lg_w", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "dB", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "phi", "type_name": "Modelica.Units.SI.Angle", "prefixes": [], "modifications": {"displayUnit": "\"deg\""}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "const.y", "to_connector": "transferFunction.u", "condition": null}, {"from_connector": "logFrequencySweep.y", "to_connector": "transferFunction.w", "condition": null}, {"from_connector": "transferFunction.y", "to_connector": "complexToPolar.u", "condition": null}], "variables": [{"name": "lg_w", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "log10(logFrequencySweep.y) \"Logarithm of frequency\"", "comment": null}, {"name": "dB", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": "20*log10(complexToPolar.len) \"Magnitude of the transfer function in decibel\"", "comment": null}, {"name": "phi", "type_name": "Modelica.Units.SI.Angle", "prefixes": [], "attributes": {"displayUnit": "deg"}, "binding_equation": "complexToPolar.phi \"Argument of the transfer function\"", "comment": null}], "physical_quantities": [{"name": "check", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "function", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Blocks.Sources", "Modelica.ComplexBlocks.ComplexMath", "Modelica.ComplexBlocks.Sources", "Modelica.Icons", "Modelica.Units.SI", "complexToPolar", "const", "logFrequencySweep", "transferFunction"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Digital.Interfaces.MemoryBase", "kind": "model", "name": "MemoryBase", "package_path": ["Modelica", "Electrical", "Digital", "Interfaces"], "extends": ["Modelica.Icons.Function"], "imports": ["D", "L", "S", "T"], "parameters": [{"name": "tHL", "type": "SI.Time", "default": "0 \"High->Low delay\"", "description": null}, {"name": "tLH", "type": "SI.Time", "default": "0 \"Low->High delay\"", "description": null}, {"name": "strength", "type": "S", "default": "S.'S_X01' \"Output strength\"", "description": null}, {"name": "fileName", "type": "String", "default": "Modelica.Utilities.Files.loadResource(\"modelica://Modelica/Resources/Data/Electrical/Digital/Memory_Matrix.txt\") \"File where matrix for memory is stored\" DigitalInput RE \"Read enab", "description": null}, {"name": "n_addr(min", "type": "Integer", "default": "1) = 2 \"Addr width\"", "description": null}, {"name": "n_data(min", "type": "Integer", "default": "1) = 2 \"Data width\"", "description": null}], "equations": [{"equations": ["equation\r\n              for i in 1:n_data loop\r\n                connect(yy[i], inertialDelaySensitive[i].x)", "connect(inertialDelaySensitive[i].y, dataOut[i])", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2382, "end_line": 2386, "start_col": 9, "end_col": 23}}, {"equations": ["for i in 1:n_data loop\r\n                connect(yy[i], inertialDelaySensitive[i].x)", "connect(inertialDelaySensitive[i].y, dataOut[i])", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2383, "end_line": 2386, "start_col": 15, "end_col": 23}}, {"equations": ["connect(yy[i], inertialDelaySensitive[i].x)", "connect(inertialDelaySensitive[i].y, dataOut[i])"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2384, "end_line": 2385, "start_col": 17, "end_col": 66}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2382, "end_line": 2382, "start_col": 9, "end_col": 17}}, {"equations": ["algorithm\r\n                int_addr := 1", "for i in 1:n_addr loop\r\n                  addr_bit := T.X01Table[addr[i]]", "if addr_bit == L.'1' then\r\n                     int_addr := int_addr + integer(2^(i-1))", "elseif addr_bit == L.'X' then\r\n                     int_addr := 0", "break", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2369, "end_line": 2379, "start_col": 15, "end_col": 25}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2369, "end_line": 2369, "start_col": 15, "end_col": 24}}, {"equations": ["algorithm\r\n                for i in 1:(2^n_addr) loop\r\n                  data := Modelica.Utilities.Streams.readLine(filename, integer(i))", "for j in 1:n_data loop\r\n                    bit := Modelica.Utilities.Strings.scanInteger(data, (2*j-1))", "if bit == 1 then\r\n                      m[integer(i),j] := L.'1'", "elseif bit == 0 then\r\n                      m[integer(i),j] := L.'0'", "else\r\n                      m[integer(i),j] := L.'X'", "end if", "end for", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2339, "end_line": 2352, "start_col": 15, "end_col": 25}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2339, "end_line": 2339, "start_col": 15, "end_col": 24}}], "docstring": "extends Modelica.Icons.Function | components: Integer×4, L×4, String×2 | connections: 2 | params: tHL, tLH, strength | units: n_addr, n_data, integer(2^n_addr),", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 2309, "end_line": 2412, "start_col": 9, "end_col": 23}, "code_text": "partial model MemoryBase \"Base model for memory elements\"\r\n              import D = Modelica.Electrical.Digital;\r\n              import L = Modelica.Electrical.Digital.Interfaces.Logic;\r\n              import S = Modelica.Electrical.Digital.Interfaces.Strength;\r\n              import T = Modelica.Electrical.Digital.Tables;\r\n\r\n              parameter SI.Time tHL=0 \"High->Low delay\";\r\n              parameter SI.Time tLH=0 \"Low->High delay\";\r\n              parameter S strength = S.'S_X01' \"Output strength\";\r\n              parameter Integer n_addr(min=1) = 2 \"Addr width\";\r\n              parameter Integer n_data(min=1) = 2 \"Data width\";\r\n              parameter String fileName = Modelica.Utilities.Files.loadResource(\"modelica://Modelica/Resources/Data/Electrical/Digital/Memory_Matrix.txt\")\r\n                \"File where matrix for memory is stored\"\r\n                annotation(Dialog(group=\"Table data definition\", loadSelector(filter=\"Text files (*.txt)\", caption=\"Open file in which table is present\")));\r\n\r\n              DigitalInput RE \"Read enable\" annotation (Placement(transformation(\r\n                extent={{-100,-30},{-84,-14}}), iconTransformation(extent={{-100,-30},{-84,-14}})));\r\n              DigitalInput addr[n_addr] \"Address\" annotation (Placement(transformation(\r\n                extent={{-100,50},{-80,70}}), iconTransformation(extent={{-100,50},{-80,70}})));\r\n              DigitalOutput dataOut[n_data] \"Data output\" annotation (Placement(transformation(\r\n                extent={{80,10},{100,30}}), iconTransformation(extent={{80,10},{100,30}})));\r\n\r\n              function getMemory \"Get Memory\"\r\n                extends Modelica.Icons.Function;\r\n                input String filename;\r\n                input Integer n_addr \"Addr width\";\r\n                input Integer n_data \"Data width\";\r\n                output L m[integer(2^n_addr),n_data] \"Memory with data, lowest bit on left side\";\r\n                output String data;\r\n                output Integer bit;\r\n              algorithm\r\n                for i in 1:(2^n_addr) loop\r\n                  data := Modelica.Utilities.Streams.readLine(filename, integer(i));\r\n                  for j in 1:n_data loop\r\n                    bit := Modelica.Utilities.Strings.scanInteger(data, (2*j-1));\r\n                    if bit == 1 then\r\n                      m[integer(i),j] := L.'1';\r\n                    elseif bit == 0 then\r\n                      m[integer(i),j] := L.'0';\r\n                    else\r\n                      m[integer(i),j] := L.'X';\r\n                    end if;\r\n                  end for;\r\n                end for;\r\n              end getMemory;\r\n\r\n    protected\r\n              L nextstate[n_data](start=fill(L.'U',n_data));\r\n              L mem_word[n_data](start=fill(L.'U',n_data));\r\n              Integer int_addr;\r\n              DigitalOutput yy[n_data](start=fill(L.'U',n_data));\r\n              D.Delay.InertialDelaySensitive inertialDelaySensitive[n_data](each tLH=tLH, each tHL=tHL);\r\n\r\n              function address \"Compute memory address\"\r\n                extends Modelica.Icons.Function;\r\n                input Integer n_addr;\r\n                input L addr[n_addr];\r\n                output Integer int_addr;\r\n      protected\r\n                L addr_bit;\r\n              algorithm\r\n                int_addr := 1;\r\n                for i in 1:n_addr loop\r\n                  addr_bit := T.X01Table[addr[i]];\r\n                  if addr_bit == L.'1' then\r\n                     int_addr := int_addr + integer(2^(i-1));\r\n                  elseif addr_bit == L.'X' then\r\n                     int_addr := 0;\r\n                     break;\r\n                  end if;\r\n                end for;\r\n              end address;\r\n\r\n        equation\r\n              for i in 1:n_data loop\r\n                connect(yy[i], inertialDelaySensitive[i].x);\r\n                connect(inertialDelaySensitive[i].y, dataOut[i]);\r\n              end for;\r\n\r\n            annotation(Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),\r\n              graphics={\r\n                Rectangle(\r\n                  extent={{-60,80},{60,-80}},\r\n                  lineColor={127,0,127},\r\n                  lineThickness=0.5),\r\n                Line(\r\n                  points={{-84,60},{-60,60}},\r\n                  color={127,0,127},\r\n                  thickness=1),\r\n                Line(\r\n                  points={{60,20},{84,20}},\r\n                  color={127,0,127},\r\n                  thickness=1),\r\n                Line(\r\n                  points={{-84,-20},{-60,-20}},\r\n                  color={127,0,127}),\r\n                Line(\r\n                  points={{-60,-10},{-46,-20},{-60,-30}},\r\n                  color={127,0,127}),\r\n                Text(\r\n                  extent={{-41,-5},{-24,-34}},\r\n                  textColor={127,33,107},\r\n                  textString=\"RE\")}));\r\n        end MemoryBase", "checksum": "2e29e74893cd50f1e38083f6c10c930e365715cd", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo:2309-2412", "component_count": 12, "connection_count": 2, "variable_count": 18, "physical_quantity_count": 5, "parameter_count": 6, "equation_count": 8, "dependency_count": 14, "has_physical_interface": true, "interface_component_count": 8, "has_connections": true, "is_composite_model": true, "complexity_score": 41.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation for i in 1:n_data loop connect(yy[i], inertialDelaySensitive[i].x)", "search_keywords": ["D.Delay.InertialDelaySensitive", "DigitalOutput", "Integer", "String", "integer(2^n_addr),n_data", "n_addr", "n_data", "system"]}, "components": [{"name": "filename", "type_name": "String", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "n_addr", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Addr width"}, {"name": "n_data", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Data width"}, {"name": "m", "type_name": "L", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[integer(2^n_addr),n_data]", "comment": null}, {"name": "lowest", "type_name": "L", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "data", "type_name": "String", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "bit", "type_name": "Integer", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "mem_word", "type_name": "L", "prefixes": [], "modifications": {"start": "fill(L.'U'"}, "condition": null, "array_dims": "[n_data]", "comment": null}, {"name": "int_addr", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "yy", "type_name": "DigitalOutput", "prefixes": [], "modifications": {"start": "fill(L.'U'"}, "condition": null, "array_dims": "[n_data]", "comment": null}, {"name": "inertialDelaySensitive", "type_name": "D.Delay.InertialDelaySensitive", "prefixes": [], "modifications": {"tLH": "tLH", "tHL": "tHL"}, "condition": null, "array_dims": "[n_data]", "comment": null}, {"name": "addr", "type_name": "L", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[n_addr]", "comment": null}], "connections": [{"from_connector": "yy[i]", "to_connector": "inertialDelaySensitive[i].x", "condition": null}, {"from_connector": "inertialDelaySensitive[i].y", "to_connector": "dataOut[i]", "condition": null}], "variables": [{"name": "D", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital", "comment": null}, {"name": "L", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Interfaces.Logic", "comment": null}, {"name": "S", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Interfaces.Strength", "comment": null}, {"name": "T", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Tables", "comment": null}, {"name": "filename", "type_name": "String", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "n_addr", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Addr width\""}, {"name": "n_data", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Data width\""}, {"name": "m", "type_name": "L", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Memory with data, lowest bit on left side\""}, {"name": "data", "type_name": "String", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "bit", "type_name": "elseif", "prefixes": ["output"], "attributes": {}, "binding_equation": "0 then\r\n                      m[integer(i),j] := L.'0'", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "getMemory", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "int_addr", "type_name": "Integer", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "inertialDelaySensitive", "type_name": "D.Delay.InertialDelaySensitive", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "addr", "type_name": "L", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "addr_bit", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "L.'X' then\r\n                     int_addr := 0", "comment": null}, {"name": "address", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "enable", "unit": "n_addr", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Address", "unit": "n_data", "display_unit": null, "quantity": null, "nominal": null}, {"name": "width", "unit": "integer(2^n_addr),n_data", "display_unit": null, "quantity": null, "nominal": null}, {"name": "side", "unit": "n_data", "display_unit": null, "quantity": null, "nominal": null}, {"name": "address", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["D", "D.Delay", "L", "Memory_Matrix", "Modelica.Electrical", "Modelica.Electrical.Digital", "Modelica.Electrical.Digital.Interfaces", "Modelica.Icons", "Modelica.Utilities.Files", "Modelica.Utilities.Streams", "Modelica.Utilities.Strings", "S", "SI", "T"], "inheritance_chain": ["Modelica.Icons.Function"]}
{"fqn": "Modelica.Electrical.Analog.Examples.Rectifier", "kind": "model", "name": "Rectifier", "package_path": ["Modelica", "Electrical", "Analog", "Examples"], "extends": ["Modelica.Icons.Example"], "imports": ["Modelica.Electrical.Analog.Ideal"], "parameters": [{"name": "VAC", "type": "SI.Voltage", "default": "400 \"RMS line-to-line\"", "description": null}, {"name": "f", "type": "SI.Frequency", "default": "50 \"Line frequency\"", "description": null}, {"name": "LAC", "type": "SI.Inductance", "default": "60E-6 \"Line inductor\"", "description": null}, {"name": "Ron", "type": "SI.Resistance", "default": "1E-3 \"Diode forward resistance\"", "description": null}, {"name": "Goff", "type": "SI.Conductance", "default": "1E-3 \"Diode backward conductance\"", "description": null}, {"name": "Vknee", "type": "SI.Voltage", "default": "2 \"Diode threshold voltage\"", "description": null}, {"name": "CDC", "type": "SI.Capacitance", "default": "15E-3 \"DC capacitance\"", "description": null}, {"name": "IDC", "type": "SI.Current", "default": "500 \"Load current\"", "description": null}], "equations": [{"equations": ["equation\r\n  uDC = Capacitor1.v + Capacitor2.v", "iAC = {Inductor1.i,Inductor2.i,Inductor3.i}", "uAC[1] = Inductor1.n.v - Inductor2.n.v", "uAC[2] = Inductor2.n.v - Inductor3.n.v", "uAC[3] = Inductor3.n.v - Inductor1.n.v", "Losses = IdealDiode1.v*IdealDiode1.i + IdealDiode2.v*IdealDiode2.i +\r\n    IdealDiode3.v*IdealDiode3.i + IdealDiode4.v*IdealDiode4.i +\r\n    IdealDiode5.v*IdealDiode5.i + IdealDiode6.v*IdealDiode6.i", "connect(SineVoltage1.n, SineVoltage2.n)\r\n    annotation (Line(points={{-90,20},{-90,0}}, color={0,0,255}))", "connect(SineVoltage2.n, SineVoltage3.n)\r\n    annotation (Line(points={{-90,0},{-90,-20}}, color={0,0,255}))", "connect(SineVoltage1.p, Inductor1.p)\r\n    annotation (Line(points={{-70,20},{-60,20}}, color={0,0,255}))", "connect(SineVoltage2.p, Inductor2.p)\r\n    annotation (Line(points={{-70,0},{-67.5,0},{-65,0},{-60,0}}, color={0,0,255}))", "connect(SineVoltage3.p, Inductor3.p)\r\n    annotation (Line(points={{-70,-20},{-60,-20}}, color={0,0,255}))", "connect(IdealDiode1.p, IdealDiode4.n)\r\n    annotation (Line(points={{-20,30},{-20,-30}}, color={0,0,255}))", "connect(IdealDiode2.p, IdealDiode5.n)\r\n    annotation (Line(points={{0,30},{0,16},{0,0},{0,-30}}, color={0,0,255}))", "connect(IdealDiode3.p, IdealDiode6.n)\r\n    annotation (Line(points={{20,30},{20,-30}}, color={0,0,255}))", "connect(IdealDiode1.n, IdealDiode2.n)\r\n    annotation (Line(points={{-20,50},{0,50}}, color={0,0,255}))", "connect(IdealDiode2.n, IdealDiode3.n)\r\n    annotation (Line(points={{0,50},{20,50}}, color={0,0,255}))", "connect(IdealDiode4.p, IdealDiode5.p)\r\n    annotation (Line(points={{-20,-50},{0,-50}}, color={0,0,255}))", "connect(IdealDiode5.p, IdealDiode6.p)\r\n    annotation (Line(points={{0,-50},{20,-50}}, color={0,0,255}))", "connect(Capacitor2.n, IdealDiode6.p)\r\n    annotation (Line(points={{40,-50},{20,-50}}, color={0,0,255}))", "connect(IdealDiode3.n, Capacitor1.p)\r\n    annotation (Line(points={{20,50},{40,50}}, color={0,0,255}))", "connect(Capacitor1.n, Capacitor2.p)\r\n    annotation (Line(points={{40,30},{40,-30}}, color={0,0,255}))", "connect(Capacitor2.p, Ground1.p)\r\n    annotation (Line(points={{40,-30},{40,0},{50,0},{50,-60}}, color={0,0,255}))", "connect(Capacitor1.p, SignalCurrent1.p)\r\n    annotation (Line(points={{40,50},{60,50},{60,10}}, color={0,0,255}))", "connect(SignalCurrent1.n, Capacitor2.n)\r\n    annotation (Line(points={{60,-10},{60,-50},{40,-50}}, color={0,0,255}))", "connect(Constant1.y, SignalCurrent1.i)\r\n    annotation (Line(points={{79,0},{79,0},{72,0}}, color={0,0,255}))", "connect(Inductor1.n, IdealDiode1.p)\r\n    annotation (Line(points={{-40,20},{-20,20},{-20,30}}, color={0,0,255}))", "connect(Inductor2.n, IdealDiode2.p)\r\n    annotation (Line(points={{-40,0},{0,0},{0,30}}, color={0,0,255}))", "connect(Inductor3.n, IdealDiode3.p)\r\n    annotation (Line(points={{-40,-20},{20,-20},{20,30}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 110, "end_line": 162, "start_col": 1, "end_col": 77}}, {"equations": ["uDC = Capacitor1.v + Capacitor2.v", "iAC = {Inductor1.i,Inductor2.i,Inductor3.i}", "uAC[1] = Inductor1.n.v - Inductor2.n.v", "uAC[2] = Inductor2.n.v - Inductor3.n.v", "uAC[3] = Inductor3.n.v - Inductor1.n.v", "Losses = IdealDiode1.v*IdealDiode1.i + IdealDiode2.v*IdealDiode2.i +\r\n    IdealDiode3.v*IdealDiode3.i + IdealDiode4.v*IdealDiode4.i +\r\n    IdealDiode5.v*IdealDiode5.i + IdealDiode6.v*IdealDiode6.i", "connect(SineVoltage1.n, SineVoltage2.n)\r\n    annotation (Line(points={{-90,20},{-90,0}}, color={0,0,255}))", "connect(SineVoltage2.n, SineVoltage3.n)\r\n    annotation (Line(points={{-90,0},{-90,-20}}, color={0,0,255}))", "connect(SineVoltage1.p, Inductor1.p)\r\n    annotation (Line(points={{-70,20},{-60,20}}, color={0,0,255}))", "connect(SineVoltage2.p, Inductor2.p)\r\n    annotation (Line(points={{-70,0},{-67.5,0},{-65,0},{-60,0}}, color={0,0,255}))", "connect(SineVoltage3.p, Inductor3.p)\r\n    annotation (Line(points={{-70,-20},{-60,-20}}, color={0,0,255}))", "connect(IdealDiode1.p, IdealDiode4.n)\r\n    annotation (Line(points={{-20,30},{-20,-30}}, color={0,0,255}))", "connect(IdealDiode2.p, IdealDiode5.n)\r\n    annotation (Line(points={{0,30},{0,16},{0,0},{0,-30}}, color={0,0,255}))", "connect(IdealDiode3.p, IdealDiode6.n)\r\n    annotation (Line(points={{20,30},{20,-30}}, color={0,0,255}))", "connect(IdealDiode1.n, IdealDiode2.n)\r\n    annotation (Line(points={{-20,50},{0,50}}, color={0,0,255}))", "connect(IdealDiode2.n, IdealDiode3.n)\r\n    annotation (Line(points={{0,50},{20,50}}, color={0,0,255}))", "connect(IdealDiode4.p, IdealDiode5.p)\r\n    annotation (Line(points={{-20,-50},{0,-50}}, color={0,0,255}))", "connect(IdealDiode5.p, IdealDiode6.p)\r\n    annotation (Line(points={{0,-50},{20,-50}}, color={0,0,255}))", "connect(Capacitor2.n, IdealDiode6.p)\r\n    annotation (Line(points={{40,-50},{20,-50}}, color={0,0,255}))", "connect(IdealDiode3.n, Capacitor1.p)\r\n    annotation (Line(points={{20,50},{40,50}}, color={0,0,255}))", "connect(Capacitor1.n, Capacitor2.p)\r\n    annotation (Line(points={{40,30},{40,-30}}, color={0,0,255}))", "connect(Capacitor2.p, Ground1.p)\r\n    annotation (Line(points={{40,-30},{40,0},{50,0},{50,-60}}, color={0,0,255}))", "connect(Capacitor1.p, SignalCurrent1.p)\r\n    annotation (Line(points={{40,50},{60,50},{60,10}}, color={0,0,255}))", "connect(SignalCurrent1.n, Capacitor2.n)\r\n    annotation (Line(points={{60,-10},{60,-50},{40,-50}}, color={0,0,255}))", "connect(Constant1.y, SignalCurrent1.i)\r\n    annotation (Line(points={{79,0},{79,0},{72,0}}, color={0,0,255}))", "connect(Inductor1.n, IdealDiode1.p)\r\n    annotation (Line(points={{-40,20},{-20,20},{-20,30}}, color={0,0,255}))", "connect(Inductor2.n, IdealDiode2.p)\r\n    annotation (Line(points={{-40,0},{0,0},{0,30}}, color={0,0,255}))", "connect(Inductor3.n, IdealDiode3.p)\r\n    annotation (Line(points={{-40,-20},{20,-20},{20,30}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 111, "end_line": 162, "start_col": 3, "end_col": 77}}, {"equations": ["Losses = IdealDiode1.v*IdealDiode1.i + IdealDiode2.v*IdealDiode2.i +\r\n    IdealDiode3.v*IdealDiode3.i + IdealDiode4.v*IdealDiode4.i +\r\n    IdealDiode5.v*IdealDiode5.i + IdealDiode6.v*IdealDiode6.i"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 116, "end_line": 118, "start_col": 3, "end_col": 62}}, {"equations": ["uAC[3] = Inductor3.n.v - Inductor1.n.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 115, "end_line": 115, "start_col": 3, "end_col": 41}}, {"equations": ["uAC[2] = Inductor2.n.v - Inductor3.n.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 114, "end_line": 114, "start_col": 3, "end_col": 41}}, {"equations": ["uAC[1] = Inductor1.n.v - Inductor2.n.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 113, "end_line": 113, "start_col": 3, "end_col": 41}}, {"equations": ["iAC = {Inductor1.i,Inductor2.i,Inductor3.i}"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 112, "end_line": 112, "start_col": 3, "end_col": 46}}, {"equations": ["uDC = Capacitor1.v + Capacitor2.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 111, "end_line": 111, "start_col": 3, "end_col": 36}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 110, "end_line": 110, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  Capacitor1.v = VAC*sqrt(2)/2", "Capacitor2.v = VAC*sqrt(2)/2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 107, "end_line": 109, "start_col": 1, "end_col": 32}}, {"equations": ["Capacitor1.v = VAC*sqrt(2)/2", "Capacitor2.v = VAC*sqrt(2)/2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 108, "end_line": 109, "start_col": 3, "end_col": 32}}, {"equations": ["Capacitor2.v = VAC*sqrt(2)/2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 109, "end_line": 109, "start_col": 3, "end_col": 31}}, {"equations": ["Capacitor1.v = VAC*sqrt(2)/2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 108, "end_line": 108, "start_col": 3, "end_col": 31}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 107, "end_line": 107, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: SI.Voltage×2, SI.Current×1, SI.Power×1 | connections: 22 | params: VAC, f, LAC | units: V, A, V | eq: equation uDC ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo", "start_line": 2, "end_line": 196, "start_col": 1, "end_col": 14}, "code_text": "model Rectifier \"B6 diode bridge\"\r\n  extends Modelica.Icons.Example;\r\n  import Modelica.Electrical.Analog.Ideal;\r\n  parameter SI.Voltage VAC=400 \"RMS line-to-line\";\r\n  parameter SI.Frequency f=50 \"Line frequency\";\r\n  parameter SI.Inductance LAC=60E-6 \"Line inductor\";\r\n  parameter SI.Resistance Ron=1E-3 \"Diode forward resistance\";\r\n  parameter SI.Conductance Goff=1E-3 \"Diode backward conductance\";\r\n  parameter SI.Voltage Vknee=2 \"Diode threshold voltage\";\r\n  parameter SI.Capacitance CDC=15E-3 \"DC capacitance\";\r\n  parameter SI.Current IDC=500 \"Load current\";\r\n  output SI.Voltage uDC;\r\n  output SI.Current iAC[3];\r\n  output SI.Voltage uAC[3];\r\n  output SI.Power Losses;\r\n\r\n  Modelica.Electrical.Analog.Sources.SineVoltage SineVoltage1(f=f,\r\n       V=VAC*sqrt(2/3))\r\n                      annotation (Placement(transformation(extent={{-70,10},{\r\n            -90,30}})));\r\n  Modelica.Electrical.Analog.Sources.SineVoltage SineVoltage2(\r\n    f=f,\r\n    phase=-2/3*Modelica.Constants.pi,\r\n    V=VAC*sqrt(2/3))\r\n                   annotation (Placement(transformation(extent={{-70,-10},{-90,\r\n            10}})));\r\n  Modelica.Electrical.Analog.Sources.SineVoltage SineVoltage3(\r\n    f=f,\r\n    phase=-4/3*Modelica.Constants.pi,\r\n    V=VAC*sqrt(2/3))\r\n                   annotation (Placement(transformation(extent={{-70,-30},{-90,\r\n            -10}})));\r\n  Modelica.Electrical.Analog.Basic.Inductor Inductor1(L=LAC)\r\n  annotation (Placement(transformation(extent={{-60,10},{-40,30}})));\r\n  Modelica.Electrical.Analog.Basic.Inductor Inductor2(L=LAC, i(start=0, fixed=true))\r\n  annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));\r\n  Modelica.Electrical.Analog.Basic.Inductor Inductor3(L=LAC, i(start=0, fixed=true))\r\n  annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));\r\n  Ideal.IdealDiode IdealDiode1(\r\n    Ron=Ron,\r\n    Goff=Goff,\r\n    Vknee=Vknee)\r\n    annotation (Placement(transformation(\r\n        origin={-20,40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Ideal.IdealDiode IdealDiode2(\r\n    Ron=Ron,\r\n    Goff=Goff,\r\n    Vknee=Vknee)\r\n    annotation (Placement(transformation(\r\n        origin={0,40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Ideal.IdealDiode IdealDiode3(\r\n    Ron=Ron,\r\n    Goff=Goff,\r\n    Vknee=Vknee)\r\n    annotation (Placement(transformation(\r\n        origin={20,40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Ideal.IdealDiode IdealDiode4(\r\n    Ron=Ron,\r\n    Goff=Goff,\r\n    Vknee=Vknee)\r\n    annotation (Placement(transformation(\r\n        origin={-20,-40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Ideal.IdealDiode IdealDiode5(\r\n    Ron=Ron,\r\n    Goff=Goff,\r\n    Vknee=Vknee)\r\n    annotation (Placement(transformation(\r\n        origin={0,-40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Ideal.IdealDiode IdealDiode6(\r\n    Ron=Ron,\r\n    Goff=Goff,\r\n    Vknee=Vknee)\r\n    annotation (Placement(transformation(\r\n        origin={20,-40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Modelica.Electrical.Analog.Basic.Capacitor Capacitor1(C=2*CDC)\r\n  annotation (Placement(transformation(\r\n        origin={40,40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Analog.Basic.Capacitor Capacitor2(C=2*CDC)\r\n  annotation (Placement(transformation(\r\n        origin={40,-40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Analog.Basic.Ground Ground1\r\n  annotation (Placement(transformation(extent={{40,-80},{60,-60}})));\r\n  Modelica.Electrical.Analog.Sources.SignalCurrent SignalCurrent1\r\n  annotation (Placement(transformation(\r\n        origin={60,0},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Blocks.Sources.Constant Constant1(k=IDC)\r\n  annotation (Placement(transformation(extent={{100,-10},{80,10}})));\r\ninitial equation\r\n  Capacitor1.v = VAC*sqrt(2)/2;\r\n  Capacitor2.v = VAC*sqrt(2)/2;\r\nequation\r\n  uDC = Capacitor1.v + Capacitor2.v;\r\n  iAC = {Inductor1.i,Inductor2.i,Inductor3.i};\r\n  uAC[1] = Inductor1.n.v - Inductor2.n.v;\r\n  uAC[2] = Inductor2.n.v - Inductor3.n.v;\r\n  uAC[3] = Inductor3.n.v - Inductor1.n.v;\r\n  Losses = IdealDiode1.v*IdealDiode1.i + IdealDiode2.v*IdealDiode2.i +\r\n    IdealDiode3.v*IdealDiode3.i + IdealDiode4.v*IdealDiode4.i +\r\n    IdealDiode5.v*IdealDiode5.i + IdealDiode6.v*IdealDiode6.i;\r\n  connect(SineVoltage1.n, SineVoltage2.n)\r\n    annotation (Line(points={{-90,20},{-90,0}}, color={0,0,255}));\r\n  connect(SineVoltage2.n, SineVoltage3.n)\r\n    annotation (Line(points={{-90,0},{-90,-20}}, color={0,0,255}));\r\n  connect(SineVoltage1.p, Inductor1.p)\r\n    annotation (Line(points={{-70,20},{-60,20}}, color={0,0,255}));\r\n  connect(SineVoltage2.p, Inductor2.p)\r\n    annotation (Line(points={{-70,0},{-67.5,0},{-65,0},{-60,0}}, color={0,0,255}));\r\n  connect(SineVoltage3.p, Inductor3.p)\r\n    annotation (Line(points={{-70,-20},{-60,-20}}, color={0,0,255}));\r\n  connect(IdealDiode1.p, IdealDiode4.n)\r\n    annotation (Line(points={{-20,30},{-20,-30}}, color={0,0,255}));\r\n  connect(IdealDiode2.p, IdealDiode5.n)\r\n    annotation (Line(points={{0,30},{0,16},{0,0},{0,-30}}, color={0,0,255}));\r\n  connect(IdealDiode3.p, IdealDiode6.n)\r\n    annotation (Line(points={{20,30},{20,-30}}, color={0,0,255}));\r\n  connect(IdealDiode1.n, IdealDiode2.n)\r\n    annotation (Line(points={{-20,50},{0,50}}, color={0,0,255}));\r\n  connect(IdealDiode2.n, IdealDiode3.n)\r\n    annotation (Line(points={{0,50},{20,50}}, color={0,0,255}));\r\n  connect(IdealDiode4.p, IdealDiode5.p)\r\n    annotation (Line(points={{-20,-50},{0,-50}}, color={0,0,255}));\r\n  connect(IdealDiode5.p, IdealDiode6.p)\r\n    annotation (Line(points={{0,-50},{20,-50}}, color={0,0,255}));\r\n  connect(Capacitor2.n, IdealDiode6.p)\r\n    annotation (Line(points={{40,-50},{20,-50}}, color={0,0,255}));\r\n  connect(IdealDiode3.n, Capacitor1.p)\r\n    annotation (Line(points={{20,50},{40,50}}, color={0,0,255}));\r\n  connect(Capacitor1.n, Capacitor2.p)\r\n    annotation (Line(points={{40,30},{40,-30}}, color={0,0,255}));\r\n  connect(Capacitor2.p, Ground1.p)\r\n    annotation (Line(points={{40,-30},{40,0},{50,0},{50,-60}}, color={0,0,255}));\r\n  connect(Capacitor1.p, SignalCurrent1.p)\r\n    annotation (Line(points={{40,50},{60,50},{60,10}}, color={0,0,255}));\r\n  connect(SignalCurrent1.n, Capacitor2.n)\r\n    annotation (Line(points={{60,-10},{60,-50},{40,-50}}, color={0,0,255}));\r\n  connect(Constant1.y, SignalCurrent1.i)\r\n    annotation (Line(points={{79,0},{79,0},{72,0}}, color={0,0,255}));\r\n  connect(Inductor1.n, IdealDiode1.p)\r\n    annotation (Line(points={{-40,20},{-20,20},{-20,30}}, color={0,0,255}));\r\n  connect(Inductor2.n, IdealDiode2.p)\r\n    annotation (Line(points={{-40,0},{0,0},{0,30}}, color={0,0,255}));\r\n  connect(Inductor3.n, IdealDiode3.p)\r\n    annotation (Line(points={{-40,-20},{20,-20},{20,30}}, color={0,0,255}));\r\nannotation (\r\n  Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n            100}}), graphics={\r\n        Line(points={{-16,18},{-16,2},{-18,6},{-14,6},{-16,2}}),\r\n        Line(points={{-30,22},{-26,20},{-30,18},{-30,22}}),\r\n        Line(points={{32,30},{32,-30},{30,-26},{34,-26},{32,-30}}),\r\n        Text(\r\n          extent={{-38,16},{-22,8}},\r\n          textString=\"iAC\"),\r\n        Text(\r\n          extent={{-14,8},{2,0}},\r\n          textString=\"uAC\"),\r\n        Text(\r\n          extent={{22,-16},{38,-24}},\r\n          textString=\"uDC\")}),\r\n  experiment(StopTime=0.1, Interval=1e-005),\r\n  Documentation(info=\"<html>\r\n<p>The rectifier example shows a B6 diode bridge fed by a three-phase sinusoidal voltage, loaded by a DC current.\r\nDC capacitors start at ideal no-load voltage, thus making easier initial transient.</p>\r\n<p>Simulate until T=0.1 s. Plot in separate windows:\r\n<br>uDC ... DC-voltage\r\n<br>iAC ... AC-currents 1..3\r\n<br>uAC ... AC-voltages 1..3 (distorted)\r\n<br>Try different load currents iDC = 0..approximately 500 A. You may watch losses (of the whole diode bridge) trying different diode parameters.</p>\r\n</html>\",\r\n   revisions=\"<html>\r\n<p><strong>Release Notes:</strong></p>\r\n<ul>\r\n<li><em>Mai 7, 2004   </em>\r\n       by Anton Haumer<br> realized<br>\r\n       </li>\r\n</ul>\r\n</html>\"));\r\nend Rectifier", "checksum": "4d3f607c2ff8aa90b56a4e3f39026b9da8dadda3", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\Rectifier.mo:2-196", "component_count": 4, "connection_count": 22, "variable_count": 4, "physical_quantity_count": 5, "parameter_count": 8, "equation_count": 14, "dependency_count": 29, "has_physical_interface": true, "interface_component_count": 4, "has_connections": true, "is_composite_model": true, "complexity_score": 92.0, "model_type": "system", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation uDC = Capacitor1.v + Capacitor2.v", "search_keywords": ["ElectricCurrent", "ElectricPotential", "Power", "SI.Current", "SI.Power", "SI.Voltage", "electrical", "system"]}, "components": [{"name": "uDC", "type_name": "SI.Voltage", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "iAC", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": null}, {"name": "uAC", "type_name": "SI.Voltage", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[3]", "comment": null}, {"name": "Losses", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "SineVoltage1.n", "to_connector": "SineVoltage2.n", "condition": null}, {"from_connector": "SineVoltage2.n", "to_connector": "SineVoltage3.n", "condition": null}, {"from_connector": "SineVoltage1.p", "to_connector": "Inductor1.p", "condition": null}, {"from_connector": "SineVoltage2.p", "to_connector": "Inductor2.p", "condition": null}, {"from_connector": "SineVoltage3.p", "to_connector": "Inductor3.p", "condition": null}, {"from_connector": "IdealDiode1.p", "to_connector": "IdealDiode4.n", "condition": null}, {"from_connector": "IdealDiode2.p", "to_connector": "IdealDiode5.n", "condition": null}, {"from_connector": "IdealDiode3.p", "to_connector": "IdealDiode6.n", "condition": null}, {"from_connector": "IdealDiode1.n", "to_connector": "IdealDiode2.n", "condition": null}, {"from_connector": "IdealDiode2.n", "to_connector": "IdealDiode3.n", "condition": null}, {"from_connector": "IdealDiode4.p", "to_connector": "IdealDiode5.p", "condition": null}, {"from_connector": "IdealDiode5.p", "to_connector": "IdealDiode6.p", "condition": null}, {"from_connector": "Capacitor2.n", "to_connector": "IdealDiode6.p", "condition": null}, {"from_connector": "IdealDiode3.n", "to_connector": "Capacitor1.p", "condition": null}, {"from_connector": "Capacitor1.n", "to_connector": "Capacitor2.p", "condition": null}, {"from_connector": "Capacitor2.p", "to_connector": "Ground1.p", "condition": null}, {"from_connector": "Capacitor1.p", "to_connector": "SignalCurrent1.p", "condition": null}, {"from_connector": "SignalCurrent1.n", "to_connector": "Capacitor2.n", "condition": null}, {"from_connector": "Constant1.y", "to_connector": "SignalCurrent1.i", "condition": null}, {"from_connector": "Inductor1.n", "to_connector": "IdealDiode1.p", "condition": null}, {"from_connector": "Inductor2.n", "to_connector": "IdealDiode2.p", "condition": null}, {"from_connector": "Inductor3.n", "to_connector": "IdealDiode3.p", "condition": null}], "variables": [{"name": "uDC", "type_name": "equation", "prefixes": ["output"], "attributes": {}, "binding_equation": "Capacitor1.v + Capacitor2.v", "comment": null}, {"name": "iAC", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "uAC", "type_name": "SI.Voltage", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Losses", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "uDC", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "iAC", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "uAC", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "Losses", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "current", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Capacitor1", "Capacitor2", "Constant1", "Ground1", "Ideal", "IdealDiode1", "IdealDiode2", "IdealDiode3", "IdealDiode4", "IdealDiode5", "IdealDiode6", "Inductor1", "Inductor1.n", "Inductor2", "Inductor2.n", "Inductor3", "Inductor3.n", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Electrical.Analog", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "Modelica.Electrical.Analog.Sources", "Modelica.Icons", "SI", "SignalCurrent1", "SineVoltage1", "SineVoltage2", "SineVoltage3"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Analog.Examples.OpAmps.MeasureRiseTime", "kind": "model", "name": "MeasureRiseTime", "package_path": ["Modelica", "Electrical", "Analog", "Examples", "OpAmps"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "Vps", "type": "SI.Voltage", "default": "+15 \"Positive supply\"", "description": null}, {"name": "Vns", "type": "SI.Voltage", "default": "-15 \"Negative supply\"", "description": null}, {"name": "Vin", "type": "SI.Voltage", "default": "10 \"Amplitude of input voltage\"", "description": null}, {"name": "V0", "type": "Real", "default": "15000 \"No-load amplification of opAmp\"", "description": null}, {"name": "Tr", "type": "SI.Time", "default": "1e-3 \"Rise time (unrealistic low for visibility)\"", "description": null}, {"name": "Tau", "type": "SI.Time", "default": "V0/log(9)*Tr \"Time constant of firstOrder\"", "description": null}], "equations": [{"equations": ["equation\r\n  when vOut.v>=0.10*Vin then\r\n    t10=time", "end when", "when vOut.v>=0.90*Vin then\r\n    t90=time", "end when", "connect(ground.p, vIn.n) annotation (Line(\r\n      points={{-10,-40},{-10,-30}},           color={0,0,255}))", "connect(opAmp.out, vOut.p) annotation (Line(\r\n      points={{20,0},{30,0},{30,-10}}, color={0,0,255}))", "connect(ground.p, vOut.n) annotation (Line(\r\n      points={{-10,-40},{30,-40},{30,-30}}, color={0,0,255}))", "connect(opAmp.out, opAmp.in_n) annotation (Line(\r\n      points={{20,0},{30,0},{30,20},{-10,20},{-10,6},{0,6}}, color={0,0,255}))", "connect(vIn.p, opAmp.in_p)\r\n    annotation (Line(points={{-10,-10},{-10,-6},{0,-6}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 34, "end_line": 50, "start_col": 1, "end_col": 76}}, {"equations": ["when vOut.v>=0.10*Vin then\r\n    t10=time", "end when", "when vOut.v>=0.90*Vin then\r\n    t90=time", "end when", "connect(ground.p, vIn.n) annotation (Line(\r\n      points={{-10,-40},{-10,-30}},           color={0,0,255}))", "connect(opAmp.out, vOut.p) annotation (Line(\r\n      points={{20,0},{30,0},{30,-10}}, color={0,0,255}))", "connect(ground.p, vOut.n) annotation (Line(\r\n      points={{-10,-40},{30,-40},{30,-30}}, color={0,0,255}))", "connect(opAmp.out, opAmp.in_n) annotation (Line(\r\n      points={{20,0},{30,0},{30,20},{-10,20},{-10,6},{0,6}}, color={0,0,255}))", "connect(vIn.p, opAmp.in_p)\r\n    annotation (Line(points={{-10,-10},{-10,-6},{0,-6}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 35, "end_line": 50, "start_col": 3, "end_col": 76}}, {"equations": ["when vOut.v>=0.90*Vin then\r\n    t90=time", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 38, "end_line": 40, "start_col": 3, "end_col": 11}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 40, "end_line": 40, "start_col": 7, "end_col": 11}}, {"equations": ["t90=time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 39, "end_line": 39, "start_col": 5, "end_col": 14}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 38, "end_line": 38, "start_col": 3, "end_col": 7}}, {"equations": ["when vOut.v>=0.10*Vin then\r\n    t10=time", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 35, "end_line": 37, "start_col": 3, "end_col": 11}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 37, "end_line": 37, "start_col": 7, "end_col": 11}}, {"equations": ["t10=time"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 36, "end_line": 36, "start_col": 5, "end_col": 14}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 35, "end_line": 35, "start_col": 3, "end_col": 7}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 34, "end_line": 34, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Icons.Example | components: SI.Time×3 | connections: 5 | params: Vps, Vns, Vin | units: s, s, s | eq: equation when(条件成立時)(条件成立時) vOut.v>=0.10*", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo", "start_line": 2, "end_line": 59, "start_col": 1, "end_col": 20}, "code_text": "model MeasureRiseTime \"Measure riseTime as voltageFollower\"\r\n  extends Modelica.Icons.Example;\r\n  parameter SI.Voltage Vps=+15 \"Positive supply\";\r\n  parameter SI.Voltage Vns=-15 \"Negative supply\";\r\n  parameter SI.Voltage Vin=10 \"Amplitude of input voltage\";\r\n  parameter Real V0=15000 \"No-load amplification of opAmp\";\r\n  parameter SI.Time Tr=1e-3 \"Rise time (unrealistic low for visibility)\";\r\n  parameter SI.Time Tau=V0/log(9)*Tr \"Time constant of firstOrder\";\r\n  discrete SI.Time t10(start=0) \"Time when output reaches 10% Vin\";\r\n  discrete SI.Time t90(start=0) \"Time when output reaches 90% Vin\";\r\n  SI.Time riseTime=t90-t10 \"Measured rise time\";\r\n  Modelica.Electrical.Analog.Ideal.OpAmpLimited opAmp(\r\n    V0=V0,\r\n    Vps=Vps,\r\n    Vns=Vns,\r\n    useFirstOrder=true,\r\n    Tau=Tau) annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground\r\n    annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));\r\n  Sources.StepVoltage                                 vIn(\r\n    V=Vin,\r\n    offset=0,\r\n    startTime=1e-3)                        annotation (Placement(\r\n        transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-10,-20})));\r\n  Modelica.Electrical.Analog.Sensors.VoltageSensor vOut annotation (Placement(\r\n        transformation(\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270,\r\n        origin={30,-20})));\r\nequation\r\n  when vOut.v>=0.10*Vin then\r\n    t10=time;\r\n  end when;\r\n  when vOut.v>=0.90*Vin then\r\n    t90=time;\r\n  end when;\r\n  connect(ground.p, vIn.n) annotation (Line(\r\n      points={{-10,-40},{-10,-30}},           color={0,0,255}));\r\n  connect(opAmp.out, vOut.p) annotation (Line(\r\n      points={{20,0},{30,0},{30,-10}}, color={0,0,255}));\r\n  connect(ground.p, vOut.n) annotation (Line(\r\n      points={{-10,-40},{30,-40},{30,-30}}, color={0,0,255}));\r\n  connect(opAmp.out, opAmp.in_n) annotation (Line(\r\n      points={{20,0},{30,0},{30,20},{-10,20},{-10,6},{0,6}}, color={0,0,255}));\r\n  connect(vIn.p, opAmp.in_p)\r\n    annotation (Line(points={{-10,-10},{-10,-6},{0,-6}}, color={0,0,255}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>This is a voltage follower. Rise time is measured between the time instances when output reaches 10&#037; and 90&#037; of input step.</p>\r\n</html>\"),\r\n    experiment(\r\n      StartTime=0,\r\n      StopTime=5e-3,\r\n      Interval=1e-7,\r\n      Tolerance=1e-006));\r\nend MeasureRiseTime", "checksum": "79e364c87a2551d2c53e271e97e49291d12a0643", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\MeasureRiseTime.mo:2-59", "component_count": 3, "connection_count": 5, "variable_count": 4, "physical_quantity_count": 3, "parameter_count": 6, "equation_count": 11, "dependency_count": 10, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 35.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation when(条件成立時) vOut.v>=0.10*Vin then t10=time", "search_keywords": ["SI.Time", "Time", "system"]}, "components": [{"name": "t10", "type_name": "SI.Time", "prefixes": ["discrete"], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Time when output reaches 10% Vin"}, {"name": "t90", "type_name": "SI.Time", "prefixes": ["discrete"], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": "Time when output reaches 90% Vin"}, {"name": "riseTime", "type_name": "SI.Time", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "ground.p", "to_connector": "vIn.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "vOut.p", "condition": null}, {"from_connector": "ground.p", "to_connector": "vOut.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "opAmp.in_n", "condition": null}, {"from_connector": "vIn.p", "to_connector": "opAmp.in_p", "condition": null}], "variables": [{"name": "t10", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Time when output reaches 10% Vin\""}, {"name": "t90", "type_name": "SI.Time", "prefixes": ["discrete"], "attributes": {"start": "0"}, "binding_equation": null, "comment": "\"Time when output reaches 90% Vin\""}, {"name": "riseTime", "type_name": "SI.Time", "prefixes": [], "attributes": {}, "binding_equation": "t90-t10 \"Measured rise time\"", "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "t10", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "t90", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "riseTime", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}], "dependencies": ["Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "Modelica.Electrical.Analog.Sensors", "Modelica.Icons", "SI", "Sources", "ground", "opAmp", "vIn", "vOut"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Analog.Examples.OpAmps.OpAmpCircuits.Der", "kind": "model", "name": "Der", "package_path": ["Modelica", "Electrical", "Analog", "Examples", "OpAmps", "OpAmpCircuits"], "extends": ["PartialOpAmp"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "R", "type": "SI.Resistance", "default": "1000 \"Resistance at output of OpAmp\"", "description": null}, {"name": "C", "type": "SI.Capacitance", "default": "k/(2*pi*f*R) \"Calculated capacitance to reach desired amplification k\"", "description": null}, {"name": "k(final min", "type": "Real", "default": "0)=1 \"Desired amplification at frequency f\"", "description": null}, {"name": "f \"Frequency\"", "type": "SI.Frequency", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(c.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.out, r.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))", "connect(c.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{\r\n          -100,100}}, color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{\r\n          -10,-6}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Der.mo", "start_line": 16, "end_line": 30, "start_col": 1, "end_col": 39}}, {"equations": ["connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(c.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.out, r.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))", "connect(c.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{\r\n          -100,100}}, color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{\r\n          -10,-6}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Der.mo", "start_line": 17, "end_line": 30, "start_col": 3, "end_col": 39}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Der.mo", "start_line": 16, "end_line": 16, "start_col": 1, "end_col": 9}}], "docstring": "extends PartialOpAmp | components: SI.Voltage×1 | connections: 7 | params: R, C, k(final min | units: V | eq: equation connect(n1, n2) annotation (Line(points={", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Der.mo", "start_line": 2, "end_line": 38, "start_col": 1, "end_col": 8}, "code_text": "model Der \"Differentiating operational amplifier circuit\"\r\n  extends PartialOpAmp;\r\n  import Modelica.Constants.pi;\r\n  parameter Real k(final min=0)=1 \"Desired amplification at frequency f\";\r\n  parameter SI.Frequency f \"Frequency\";\r\n  parameter SI.Resistance R=1000\r\n    \"Resistance at output of OpAmp\";\r\n  parameter SI.Capacitance C=k/(2*pi*f*R)\r\n    \"Calculated capacitance to reach desired amplification k\";\r\n  SI.Voltage v(start=0)=c.v \"Capacitor voltage = state\";\r\n  Modelica.Electrical.Analog.Basic.Capacitor c(final C=C)\r\n    annotation (Placement(transformation(extent={{-50,20},{-30,40}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor r(final R=R)\r\n    annotation (Placement(transformation(extent={{30,20},{10,40}})));\r\nequation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}));\r\n  connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}));\r\n  connect(c.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}));\r\n  connect(opAmp.in_n, r.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}));\r\n  connect(opAmp.out, r.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}));\r\n  connect(c.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{\r\n          -100,100}}, color={0,0,255}));\r\n  connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{\r\n          -10,-6}}, color={0,0,255}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>Inverting differentiator = der, based on the <a href=\\\"modelica://Modelica.Electrical.Analog.Ideal.IdealizedOpAmpLimited\\\">IdealizedOpAmpLimited</a> model.</p>\r\n<p><code>vOut = -k*der(vIn)</code></p>\r\n</html>\"), Icon(graphics={Text(\r\n          extent={{-60,40},{20,-40}},\r\n          textColor={0,0,255},\r\n          textString=\"der\")}));\r\nend Der", "checksum": "5ed8a7ffb44ab1d26cbd638799dcdd243057255b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Der.mo:2-38", "component_count": 1, "connection_count": 7, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 4, "equation_count": 3, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 28.0, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(n1, n2) annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "search_keywords": ["ElectricPotential", "SI.Voltage", "basic", "electrical"]}, "components": [{"name": "v", "type_name": "SI.Voltage", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "n1", "to_connector": "n2", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "p2", "condition": null}, {"from_connector": "c.n", "to_connector": "opAmp.in_n", "condition": null}, {"from_connector": "opAmp.in_n", "to_connector": "r.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "r.p", "condition": null}, {"from_connector": "c.p", "to_connector": "p1", "condition": null}, {"from_connector": "n1", "to_connector": "opAmp.in_p", "condition": null}], "variables": [{"name": "PartialOpAmp", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": "c.v \"Capacitor voltage = state\"", "comment": null}], "physical_quantities": [{"name": "v", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}], "dependencies": ["Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "SI", "c", "opAmp", "r"], "inheritance_chain": ["PartialOpAmp"]}
{"fqn": "Modelica.Electrical.Analog.Examples.OpAmps.OpAmpCircuits.Derivative", "kind": "model", "name": "Derivative", "package_path": ["Modelica", "Electrical", "Analog", "Examples", "OpAmps", "OpAmpCircuits"], "extends": ["PartialOpAmp"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "R1", "type": "SI.Resistance", "default": "1000 \"Resistance at negative input of OpAmp\"", "description": null}, {"name": "R2", "type": "SI.Resistance", "default": "k*R1 \"Calculated resistance to reach k\"", "description": null}, {"name": "C", "type": "SI.Capacitance", "default": "T/R1 \"Calculated capacitance to reach T\"", "description": null}, {"name": "k(final min", "type": "Real", "default": "0)=1 \"Desired amplification\"", "description": null}, {"name": "T \"Time constant\"", "type": "SI.Time", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.out, r2.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))", "connect(c.n, r1.p)\r\n    annotation (Line(points={{-60,30},{-50,30}}, color={0,0,255}))", "connect(c.p, p1)\r\n    annotation (Line(points={{-80,30},{-80,100},{-100,100}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Derivative.mo", "start_line": 20, "end_line": 36, "start_col": 1, "end_col": 80}}, {"equations": ["connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.out, r2.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))", "connect(c.n, r1.p)\r\n    annotation (Line(points={{-60,30},{-50,30}}, color={0,0,255}))", "connect(c.p, p1)\r\n    annotation (Line(points={{-80,30},{-80,100},{-100,100}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Derivative.mo", "start_line": 21, "end_line": 36, "start_col": 3, "end_col": 80}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Derivative.mo", "start_line": 20, "end_line": 20, "start_col": 1, "end_col": 9}}], "docstring": "extends PartialOpAmp | components: SI.Voltage×1 | connections: 8 | params: R1, R2, C | units: V | eq: equation connect(n1, n2) annotation (Line(points={{-100,-1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Derivative.mo", "start_line": 2, "end_line": 58, "start_col": 1, "end_col": 15}, "code_text": "model Derivative \"Lowpass filter operational amplifier circuit\"\r\n  extends PartialOpAmp;\r\n  import Modelica.Constants.pi;\r\n  parameter Real k(final min=0)=1 \"Desired amplification\";\r\n  parameter SI.Resistance R1=1000\r\n    \"Resistance at negative input of OpAmp\";\r\n  parameter SI.Resistance R2=k*R1\r\n    \"Calculated resistance to reach k\";\r\n  parameter SI.Time T \"Time constant\";\r\n  parameter SI.Capacitance C=T/R1\r\n    \"Calculated capacitance to reach T\";\r\n  SI.Voltage v(start=0)=c.v \"Capacitor voltage = state\";\r\n  Modelica.Electrical.Analog.Basic.Resistor r1(R=R1)\r\n    annotation (Placement(transformation(extent={{-50,20},{-30,40}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor r2(R=R2)\r\n    annotation (Placement(transformation(extent={{30,20},{10,40}})));\r\n  Modelica.Electrical.Analog.Basic.Capacitor c(C=C)\r\n    annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\nequation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}));\r\n  connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}));\r\n  connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}));\r\n  connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}));\r\n  connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}));\r\n  connect(opAmp.out, r2.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}));\r\n  connect(c.n, r1.p)\r\n    annotation (Line(points={{-60,30},{-50,30}}, color={0,0,255}));\r\n  connect(c.p, p1)\r\n    annotation (Line(points={{-80,30},{-80,100},{-100,100}}, color={0,0,255}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>Inverting highpass filter = derivative, based on the <a href=\\\"modelica://Modelica.Electrical.Analog.Ideal.IdealizedOpAmpLimited\\\">IdealizedOpAmpLimited</a> model.</p>\r\n<p>Transfer function: <code>vOut/vIn = -k*s/(1 + s*T)</code></p>\r\n</html>\"),\r\n       Icon(graphics={\r\n  Polygon(lineColor={192,192,192},\r\n    fillColor={192,192,192},\r\n    fillPattern=FillPattern.Solid,\r\n    points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n    Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n      color={192,192,192}),\r\n  Line(origin = {-24.667,-27.333},\r\n    points = {{-55.333,87.333},{-19.333,-40.667},{86.667,-52.667}},\r\n    color = {0,0,127},\r\n    smooth = Smooth.Bezier),\r\n  Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n    color={192,192,192}),\r\n  Polygon(lineColor={192,192,192},\r\n    fillColor={192,192,192},\r\n    fillPattern=FillPattern.Solid,\r\n    points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}})}));\r\nend Derivative", "checksum": "8fba39b18866ef8979b4cd878a2143a05a9af0db", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Derivative.mo:2-58", "component_count": 1, "connection_count": 8, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 5, "equation_count": 3, "dependency_count": 11, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 31.5, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(n1, n2) annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "search_keywords": ["ElectricPotential", "SI.Voltage", "basic", "electrical"]}, "components": [{"name": "v", "type_name": "SI.Voltage", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "n1", "to_connector": "n2", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "p2", "condition": null}, {"from_connector": "n1", "to_connector": "opAmp.in_p", "condition": null}, {"from_connector": "r1.n", "to_connector": "opAmp.in_n", "condition": null}, {"from_connector": "opAmp.in_n", "to_connector": "r2.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "r2.p", "condition": null}, {"from_connector": "c.n", "to_connector": "r1.p", "condition": null}, {"from_connector": "c.p", "to_connector": "p1", "condition": null}], "variables": [{"name": "PartialOpAmp", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": "c.v \"Capacitor voltage = state\"", "comment": null}], "physical_quantities": [{"name": "v", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}], "dependencies": ["FillPattern", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "SI", "Smooth", "c", "opAmp", "r1", "r2"], "inheritance_chain": ["PartialOpAmp"]}
{"fqn": "Modelica.Electrical.Analog.Examples.OpAmps.OpAmpCircuits.FirstOrder", "kind": "model", "name": "FirstOrder", "package_path": ["Modelica", "Electrical", "Analog", "Examples", "OpAmps", "OpAmpCircuits"], "extends": ["PartialOpAmp"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "R1", "type": "SI.Resistance", "default": "1000 \"Resistance at negative input of OpAmp\"", "description": null}, {"name": "R2", "type": "SI.Resistance", "default": "k*R1 \"Calculated resistance to reach k\"", "description": null}, {"name": "C", "type": "SI.Capacitance", "default": "T/R2 \"Calculated capacitance to reach T\"", "description": null}, {"name": "k(final min", "type": "Real", "default": "0)=1 \"Desired amplification\"", "description": null}, {"name": "T \"Time constant\"", "type": "SI.Time", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r1.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{-100,100}},\r\n        color={0,0,255}))", "connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.in_n, c.n)\r\n    annotation (Line(points={{-10,6},{-10,50},{10,50}}, color={0,0,255}))", "connect(opAmp.out, r2.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))", "connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,50}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\FirstOrder.mo", "start_line": 20, "end_line": 38, "start_col": 1, "end_col": 72}}, {"equations": ["connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r1.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{-100,100}},\r\n        color={0,0,255}))", "connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.in_n, c.n)\r\n    annotation (Line(points={{-10,6},{-10,50},{10,50}}, color={0,0,255}))", "connect(opAmp.out, r2.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))", "connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,50}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\FirstOrder.mo", "start_line": 21, "end_line": 38, "start_col": 3, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\FirstOrder.mo", "start_line": 20, "end_line": 20, "start_col": 1, "end_col": 9}}], "docstring": "extends PartialOpAmp | components: SI.Voltage×1 | connections: 9 | params: R1, R2, C | units: V | eq: equation connect(n1, n2) annotation (Line(points={{-100,-1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\FirstOrder.mo", "start_line": 2, "end_line": 60, "start_col": 1, "end_col": 15}, "code_text": "model FirstOrder \"Lowpass filter operational amplifier circuit\"\r\n  extends PartialOpAmp;\r\n  import Modelica.Constants.pi;\r\n  parameter Real k(final min=0)=1 \"Desired amplification\";\r\n  parameter SI.Resistance R1=1000\r\n    \"Resistance at negative input of OpAmp\";\r\n  parameter SI.Resistance R2=k*R1\r\n    \"Calculated resistance to reach k\";\r\n  parameter SI.Time T \"Time constant\";\r\n  parameter SI.Capacitance C=T/R2\r\n    \"Calculated capacitance to reach T\";\r\n  SI.Voltage v(start=0)=c.v \"Capacitor voltage = state\";\r\n  Modelica.Electrical.Analog.Basic.Resistor r1(R=R1)\r\n    annotation (Placement(transformation(extent={{-50,20},{-30,40}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor r2(R=R2)\r\n    annotation (Placement(transformation(extent={{30,20},{10,40}})));\r\n  Modelica.Electrical.Analog.Basic.Capacitor c(C=C)\r\n    annotation (Placement(transformation(extent={{30,40},{10,60}})));\r\nequation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}));\r\n  connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}));\r\n  connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}));\r\n  connect(r1.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{-100,100}},\r\n        color={0,0,255}));\r\n  connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}));\r\n  connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}));\r\n  connect(opAmp.in_n, c.n)\r\n    annotation (Line(points={{-10,6},{-10,50},{10,50}}, color={0,0,255}));\r\n  connect(opAmp.out, r2.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}));\r\n  connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,50}}, color={0,0,255}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>Inverting lowpass filter = first order, based on the <a href=\\\"modelica://Modelica.Electrical.Analog.Ideal.IdealizedOpAmpLimited\\\">IdealizedOpAmpLimited</a> model.</p>\r\n<p>Transfer function: <code>vOut/vIn = -k/(1 + s*T)</code></p>\r\n</html>\"),\r\n       Icon(graphics={\r\n  Polygon(lineColor={192,192,192},\r\n    fillColor={192,192,192},\r\n    fillPattern=FillPattern.Solid,\r\n    points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n  Line(points={{-80.0,78.0},{-80.0,-90.0}},\r\n    color={192,192,192}),\r\n  Line(origin = {-26.667,6.667},\r\n      points = {{106.667,43.333},{-13.333,29.333},{-53.333,-86.667}},\r\n      color = {0,0,127},\r\n      smooth = Smooth.Bezier),\r\n  Line(points={{-90.0,-80.0},{82.0,-80.0}},\r\n    color={192,192,192}),\r\n  Polygon(lineColor={192,192,192},\r\n    fillColor={192,192,192},\r\n    fillPattern=FillPattern.Solid,\r\n    points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}})}));\r\nend FirstOrder", "checksum": "9296840b8456588a96d5835fe8ba1b138c233d09", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\FirstOrder.mo:2-60", "component_count": 1, "connection_count": 9, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 5, "equation_count": 3, "dependency_count": 11, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 34.5, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(n1, n2) annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "search_keywords": ["ElectricPotential", "SI.Voltage", "basic", "electrical"]}, "components": [{"name": "v", "type_name": "SI.Voltage", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "n1", "to_connector": "n2", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "p2", "condition": null}, {"from_connector": "n1", "to_connector": "opAmp.in_p", "condition": null}, {"from_connector": "r1.p", "to_connector": "p1", "condition": null}, {"from_connector": "r1.n", "to_connector": "opAmp.in_n", "condition": null}, {"from_connector": "opAmp.in_n", "to_connector": "r2.n", "condition": null}, {"from_connector": "opAmp.in_n", "to_connector": "c.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "r2.p", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "c.p", "condition": null}], "variables": [{"name": "PartialOpAmp", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": "c.v \"Capacitor voltage = state\"", "comment": null}], "physical_quantities": [{"name": "v", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}], "dependencies": ["FillPattern", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "SI", "Smooth", "c", "opAmp", "r1", "r2"], "inheritance_chain": ["PartialOpAmp"]}
{"fqn": "Modelica.Electrical.Analog.Examples.OpAmps.OpAmpCircuits.Integrator", "kind": "model", "name": "Integrator", "package_path": ["Modelica", "Electrical", "Analog", "Examples", "OpAmps", "OpAmpCircuits"], "extends": ["PartialOpAmp"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "R", "type": "SI.Resistance", "default": "1000 \"Resistance at negative input of OpAmp\"", "description": null}, {"name": "C", "type": "SI.Capacitance", "default": "1/k/(2*pi*f*R) \"Calculated capacitance to reach desired amplification k\"", "description": null}, {"name": "k(final min", "type": "Real", "default": "0)=1 \"Desired amplification at frequency f\"", "description": null}, {"name": "f \"Frequency\"", "type": "SI.Frequency", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{-100,100}},\r\n        color={0,0,255}))", "connect(r.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, c.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Integrator.mo", "start_line": 16, "end_line": 30, "start_col": 1, "end_col": 72}}, {"equations": ["connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{-100,100}},\r\n        color={0,0,255}))", "connect(r.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, c.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Integrator.mo", "start_line": 17, "end_line": 30, "start_col": 3, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Integrator.mo", "start_line": 16, "end_line": 16, "start_col": 1, "end_col": 9}}], "docstring": "extends PartialOpAmp | components: SI.Voltage×1 | connections: 7 | params: R, C, k(final min | units: V | eq: equation connect(n1, n2) annotation (Line(points={", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Integrator.mo", "start_line": 2, "end_line": 59, "start_col": 1, "end_col": 15}, "code_text": "model Integrator \"Integrating operational amplifier circuit\"\r\n  extends PartialOpAmp;\r\n  import Modelica.Constants.pi;\r\n  parameter Real k(final min=0)=1 \"Desired amplification at frequency f\";\r\n  parameter SI.Frequency f \"Frequency\";\r\n  parameter SI.Resistance R=1000\r\n    \"Resistance at negative input of OpAmp\";\r\n  parameter SI.Capacitance C=1/k/(2*pi*f*R)\r\n    \"Calculated capacitance to reach desired amplification k\";\r\n  SI.Voltage v(start=0)=c.v \"Capacitor voltage = state\";\r\n  Modelica.Electrical.Analog.Basic.Capacitor c(final C=C)\r\n    annotation (Placement(transformation(extent={{30,20},{10,40}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor r(final R=R)\r\n    annotation (Placement(transformation(extent={{-50,20},{-30,40}})));\r\nequation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}));\r\n  connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}));\r\n  connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}));\r\n  connect(r.p, p1) annotation (Line(points={{-50,30},{-80,30},{-80,100},{-100,100}},\r\n        color={0,0,255}));\r\n  connect(r.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}));\r\n  connect(opAmp.in_n, c.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}));\r\n  connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{30,0},{30,30}}, color={0,0,255}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>Inverting integrator, based on the <a href=\\\"modelica://Modelica.Electrical.Analog.Ideal.IdealizedOpAmpLimited\\\">IdealizedOpAmpLimited</a> model.</p>\r\n<p><code>k*vin = -der(dvOut)</code></p>\r\n</html>\"),\r\n       Icon(graphics={\r\n          Polygon(\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid,\r\n            points={{-80.0,90.0},{-88.0,68.0},{-72.0,68.0},{-80.0,90.0}}),\r\n          Line(\r\n            points={{-80.0,78.0},{-80.0,-90.0}},\r\n            color={192,192,192}),\r\n          Line(\r\n            points={{-80.0,-80.0},{80.0,80.0}},\r\n            color={0,0,127}),\r\n          Line(\r\n            points={{-90.0,-80.0},{82.0,-80.0}},\r\n            color={192,192,192}),\r\n          Polygon(\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid,\r\n            points={{90.0,-80.0},{68.0,-72.0},{68.0,-88.0},{90.0,-80.0}}),\r\n                          Text(\r\n          extent={{-80,40},{0,-40}},\r\n          textColor={0,0,255},\r\n          textString=\"I\")}));\r\nend Integrator", "checksum": "0915d91cd49ef46a8462e16aa353d5aeef6c415e", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\Integrator.mo:2-59", "component_count": 1, "connection_count": 7, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 4, "equation_count": 3, "dependency_count": 9, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 28.0, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(n1, n2) annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "search_keywords": ["ElectricPotential", "SI.Voltage", "basic", "electrical"]}, "components": [{"name": "v", "type_name": "SI.Voltage", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "n1", "to_connector": "n2", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "p2", "condition": null}, {"from_connector": "n1", "to_connector": "opAmp.in_p", "condition": null}, {"from_connector": "r.p", "to_connector": "p1", "condition": null}, {"from_connector": "r.n", "to_connector": "opAmp.in_n", "condition": null}, {"from_connector": "opAmp.in_n", "to_connector": "c.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "c.p", "condition": null}], "variables": [{"name": "PartialOpAmp", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": "c.v \"Capacitor voltage = state\"", "comment": null}], "physical_quantities": [{"name": "v", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}], "dependencies": ["FillPattern", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "SI", "c", "opAmp", "r"], "inheritance_chain": ["PartialOpAmp"]}
{"fqn": "Modelica.Electrical.Analog.Examples.OpAmps.OpAmpCircuits.PI", "kind": "model", "name": "PI", "package_path": ["Modelica", "Electrical", "Analog", "Examples", "OpAmps", "OpAmpCircuits"], "extends": ["PartialOpAmp"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "R1", "type": "SI.Resistance", "default": "1000 \"Resistance at negative input of OpAmp\"", "description": null}, {"name": "R2", "type": "SI.Resistance", "default": "k*R1 \"Calculated resistance to reach k\"", "description": null}, {"name": "C", "type": "SI.Capacitance", "default": "T/k/R1 \"Calculated capacitance to reach T\"", "description": null}, {"name": "k(final min", "type": "Real", "default": "0)=1 \"Desired amplification\"", "description": null}, {"name": "T \"Time constant\"", "type": "SI.Time", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(p1, r1.p) annotation (Line(points={{-100,100},{-80,100},{-80,30},{-50,\r\n          30}}, color={0,0,255}))", "connect(r2.p, c.n)\r\n    annotation (Line(points={{30,30},{40,30}}, color={0,0,255}))", "connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{60,0},{60,30}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\PI.mo", "start_line": 20, "end_line": 36, "start_col": 1, "end_col": 72}}, {"equations": ["connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}))", "connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}))", "connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}))", "connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}))", "connect(p1, r1.p) annotation (Line(points={{-100,100},{-80,100},{-80,30},{-50,\r\n          30}}, color={0,0,255}))", "connect(r2.p, c.n)\r\n    annotation (Line(points={{30,30},{40,30}}, color={0,0,255}))", "connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{60,0},{60,30}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\PI.mo", "start_line": 21, "end_line": 36, "start_col": 3, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\PI.mo", "start_line": 20, "end_line": 20, "start_col": 1, "end_col": 9}}], "docstring": "extends PartialOpAmp | components: SI.Voltage×1 | connections: 8 | params: R1, R2, C | units: V | eq: equation connect(n1, n2) annotation (Line(points={{-100,-1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\PI.mo", "start_line": 2, "end_line": 54, "start_col": 1, "end_col": 7}, "code_text": "model PI \"PI controller operational amplifier circuit\"\r\n  extends PartialOpAmp;\r\n  import Modelica.Constants.pi;\r\n  parameter Real k(final min=0)=1 \"Desired amplification\";\r\n  parameter SI.Resistance R1=1000\r\n    \"Resistance at negative input of OpAmp\";\r\n  parameter SI.Resistance R2=k*R1\r\n    \"Calculated resistance to reach k\";\r\n  parameter SI.Time T \"Time constant\";\r\n  parameter SI.Capacitance C=T/k/R1\r\n    \"Calculated capacitance to reach T\";\r\n  SI.Voltage v(start=0)=c.v \"Capacitor voltage = state\";\r\n  Modelica.Electrical.Analog.Basic.Resistor r1(R=R1)\r\n    annotation (Placement(transformation(extent={{-50,20},{-30,40}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor r2(R=R2)\r\n    annotation (Placement(transformation(extent={{30,20},{10,40}})));\r\n  Modelica.Electrical.Analog.Basic.Capacitor c(C=C)\r\n    annotation (Placement(transformation(extent={{60,20},{40,40}})));\r\nequation\r\n  connect(n1, n2)\r\n    annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}));\r\n  connect(opAmp.out, p2) annotation (Line(points={{10,0},{80,0},{80,100},{100,100}},\r\n        color={0,0,255}));\r\n  connect(n1, opAmp.in_p) annotation (Line(points={{-100,-100},{-10,-100},{-10,-6}},\r\n        color={0,0,255}));\r\n  connect(r1.n, opAmp.in_n)\r\n    annotation (Line(points={{-30,30},{-10,30},{-10,6}}, color={0,0,255}));\r\n  connect(opAmp.in_n, r2.n)\r\n    annotation (Line(points={{-10,6},{-10,30},{10,30}}, color={0,0,255}));\r\n  connect(p1, r1.p) annotation (Line(points={{-100,100},{-80,100},{-80,30},{-50,\r\n          30}}, color={0,0,255}));\r\n  connect(r2.p, c.n)\r\n    annotation (Line(points={{30,30},{40,30}}, color={0,0,255}));\r\n  connect(opAmp.out, c.p)\r\n    annotation (Line(points={{10,0},{60,0},{60,30}}, color={0,0,255}));\r\n  annotation (defaultComponentName=\"PI\", Documentation(info=\"<html>\r\n<p>Inverting proportional-integral controller = PI, based on the <a href=\\\"modelica://Modelica.Electrical.Analog.Ideal.IdealizedOpAmpLimited\\\">IdealizedOpAmpLimited</a> model.</p>\r\n<p>Transfer function: <code>vOut/vIn = -k*s/(1 + s*T)</code></p>\r\n</html>\"), Icon(graphics={\r\n        Polygon(\r\n          points={{-80,90},{-88,68},{-72,68},{-80,90}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-80,78},{-80,-90}}, color={192,192,192}),\r\n        Line(points = {{-80.0,-80.0},{-80.0,-20.0},{60.0,80.0}}, color = {0,0,127}),\r\n        Line(points={{-90,-80},{82,-80}}, color={192,192,192}),\r\n        Polygon(\r\n          points={{90,-80},{68,-72},{68,-88},{90,-80}},\r\n          lineColor={192,192,192},\r\n          fillColor={192,192,192},\r\n          fillPattern=FillPattern.Solid)}));\r\nend PI", "checksum": "59412c16ccc349cfa7cdbc0a2334ec5bdcee4d30", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Examples\\OpAmps\\OpAmpCircuits\\PI.mo:2-54", "component_count": 1, "connection_count": 8, "variable_count": 2, "physical_quantity_count": 1, "parameter_count": 5, "equation_count": 3, "dependency_count": 10, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 31.5, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(n1, n2) annotation (Line(points={{-100,-100},{100,-100}}, color={0,0,255}))", "search_keywords": ["ElectricPotential", "SI.Voltage", "basic", "electrical"]}, "components": [{"name": "v", "type_name": "SI.Voltage", "prefixes": [], "modifications": {"start": "0"}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "n1", "to_connector": "n2", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "p2", "condition": null}, {"from_connector": "n1", "to_connector": "opAmp.in_p", "condition": null}, {"from_connector": "r1.n", "to_connector": "opAmp.in_n", "condition": null}, {"from_connector": "opAmp.in_n", "to_connector": "r2.n", "condition": null}, {"from_connector": "p1", "to_connector": "r1.p", "condition": null}, {"from_connector": "r2.p", "to_connector": "c.n", "condition": null}, {"from_connector": "opAmp.out", "to_connector": "c.p", "condition": null}], "variables": [{"name": "PartialOpAmp", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": "c.v \"Capacitor voltage = state\"", "comment": null}], "physical_quantities": [{"name": "v", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}], "dependencies": ["FillPattern", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "SI", "c", "opAmp", "r1", "r2"], "inheritance_chain": ["PartialOpAmp"]}
{"fqn": "Modelica.Electrical.Analog.Lines.OLine", "kind": "model", "name": "OLine", "package_path": ["Modelica", "Electrical", "Analog", "Lines"], "extends": ["Interfaces.ThreePol"], "imports": [], "parameters": [{"name": "alpha_R", "type": "SI.LinearTemperatureCoefficient", "default": "0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(heatPort.T - T_ref))\"", "description": null}, {"name": "alpha_G", "type": "SI.LinearTemperatureCoefficient", "default": "0 \"Temperature coefficient of conductance (G_actual = G/(1 + alpha*(heatPort.T - T_ref))\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"= true, if heatPort is enabled\" parameter SI.Temperature T=293.15 \"Fixed device temperature if useHeatPort = false\" parameter SI.Temperature T_ref=300.15 \"Reference temperat", "description": null}, {"name": "N(final min", "type": "Integer", "default": "1, start=1) \"Number of lumped segments\"", "description": null}, {"name": "T_ref", "type": "SI.Temperature", "default": "300.15 \"Reference temperature\"", "description": null}], "equations": [{"equations": ["equation\r\n  v13 = p1.v - p3.v", "v23 = p2.v - p3.v", "i1 = p1.i", "i2 = p2.i", "connect(p1, R[1].p)", "for i in 1:N loop\r\n    connect(R[i].n, L[i].p)", "connect(L[i].n, C[i].p)", "connect(L[i].n, G[i].p)", "connect(C[i].n, p3)", "connect(G[i].n, p3)", "connect(L[i].n, R[i + 1].p)", "end for", "connect(R[N + 1].n, L[N + 1].p)", "connect(L[N + 1].n, p2)", "if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "for i in 1:N loop\r\n      connect(heatPort, G[i].heatPort)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 76, "end_line": 99, "start_col": 1, "end_col": 10}}, {"equations": ["v13 = p1.v - p3.v", "v23 = p2.v - p3.v", "i1 = p1.i", "i2 = p2.i", "connect(p1, R[1].p)", "for i in 1:N loop\r\n    connect(R[i].n, L[i].p)", "connect(L[i].n, C[i].p)", "connect(L[i].n, G[i].p)", "connect(C[i].n, p3)", "connect(G[i].n, p3)", "connect(L[i].n, R[i + 1].p)", "end for", "connect(R[N + 1].n, L[N + 1].p)", "connect(L[N + 1].n, p2)", "if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "for i in 1:N loop\r\n      connect(heatPort, G[i].heatPort)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 77, "end_line": 99, "start_col": 3, "end_col": 10}}, {"equations": ["if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "for i in 1:N loop\r\n      connect(heatPort, G[i].heatPort)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 92, "end_line": 99, "start_col": 3, "end_col": 9}}, {"equations": ["for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "for i in 1:N loop\r\n      connect(heatPort, G[i].heatPort)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 93, "end_line": 98, "start_col": 5, "end_col": 13}}, {"equations": ["for i in 1:N loop\r\n      connect(heatPort, G[i].heatPort)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 96, "end_line": 98, "start_col": 5, "end_col": 12}}, {"equations": ["connect(heatPort, G[i].heatPort)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 97, "end_line": 97, "start_col": 7, "end_col": 40}}, {"equations": ["for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 93, "end_line": 95, "start_col": 5, "end_col": 12}}, {"equations": ["connect(heatPort, R[i].heatPort)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 94, "end_line": 94, "start_col": 7, "end_col": 40}}, {"equations": ["for i in 1:N loop\r\n    connect(R[i].n, L[i].p)", "connect(L[i].n, C[i].p)", "connect(L[i].n, G[i].p)", "connect(C[i].n, p3)", "connect(G[i].n, p3)", "connect(L[i].n, R[i + 1].p)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 82, "end_line": 89, "start_col": 3, "end_col": 10}}, {"equations": ["connect(R[i].n, L[i].p)", "connect(L[i].n, C[i].p)", "connect(L[i].n, G[i].p)", "connect(C[i].n, p3)", "connect(G[i].n, p3)", "connect(L[i].n, R[i + 1].p)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 83, "end_line": 88, "start_col": 5, "end_col": 33}}, {"equations": ["i2 = p2.i"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 80, "end_line": 80, "start_col": 3, "end_col": 12}}, {"equations": ["i1 = p1.i"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 79, "end_line": 79, "start_col": 3, "end_col": 12}}, {"equations": ["v23 = p2.v - p3.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 78, "end_line": 78, "start_col": 3, "end_col": 20}}, {"equations": ["v13 = p1.v - p3.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 77, "end_line": 77, "start_col": 3, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 76, "end_line": 76, "start_col": 1, "end_col": 9}}], "docstring": "extends Interfaces.ThreePol | components: SI.Voltage×3, SI.Current×3, Modelica.Electrical.Analog.Basic.Inductor×1 | connections: 11 | params: alpha_R, alpha_G, ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo", "start_line": 2, "end_line": 147, "start_col": 1, "end_col": 10}, "code_text": "model OLine \"Lossy Transmission Line\"\r\n  //extends Interfaces.ThreePol;\r\n  Modelica.Electrical.Analog.Interfaces.Pin p1 annotation (Placement(\r\n        transformation(extent={{-110,-10},{-90,10}})));\r\n  Modelica.Electrical.Analog.Interfaces.Pin p2 annotation (Placement(\r\n        transformation(extent={{90,-10},{110,10}})));\r\n  Modelica.Electrical.Analog.Interfaces.Pin p3 annotation (Placement(\r\n        transformation(extent={{-10,-110},{10,-90}})));\r\n  SI.Voltage v13;\r\n  SI.Voltage v23;\r\n  SI.Current i1;\r\n  SI.Current i2;\r\n  parameter Real r(\r\n    final min=Modelica.Constants.small,\r\n    unit=\"Ohm/m\",\r\n    start=1) \"Resistance per meter\";\r\n  parameter Real l(\r\n    final min=Modelica.Constants.small,\r\n    unit=\"H/m\",\r\n    start=1) \"Inductance per meter\";\r\n  parameter Real g(\r\n    final min=Modelica.Constants.small,\r\n    unit=\"S/m\",\r\n    start=1) \"Conductance per meter\";\r\n  parameter Real c(\r\n    final min=Modelica.Constants.small,\r\n    unit=\"F/m\",\r\n    start=1) \"Capacitance per meter\";\r\n  parameter SI.Length length(final min=Modelica.Constants.small,\r\n      start=1) \"Length of line\";\r\n  parameter Integer N(final min=1, start=1) \"Number of lumped segments\";\r\n  parameter SI.LinearTemperatureCoefficient alpha_R=0\r\n    \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(heatPort.T - T_ref))\";\r\n  parameter SI.LinearTemperatureCoefficient alpha_G=0\r\n    \"Temperature coefficient of conductance (G_actual = G/(1 + alpha*(heatPort.T - T_ref))\";\r\n  parameter Boolean useHeatPort=false \"= true, if heatPort is enabled\"\r\n    annotation (\r\n    Evaluate=true,\r\n    HideResult=true,\r\n    choices(checkBox=true));\r\n  parameter SI.Temperature T=293.15\r\n    \"Fixed device temperature if useHeatPort = false\"\r\n    annotation (Dialog(enable=not useHeatPort));\r\n  parameter SI.Temperature T_ref=300.15 \"Reference temperature\";\r\n  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort if useHeatPort\r\n    annotation (Placement(transformation(extent={{-110,-110},{-90,-90}}),\r\n        iconTransformation(extent={{-110,-110},{-90,-90}})));\r\n  output SI.Voltage v[N]=G.v \"Voltages at the connections of the elements\";\r\n  output SI.Current i[N+1]=R.i \"Currents at the connections of the elements\";\r\n  /* \r\n  The components R[N+1], L[N+1], C[N] and G[N] have been protected in the previous release(s)\r\n  to avoid excessive size of simulation results.\r\n  Voltages and currents at the connections are now mirrored to alias variables\r\n  to be able to initialize and to track travelling waves along the line.\r\n  */\r\nprotected\r\n  Modelica.Electrical.Analog.Basic.Resistor R[N + 1](\r\n    R=rm,\r\n    T_ref=fill(T_ref, N + 1),\r\n    alpha=fill(alpha_R, N + 1),\r\n    useHeatPort=fill(useHeatPort, N + 1),\r\n    T=fill(T, N + 1));\r\n  Modelica.Electrical.Analog.Basic.Inductor L[N + 1](L=lm);\r\n  Modelica.Electrical.Analog.Basic.Capacitor C[N](C=fill(c*length/(N), N));\r\n  Modelica.Electrical.Analog.Basic.Conductor G[N](\r\n    G=fill(g*length/(N), N),\r\n    T_ref=fill(T_ref, N),\r\n    alpha=fill(alpha_G, N),\r\n    useHeatPort=fill(useHeatPort, N),\r\n    T=fill(T, N));\r\n  parameter SI.Resistance rm[N + 1]=\r\n  {if i==1 or i==N + 1 then r*length/(N*2) else r*length/N for i in 1:N+1};\r\n  parameter SI.Inductance lm[N + 1]=\r\n  {if i==1 or i==N + 1 then l*length/(N*2) else l*length/N for i in 1:N+1};\r\nequation\r\n  v13 = p1.v - p3.v;\r\n  v23 = p2.v - p3.v;\r\n  i1 = p1.i;\r\n  i2 = p2.i;\r\n  connect(p1, R[1].p);\r\n  for i in 1:N loop\r\n    connect(R[i].n, L[i].p);\r\n    connect(L[i].n, C[i].p);\r\n    connect(L[i].n, G[i].p);\r\n    connect(C[i].n, p3);\r\n    connect(G[i].n, p3);\r\n    connect(L[i].n, R[i + 1].p);\r\n  end for;\r\n  connect(R[N + 1].n, L[N + 1].p);\r\n  connect(L[N + 1].n, p2);\r\n  if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort);\r\n    end for;\r\n    for i in 1:N loop\r\n      connect(heatPort, G[i].heatPort);\r\n    end for;\r\n  end if;\r\n  annotation (defaultComponentName=\"line\",\r\n    Documentation(info=\"<html>\r\n<p>Like in the picture below, the lossy transmission line OLine is a single-conductor lossy transmission line which consists of segments of lumped resistors and inductors in series and conductor and capacitors that are connected with the reference pin p3. The precision of the model depends on the number N of lumped segments.</p>\r\n<p>To get a symmetric line model, the first resistor and inductor are cut into two parts (R1 and R_Nplus1, L1 and L_Nplus1). These two new resistors and inductors have the half of the resistance respectively inductance the original resistor respectively inductor.</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Electrical/Analog/OLine.png\\\"\r\n     alt=\\\"OLine.png\\\">\r\n</div>\r\n\r\n<p>The capacitances are calculated with: C=c*length/N.\r\n<br> The conductances are calculated with: G=g*length/N.\r\n<br> The resistances are calculated with : R=r*length/(N+1).\r\n<br> The inductances are calculated with : L=l*length/(N+1).\r\n<br> For all capacitors, conductors, resistors and inductors the values of each segment are the same except of the first and last resistor and inductor, that only have the half of the above calculated value of the rest.</p>\r\n<p>The user has the possibility to enable a conditional heatport. If so, the OLine can be connected to a thermal network. When the parameter alpha is set to a value greater than zero, the OLine becomes temperature sensitive due to their resistors which resistances are calculated by <code>R_actual = R*(1 + alpha*(heatPort.T - T_ref))</code> and conductors calculated by <code> (G_actual = G/(1 + alpha*(heatPort.T - T_ref)).</code></p>\r\n<p>Note, this is different to the lumped line model of SPICE.</p>\r\n\r\n<p><strong>References:</strong> [<a href=\\\"modelica://Modelica.Electrical.Analog.UsersGuide.References\\\">Johnson1991</a>]</p>\r\n</html>\",    revisions=\"<html>\r\n<ul>\r\n<li><em> 2016   </em>\r\n       by Christoph Clauss<br> resistance and inductance calculation revised<br>\r\n       </li>\r\n<li><em> 1998   </em>\r\n       by Christoph Clauss<br> initially implemented<br>\r\n       </li>\r\n</ul>\r\n</html>\"),\r\n    Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={\r\n        Rectangle(\r\n          extent={{-80,80},{80,-80}},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid,\r\n          lineColor={0,0,255}),\r\n        Line(points={{0,-80},{0,-90}}, color={0,0,255}),\r\n        Line(points={{80,0},{90,0}}, color={0,0,255}),\r\n        Line(points={{-80,0},{-90,0}}, color={0,0,255}),\r\n        Text(\r\n          extent={{-150,130},{150,90}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255}),\r\n        Line(points={{40,30},{-40,30}}),\r\n        Line(points={{-40,40},{-40,20}}),\r\n        Line(points={{40,40},{40,20}})}));\r\nend OLine", "checksum": "239e13854d83fb918a9c7f9f22682d0bfd1a4b64", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\OLine.mo:2-147", "component_count": 8, "connection_count": 11, "variable_count": 10, "physical_quantity_count": 8, "parameter_count": 5, "equation_count": 15, "dependency_count": 15, "has_physical_interface": true, "interface_component_count": 2, "has_connections": true, "is_composite_model": true, "complexity_score": 66.5, "model_type": "system", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "model", "equation_summary": "equation v13 = p1.v - p3.v", "search_keywords": ["ElectricCurrent", "ElectricPotential", "Modelica.Electrical.Analog.Basic.Capacitor", "Modelica.Electrical.Analog.Basic.Inductor", "N+1", "SI.Current", "SI.Voltage", "electrical", "mechanical", "system"]}, "components": [{"name": "v13", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v23", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "i1", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "i2", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[N]", "comment": null}, {"name": "i", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[N+1]", "comment": null}, {"name": "L", "type_name": "Modelica.Electrical.Analog.Basic.Inductor", "prefixes": [], "modifications": {"L": "lm"}, "condition": null, "array_dims": "[N + 1]", "comment": null}, {"name": "C", "type_name": "Modelica.Electrical.Analog.Basic.Capacitor", "prefixes": [], "modifications": {"C": "fill(c*length/(N"}, "condition": null, "array_dims": "[N]", "comment": null}], "connections": [{"from_connector": "p1", "to_connector": "R[1].p", "condition": null}, {"from_connector": "R[i].n", "to_connector": "L[i].p", "condition": null}, {"from_connector": "L[i].n", "to_connector": "C[i].p", "condition": null}, {"from_connector": "L[i].n", "to_connector": "G[i].p", "condition": null}, {"from_connector": "C[i].n", "to_connector": "p3", "condition": null}, {"from_connector": "G[i].n", "to_connector": "p3", "condition": null}, {"from_connector": "L[i].n", "to_connector": "R[i + 1].p", "condition": null}, {"from_connector": "R[N + 1].n", "to_connector": "L[N + 1].p", "condition": null}, {"from_connector": "L[N + 1].n", "to_connector": "p2", "condition": null}, {"from_connector": "heatPort", "to_connector": "R[i].heatPort", "condition": null}, {"from_connector": "heatPort", "to_connector": "G[i].heatPort", "condition": null}], "variables": [{"name": "v13", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "p1.v - p3.v", "comment": null}, {"name": "v23", "type_name": "SI.Voltage", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "i1", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "i2", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "min", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Constants.small,\r\n    unit=\"F/m\",\r\n    start=1) \"Capacitance per meter\"", "comment": null}, {"name": "v", "type_name": "SI.Voltage", "prefixes": ["output"], "attributes": {}, "binding_equation": "G.v \"Voltages at the connections of the elements\"", "comment": null}, {"name": "i", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": "R.i \"Currents at the connections of the elements\"", "comment": null}, {"name": "L", "type_name": "Modelica.Electrical.Analog.Basic.Inductor", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "v13", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "v23", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "i1", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "i2", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "v", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "temperature", "unit": "N", "display_unit": null, "quantity": null, "nominal": null}, {"name": "elements", "unit": "N+1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "G", "Interfaces", "Modelica.Constants", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Analog.UsersGuide", "Modelica.Thermal.HeatTransfer.Interfaces", "OLine", "R", "SI", "heatPort", "p1", "p2", "p3"], "inheritance_chain": ["Interfaces.ThreePol"]}
{"fqn": "Modelica.Electrical.Analog.Lines.ULine", "kind": "model", "name": "ULine", "package_path": ["Modelica", "Electrical", "Analog", "Lines"], "extends": ["Interfaces.ThreePol"], "imports": [], "parameters": [{"name": "alpha", "type": "SI.LinearTemperatureCoefficient", "default": "0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(heatPort.T - T_ref))\"", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"= true, if heatPort is enabled\" parameter SI.Temperature T=293.15 \"Fixed device temperature if useHeatPort = false\" parameter SI.Temperature T_ref=300.15 \"Reference temperat", "description": null}, {"name": "N(final min", "type": "Integer", "default": "1, start=1) \"Number of lumped segments\"", "description": null}, {"name": "T_ref", "type": "SI.Temperature", "default": "300.15 \"Reference temperature\"", "description": null}], "equations": [{"equations": ["equation\r\n  v13 = p1.v - p3.v", "v23 = p2.v - p3.v", "i1 = p1.i", "i2 = p2.i", "connect(p1, R[1].p)", "for i in 1:N loop\r\n    connect(R[i].n, R[i + 1].p)", "end for", "for i in 1:N loop\r\n    connect(R[i].n, C[i].p)", "end for", "for i in 1:N loop\r\n    connect(C[i].n, p3)", "end for", "connect(R[N + 1].n, p2)", "if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 50, "end_line": 70, "start_col": 1, "end_col": 10}}, {"equations": ["v13 = p1.v - p3.v", "v23 = p2.v - p3.v", "i1 = p1.i", "i2 = p2.i", "connect(p1, R[1].p)", "for i in 1:N loop\r\n    connect(R[i].n, R[i + 1].p)", "end for", "for i in 1:N loop\r\n    connect(R[i].n, C[i].p)", "end for", "for i in 1:N loop\r\n    connect(C[i].n, p3)", "end for", "connect(R[N + 1].n, p2)", "if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 51, "end_line": 70, "start_col": 3, "end_col": 10}}, {"equations": ["if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 66, "end_line": 70, "start_col": 3, "end_col": 9}}, {"equations": ["for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 67, "end_line": 69, "start_col": 5, "end_col": 13}}, {"equations": ["connect(heatPort, R[i].heatPort)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 68, "end_line": 68, "start_col": 7, "end_col": 40}}, {"equations": ["for i in 1:N loop\r\n    connect(C[i].n, p3)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 62, "end_line": 64, "start_col": 3, "end_col": 10}}, {"equations": ["connect(C[i].n, p3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 63, "end_line": 63, "start_col": 5, "end_col": 25}}, {"equations": ["for i in 1:N loop\r\n    connect(R[i].n, C[i].p)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 59, "end_line": 61, "start_col": 3, "end_col": 10}}, {"equations": ["connect(R[i].n, C[i].p)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 60, "end_line": 60, "start_col": 5, "end_col": 29}}, {"equations": ["for i in 1:N loop\r\n    connect(R[i].n, R[i + 1].p)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 56, "end_line": 58, "start_col": 3, "end_col": 10}}, {"equations": ["connect(R[i].n, R[i + 1].p)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 57, "end_line": 57, "start_col": 5, "end_col": 33}}, {"equations": ["i2 = p2.i"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 54, "end_line": 54, "start_col": 3, "end_col": 12}}, {"equations": ["i1 = p1.i"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 53, "end_line": 53, "start_col": 3, "end_col": 12}}, {"equations": ["v23 = p2.v - p3.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 52, "end_line": 52, "start_col": 3, "end_col": 20}}, {"equations": ["v13 = p1.v - p3.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 51, "end_line": 51, "start_col": 3, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 50, "end_line": 50, "start_col": 1, "end_col": 9}}], "docstring": "extends Interfaces.ThreePol | components: SI.Voltage×2, SI.Current×2, Modelica.Electrical.Analog.Basic.Capacitor×1 | connections: 6 | params: alpha, useHeatPort", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo", "start_line": 2, "end_line": 117, "start_col": 1, "end_col": 10}, "code_text": "model ULine \"Lossy RC Line\"\r\n  //extends Interfaces.ThreePol;\r\n  Modelica.Electrical.Analog.Interfaces.Pin p1 annotation (Placement(\r\n        transformation(extent={{-110,-10},{-90,10}})));\r\n  Modelica.Electrical.Analog.Interfaces.Pin p2 annotation (Placement(\r\n        transformation(extent={{90,-10},{110,10}})));\r\n  Modelica.Electrical.Analog.Interfaces.Pin p3 annotation (Placement(\r\n        transformation(extent={{-10,-110},{10,-90}}),\r\n        iconTransformation(extent={{-10,-110},{10,-90}})));\r\n  SI.Voltage v13;\r\n  SI.Voltage v23;\r\n  SI.Current i1;\r\n  SI.Current i2;\r\n  parameter Real r(\r\n    final min=Modelica.Constants.small,\r\n    unit=\"Ohm/m\",\r\n    start=1) \"Resistance per meter\";\r\n  parameter Real c(\r\n    final min=Modelica.Constants.small,\r\n    unit=\"F/m\",\r\n    start=1) \"Capacitance per meter\";\r\n  parameter SI.Length length(final min=Modelica.Constants.small,\r\n      start=1) \"Length of line\";\r\n  parameter Integer N(final min=1, start=1) \"Number of lumped segments\";\r\n  parameter SI.LinearTemperatureCoefficient alpha=0\r\n    \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(heatPort.T - T_ref))\";\r\n  parameter Boolean useHeatPort=false \"= true, if heatPort is enabled\"\r\n    annotation (\r\n    Evaluate=true,\r\n    HideResult=true,\r\n    choices(checkBox=true));\r\n  parameter SI.Temperature T=293.15\r\n    \"Fixed device temperature if useHeatPort = false\"\r\n    annotation (Dialog(enable=not useHeatPort));\r\n  parameter SI.Temperature T_ref=300.15 \"Reference temperature\";\r\n  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort if useHeatPort\r\n    annotation (Placement(transformation(extent={{-110,-110},{-90,-90}}),\r\n        iconTransformation(extent={{-110,-110},{-90,-90}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor R[N + 1](\r\n    R=rm,\r\n    T_ref=fill(T_ref, N + 1),\r\n    alpha=fill(alpha, N + 1),\r\n    useHeatPort=fill(useHeatPort, N + 1),\r\n    T=fill(T, N + 1));\r\n  Modelica.Electrical.Analog.Basic.Capacitor C[N](C=fill(c*length/(N), N));\r\nprotected\r\n   parameter SI.Resistance rm[N + 1]=\r\n  {if i==1 or i==N + 1 then r*length/(N*2) else r*length/N for i in 1:N+1};\r\nequation\r\n  v13 = p1.v - p3.v;\r\n  v23 = p2.v - p3.v;\r\n  i1 = p1.i;\r\n  i2 = p2.i;\r\n  connect(p1, R[1].p);\r\n  for i in 1:N loop\r\n    connect(R[i].n, R[i + 1].p);\r\n  end for;\r\n  for i in 1:N loop\r\n    connect(R[i].n, C[i].p);\r\n  end for;\r\n  for i in 1:N loop\r\n    connect(C[i].n, p3);\r\n  end for;\r\n  connect(R[N + 1].n, p2);\r\n  if useHeatPort then\r\n    for i in 1:N + 1 loop\r\n      connect(heatPort, R[i].heatPort);\r\n    end for;\r\n  end if;\r\n  annotation (defaultComponentName=\"line\",\r\n    Documentation(info=\"<html>\r\n<p>As can be seen in the picture below, the lossy RC line ULine is a single conductor lossy transmission line which consists of segments of lumped series resistors and capacitors that are connected with the reference pin p3. The precision of the model depends on the number N of lumped segments.\r\n<br>To get a symmetrical line model, the first resistor is cut into two parts (R1 and R_Nplus1). These two new resistors have the half of the resistance of the original resistor.\r\n</p>\r\n<blockquote>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Electrical/Analog/ULine.png\\\"\r\n     alt=\\\"ULine.png\\\">\r\n</blockquote>\r\n<p>\r\nThe capacitances are calculated with: C=c*length/N.\r\n<br>The resistances are calculated with: R=r*length/(N+1).\r\n<br>For all capacitors and resistors the values of each segment are the same except for the first and last resistor, that only has the half of the above calculated value.\r\n</p>\r\n<p>The user has the possibility to enable a conditional heatport. If so, the ULine can be connected to a thermal network. When the parameter alpha is set to a value greater than zero, the ULine becomes temperature sensitive due to their resistors which resistances are calculated by <code>R_actual= R*(1 + alpha*(heatPort.T - T_ref))</code>.</p>\r\n<p>Note, this is different compared with the lumped line model of SPICE.</p>\r\n<p><strong>References:</strong> [<a href=\\\"modelica://Modelica.Electrical.Analog.UsersGuide.References\\\">Johnson1991</a>]</p>\r\n</html>\",    revisions=\"<html>\r\n<dl>\r\n<dt><em>2016</em></dt>\r\n<dd>by Christoph Clauss resistance calculation revised</dd>\r\n<dt><em>1998</em></dt>\r\n<dd>by Christoph Clauss initially implemented</dd>\r\n</dl>\r\n</html>\"),\r\n    Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={\r\n        Text(\r\n          extent={{-150,130},{150,90}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255}),\r\n        Rectangle(\r\n          extent={{-80,80},{80,-80}},\r\n          lineColor={0,0,255},\r\n          fillPattern=FillPattern.Solid,\r\n          fillColor={255,255,255}),\r\n        Line(points={{80,0},{100,0}}, color={0,0,255}),\r\n        Line(points={{-80,0},{-100,0}}, color={0,0,255}),\r\n        Line(points={{-40,40},{-40,20}}),\r\n        Line(points={{40,30},{-40,30}}),\r\n        Line(points={{40,40},{40,20}}),\r\n        Line(points={{0,-80},{0,-100}}, color={0,0,255}),\r\n        Text(\r\n          extent={{-70,-10},{70,-50}},\r\n          textString=\"ULine\")}));\r\nend ULine", "checksum": "e576ca10bd45e6ca72532c5c8864f0b5fe35f113", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Lines\\ULine.mo:2-117", "component_count": 5, "connection_count": 6, "variable_count": 7, "physical_quantity_count": 5, "parameter_count": 4, "equation_count": 16, "dependency_count": 13, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 46.0, "model_type": "system", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation v13 = p1.v - p3.v", "search_keywords": ["ElectricCurrent", "ElectricPotential", "Modelica.Electrical.Analog.Basic.Capacitor", "SI.Current", "SI.Voltage", "electrical", "system"]}, "components": [{"name": "v13", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v23", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "i1", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "i2", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "C", "type_name": "Modelica.Electrical.Analog.Basic.Capacitor", "prefixes": [], "modifications": {"C": "fill(c*length/(N"}, "condition": null, "array_dims": "[N]", "comment": null}], "connections": [{"from_connector": "p1", "to_connector": "R[1].p", "condition": null}, {"from_connector": "R[i].n", "to_connector": "R[i + 1].p", "condition": null}, {"from_connector": "R[i].n", "to_connector": "C[i].p", "condition": null}, {"from_connector": "C[i].n", "to_connector": "p3", "condition": null}, {"from_connector": "R[N + 1].n", "to_connector": "p2", "condition": null}, {"from_connector": "heatPort", "to_connector": "R[i].heatPort", "condition": null}], "variables": [{"name": "v13", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "p1.v - p3.v", "comment": null}, {"name": "v23", "type_name": "SI.Voltage", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "i1", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "i2", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "min", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Constants.small,\r\n    unit=\"F/m\",\r\n    start=1) \"Capacitance per meter\"", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "v13", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "v23", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}, {"name": "i1", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "i2", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "temperature", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Interfaces", "Modelica.Constants", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Analog.UsersGuide", "Modelica.Thermal.HeatTransfer.Interfaces", "SI", "ULine", "heatPort", "p1", "p2", "p3"], "inheritance_chain": ["Interfaces.ThreePol"]}
{"fqn": "Modelica.Electrical.Batteries.BaseClasses.BaseCellStack", "kind": "model", "name": "BaseCellStack", "package_path": ["Modelica", "Electrical", "Batteries", "BaseClasses"], "extends": ["Modelica.Electrical.Batteries.Icons.BatteryIcon", "Modelica.Electrical.Analog.Interfaces.TwoPin", "Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort"], "imports": [], "parameters": [{"name": "SOCtolerance", "type": "Real", "default": "1e-9 \"Tolerance to detect depleted of overcharged battery\" extends Modelica.Electrical.Analog.Interfaces.TwoPin", "description": null}, {"name": "Ns(final min", "type": "Integer", "default": "1)=1 \"Number of serial connected cells\"", "description": null}, {"name": "Np(final min", "type": "Integer", "default": "1)=1 \"Number of parallel connected cells\"", "description": null}], "equations": [{"equations": ["equation\r\n  assert(cellData.OCVmax > cellData.OCVmin, \"Specify 0 <= OCVmin < OCVmax\")", "assert(cellData.SOCmax > cellData.SOCmin, \"Specify 0 <= SOCmin < SOCmax <= 1\")", "assert(cellData.OCV_SOC[1, 1] >= 0, \"Specify OCV(SOC) table with minimum SOC >= 0\")", "assert(cellData.OCV_SOC[end, 1] <= 1,  \"Specify OCV(SOC) table with maximum SOC <= 1\")", "assert(cellData.OCV_SOC[1, 2] >= 0, \"Specify OCV(SOC) table with minimum OCV/OCVmax >= 0\")", "assert(cellData.OCV_SOC[end, 2] <= 1, \"Specify OCV(SOC) table with maximum OCV/OCVmax <= 1\")", "assert(SOC < cellData.SOCmax + SOCtolerance, \"Battery overcharged!\")", "assert(SOC > cellData.SOCmin - SOCtolerance, \"Battery exhausted!\")", "connect(gainV.y, ocv.v)\r\n    annotation (Line(points={{-40,19},{-40,12}}, color={0,0,127}))", "connect(ocv_soc.y[1], gainV.u)\r\n    annotation (Line(points={{-49,50},{-40,50},{-40,42}},\r\n                                                      color={0,0,127}))", "connect(limIntegrator.y, ocv_soc.u)\r\n    annotation (Line(points={{-80,41},{-80,50},{-72,50}}, color={0,0,127}))", "connect(currentSensor.n, ocv.p)\r\n    annotation (Line(points={{-70,0},{-50,0}}, color={0,0,255}))", "connect(limIntegrator.u, currentSensor.i)\r\n    annotation (Line(points={{-80,18},{-80,11}}, color={0,0,127}))", "connect(p, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-90,0}}, color={0,0,255}))", "connect(ocv.n, r0.p)\r\n    annotation (Line(points={{-30,0},{-10,0}}, color={0,0,255}))", "connect(currentSensor.p, selfDischarge.p) annotation (Line(points={{-90,0},{-90,\r\n          -20},{-70,-20}},           color={0,0,255}))", "connect(ocv.n, selfDischarge.n)\r\n    annotation (Line(points={{-30,0},{-30,-20},{-50,-20}}, color={0,0,255}))", "connect(selfDischarge.heatPort, internalHeatPort) annotation (Line(points={{-60,-30},\r\n          {-60,-40},{0,-40},{0,-80}},      color={191,0,0}))", "connect(internalHeatPort, r0.heatPort) annotation (Line(points={{0,-80},{\r\n          0,-10}},              color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 50, "end_line": 81, "start_col": 1, "end_col": 51}}, {"equations": ["assert(cellData.OCVmax > cellData.OCVmin, \"Specify 0 <= OCVmin < OCVmax\")", "assert(cellData.SOCmax > cellData.SOCmin, \"Specify 0 <= SOCmin < SOCmax <= 1\")", "assert(cellData.OCV_SOC[1, 1] >= 0, \"Specify OCV(SOC) table with minimum SOC >= 0\")", "assert(cellData.OCV_SOC[end, 1] <= 1,  \"Specify OCV(SOC) table with maximum SOC <= 1\")", "assert(cellData.OCV_SOC[1, 2] >= 0, \"Specify OCV(SOC) table with minimum OCV/OCVmax >= 0\")", "assert(cellData.OCV_SOC[end, 2] <= 1, \"Specify OCV(SOC) table with maximum OCV/OCVmax <= 1\")", "assert(SOC < cellData.SOCmax + SOCtolerance, \"Battery overcharged!\")", "assert(SOC > cellData.SOCmin - SOCtolerance, \"Battery exhausted!\")", "connect(gainV.y, ocv.v)\r\n    annotation (Line(points={{-40,19},{-40,12}}, color={0,0,127}))", "connect(ocv_soc.y[1], gainV.u)\r\n    annotation (Line(points={{-49,50},{-40,50},{-40,42}},\r\n                                                      color={0,0,127}))", "connect(limIntegrator.y, ocv_soc.u)\r\n    annotation (Line(points={{-80,41},{-80,50},{-72,50}}, color={0,0,127}))", "connect(currentSensor.n, ocv.p)\r\n    annotation (Line(points={{-70,0},{-50,0}}, color={0,0,255}))", "connect(limIntegrator.u, currentSensor.i)\r\n    annotation (Line(points={{-80,18},{-80,11}}, color={0,0,127}))", "connect(p, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-90,0}}, color={0,0,255}))", "connect(ocv.n, r0.p)\r\n    annotation (Line(points={{-30,0},{-10,0}}, color={0,0,255}))", "connect(currentSensor.p, selfDischarge.p) annotation (Line(points={{-90,0},{-90,\r\n          -20},{-70,-20}},           color={0,0,255}))", "connect(ocv.n, selfDischarge.n)\r\n    annotation (Line(points={{-30,0},{-30,-20},{-50,-20}}, color={0,0,255}))", "connect(selfDischarge.heatPort, internalHeatPort) annotation (Line(points={{-60,-30},\r\n          {-60,-40},{0,-40},{0,-80}},      color={191,0,0}))", "connect(internalHeatPort, r0.heatPort) annotation (Line(points={{0,-80},{\r\n          0,-10}},              color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 51, "end_line": 81, "start_col": 3, "end_col": 51}}, {"equations": ["assert(SOC > cellData.SOCmin - SOCtolerance, \"Battery exhausted!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 58, "end_line": 58, "start_col": 3, "end_col": 69}}, {"equations": ["assert(SOC < cellData.SOCmax + SOCtolerance, \"Battery overcharged!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 57, "end_line": 57, "start_col": 3, "end_col": 71}}, {"equations": ["assert(cellData.OCV_SOC[end, 2] <= 1, \"Specify OCV(SOC) table with maximum OCV/OCVmax <= 1\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 56, "end_line": 56, "start_col": 3, "end_col": 95}}, {"equations": ["assert(cellData.OCV_SOC[1, 2] >= 0, \"Specify OCV(SOC) table with minimum OCV/OCVmax >= 0\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 55, "end_line": 55, "start_col": 3, "end_col": 93}}, {"equations": ["assert(cellData.OCV_SOC[end, 1] <= 1,  \"Specify OCV(SOC) table with maximum SOC <= 1\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 54, "end_line": 54, "start_col": 3, "end_col": 89}}, {"equations": ["assert(cellData.OCV_SOC[1, 1] >= 0, \"Specify OCV(SOC) table with minimum SOC >= 0\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 53, "end_line": 53, "start_col": 3, "end_col": 86}}, {"equations": ["assert(cellData.SOCmax > cellData.SOCmin, \"Specify 0 <= SOCmin < SOCmax <= 1\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 52, "end_line": 52, "start_col": 3, "end_col": 81}}, {"equations": ["assert(cellData.OCVmax > cellData.OCVmin, \"Specify 0 <= OCVmin < OCVmax\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 51, "end_line": 51, "start_col": 3, "end_col": 76}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 50, "end_line": 50, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Electrical.Batteries.Icons.BatteryIcon | components: SI.Current×1, SI.Power×1 | connections: 11 | params: SOCtolerance, Ns(final min, Np(final ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo", "start_line": 2, "end_line": 97, "start_col": 1, "end_col": 18}, "code_text": "partial model BaseCellStack\r\n  \"Battery with open-circuit voltage dependent on state of charge, self-discharge and inner resistance\"\r\n  extends Modelica.Electrical.Batteries.Icons.BatteryIcon(final displaySOC=SOC);\r\n  parameter Integer Ns(final min=1)=1 \"Number of serial connected cells\";\r\n  parameter Integer Np(final min=1)=1 \"Number of parallel connected cells\";\r\n  replaceable parameter ParameterRecords.CellData cellData \"Cell parameters\"\r\n    annotation (Placement(transformation(extent={{-10,60},{10,80}})));\r\n  parameter Real SOCtolerance=1e-9 \"Tolerance to detect depleted of overcharged battery\"\r\n    annotation(Dialog(tab=\"Advanced\"));\r\n  extends Modelica.Electrical.Analog.Interfaces.TwoPin;\r\n  SI.Current i = p.i \"Current into the battery\";\r\n  SI.Power power = v*i \"Power to the battery\";\r\n  output Real SOC(start=cellData.SOCmax) = limIntegrator.y \"State of charge\"\r\n    annotation (Dialog(showStartAttribute=true));\r\n  Modelica.Electrical.Analog.Sensors.CurrentSensor currentSensor\r\n    annotation (Placement(transformation(extent={{-90,10},{-70,-10}})));\r\n  Blocks.Continuous.LimIntegrator limIntegrator(\r\n    final k=1/(Np*cellData.Qnom),\r\n    outMax=1 - SOCtolerance,\r\n    outMin=SOCtolerance,\r\n      final initType=Modelica.Blocks.Types.Init.NoInit) annotation (\r\n      Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={-80,30})));\r\n  Modelica.Blocks.Tables.CombiTable1Ds ocv_soc(\r\n    final table=cellData.OCV_SOC_internal,\r\n    final smoothness=cellData.smoothness,\r\n    extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint)\r\n    annotation (Placement(transformation(extent={{-70,40},{-50,60}})));\r\n  Modelica.Blocks.Math.Gain gainV(final k=Ns*cellData.OCVmax) annotation (\r\n      Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-40,30})));\r\n  Modelica.Electrical.Analog.Sources.SignalVoltage ocv\r\n    annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n  Modelica.Electrical.Analog.Basic.Conductor selfDischarge(\r\n    final G=Np*cellData.Idis/(Ns*cellData.OCVmax),\r\n    T_ref=293.15,\r\n    final useHeatPort=true)\r\n    annotation (Placement(transformation(extent={{-70,-30},{-50,-10}})));\r\n  Modelica.Electrical.Analog.Basic.Resistor r0(\r\n    final T_ref=cellData.T_ref,\r\n    final alpha=cellData.alpha,\r\n    final useHeatPort=true)\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n  extends Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort;\r\nequation\r\n  assert(cellData.OCVmax > cellData.OCVmin, \"Specify 0 <= OCVmin < OCVmax\");\r\n  assert(cellData.SOCmax > cellData.SOCmin, \"Specify 0 <= SOCmin < SOCmax <= 1\");\r\n  assert(cellData.OCV_SOC[1, 1] >= 0, \"Specify OCV(SOC) table with minimum SOC >= 0\");\r\n  assert(cellData.OCV_SOC[end, 1] <= 1,  \"Specify OCV(SOC) table with maximum SOC <= 1\");\r\n  assert(cellData.OCV_SOC[1, 2] >= 0, \"Specify OCV(SOC) table with minimum OCV/OCVmax >= 0\");\r\n  assert(cellData.OCV_SOC[end, 2] <= 1, \"Specify OCV(SOC) table with maximum OCV/OCVmax <= 1\");\r\n  assert(SOC < cellData.SOCmax + SOCtolerance, \"Battery overcharged!\");\r\n  assert(SOC > cellData.SOCmin - SOCtolerance, \"Battery exhausted!\");\r\n  connect(gainV.y, ocv.v)\r\n    annotation (Line(points={{-40,19},{-40,12}}, color={0,0,127}));\r\n  connect(ocv_soc.y[1], gainV.u)\r\n    annotation (Line(points={{-49,50},{-40,50},{-40,42}},\r\n                                                      color={0,0,127}));\r\n  connect(limIntegrator.y, ocv_soc.u)\r\n    annotation (Line(points={{-80,41},{-80,50},{-72,50}}, color={0,0,127}));\r\n  connect(currentSensor.n, ocv.p)\r\n    annotation (Line(points={{-70,0},{-50,0}}, color={0,0,255}));\r\n  connect(limIntegrator.u, currentSensor.i)\r\n    annotation (Line(points={{-80,18},{-80,11}}, color={0,0,127}));\r\n  connect(p, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-90,0}}, color={0,0,255}));\r\n  connect(ocv.n, r0.p)\r\n    annotation (Line(points={{-30,0},{-10,0}}, color={0,0,255}));\r\n  connect(currentSensor.p, selfDischarge.p) annotation (Line(points={{-90,0},{-90,\r\n          -20},{-70,-20}},           color={0,0,255}));\r\n  connect(ocv.n, selfDischarge.n)\r\n    annotation (Line(points={{-30,0},{-30,-20},{-50,-20}}, color={0,0,255}));\r\n  connect(selfDischarge.heatPort, internalHeatPort) annotation (Line(points={{-60,-30},\r\n          {-60,-40},{0,-40},{0,-80}},      color={191,0,0}));\r\n  connect(internalHeatPort, r0.heatPort) annotation (Line(points={{0,-80},{\r\n          0,-10}},              color={191,0,0}));\r\n  annotation (\r\n    Documentation(info=\"<html>\r\n<p>\r\nThe battery is modeled by open-circuit voltage (OCV) dependent on state of charge (SOC), a self-discharge component and an inner resistance.<br>\r\nParameters are collected in parameter record <a href=\\\"modelica://Modelica.Electrical.Batteries.ParameterRecords.CellData\\\">cellData</a>.<br>\r\nAll losses are dissipated to the optional <code>heatPort</code>.\r\n</p>\r\n<p>\r\nFor details, see <a href=\\\"modelica://Modelica.Electrical.Batteries.UsersGuide.Concept\\\">concept</a> and <a href=\\\"modelica://Modelica.Electrical.Batteries.UsersGuide.Parameterization\\\">parameterization</a>.\r\n</p>\r\n<h4>Note</h4>\r\n<p>\r\nSOC &gt; SOCmax and SOC &lt; SOCmin triggers an error.\r\n</p>\r\n</html>\"));\r\nend BaseCellStack", "checksum": "09dbdac32466873d53895e9025a182e297273fec", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellStack.mo:2-97", "component_count": 2, "connection_count": 11, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 3, "equation_count": 11, "dependency_count": 23, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 49.5, "model_type": "system", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation assert(cellData.OCVmax > cellData.OCVmin, \"Specify 0 <= OCVmin < OCVmax\")", "search_keywords": ["ElectricCurrent", "Power", "SI.Current", "SI.Power", "electrical", "system"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "power", "type_name": "SI.Power", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "gainV.y", "to_connector": "ocv.v", "condition": null}, {"from_connector": "ocv_soc.y[1]", "to_connector": "gainV.u", "condition": null}, {"from_connector": "limIntegrator.y", "to_connector": "ocv_soc.u", "condition": null}, {"from_connector": "currentSensor.n", "to_connector": "ocv.p", "condition": null}, {"from_connector": "limIntegrator.u", "to_connector": "currentSensor.i", "condition": null}, {"from_connector": "p", "to_connector": "currentSensor.p", "condition": null}, {"from_connector": "ocv.n", "to_connector": "r0.p", "condition": null}, {"from_connector": "currentSensor.p", "to_connector": "selfDischarge.p", "condition": null}, {"from_connector": "ocv.n", "to_connector": "selfDischarge.n", "condition": null}, {"from_connector": "selfDischarge.heatPort", "to_connector": "internalHeatPort", "condition": null}, {"from_connector": "internalHeatPort", "to_connector": "r0.heatPort", "condition": null}], "variables": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": "p.i \"Current into the battery\"", "comment": null}, {"name": "power", "type_name": "SI.Power", "prefixes": [], "attributes": {}, "binding_equation": "v*i \"Power to the battery\"", "comment": null}, {"name": "SOC", "type_name": "Real", "prefixes": ["output"], "attributes": {"start": "cellData.SOCmax"}, "binding_equation": "limIntegrator.y \"State of charge\"\r\n    \r\n  Modelica.Electrical.Analog.Sensors.CurrentSensor currentSensor\r\n    \r\n  Blocks.Continuous.LimIntegrator limIntegrator(\r\n    final k=1/(Np*cellData.Qnom),\r\n    outMax=1 - SOCtolerance,\r\n    outMin=SOCtolerance,\r\n      final initType=Modelica.Blocks.Types.Init.NoInit) \r\n  Modelica.Blocks.Tables.CombiTable1Ds ocv_soc(\r\n    final table=cellData.OCV_SOC_internal,\r\n    final smoothness=cellData.smoothness,\r\n    extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint)\r\n    \r\n  Modelica.Blocks.Math.Gain gainV(final k=Ns*cellData.OCVmax) \r\n  Modelica.Electrical.Analog.Sources.SignalVoltage ocv\r\n    \r\n  Modelica.Electrical.Analog.Basic.Conductor selfDischarge(\r\n    final G=Np*cellData.Idis/(Ns*cellData.OCVmax),\r\n    T_ref=293.15,\r\n    final useHeatPort=true)\r\n    \r\n  Modelica.Electrical.Analog.Basic.Resistor r0(\r\n    final T_ref=cellData.T_ref,\r\n    final alpha=cellData.alpha,\r\n    final useHeatPort=true)\r\n    \r\n  extends Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort", "comment": null}, {"name": "assert", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "power", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}], "dependencies": ["Blocks.Continuous", "Modelica.Blocks.Math", "Modelica.Blocks.Tables", "Modelica.Blocks.Types.Extrapolation", "Modelica.Blocks.Types.Init", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Analog.Sensors", "Modelica.Electrical.Analog.Sources", "Modelica.Electrical.Batteries.Icons", "Modelica.Electrical.Batteries.ParameterRecords", "Modelica.Electrical.Batteries.UsersGuide", "ParameterRecords", "SI", "cellData", "currentSensor", "gainV", "limIntegrator", "ocv", "ocv_soc", "p", "r0", "selfDischarge"], "inheritance_chain": ["Modelica.Electrical.Batteries.Icons.BatteryIcon", "Modelica.Electrical.Analog.Interfaces.TwoPin", "Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort"]}
{"fqn": "Modelica.Electrical.Batteries.BaseClasses.BaseCellWithSensors", "kind": "model", "name": "BaseCellWithSensors", "package_path": ["Modelica", "Electrical", "Batteries", "BaseClasses"], "extends": ["Modelica.Electrical.Batteries.Icons.BatteryIcon", "Modelica.Electrical.Analog.Interfaces.TwoPin", "Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort"], "imports": [], "parameters": [{"name": "SOC0", "type": "Real", "default": "0.1 \"Initial SOC\"", "description": null}, {"name": "SOCtolerance", "type": "Real", "default": "1e-9 \"SOC tolerance for detection of depleted or overcharged cell\" extends Modelica.Electrical.Analog.Interfaces.TwoPin", "description": null}], "equations": [{"equations": ["equation\r\n  connect(p, multiSensor.pc)\r\n    annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}))", "connect(multiSensor.pc, multiSensor.pv)\r\n    annotation (Line(points={{-70,0},{-70,10},{-60,10}}, color={0,0,255}))", "connect(multiSensor.nc, cell.p)\r\n    annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}))", "connect(cell.n, n)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}))", "connect(multiSensor.i, limIntegrator.u) annotation (Line(points={{-66,-11},{-66,\r\n          -20},{-70,-20},{-70,-38}}, color={0,0,127}))", "connect(limIntegrator.y, cellBus.soc) annotation (Line(points={{-70,-61},{-70,\r\n          -80},{-59.95,-80},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.v, cellBus.v) annotation (Line(points={{-54,-11},{-54,-80},\r\n          {-59.95,-80},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.i, cellBus.i) annotation (Line(points={{-66,-11},{-66,-20},\r\n          {-90,-20},{-90,-80},{-59.95,-80},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.power, cellBus.power) annotation (Line(points={{-71,-6},{-90,\r\n          -6},{-90,-80},{-59.95,-80},{-59.95,-79.95}},\r\n                                                   color={0,0,127}))", "connect(heatFlowSensor.port_b, internalHeatPort) annotation (Line(\r\n        points={{0,-70},{0,-80}}, color={191,0,0}))", "connect(heatFlowSensor.port_a, cell.heatPort)\r\n    annotation (Line(points={{0,-50},{0,-10}}, color={191,0,0}))", "connect(heatFlowSensor.Q_flow, cellBus.lossPower) annotation (Line(points={{-11,-60},\r\n          {-40,-60},{-40,-79.95},{-59.95,-79.95}},      color={0,0,127}))", "connect(temperatureSensor.T, cellBus.T) annotation (Line(points={{-41,-40},{-54,\r\n          -40},{-54,-79.95},{-59.95,-79.95}},     color={0,0,127}))", "connect(n, multiSensor.nv) annotation (Line(points={{100,0},{20,0},{20,-20},{-60,\r\n          -20},{-60,-10}}, color={0,0,255}))", "connect(heatFlowSensor.port_a, temperatureSensor.port)\r\n    annotation (Line(points={{0,-50},{0,-40},{-20,-40}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellWithSensors.mo", "start_line": 48, "end_line": 79, "start_col": 1, "end_col": 76}}, {"equations": ["connect(p, multiSensor.pc)\r\n    annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}))", "connect(multiSensor.pc, multiSensor.pv)\r\n    annotation (Line(points={{-70,0},{-70,10},{-60,10}}, color={0,0,255}))", "connect(multiSensor.nc, cell.p)\r\n    annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}))", "connect(cell.n, n)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}))", "connect(multiSensor.i, limIntegrator.u) annotation (Line(points={{-66,-11},{-66,\r\n          -20},{-70,-20},{-70,-38}}, color={0,0,127}))", "connect(limIntegrator.y, cellBus.soc) annotation (Line(points={{-70,-61},{-70,\r\n          -80},{-59.95,-80},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.v, cellBus.v) annotation (Line(points={{-54,-11},{-54,-80},\r\n          {-59.95,-80},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.i, cellBus.i) annotation (Line(points={{-66,-11},{-66,-20},\r\n          {-90,-20},{-90,-80},{-59.95,-80},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.power, cellBus.power) annotation (Line(points={{-71,-6},{-90,\r\n          -6},{-90,-80},{-59.95,-80},{-59.95,-79.95}},\r\n                                                   color={0,0,127}))", "connect(heatFlowSensor.port_b, internalHeatPort) annotation (Line(\r\n        points={{0,-70},{0,-80}}, color={191,0,0}))", "connect(heatFlowSensor.port_a, cell.heatPort)\r\n    annotation (Line(points={{0,-50},{0,-10}}, color={191,0,0}))", "connect(heatFlowSensor.Q_flow, cellBus.lossPower) annotation (Line(points={{-11,-60},\r\n          {-40,-60},{-40,-79.95},{-59.95,-79.95}},      color={0,0,127}))", "connect(temperatureSensor.T, cellBus.T) annotation (Line(points={{-41,-40},{-54,\r\n          -40},{-54,-79.95},{-59.95,-79.95}},     color={0,0,127}))", "connect(n, multiSensor.nv) annotation (Line(points={{100,0},{20,0},{20,-20},{-60,\r\n          -20},{-60,-10}}, color={0,0,255}))", "connect(heatFlowSensor.port_a, temperatureSensor.port)\r\n    annotation (Line(points={{0,-50},{0,-40},{-20,-40}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellWithSensors.mo", "start_line": 49, "end_line": 79, "start_col": 3, "end_col": 76}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellWithSensors.mo", "start_line": 48, "end_line": 48, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Electrical.Batteries.Icons.BatteryIcon | components: SI.Current×1, SI.Power×1, Real×1 | connections: 15 | params: SOC0, SOCtolerance | units: A", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellWithSensors.mo", "start_line": 2, "end_line": 85, "start_col": 1, "end_col": 24}, "code_text": "partial model BaseCellWithSensors \"Partial cell with sensors\"\r\n  extends Modelica.Electrical.Batteries.Icons.BatteryIcon(final displaySOC=SOC);\r\n  replaceable parameter Modelica.Electrical.Batteries.ParameterRecords.CellData cellData\r\n    \"Cell parameters\"\r\n    annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n  parameter Real SOC0=0.1 \"Initial SOC\";\r\n  parameter Real SOCtolerance=1e-9 \"SOC tolerance for detection of depleted or overcharged cell\"\r\n    annotation(Dialog(tab=\"Advanced\"));\r\n  extends Modelica.Electrical.Analog.Interfaces.TwoPin;\r\n  output SI.Current i = p.i \"Current into the cell\";\r\n  output SI.Power power = v*i \"Power to the cell\";\r\n  output Real SOC = limIntegrator.y \"State of charge\";\r\n  extends Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort;\r\n  replaceable Modelica.Electrical.Batteries.BatteryStacks.CellStack cell(\r\n    final Ns=1,\r\n    final Np=1,\r\n    SOCtolerance=SOCtolerance,\r\n    cellData=cellData,\r\n    SOC(start=SOC0, fixed=true),\r\n    useHeatPort=true,\r\n    T=T) \"Cell\"\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n  Modelica.Electrical.Analog.Sensors.MultiSensor multiSensor\r\n    annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));\r\n  Modelica.Blocks.Continuous.LimIntegrator limIntegrator(\r\n    k=1/cellData.Qnom,\r\n    outMax=1 - SOCtolerance,\r\n    outMin=SOCtolerance,\r\n    initType=Modelica.Blocks.Types.Init.InitialOutput,\r\n    y_start=SOC0)\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-70,-50})));\r\n  Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor temperatureSensor\r\n    annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=180,\r\n        origin={-30,-40})));\r\n  Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor\r\n    annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={0,-60})));\r\n  Modelica.Electrical.Batteries.Interfaces.CellBus cellBus \"Cell bus\"\r\n    annotation (Placement(transformation(extent={{-70,-90},{-50,-70}}),\r\n        iconTransformation(extent={{-70,-90},{-50,-70}})));\r\nequation\r\n  connect(p, multiSensor.pc)\r\n    annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}));\r\n  connect(multiSensor.pc, multiSensor.pv)\r\n    annotation (Line(points={{-70,0},{-70,10},{-60,10}}, color={0,0,255}));\r\n  connect(multiSensor.nc, cell.p)\r\n    annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}));\r\n  connect(cell.n, n)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}));\r\n  connect(multiSensor.i, limIntegrator.u) annotation (Line(points={{-66,-11},{-66,\r\n          -20},{-70,-20},{-70,-38}}, color={0,0,127}));\r\n  connect(limIntegrator.y, cellBus.soc) annotation (Line(points={{-70,-61},{-70,\r\n          -80},{-59.95,-80},{-59.95,-79.95}}, color={0,0,127}));\r\n  connect(multiSensor.v, cellBus.v) annotation (Line(points={{-54,-11},{-54,-80},\r\n          {-59.95,-80},{-59.95,-79.95}}, color={0,0,127}));\r\n  connect(multiSensor.i, cellBus.i) annotation (Line(points={{-66,-11},{-66,-20},\r\n          {-90,-20},{-90,-80},{-59.95,-80},{-59.95,-79.95}}, color={0,0,127}));\r\n  connect(multiSensor.power, cellBus.power) annotation (Line(points={{-71,-6},{-90,\r\n          -6},{-90,-80},{-59.95,-80},{-59.95,-79.95}},\r\n                                                   color={0,0,127}));\r\n  connect(heatFlowSensor.port_b, internalHeatPort) annotation (Line(\r\n        points={{0,-70},{0,-80}}, color={191,0,0}));\r\n  connect(heatFlowSensor.port_a, cell.heatPort)\r\n    annotation (Line(points={{0,-50},{0,-10}}, color={191,0,0}));\r\n  connect(heatFlowSensor.Q_flow, cellBus.lossPower) annotation (Line(points={{-11,-60},\r\n          {-40,-60},{-40,-79.95},{-59.95,-79.95}},      color={0,0,127}));\r\n  connect(temperatureSensor.T, cellBus.T) annotation (Line(points={{-41,-40},{-54,\r\n          -40},{-54,-79.95},{-59.95,-79.95}},     color={0,0,127}));\r\n  connect(n, multiSensor.nv) annotation (Line(points={{100,0},{20,0},{20,-20},{-60,\r\n          -20},{-60,-10}}, color={0,0,255}));\r\n  connect(heatFlowSensor.port_a, temperatureSensor.port)\r\n    annotation (Line(points={{0,-50},{0,-40},{-20,-40}}, color={191,0,0}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis is a single <a href=\\\"modelica://Modelica.Electrical.Batteries.BatteryStacks.CellStack\\\">cell[Np=1, Ns=1]</a> with measurement.\r\n</p>\r\n</html>\"));\r\nend BaseCellWithSensors", "checksum": "4c6f7e53dcf528f7984a984bba647b97c195feb1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseCellWithSensors.mo:2-85", "component_count": 3, "connection_count": 15, "variable_count": 3, "physical_quantity_count": 2, "parameter_count": 2, "equation_count": 3, "dependency_count": 18, "has_physical_interface": true, "interface_component_count": 3, "has_connections": true, "is_composite_model": true, "complexity_score": 55.0, "model_type": "system", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(p, multiSensor.pc) annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}))", "search_keywords": ["ElectricCurrent", "Power", "Real", "SI.Current", "SI.Power", "electrical", "system"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "power", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "SOC", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "p", "to_connector": "multiSensor.pc", "condition": null}, {"from_connector": "multiSensor.pc", "to_connector": "multiSensor.pv", "condition": null}, {"from_connector": "multiSensor.nc", "to_connector": "cell.p", "condition": null}, {"from_connector": "cell.n", "to_connector": "n", "condition": null}, {"from_connector": "multiSensor.i", "to_connector": "limIntegrator.u", "condition": null}, {"from_connector": "limIntegrator.y", "to_connector": "cellBus.soc", "condition": null}, {"from_connector": "multiSensor.v", "to_connector": "cellBus.v", "condition": null}, {"from_connector": "multiSensor.i", "to_connector": "cellBus.i", "condition": null}, {"from_connector": "multiSensor.power", "to_connector": "cellBus.power", "condition": null}, {"from_connector": "heatFlowSensor.port_b", "to_connector": "internalHeatPort", "condition": null}, {"from_connector": "heatFlowSensor.port_a", "to_connector": "cell.heatPort", "condition": null}, {"from_connector": "heatFlowSensor.Q_flow", "to_connector": "cellBus.lossPower", "condition": null}, {"from_connector": "temperatureSensor.T", "to_connector": "cellBus.T", "condition": null}, {"from_connector": "n", "to_connector": "multiSensor.nv", "condition": null}, {"from_connector": "heatFlowSensor.port_a", "to_connector": "temperatureSensor.port", "condition": null}], "variables": [{"name": "i", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": "p.i \"Current into the cell\"", "comment": null}, {"name": "power", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "v*i \"Power to the cell\"", "comment": null}, {"name": "SOC", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "limIntegrator.y \"State of charge\"", "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "power", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}], "dependencies": ["Modelica.Blocks.Continuous", "Modelica.Blocks.Types.Init", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Analog.Sensors", "Modelica.Electrical.Batteries.BatteryStacks", "Modelica.Electrical.Batteries.Icons", "Modelica.Electrical.Batteries.Interfaces", "Modelica.Electrical.Batteries.ParameterRecords", "Modelica.Thermal.HeatTransfer.Sensors", "SI", "cell", "cellBus", "cellData", "heatFlowSensor", "limIntegrator", "multiSensor", "p", "temperatureSensor"], "inheritance_chain": ["Modelica.Electrical.Batteries.Icons.BatteryIcon", "Modelica.Electrical.Analog.Interfaces.TwoPin", "Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort"]}
{"fqn": "Modelica.Electrical.Batteries.BaseClasses.BaseStackWithSensors", "kind": "model", "name": "BaseStackWithSensors", "package_path": ["Modelica", "Electrical", "Batteries", "BaseClasses"], "extends": ["Modelica.Electrical.Batteries.Icons.BatteryIcon", "Modelica.Electrical.Analog.Interfaces.TwoPin"], "imports": [], "parameters": [{"name": "useAllParallelConnections", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "SOCtolerance", "type": "Real", "default": "1e-9 \"SOC tolerance for detection of depleted or overcharged cell\" extends Modelica.Electrical.Analog.Interfaces.TwoPin", "description": null}, {"name": "useHeatPort", "type": "Boolean", "default": "false \"=true, if HeatPort is enabled\" parameter SI.Temperature T=293.15 \"Fixed device temperature if useHeatPort = false\" replaceable Modelica.Electrical.Batteries.BaseClasses.Base", "description": null}, {"name": "if all parallel connections are used\"", "type": "Boolean", "default": "", "description": null}, {"name": "SOC0[stackData.Ns, stackData.Np]", "type": "Real", "default": "fill(0.1, stackData.Ns, stackData.Np) \"Initial SOC\"", "description": null}], "equations": [{"equations": ["equation\r\n  //connections of cell stack\r\n  connect(multiSensor.nc, cell[1, 1].p)\r\n    annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}))", "connect(cell[stackData.Ns, 1].n, n)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}))", "connect(cell.cellBus, stackBus.cellBus) annotation (Line(\r\n      points={{-6,-8},{-6,-14},{60,-14},{60,-44},{60.1,-44},{60.1,-79.9}},\r\n      color={255,204,51},\r\n      thickness=0.5))", "if useAllParallelConnections then\r\n    for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)", "end for", "end for", "for ks in 1:stackData.Ns-1 loop\r\n      connect(cell[ks, 1].n, cell[ks + 1, 1].p)", "end for", "else\r\n    for kp in 1:stackData.Np loop\r\n      for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p)", "end for", "end for", "for kp in 1:stackData.Np-1 loop\r\n      connect(cell[1, kp].p, cell[1, kp + 1].p)", "connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n)", "end for", "end if", "//other connections\r\n  connect(p,multiSensor.pc)\r\n    annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}))", "connect(multiSensor.pc,multiSensor.pv)\r\n    annotation (Line(points={{-70,0},{-70,10},{-60,10}}, color={0,0,255}))", "connect(n, multiSensor.nv)\r\n    annotation (Line(points={{100,0},{20,0},{20,-20},{-60,-20},{-60,-10}}, color={0,0,255}))", "connect(multiSensor.i, batteryBus.i) annotation (Line(points={{-66,-11},{-66,-20},\r\n          {-80,-20},{-80,-79.95},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.power, batteryBus.power) annotation (Line(points={{-71,-6},\r\n          {-80,-6},{-80,-79.95},{-59.95,-79.95}},\r\n                                             color={0,0,127}))", "connect(multiSensor.v, batteryBus.v) annotation (Line(points={{-54,-11},{-54,-46},\r\n          {-54,-79.95},{-59.95,-79.95}}, color={0,0,127}))", "connect(socTotal.y, batteryBus.soc) annotation (Line(points={{-70,-61},{-70,-79.95},\r\n          {-59.95,-79.95}}, color={0,0,127}))", "connect(temperatureTotal.y, batteryBus.T) annotation (Line(points={{-41,-40},{\r\n          -54,-40},{-54,-79.95},{-59.95,-79.95}}, color={0,0,127}))", "connect(lossesTotal.y, batteryBus.lossPower) annotation (Line(points={{-41,-60},\r\n          {-54,-60},{-54,-79.95},{-59.95,-79.95}},color={0,0,127}))", "connect(cell.heatPort, heatPort)\r\n    annotation (Line(points={{0,-10},{0,-100}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 49, "end_line": 101, "start_col": 1, "end_col": 67}}, {"equations": ["connect(multiSensor.nc, cell[1, 1].p)\r\n    annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}))", "connect(cell[stackData.Ns, 1].n, n)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}))", "connect(cell.cellBus, stackBus.cellBus) annotation (Line(\r\n      points={{-6,-8},{-6,-14},{60,-14},{60,-44},{60.1,-44},{60.1,-79.9}},\r\n      color={255,204,51},\r\n      thickness=0.5))", "if useAllParallelConnections then\r\n    for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)", "end for", "end for", "for ks in 1:stackData.Ns-1 loop\r\n      connect(cell[ks, 1].n, cell[ks + 1, 1].p)", "end for", "else\r\n    for kp in 1:stackData.Np loop\r\n      for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p)", "end for", "end for", "for kp in 1:stackData.Np-1 loop\r\n      connect(cell[1, kp].p, cell[1, kp + 1].p)", "connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n)", "end for", "end if", "//other connections\r\n  connect(p,multiSensor.pc)\r\n    annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}))", "connect(multiSensor.pc,multiSensor.pv)\r\n    annotation (Line(points={{-70,0},{-70,10},{-60,10}}, color={0,0,255}))", "connect(n, multiSensor.nv)\r\n    annotation (Line(points={{100,0},{20,0},{20,-20},{-60,-20},{-60,-10}}, color={0,0,255}))", "connect(multiSensor.i, batteryBus.i) annotation (Line(points={{-66,-11},{-66,-20},\r\n          {-80,-20},{-80,-79.95},{-59.95,-79.95}}, color={0,0,127}))", "connect(multiSensor.power, batteryBus.power) annotation (Line(points={{-71,-6},\r\n          {-80,-6},{-80,-79.95},{-59.95,-79.95}},\r\n                                             color={0,0,127}))", "connect(multiSensor.v, batteryBus.v) annotation (Line(points={{-54,-11},{-54,-46},\r\n          {-54,-79.95},{-59.95,-79.95}}, color={0,0,127}))", "connect(socTotal.y, batteryBus.soc) annotation (Line(points={{-70,-61},{-70,-79.95},\r\n          {-59.95,-79.95}}, color={0,0,127}))", "connect(temperatureTotal.y, batteryBus.T) annotation (Line(points={{-41,-40},{\r\n          -54,-40},{-54,-79.95},{-59.95,-79.95}}, color={0,0,127}))", "connect(lossesTotal.y, batteryBus.lossPower) annotation (Line(points={{-41,-60},\r\n          {-54,-60},{-54,-79.95},{-59.95,-79.95}},color={0,0,127}))", "connect(cell.heatPort, heatPort)\r\n    annotation (Line(points={{0,-10},{0,-100}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 51, "end_line": 101, "start_col": 3, "end_col": 67}}, {"equations": ["if useAllParallelConnections then\r\n    for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)", "end for", "end for", "for ks in 1:stackData.Ns-1 loop\r\n      connect(cell[ks, 1].n, cell[ks + 1, 1].p)", "end for", "else\r\n    for kp in 1:stackData.Np loop\r\n      for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p)", "end for", "end for", "for kp in 1:stackData.Np-1 loop\r\n      connect(cell[1, kp].p, cell[1, kp + 1].p)", "connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n)", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 59, "end_line": 79, "start_col": 3, "end_col": 9}}, {"equations": ["for kp in 1:stackData.Np loop\r\n      for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p)", "end for", "end for", "for kp in 1:stackData.Np-1 loop\r\n      connect(cell[1, kp].p, cell[1, kp + 1].p)", "connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 70, "end_line": 78, "start_col": 5, "end_col": 13}}, {"equations": ["for kp in 1:stackData.Np-1 loop\r\n      connect(cell[1, kp].p, cell[1, kp + 1].p)", "connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 75, "end_line": 78, "start_col": 5, "end_col": 12}}, {"equations": ["connect(cell[1, kp].p, cell[1, kp + 1].p)", "connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 76, "end_line": 77, "start_col": 7, "end_col": 71}}, {"equations": ["for kp in 1:stackData.Np loop\r\n      for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p)", "end for", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 70, "end_line": 74, "start_col": 5, "end_col": 12}}, {"equations": ["for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 71, "end_line": 73, "start_col": 7, "end_col": 15}}, {"equations": ["connect(cell[ks, kp].n, cell[ks + 1, kp].p)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 72, "end_line": 72, "start_col": 9, "end_col": 53}}, {"equations": ["for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)", "end for", "end for", "for ks in 1:stackData.Ns-1 loop\r\n      connect(cell[ks, 1].n, cell[ks + 1, 1].p)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 60, "end_line": 68, "start_col": 5, "end_col": 13}}, {"equations": ["for ks in 1:stackData.Ns-1 loop\r\n      connect(cell[ks, 1].n, cell[ks + 1, 1].p)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 66, "end_line": 68, "start_col": 5, "end_col": 12}}, {"equations": ["connect(cell[ks, 1].n, cell[ks + 1, 1].p)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 67, "end_line": 67, "start_col": 7, "end_col": 49}}, {"equations": ["for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)", "end for", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 60, "end_line": 65, "start_col": 5, "end_col": 12}}, {"equations": ["for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 61, "end_line": 64, "start_col": 7, "end_col": 15}}, {"equations": ["connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "connect(cell[ks, kp].n, cell[ks, kp + 1].n)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 62, "end_line": 63, "start_col": 9, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 49, "end_line": 49, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Electrical.Batteries.Icons.BatteryIcon | components: SI.Current×1, SI.Power×1, Real×1 | connections: 19 | params: useAllParallelConnections, SO", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo", "start_line": 2, "end_line": 113, "start_col": 1, "end_col": 25}, "code_text": "partial model BaseStackWithSensors \"Partial stack with sensors\"\r\n  extends Modelica.Electrical.Batteries.Icons.BatteryIcon(final displaySOC=SOC);\r\n  replaceable parameter BaseStackData stackData\r\n    annotation (Placement(transformation(extent={{-10,40},{10,60}})));\r\n  parameter Boolean useAllParallelConnections=true \"= true, if all parallel connections are used\";\r\n  parameter Real SOC0[stackData.Ns, stackData.Np]=fill(0.1, stackData.Ns, stackData.Np) \"Initial SOC\";\r\n  parameter Real SOCtolerance=1e-9 \"SOC tolerance for detection of depleted or overcharged cell\"\r\n    annotation(Dialog(tab=\"Advanced\"));\r\n  extends Modelica.Electrical.Analog.Interfaces.TwoPin;\r\n  output SI.Current i = p.i \"Current into the stack\";\r\n  output SI.Power power = v*i \"Power to the stack\";\r\n  output Real SOC = socTotal.y \"Overall State of charge\";\r\n  parameter Boolean useHeatPort = false \"=true, if HeatPort is enabled\"\r\n    annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n  parameter SI.Temperature T=293.15\r\n    \"Fixed device temperature if useHeatPort = false\"\r\n    annotation(Dialog(enable=not useHeatPort));\r\n  replaceable Modelica.Electrical.Batteries.BaseClasses.BaseCellWithSensors\r\n    cell[stackData.Ns,stackData.Np](\r\n    each SOCtolerance=SOCtolerance,\r\n    each useHeatPort=false,\r\n    each T=T,\r\n    cellData=stackData.cellData,\r\n    SOC0=SOC0) \"Matrix of cells\"\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n  Modelica.Electrical.Analog.Sensors.MultiSensor multiSensor\r\n    annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));\r\n  Modelica.Electrical.Batteries.Interfaces.StackBus stackBus(Ns=stackData.Ns,\r\n      Np=stackData.Np) \"Stack bus\"\r\n    annotation (Placement(transformation(extent={{40,-100},{80,-60}})));\r\n  Modelica.Electrical.Batteries.Interfaces.CellBus batteryBus\r\n    \"Battery bus (average / sum over all cells)\"\r\n    annotation (Placement(transformation(extent={{-70,-90},{-50,-70}})));\r\n  Modelica.Blocks.Sources.RealExpression socTotal(\r\n    y=sum(stackBus.cellBus.soc.*stackData.cellData.Qnom)/sum(stackData.cellData.Qnom)) annotation (Placement(\r\n        transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-70,-50})));\r\n  Modelica.Blocks.Sources.RealExpression lossesTotal(y=sum(stackBus.cellBus.lossPower))\r\n    annotation (Placement(transformation(extent={{-20,-70},{-40,-50}})));\r\n  Modelica.Blocks.Sources.RealExpression temperatureTotal(y=sum(stackBus.cellBus.T)/(stackData.Ns*stackData.Np))\r\n    annotation (Placement(transformation(extent={{-20,-50},{-40,-30}})));\r\n  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort[stackData.Ns, stackData.Np] if useHeatPort\r\n    \"Optional port to which dissipated losses are transported in form of heat\"\r\n    annotation (Placement(transformation(extent={{-10,-110},{10,-90}}),\r\n        iconTransformation(extent={{-10,-110},{10,-90}})));\r\nequation\r\n  //connections of cell stack\r\n  connect(multiSensor.nc, cell[1, 1].p)\r\n    annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}));\r\n  connect(cell[stackData.Ns, 1].n, n)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}));\r\n  connect(cell.cellBus, stackBus.cellBus) annotation (Line(\r\n      points={{-6,-8},{-6,-14},{60,-14},{60,-44},{60.1,-44},{60.1,-79.9}},\r\n      color={255,204,51},\r\n      thickness=0.5));\r\n  if useAllParallelConnections then\r\n    for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p);\r\n        connect(cell[ks, kp].n, cell[ks, kp + 1].n);\r\n      end for;\r\n    end for;\r\n    for ks in 1:stackData.Ns-1 loop\r\n      connect(cell[ks, 1].n, cell[ks + 1, 1].p);\r\n    end for;\r\n  else\r\n    for kp in 1:stackData.Np loop\r\n      for ks in 1:stackData.Ns-1 loop\r\n        connect(cell[ks, kp].n, cell[ks + 1, kp].p);\r\n      end for;\r\n    end for;\r\n    for kp in 1:stackData.Np-1 loop\r\n      connect(cell[1, kp].p, cell[1, kp + 1].p);\r\n      connect(cell[stackData.Ns, kp].n, cell[stackData.Ns, kp + 1].n);\r\n    end for;\r\n  end if;\r\n//other connections\r\n  connect(p,multiSensor.pc)\r\n    annotation (Line(points={{-100,0},{-70,0}}, color={0,0,255}));\r\n  connect(multiSensor.pc,multiSensor.pv)\r\n    annotation (Line(points={{-70,0},{-70,10},{-60,10}}, color={0,0,255}));\r\n  connect(n, multiSensor.nv)\r\n    annotation (Line(points={{100,0},{20,0},{20,-20},{-60,-20},{-60,-10}}, color={0,0,255}));\r\n  connect(multiSensor.i, batteryBus.i) annotation (Line(points={{-66,-11},{-66,-20},\r\n          {-80,-20},{-80,-79.95},{-59.95,-79.95}}, color={0,0,127}));\r\n  connect(multiSensor.power, batteryBus.power) annotation (Line(points={{-71,-6},\r\n          {-80,-6},{-80,-79.95},{-59.95,-79.95}},\r\n                                             color={0,0,127}));\r\n  connect(multiSensor.v, batteryBus.v) annotation (Line(points={{-54,-11},{-54,-46},\r\n          {-54,-79.95},{-59.95,-79.95}}, color={0,0,127}));\r\n  connect(socTotal.y, batteryBus.soc) annotation (Line(points={{-70,-61},{-70,-79.95},\r\n          {-59.95,-79.95}}, color={0,0,127}));\r\n  connect(temperatureTotal.y, batteryBus.T) annotation (Line(points={{-41,-40},{\r\n          -54,-40},{-54,-79.95},{-59.95,-79.95}}, color={0,0,127}));\r\n  connect(lossesTotal.y, batteryBus.lossPower) annotation (Line(points={{-41,-60},\r\n          {-54,-60},{-54,-79.95},{-59.95,-79.95}},color={0,0,127}));\r\n  connect(cell.heatPort, heatPort)\r\n    annotation (Line(points={{0,-10},{0,-100}}, color={191,0,0}));\r\n  annotation (Icon(graphics={  Ellipse(\r\n          visible=useHeatPort,\r\n          extent={{-14,-86},{14,-114}},\r\n          lineColor={191,0,0},\r\n          fillColor={191,0,0},\r\n          fillPattern=FillPattern.Solid)}),\r\n          Documentation(info=\"<html>\r\n<p>\r\nThis is a stack of <code>Ns</code> x <code>Np</code> <a href=\\\"modelica://Modelica.Electrical.Batteries.BatteryStacksWithSensors.Cell\\\">cell[Np=1, Ns=1]</a> with measurement, arranged in a matrix.\r\n</p>\r\n</html>\"));\r\nend BaseStackWithSensors", "checksum": "12f91ea76a3b2d73d9330c1f156cea3e98bccedc", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackWithSensors.mo:2-113", "component_count": 3, "connection_count": 19, "variable_count": 6, "physical_quantity_count": 5, "parameter_count": 5, "equation_count": 16, "dependency_count": 21, "has_physical_interface": true, "interface_component_count": 3, "has_connections": true, "is_composite_model": true, "complexity_score": 81.5, "model_type": "system", "physical_domains": ["electrical", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "model", "equation_summary": "equation //connections of cell stack connect(multiSensor.nc, cell[1, 1].p) annotation (Line(points={{-50,0},{-10,0}}, color={0,0,255}))", "search_keywords": ["ElectricCurrent", "Power", "Real", "SI.Current", "SI.Power", "electrical", "mechanical", "stackData.Ns, kp + 1", "stackData.Ns, stackData.Np", "stackData.Ns,stackData.Np", "system"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "power", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "SOC", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "multiSensor.nc", "to_connector": "cell[1, 1].p", "condition": null}, {"from_connector": "cell[stackData.Ns", "to_connector": "1].n, n", "condition": null}, {"from_connector": "cell.cellBus", "to_connector": "stackBus.cellBus", "condition": null}, {"from_connector": "cell[ks", "to_connector": "kp].p, cell[ks, kp + 1].p", "condition": null}, {"from_connector": "cell[ks", "to_connector": "kp].n, cell[ks, kp + 1].n", "condition": null}, {"from_connector": "cell[ks", "to_connector": "1].n, cell[ks + 1, 1].p", "condition": null}, {"from_connector": "cell[ks", "to_connector": "kp].n, cell[ks + 1, kp].p", "condition": null}, {"from_connector": "cell[1", "to_connector": "kp].p, cell[1, kp + 1].p", "condition": null}, {"from_connector": "cell[stackData.Ns", "to_connector": "kp].n, cell[stackData.Ns, kp + 1].n", "condition": null}, {"from_connector": "p", "to_connector": "multiSensor.pc", "condition": null}, {"from_connector": "multiSensor.pc", "to_connector": "multiSensor.pv", "condition": null}, {"from_connector": "n", "to_connector": "multiSensor.nv", "condition": null}, {"from_connector": "multiSensor.i", "to_connector": "batteryBus.i", "condition": null}, {"from_connector": "multiSensor.power", "to_connector": "batteryBus.power", "condition": null}, {"from_connector": "multiSensor.v", "to_connector": "batteryBus.v", "condition": null}, {"from_connector": "socTotal.y", "to_connector": "batteryBus.soc", "condition": null}, {"from_connector": "temperatureTotal.y", "to_connector": "batteryBus.T", "condition": null}, {"from_connector": "lossesTotal.y", "to_connector": "batteryBus.lossPower", "condition": null}, {"from_connector": "cell.heatPort", "to_connector": "heatPort", "condition": null}], "variables": [{"name": "i", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": "p.i \"Current into the stack\"", "comment": null}, {"name": "power", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "v*i \"Power to the stack\"", "comment": null}, {"name": "SOC", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "socTotal.y \"Overall State of charge\"", "comment": null}, {"name": "SOCtolerance", "type_name": "each", "prefixes": [], "attributes": {}, "binding_equation": "SOCtolerance,\r\n    each useHeatPort=false,\r\n    each T=T,\r\n    cellData=stackData.cellData,\r\n    SOC0=SOC0) \"Matrix of cells\"\r\n    \r\n  Modelica.Electrical.Analog.Sensors.MultiSensor multiSensor\r\n    \r\n  Modelica.Electrical.Batteries.Interfaces.StackBus stackBus(Ns=stackData.Ns,\r\n      Np=stackData.Np) \"Stack bus\"\r\n    \r\n  Modelica.Electrical.Batteries.Interfaces.CellBus batteryBus\r\n    \"Battery bus (average / sum over all cells)\"\r\n    \r\n  Modelica.Blocks.Sources.RealExpression socTotal(\r\n    y=sum(stackBus.cellBus.soc.*stackData.cellData.Qnom)/sum(stackData.cellData.Qnom)) \r\n  Modelica.Blocks.Sources.RealExpression lossesTotal(y=sum(stackBus.cellBus.lossPower))\r\n    \r\n  Modelica.Blocks.Sources.RealExpression temperatureTotal(y=sum(stackBus.cellBus.T)/(stackData.Ns*stackData.Np))\r\n    \r\n  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPort[stackData.Ns, stackData.Np] if useHeatPort\r\n    \"Optional port to which dissipated losses are transported in form of heat\"\r\n    \r\nequation\r\n  //connections of cell stack\r\n  connect(multiSensor.nc, cell[1, 1].p)\r\n    \r\n  connect(cell[stackData.Ns, 1].n, n)\r\n    \r\n  connect(cell.cellBus, stackBus.cellBus) \r\n  if useAllParallelConnections then\r\n    for ks in 1:stackData.Ns loop\r\n      for kp in 1:stackData.Np-1 loop\r\n        connect(cell[ks, kp].p, cell[ks, kp + 1].p)", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "power", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "used", "unit": "stackData.Ns, stackData.Np", "display_unit": null, "quantity": null, "nominal": null}, {"name": "false", "unit": "stackData.Ns,stackData.Np", "display_unit": null, "quantity": null, "nominal": null}, {"name": "heat", "unit": "stackData.Ns, kp + 1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Modelica.Blocks.Sources", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Analog.Sensors", "Modelica.Electrical.Batteries.BaseClasses", "Modelica.Electrical.Batteries.BatteryStacksWithSensors", "Modelica.Electrical.Batteries.Icons", "Modelica.Electrical.Batteries.Interfaces", "Modelica.Thermal.HeatTransfer.Interfaces", "SI", "batteryBus", "cell", "lossesTotal", "multiSensor", "p", "socTotal", "stackBus", "stackBus.cellBus", "stackData", "stackData.cellData", "temperatureTotal"], "inheritance_chain": ["Modelica.Electrical.Batteries.Icons.BatteryIcon", "Modelica.Electrical.Analog.Interfaces.TwoPin"]}
{"fqn": "Modelica.Electrical.Batteries.BatteryStacks.SuperCap", "kind": "model", "name": "SuperCap", "package_path": ["Modelica", "Electrical", "Batteries", "BatteryStacks"], "extends": ["Modelica.Electrical.Analog.Interfaces.TwoPin", "Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort"], "imports": [], "parameters": [{"name": "V0", "type": "SI.Voltage", "default": "Vnom \"Initial voltage\"", "description": null}, {"name": "Qnom", "type": "SI.ElectricCharge", "default": "C*Vnom \"Nominal charge\"", "description": null}, {"name": "T_ref", "type": "SI.Temperature", "default": "293.15 \"Reference temperature\"", "description": null}, {"name": "alpha", "type": "SI.LinearTemperatureCoefficient", "default": "0 \"Temperature coefficient of resistance at T_ref\"", "description": null}, {"name": "Idis", "type": "SI.Current", "default": "0 \"Self-discharge current at nominal voltage\" extends Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort", "description": null}, {"name": "Vnom \"Nominal voltage\"", "type": "SI.Voltage", "default": "", "description": null}, {"name": "C \"Capacitance\"", "type": "SI.Capacitance", "default": "", "description": null}, {"name": "Rs \"Series resistance\"", "type": "SI.Resistance", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(p, resistor.p)\r\n    annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}))", "connect(resistor.n, capacitor.p)\r\n    annotation (Line(points={{-30,0},{30,0}}, color={0,0,255}))", "connect(capacitor.n, n)\r\n    annotation (Line(points={{50,0},{100,0}}, color={0,0,255}))", "connect(capacitor.p, conductor.p)\r\n    annotation (Line(points={{30,0},{30,-30},{30,-30}}, color={0,0,255}))", "connect(capacitor.n, conductor.n)\r\n    annotation (Line(points={{50,0},{50,-30}}, color={0,0,255}))", "connect(internalHeatPort, conductor.heatPort) annotation (Line(points={{0,-80},\r\n          {0,-60},{40,-60},{40,-40}}, color={191,0,0}))", "connect(internalHeatPort, resistor.heatPort) annotation (Line(points={{0,-80},\r\n          {0,-60},{-40,-60},{-40,-10}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BatteryStacks\\SuperCap.mo", "start_line": 28, "end_line": 42, "start_col": 1, "end_col": 59}}, {"equations": ["connect(p, resistor.p)\r\n    annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}))", "connect(resistor.n, capacitor.p)\r\n    annotation (Line(points={{-30,0},{30,0}}, color={0,0,255}))", "connect(capacitor.n, n)\r\n    annotation (Line(points={{50,0},{100,0}}, color={0,0,255}))", "connect(capacitor.p, conductor.p)\r\n    annotation (Line(points={{30,0},{30,-30},{30,-30}}, color={0,0,255}))", "connect(capacitor.n, conductor.n)\r\n    annotation (Line(points={{50,0},{50,-30}}, color={0,0,255}))", "connect(internalHeatPort, conductor.heatPort) annotation (Line(points={{0,-80},\r\n          {0,-60},{40,-60},{40,-40}}, color={191,0,0}))", "connect(internalHeatPort, resistor.heatPort) annotation (Line(points={{0,-80},\r\n          {0,-60},{-40,-60},{-40,-10}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BatteryStacks\\SuperCap.mo", "start_line": 29, "end_line": 42, "start_col": 3, "end_col": 59}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BatteryStacks\\SuperCap.mo", "start_line": 28, "end_line": 28, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Electrical.Analog.Interfaces.TwoPin | components: SI.Current×1 | connections: 7 | params: V0, Qnom, T_ref | units: A | eq: equation connect(p, ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BatteryStacks\\SuperCap.mo", "start_line": 2, "end_line": 77, "start_col": 1, "end_col": 13}, "code_text": "model SuperCap \"Simple model of a supercapacitor\"\r\n  extends Modelica.Electrical.Analog.Interfaces.TwoPin;\r\n  SI.Current i = p.i \"Current into the supercap\";\r\n  parameter SI.Voltage Vnom \"Nominal voltage\";\r\n  parameter SI.Voltage V0=Vnom \"Initial voltage\";\r\n  parameter SI.Capacitance C \"Capacitance\";\r\n  parameter SI.ElectricCharge Qnom=C*Vnom \"Nominal charge\";\r\n  parameter SI.Resistance Rs \"Series resistance\";\r\n  parameter SI.Temperature T_ref=293.15 \"Reference temperature\";\r\n  parameter SI.LinearTemperatureCoefficient alpha=0 \"Temperature coefficient of resistance at T_ref\";\r\n  parameter SI.Current Idis=0 \"Self-discharge current at nominal voltage\"\r\n    annotation(Evaluate=true);\r\n  extends Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort;\r\n  Modelica.Electrical.Analog.Basic.Resistor resistor(\r\n    final R=Rs,\r\n    final T_ref=T_ref,\r\n    final alpha=alpha,\r\n    final useHeatPort=true)\r\n    annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n  Modelica.Electrical.Analog.Basic.Conductor conductor(\r\n    final G=Idis/Vnom,\r\n    T_ref=293.15,\r\n    final useHeatPort=true)\r\n    annotation (Placement(transformation(extent={{30,-40},{50,-20}})));\r\n  Modelica.Electrical.Analog.Basic.Capacitor capacitor(v(start=V0, fixed=true), final C=C)\r\n    annotation (Placement(transformation(extent={{30,-10},{50,10}})));\r\nequation\r\n  connect(p, resistor.p)\r\n    annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}));\r\n  connect(resistor.n, capacitor.p)\r\n    annotation (Line(points={{-30,0},{30,0}}, color={0,0,255}));\r\n  connect(capacitor.n, n)\r\n    annotation (Line(points={{50,0},{100,0}}, color={0,0,255}));\r\n  connect(capacitor.p, conductor.p)\r\n    annotation (Line(points={{30,0},{30,-30},{30,-30}}, color={0,0,255}));\r\n  connect(capacitor.n, conductor.n)\r\n    annotation (Line(points={{50,0},{50,-30}}, color={0,0,255}));\r\n  connect(internalHeatPort, conductor.heatPort) annotation (Line(points={{0,-80},\r\n          {0,-60},{40,-60},{40,-40}}, color={191,0,0}));\r\n  connect(internalHeatPort, resistor.heatPort) annotation (Line(points={{0,-80},\r\n          {0,-60},{-40,-60},{-40,-10}}, color={191,0,0}));\r\n  annotation (Icon(graphics={\r\n        Text(\r\n          extent={{-150,60},{150,100}},\r\n          textColor={0,0,255},\r\n          textString=\"%name\"),\r\n        Text(\r\n          extent={{-150,-90},{150,-50}},\r\n          textColor={0,0,0},\r\n          textString=\"C=%C\"),\r\n        Rectangle(\r\n          extent={{-20,40},{-10,-40}},\r\n          lineColor={0,0,255},\r\n          fillColor={0,0,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Rectangle(\r\n          extent={{10,40},{20,-40}},\r\n          lineColor={0,0,255},\r\n          fillColor={0,0,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(points={{-90,0},{-20,0}}, color={0,0,255}),\r\n        Line(points={{20,0},{90,0}}, color={0,0,255})}), Documentation(info=\"<html>\r\n<p>\r\nThis is a simple model of a supercapacitor, comprising:\r\n</p>\r\n<ul>\r\n<li>an ideal capacitance</li>\r\n<li>a series resistance</li>\r\n<li>a self-discharge conductor</li>\r\n</ul>\r\n<h4>Note</h4>\r\n<p>\r\nThere is no limit included against too high charging and too low discharging or even charging in the opposite direction.\r\n</p>\r\n</html>\"));\r\nend SuperCap", "checksum": "5f59debcf6df10b08db40b45e5463160d70d589c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BatteryStacks\\SuperCap.mo:2-77", "component_count": 1, "connection_count": 7, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 8, "equation_count": 3, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 30.0, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(p, resistor.p) annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}))", "search_keywords": ["ElectricCurrent", "SI.Current", "basic", "electrical"]}, "components": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "p", "to_connector": "resistor.p", "condition": null}, {"from_connector": "resistor.n", "to_connector": "capacitor.p", "condition": null}, {"from_connector": "capacitor.n", "to_connector": "n", "condition": null}, {"from_connector": "capacitor.p", "to_connector": "conductor.p", "condition": null}, {"from_connector": "capacitor.n", "to_connector": "conductor.n", "condition": null}, {"from_connector": "internalHeatPort", "to_connector": "conductor.heatPort", "condition": null}, {"from_connector": "internalHeatPort", "to_connector": "resistor.heatPort", "condition": null}], "variables": [{"name": "i", "type_name": "SI.Current", "prefixes": [], "attributes": {}, "binding_equation": "p.i \"Current into the supercap\"", "comment": null}], "physical_quantities": [{"name": "i", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}], "dependencies": ["FillPattern", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Interfaces", "SI", "capacitor", "conductor", "p", "resistor"], "inheritance_chain": ["Modelica.Electrical.Analog.Interfaces.TwoPin", "Modelica.Electrical.Analog.Interfaces.PartialConditionalHeatPort"]}
{"fqn": "Modelica.Electrical.Machines.BasicMachines.SynchronousMachines.SM_ElectricalExcited", "kind": "model", "name": "SM_ElectricalExcited", "package_path": ["Modelica", "Electrical", "Machines", "BasicMachines", "SynchronousMachines"], "extends": ["Machines.Interfaces.PartialBasicInductionMachine"], "imports": [], "parameters": [{"name": "Lrsigmaq", "type": "SI.Inductance", "default": "Lrsigmad \"Damper stray inductance in q-axis\" parameter SI.Resistance Rrd(start=0.04*ZsRef) \"Damper resistance in d-axis at TRef\" parameter SI.Resistance Rrq=Rrd \"Damper resistance ", "description": null}], "equations": [{"equations": ["equation\r\n  connect(ir, damperCage.i)", "connect(idq_dr, damperCage.i)", "connect(damperCageLossPower, damperCage.lossPower)", "if not useDamperCage then\r\n    damperCageLossPower = 0", "end if", "connect(airGap.spacePhasor_r, damperCage.spacePhasor_r)\r\n    annotation (Line(points={{10,-10},{10,-30}}, color={0,0,255}))", "connect(airGap.spacePhasor_r, electricalExcitation.spacePhasor_r)\r\n    annotation (Line(points={{10,-10},{10,-10},{10,-20},{-60,-20},{-60,-40}}, color={0,0,255}))", "connect(electricalExcitation.pin_en, pin_en) annotation (Line(\r\n      points={{-80,-60},{-100,-60}}, color={0,0,255}))", "connect(pin_ep, brush.p) annotation (Line(\r\n      points={{-100,60},{-80,60},{-80,50}}, color={0,0,255}))", "connect(brush.n, re.p) annotation (Line(\r\n      points={{-80,30},{-80,20}}, color={0,0,255}))", "connect(re.n, lesigma.p) annotation (Line(\r\n      points={{-80,0},{-80,-10}}, color={0,0,255}))", "connect(lesigma.n, electricalExcitation.pin_ep) annotation (Line(\r\n      points={{-80,-30},{-80,-40}}, color={0,0,255}))", "connect(lssigma.spacePhasor_b, airGap.spacePhasor_s) annotation (Line(\r\n      points={{20,10},{10,10}}, color={0,0,255}))", "connect(brush.heatPort, internalThermalPort.heatPortBrush) annotation (\r\n      Line(\r\n      points={{-70,50},{-60,50},{-60,40},{50,40},{50,-80},{0,-80}}, color={191,0,0}))", "connect(re.heatPort, internalThermalPort.heatPortExcitation)\r\n    annotation (Line(\r\n      points={{-70,10},{-60,10},{-60,40},{50,40},{50,-80},{0,-80}}, color={191,0,0}))", "connect(airGap.flange, inertiaRotor.flange_a) annotation (Line(\r\n      points={{10,0},{70,0}}))", "connect(airGap.support, internalSupport) annotation (Line(\r\n      points={{-10,0},{-26,0},{-40,0},{-40,-90},{60,-90},{60,-100}}))", "connect(damperCage.heatPort, internalThermalPort.heatPortRotorWinding)\r\n    annotation (Line(\r\n      points={{-10,-40},{-10,-80},{0,-80},{0,-80}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo", "start_line": 165, "end_line": 201, "start_col": 1, "end_col": 71}}, {"equations": ["connect(ir, damperCage.i)", "connect(idq_dr, damperCage.i)", "connect(damperCageLossPower, damperCage.lossPower)", "if not useDamperCage then\r\n    damperCageLossPower = 0", "end if", "connect(airGap.spacePhasor_r, damperCage.spacePhasor_r)\r\n    annotation (Line(points={{10,-10},{10,-30}}, color={0,0,255}))", "connect(airGap.spacePhasor_r, electricalExcitation.spacePhasor_r)\r\n    annotation (Line(points={{10,-10},{10,-10},{10,-20},{-60,-20},{-60,-40}}, color={0,0,255}))", "connect(electricalExcitation.pin_en, pin_en) annotation (Line(\r\n      points={{-80,-60},{-100,-60}}, color={0,0,255}))", "connect(pin_ep, brush.p) annotation (Line(\r\n      points={{-100,60},{-80,60},{-80,50}}, color={0,0,255}))", "connect(brush.n, re.p) annotation (Line(\r\n      points={{-80,30},{-80,20}}, color={0,0,255}))", "connect(re.n, lesigma.p) annotation (Line(\r\n      points={{-80,0},{-80,-10}}, color={0,0,255}))", "connect(lesigma.n, electricalExcitation.pin_ep) annotation (Line(\r\n      points={{-80,-30},{-80,-40}}, color={0,0,255}))", "connect(lssigma.spacePhasor_b, airGap.spacePhasor_s) annotation (Line(\r\n      points={{20,10},{10,10}}, color={0,0,255}))", "connect(brush.heatPort, internalThermalPort.heatPortBrush) annotation (\r\n      Line(\r\n      points={{-70,50},{-60,50},{-60,40},{50,40},{50,-80},{0,-80}}, color={191,0,0}))", "connect(re.heatPort, internalThermalPort.heatPortExcitation)\r\n    annotation (Line(\r\n      points={{-70,10},{-60,10},{-60,40},{50,40},{50,-80},{0,-80}}, color={191,0,0}))", "connect(airGap.flange, inertiaRotor.flange_a) annotation (Line(\r\n      points={{10,0},{70,0}}))", "connect(airGap.support, internalSupport) annotation (Line(\r\n      points={{-10,0},{-26,0},{-40,0},{-40,-90},{60,-90},{60,-100}}))", "connect(damperCage.heatPort, internalThermalPort.heatPortRotorWinding)\r\n    annotation (Line(\r\n      points={{-10,-40},{-10,-80},{0,-80},{0,-80}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo", "start_line": 166, "end_line": 201, "start_col": 3, "end_col": 71}}, {"equations": ["if not useDamperCage then\r\n    damperCageLossPower = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo", "start_line": 169, "end_line": 171, "start_col": 3, "end_col": 9}}, {"equations": ["damperCageLossPower = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo", "start_line": 170, "end_line": 170, "start_col": 5, "end_col": 29}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo", "start_line": 165, "end_line": 165, "start_col": 1, "end_col": 9}}], "docstring": "extends Machines.Interfaces.PartialBasicInductionMachine | components: SI.Current×1 | connections: 16 | params: Lrsigmaq | units: W, A, 2 | eq: equation connect", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo", "start_line": 2, "end_line": 401, "start_col": 1, "end_col": 25}, "code_text": "model SM_ElectricalExcited\r\n  \"Electrical excited synchronous machine with damper cage\"\r\n  extends Machines.Interfaces.PartialBasicInductionMachine(\r\n    Lssigma(start=0.1*ZsRef/(2*pi*fsNominal)),\r\n    final idq_ss=airGap.i_ss,\r\n    final idq_sr=airGap.i_sr,\r\n    final idq_rs=airGap.i_rs,\r\n    final idq_rr=airGap.i_rr,\r\n    redeclare final Machines.Thermal.SynchronousMachines.ThermalAmbientSMEE\r\n      thermalAmbient(\r\n      final useDamperCage=useDamperCage,\r\n      final Te=TeOperational,\r\n      final Tr=TrOperational),\r\n    redeclare final Machines.Interfaces.InductionMachines.ThermalPortSMEE\r\n      thermalPort(final useDamperCage=useDamperCage),\r\n    redeclare final Machines.Interfaces.InductionMachines.ThermalPortSMEE\r\n      internalThermalPort(final useDamperCage=useDamperCage),\r\n    redeclare final Machines.Interfaces.InductionMachines.PowerBalanceSMEE\r\n      powerBalance(\r\n      final lossPowerRotorWinding=damperCageLossPower,\r\n      final powerExcitation=ve*ie,\r\n      final lossPowerExcitation=re.LossPower,\r\n      final lossPowerBrush=brush.lossPower,\r\n      final lossPowerRotorCore=0),\r\n    statorCore(final w=statorCoreParameters.wRef));\r\n  Modelica.Blocks.Interfaces.RealOutput ir[2](\r\n    start=zeros(2),\r\n    each final quantity=\"ElectricCurrent\",\r\n    each final unit=\"A\") if useDamperCage \"Damper cage currents\"\r\n    annotation (Placement(visible=false),Dialog(showStartAttribute=true));\r\n  Modelica.Blocks.Interfaces.RealOutput idq_dr[2](\r\n    each stateSelect=StateSelect.prefer,\r\n    each final quantity=\"ElectricCurrent\",\r\n    each final unit=\"A\") if useDamperCage\r\n    \"Damper space phasor current / rotor fixed frame\"\r\n    annotation (Placement(visible=false));\r\n  Machines.BasicMachines.Components.AirGapR airGap(\r\n    final p=p,\r\n    final Lmd=Lmd,\r\n    final Lmq=Lmq,\r\n    final m=m) annotation (Placement(transformation(extent={{-10,-10},{10,10}},\r\n          rotation=270)));\r\n  parameter SI.Temperature TrOperational(start=293.15)\r\n    \"Operational temperature of (optional) damper cage\" annotation (\r\n      Dialog(group=\"Operational temperatures\", enable=not useThermalPort\r\n           and useDamperCage));\r\n  parameter SI.Inductance Lmd(start=1.5*ZsRef/(2*pi*fsNominal))\r\n    \"Stator main field inductance per phase in d-axis\"\r\n    annotation (Dialog(tab=\"Nominal resistances and inductances\"));\r\n  parameter SI.Inductance Lmq(start=1.5*ZsRef/(2*pi*fsNominal))\r\n    \"Stator main field inductance per phase in q-axis\"\r\n    annotation (Dialog(tab=\"Nominal resistances and inductances\"));\r\n  parameter Boolean useDamperCage(start=true)\r\n    \"Enable / disable damper cage\" annotation (Evaluate=true, Dialog(tab=\r\n          \"Nominal resistances and inductances\", group=\"Damper cage\"));\r\n  parameter SI.Inductance Lrsigmad(start=0.05*ZsRef/(2*pi*\r\n        fsNominal)) \"Damper stray inductance in d-axis\" annotation (\r\n      Dialog(\r\n      tab=\"Nominal resistances and inductances\",\r\n      group=\"Damper cage\",\r\n      enable=useDamperCage));\r\n  parameter SI.Inductance Lrsigmaq=Lrsigmad\r\n    \"Damper stray inductance in q-axis\" annotation (Dialog(\r\n      tab=\"Nominal resistances and inductances\",\r\n      group=\"Damper cage\",\r\n      enable=useDamperCage));\r\n  parameter SI.Resistance Rrd(start=0.04*ZsRef)\r\n    \"Damper resistance in d-axis at TRef\" annotation (Dialog(\r\n      tab=\"Nominal resistances and inductances\",\r\n      group=\"Damper cage\",\r\n      enable=useDamperCage));\r\n  parameter SI.Resistance Rrq=Rrd\r\n    \"Damper resistance in q-axis at TRef\" annotation (Dialog(\r\n      tab=\"Nominal resistances and inductances\",\r\n      group=\"Damper cage\",\r\n      enable=useDamperCage));\r\n  parameter SI.Temperature TrRef(start=293.15)\r\n    \"Reference temperature of damper resistances in d- and q-axis\"\r\n    annotation (Dialog(\r\n      tab=\"Nominal resistances and inductances\",\r\n      group=\"Damper cage\",\r\n      enable=useDamperCage));\r\n  parameter Machines.Thermal.LinearTemperatureCoefficient20 alpha20r(start=0)\r\n    \"Temperature coefficient of damper resistances in d- and q-axis\"\r\n    annotation (Dialog(\r\n      tab=\"Nominal resistances and inductances\",\r\n      group=\"Damper cage\",\r\n      enable=useDamperCage));\r\n  parameter SI.Voltage VsNominal(start=100)\r\n    \"Nominal stator RMS voltage per phase\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Current IeOpenCircuit(start=10)\r\n    \"Open circuit excitation current @ nominal voltage and frequency\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Resistance Re(start=2.5)\r\n    \"Excitation resistance at TRef\" annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Temperature TeRef(start=293.15)\r\n    \"Reference temperature of excitation resistance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter Machines.Thermal.LinearTemperatureCoefficient20 alpha20e(start=0)\r\n    \"Temperature coefficient of excitation resistance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter Real sigmae(\r\n    min=0,\r\n    max=0.99,\r\n    start=0.025) \"Stray fraction of total excitation inductance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Temperature TeOperational(start=293.15)\r\n    \"Operational excitation temperature\" annotation (Dialog(group=\r\n          \"Operational temperatures\", enable=not useThermalPort));\r\n  parameter Machines.Losses.BrushParameters brushParameters\r\n    \"Brush loss parameter record\" annotation (Dialog(tab=\"Losses\"));\r\n  output SI.Voltage ve=pin_ep.v - pin_en.v\r\n    \"Excitation voltage\";\r\n  output SI.Current ie=pin_ep.i \"Excitation current\";\r\n  Machines.BasicMachines.Components.DamperCage damperCage(\r\n    final Lrsigmad=Lrsigmad,\r\n    final Lrsigmaq=Lrsigmaq,\r\n    final Rrd=Rrd,\r\n    final Rrq=Rrq,\r\n    final T_ref=TrRef,\r\n    final alpha=Machines.Thermal.convertAlpha(alpha20r, TrRef),\r\n    final useHeatPort=true) if useDamperCage annotation (Placement(\r\n        transformation(\r\n        origin={0,-40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Machines.BasicMachines.Components.ElectricalExcitation electricalExcitation(final\r\n      turnsRatio=turnsRatio) annotation (Placement(transformation(\r\n        origin={-70,-50},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=180)));\r\n  Modelica.Electrical.Analog.Basic.Resistor re(\r\n    final R=Re,\r\n    final T_ref=TeRef,\r\n    final alpha=Machines.Thermal.convertAlpha(alpha20e, TeRef),\r\n    final useHeatPort=true) annotation (Placement(transformation(\r\n        origin={-80,10},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Analog.Basic.Inductor lesigma(final L=Lesigma)\r\n    annotation (Placement(transformation(\r\n        extent={{10,-10},{-10,10}},\r\n        rotation=90,\r\n        origin={-80,-20})));\r\n  Modelica.Electrical.Analog.Interfaces.PositivePin pin_ep\r\n    \"Positive excitation pin\" annotation (Placement(transformation(extent=\r\n           {{-110,70},{-90,50}})));\r\n  Modelica.Electrical.Analog.Interfaces.NegativePin pin_en\r\n    \"Negative excitation pin\" annotation (Placement(transformation(extent=\r\n           {{-90,-50},{-110,-70}})));\r\n  Machines.Losses.DCMachines.Brush brush(final brushParameters=brushParameters,\r\n      final useHeatPort=true) annotation (Placement(transformation(\r\n        extent={{10,-10},{-10,10}},\r\n        rotation=90,\r\n        origin={-80,40})));\r\nprotected\r\n  final parameter Real turnsRatio=sqrt(2)*VsNominal/(2*pi*fsNominal*Lmd*\r\n      IeOpenCircuit) \"Stator current / excitation current\";\r\n  final parameter SI.Inductance Lesigma=Lmd*turnsRatio^2*3/\r\n      2*sigmae/(1 - sigmae);\r\n  Modelica.Blocks.Interfaces.RealOutput damperCageLossPower(final\r\n      quantity=\"Power\", final unit=\"W\") \"Damper losses\";\r\nequation\r\n  connect(ir, damperCage.i);\r\n  connect(idq_dr, damperCage.i);\r\n  connect(damperCageLossPower, damperCage.lossPower);\r\n  if not useDamperCage then\r\n    damperCageLossPower = 0;\r\n  end if;\r\n  connect(airGap.spacePhasor_r, damperCage.spacePhasor_r)\r\n    annotation (Line(points={{10,-10},{10,-30}}, color={0,0,255}));\r\n  connect(airGap.spacePhasor_r, electricalExcitation.spacePhasor_r)\r\n    annotation (Line(points={{10,-10},{10,-10},{10,-20},{-60,-20},{-60,-40}}, color={0,0,255}));\r\n  connect(electricalExcitation.pin_en, pin_en) annotation (Line(\r\n      points={{-80,-60},{-100,-60}}, color={0,0,255}));\r\n  connect(pin_ep, brush.p) annotation (Line(\r\n      points={{-100,60},{-80,60},{-80,50}}, color={0,0,255}));\r\n  connect(brush.n, re.p) annotation (Line(\r\n      points={{-80,30},{-80,20}}, color={0,0,255}));\r\n  connect(re.n, lesigma.p) annotation (Line(\r\n      points={{-80,0},{-80,-10}}, color={0,0,255}));\r\n  connect(lesigma.n, electricalExcitation.pin_ep) annotation (Line(\r\n      points={{-80,-30},{-80,-40}}, color={0,0,255}));\r\n  connect(lssigma.spacePhasor_b, airGap.spacePhasor_s) annotation (Line(\r\n      points={{20,10},{10,10}}, color={0,0,255}));\r\n  connect(brush.heatPort, internalThermalPort.heatPortBrush) annotation (\r\n      Line(\r\n      points={{-70,50},{-60,50},{-60,40},{50,40},{50,-80},{0,-80}}, color={191,0,0}));\r\n  connect(re.heatPort, internalThermalPort.heatPortExcitation)\r\n    annotation (Line(\r\n      points={{-70,10},{-60,10},{-60,40},{50,40},{50,-80},{0,-80}}, color={191,0,0}));\r\n  connect(airGap.flange, inertiaRotor.flange_a) annotation (Line(\r\n      points={{10,0},{70,0}}));\r\n  connect(airGap.support, internalSupport) annotation (Line(\r\n      points={{-10,0},{-26,0},{-40,0},{-40,-90},{60,-90},{60,-100}}));\r\n\r\n  connect(damperCage.heatPort, internalThermalPort.heatPortRotorWinding)\r\n    annotation (Line(\r\n      points={{-10,-40},{-10,-80},{0,-80},{0,-80}}, color={191,0,0}));\r\n  annotation (\r\n    defaultComponentName=\"smee\",\r\n    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n            100,100}}), graphics={\r\n        Ellipse(extent={{-134,34},{-66,-34}}, lineColor={0,0,255}),\r\n        Line(points={{-100,50},{-100,20},{-130,20},{-130,-4}}, color={0,0,255}),\r\n        Line(points={{-130,-4},{-129,1},{-125,5},{-120,6},{-115,5},{-111,\r\n              1},{-110,-4}}, color={0,0,255}),\r\n        Line(points={{-110,-4},{-109,1},{-105,5},{-100,6},{-95,5},{-91,1},\r\n              {-90,-4}}, color={0,0,255}),\r\n        Line(points={{-90,-4},{-89,1},{-85,5},{-80,6},{-75,5},{-71,1},{-70,\r\n              -4}}, color={0,0,255}),\r\n        Line(points={{-100,-50},{-100,-20},{-70,-20},{-70,-2}}, color={0,\r\n              0,255})}),\r\n    Documentation(info=\"<html>\r\n<p><strong>Model of a three-phase electrical excited synchronous machine with damper cage.</strong><br>\r\nResistance and stray inductance of stator is modeled directly in stator phases, then using space phasor transformation and a rotor-fixed <em>AirGap</em> model. Resistance and stray inductance of rotor's squirrel cage is modeled in two axis of the rotor-fixed coordinate system. Electrical excitation is modelled by converting excitation current and voltage to d-axis space phasors. The machine models take the following loss effects into account:\r\n</p>\r\n\r\n<ul>\r\n<li>heat losses in the temperature dependent stator winding resistances</li>\r\n<li>heat losses in the temperature dependent excitation winding resistance</li>\r\n<li>optional, when enabled: heat losses in the temperature dependent damper cage resistances</li>\r\n<li>brush losses in the excitation circuit</li>\r\n<li>friction losses</li>\r\n<li>core losses (only eddy current losses, no hysteresis losses)</li>\r\n<li>stray load losses</li>\r\n</ul>\r\n\r\n<p>Whether a damper cage is present or not, can be selected with Boolean parameter useDamperCage (default = true).\r\n<br><strong>Default values for machine's parameters (a realistic example) are:</strong><br></p>\r\n<table>\r\n<tr>\r\n<td>number of pole pairs p</td>\r\n<td>2</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>stator's moment of inertia</td>\r\n<td>0.29</td><td>kg.m2</td>\r\n</tr>\r\n<tr>\r\n<td>rotor's moment of inertia</td>\r\n<td>0.29</td><td>kg.m2</td>\r\n</tr>\r\n<tr>\r\n<td>nominal frequency fNominal</td>\r\n<td>50</td><td>Hz</td>\r\n</tr>\r\n<tr>\r\n<td>nominal voltage per phase</td>\r\n<td>100</td><td>V RMS</td>\r\n</tr>\r\n<tr>\r\n<td>no-load excitation current<br>\r\n    @ nominal voltage and frequency</td>\r\n<td>10</td><td>A DC</td>\r\n</tr>\r\n<tr>\r\n<td>warm excitation resistance</td>\r\n<td>2.5</td><td>Ohm</td>\r\n</tr>\r\n<tr>\r\n<td>nominal current per phase</td>\r\n<td>100</td><td>A RMS</td>\r\n</tr>\r\n<tr>\r\n<td>nominal apparent power</td>\r\n<td>-30000</td><td>VA</td>\r\n</tr>\r\n<tr>\r\n<td>power factor</td>\r\n<td>-1.0</td><td>ind./cap.</td>\r\n</tr>\r\n<tr>\r\n<td>nominal excitation current</td>\r\n<td>19</td><td>A</td>\r\n</tr>\r\n<tr>\r\n<td>efficiency w/o excitation</td>\r\n<td>97.1</td><td>%</td>\r\n</tr>\r\n<tr>\r\n<td>nominal torque</td>\r\n<td>-196.7</td><td>Nm</td>\r\n</tr>\r\n<tr>\r\n<td>nominal speed</td>\r\n<td>1500</td><td>rpm</td>\r\n</tr>\r\n<tr>\r\n<td>nominal rotor angle</td>\r\n<td>-57.23</td><td>degree</td>\r\n</tr>\r\n<tr>\r\n<td>stator resistance</td>\r\n<td>0.03</td><td>Ohm per phase at reference temperature</td>\r\n</tr>\r\n<tr>\r\n<td>reference temperature TsRef</td>\r\n<td>20</td><td>&deg;C</td>\r\n</tr>\r\n<tr>\r\n<td>temperature coefficient alpha20s </td>\r\n<td>0</td><td>1/K</td>\r\n</tr>\r\n<tr>\r\n<td>stator reactance Xd</td>\r\n<td>1.6</td><td>Ohm per phase in d-axis</td>\r\n</tr>\r\n<tr>\r\n<td>giving Kc</td>\r\n<td>0.625</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>stator reactance Xq</td>\r\n<td>1.6</td><td>Ohm per phase in q-axis</td>\r\n</tr>\r\n<tr>\r\n<td>stator stray reactance Xss</td>\r\n<td>0.1</td><td>Ohm per phase</td>\r\n</tr>\r\n<tr>\r\n<td>damper resistance in d-axis</td>\r\n<td>0.04</td><td>Ohm at reference temperature</td>\r\n</tr>\r\n<tr>\r\n<td>damper resistance in q-axis</td>\r\n<td>same as d-axis</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>reference temperature TrRef</td>\r\n<td>20</td><td>&deg;C</td>\r\n</tr>\r\n<tr>\r\n<td>temperature coefficient alpha20r </td>\r\n<td>0</td><td>1/K</td>\r\n</tr>\r\n<tr>\r\n<td>damper stray reactance in d-axis XDds</td>\r\n<td>0.05</td><td>Ohm</td>\r\n</tr>\r\n<tr>\r\n<td>damper stray reactance in q-axis XDqs</td>\r\n<td>same as d-axis</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>excitation resistance</td>\r\n<td>2.5</td><td>Ohm at reference temperature</td>\r\n</tr>\r\n<tr>\r\n<td>reference temperature TeRef</td>\r\n<td>20</td><td>&deg;C</td>\r\n</tr>\r\n<tr>\r\n<td>temperature coefficient alpha20e </td>\r\n<td>0</td><td>1/K</td>\r\n</tr>\r\n<tr>\r\n<td>excitation stray inductance</td>\r\n<td>2.5</td><td>% of total excitation inductance</td>\r\n</tr>\r\n<tr>\r\n<td>stator operational temperature TsOperational</td>\r\n<td>20</td><td>&deg;C</td>\r\n</tr>\r\n<tr>\r\n<td>damper operational temperature TrOperational</td>\r\n<td>20</td><td>&deg;C</td>\r\n</tr>\r\n<tr>\r\n<td>excitation operational temperature TeOperational</td>\r\n<td>20</td><td>&deg;C</td>\r\n</tr>\r\n<tr>\r\n<td>These values give the following inductances:</td>\r\n<td> </td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>main field inductance in d-axis</td>\r\n<td>(Xd - Xss)/(2*pi*fNominal)</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>main field inductance in q-axis</td>\r\n<td>(Xq - Xss)/(2*pi*fNominal)</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>stator stray inductance per phase</td>\r\n<td>Xss/(2*pi*fNominal)</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>damper stray inductance in d-axis</td>\r\n<td>XDds/(2*pi*fNominal)</td><td> </td>\r\n</tr>\r\n<tr>\r\n<td>damper stray inductance in q-axis</td>\r\n<td>XDqs/(2*pi*fNominal)</td><td> </td>\r\n</tr>\r\n</table>\r\n</html>\"));\r\nend SM_ElectricalExcited", "checksum": "57a7a9b6ac9b2aec6ab5cac8c437cd8733861f49", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\SynchronousMachines\\SM_ElectricalExcited.mo:2-401", "component_count": 1, "connection_count": 16, "variable_count": 7, "physical_quantity_count": 4, "parameter_count": 1, "equation_count": 5, "dependency_count": 25, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": false, "complexity_score": 55.5, "model_type": "component", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(ir, damperCage.i)", "search_keywords": ["ElectricCurrent", "Power", "SI.Current", "component", "electrical"]}, "components": [{"name": "ie", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "ir", "to_connector": "damperCage.i", "condition": null}, {"from_connector": "idq_dr", "to_connector": "damperCage.i", "condition": null}, {"from_connector": "damperCageLossPower", "to_connector": "damperCage.lossPower", "condition": null}, {"from_connector": "airGap.spacePhasor_r", "to_connector": "damperCage.spacePhasor_r", "condition": null}, {"from_connector": "airGap.spacePhasor_r", "to_connector": "electricalExcitation.spacePhasor_r", "condition": null}, {"from_connector": "electricalExcitation.pin_en", "to_connector": "pin_en", "condition": null}, {"from_connector": "pin_ep", "to_connector": "brush.p", "condition": null}, {"from_connector": "brush.n", "to_connector": "re.p", "condition": null}, {"from_connector": "re.n", "to_connector": "lesigma.p", "condition": null}, {"from_connector": "lesigma.n", "to_connector": "electricalExcitation.pin_ep", "condition": null}, {"from_connector": "lssigma.spacePhasor_b", "to_connector": "airGap.spacePhasor_s", "condition": null}, {"from_connector": "brush.heatPort", "to_connector": "internalThermalPort.heatPortBrush", "condition": null}, {"from_connector": "re.heatPort", "to_connector": "internalThermalPort.heatPortExcitation", "condition": null}, {"from_connector": "airGap.flange", "to_connector": "inertiaRotor.flange_a", "condition": null}, {"from_connector": "airGap.support", "to_connector": "internalSupport", "condition": null}, {"from_connector": "damperCage.heatPort", "to_connector": "internalThermalPort.heatPortRotorWinding", "condition": null}], "variables": [{"name": "idq_ss", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "airGap.i_ss,\r\n    final idq_sr=airGap.i_sr,\r\n    final idq_rs=airGap.i_rs,\r\n    final idq_rr=airGap.i_rr,\r\n    redeclare final Machines.Thermal.SynchronousMachines.ThermalAmbientSMEE\r\n      thermalAmbient(\r\n      final useDamperCage=useDamperCage,\r\n      final Te=TeOperational,\r\n      final Tr=TrOperational),\r\n    redeclare final Machines.Interfaces.InductionMachines.ThermalPortSMEE\r\n      thermalPort(final useDamperCage=useDamperCage),\r\n    redeclare final Machines.Interfaces.InductionMachines.ThermalPortSMEE\r\n      internalThermalPort(final useDamperCage=useDamperCage),\r\n    redeclare final Machines.Interfaces.InductionMachines.PowerBalanceSMEE\r\n      powerBalance(\r\n      final lossPowerRotorWinding=damperCageLossPower,\r\n      final powerExcitation=ve*ie,\r\n      final lossPowerExcitation=re.LossPower,\r\n      final lossPowerBrush=brush.lossPower,\r\n      final lossPowerRotorCore=0),\r\n    statorCore(final w=statorCoreParameters.wRef))", "comment": null}, {"name": "stateSelect", "type_name": "each", "prefixes": [], "attributes": {}, "binding_equation": "StateSelect.prefer,\r\n    each final quantity=\"ElectricCurrent\",\r\n    each final unit=\"A\") if useDamperCage\r\n    \"Damper space phasor current / rotor fixed frame\"\r\n    \r\n  Machines.BasicMachines.Components.AirGapR airGap(\r\n    final p=p,\r\n    final Lmd=Lmd,\r\n    final Lmq=Lmq,\r\n    final m=m) \r\n  parameter SI.Temperature TrOperational(start=293.15)\r\n    \"Operational temperature of (optional) damper cage\" \r\n  parameter SI.Inductance Lmd(start=1.5*ZsRef/(2*pi*fsNominal))\r\n    \"Stator main field inductance per phase in d-axis\"\r\n    \r\n  parameter SI.Inductance Lmq(start=1.5*ZsRef/(2*pi*fsNominal))\r\n    \"Stator main field inductance per phase in q-axis\"\r\n    \r\n  parameter Boolean useDamperCage(start=true)\r\n    \"Enable / disable damper cage\" \r\n  parameter SI.Inductance Lrsigmad(start=0.05*ZsRef/(2*pi*\r\n        fsNominal)) \"Damper stray inductance in d-axis\" \r\n  parameter SI.Inductance Lrsigmaq=Lrsigmad\r\n    \"Damper stray inductance in q-axis\" \r\n  parameter SI.Resistance Rrd(start=0.04*ZsRef)\r\n    \"Damper resistance in d-axis at TRef\" \r\n  parameter SI.Resistance Rrq=Rrd\r\n    \"Damper resistance in q-axis at TRef\" \r\n  parameter SI.Temperature TrRef(start=293.15)\r\n    \"Reference temperature of damper resistances in d- and q-axis\"\r\n    \r\n  parameter Machines.Thermal.LinearTemperatureCoefficient20 alpha20r(start=0)\r\n    \"Temperature coefficient of damper resistances in d- and q-axis\"\r\n    \r\n  parameter SI.Voltage VsNominal(start=100)\r\n    \"Nominal stator RMS voltage per phase\"\r\n    \r\n  parameter SI.Current IeOpenCircuit(start=10)\r\n    \"Open circuit excitation current @ nominal voltage and frequency\"\r\n    \r\n  parameter SI.Resistance Re(start=2.5)\r\n    \"Excitation resistance at TRef\" \r\n  parameter SI.Temperature TeRef(start=293.15)\r\n    \"Reference temperature of excitation resistance\"\r\n    \r\n  parameter Machines.Thermal.LinearTemperatureCoefficient20 alpha20e(start=0)\r\n    \"Temperature coefficient of excitation resistance\"\r\n    \r\n  parameter Real sigmae(\r\n    min=0,\r\n    max=0.99,\r\n    start=0.025) \"Stray fraction of total excitation inductance\"\r\n    \r\n  parameter SI.Temperature TeOperational(start=293.15)\r\n    \"Operational excitation temperature\" \r\n  parameter Machines.Losses.BrushParameters brushParameters\r\n    \"Brush loss parameter record\" \r\n  output SI.Voltage ve=pin_ep.v - pin_en.v\r\n    \"Excitation voltage\"", "comment": null}, {"name": "ie", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": "pin_ep.i \"Excitation current\"", "comment": null}, {"name": "Lrsigmad", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "Lrsigmad,\r\n    final Lrsigmaq=Lrsigmaq,\r\n    final Rrd=Rrd,\r\n    final Rrq=Rrq,\r\n    final T_ref=TrRef,\r\n    final alpha=Machines.Thermal.convertAlpha(alpha20r, TrRef),\r\n    final useHeatPort=true) if useDamperCage \r\n  Machines.BasicMachines.Components.ElectricalExcitation electricalExcitation(final\r\n      turnsRatio=turnsRatio) \r\n  Modelica.Electrical.Analog.Basic.Resistor re(\r\n    final R=Re,\r\n    final T_ref=TeRef,\r\n    final alpha=Machines.Thermal.convertAlpha(alpha20e, TeRef),\r\n    final useHeatPort=true) \r\n  Modelica.Electrical.Analog.Basic.Inductor lesigma(final L=Lesigma)\r\n    \r\n  Modelica.Electrical.Analog.Interfaces.PositivePin pin_ep\r\n    \"Positive excitation pin\" \r\n  Modelica.Electrical.Analog.Interfaces.NegativePin pin_en\r\n    \"Negative excitation pin\" \r\n  Machines.Losses.DCMachines.Brush brush(final brushParameters=brushParameters,\r\n      final useHeatPort=true) \r\nprotected\r\n  final parameter Real turnsRatio=sqrt(2)*VsNominal/(2*pi*fsNominal*Lmd*\r\n      IeOpenCircuit) \"Stator current / excitation current\"", "comment": null}, {"name": "damperCageLossPower", "type_name": "Modelica.Blocks.Interfaces.RealOutput", "prefixes": [], "attributes": {"unit": "W", "quantity": "Power"}, "binding_equation": null, "comment": "\"Damper losses\""}, {"name": "connect", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "damperCageLossPower", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "ie", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "cage", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "currents", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Machines.BasicMachines.Components", "Machines.Interfaces", "Machines.Interfaces.InductionMachines", "Machines.Losses", "Machines.Losses.DCMachines", "Machines.Thermal", "Machines.Thermal.SynchronousMachines", "Modelica.Blocks.Interfaces", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Interfaces", "SI", "StateSelect", "airGap", "brush", "damperCage", "electricalExcitation", "inertiaRotor", "internalThermalPort", "kg", "lesigma", "lssigma", "pin_en", "pin_ep", "re", "statorCoreParameters"], "inheritance_chain": ["Machines.Interfaces.PartialBasicInductionMachine"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_Conveyor", "kind": "model", "name": "IMC_Conveyor", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "aimcData.fsNominal \"Nominal frequency\"", "description": null}, {"name": "wNominal", "type": "SI.AngularVelocity", "default": "2*pi*fNominal/aimcData.p \"Nominal speed\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}, {"name": "r", "type": "SI.Length", "default": "0.05 \"Transmission radius\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(signalVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}))", "connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(vfController.y, signalVoltage.v)\r\n    annotation (Line(points={{-19,60},{-12,60}},color={0,0,255}))", "connect(signalVoltage.plug_p, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,50},{0,40},{0,10}}, color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20},{0,-20},{0,-10}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(vfController.u, gain.y)\r\n    annotation (Line(points={{-42,60},{-49,60}}, color={0,0,127}))", "connect(dutyCycle.y[1], gain.u)\r\n    annotation (Line(points={{-79,60},{-72,60}}, color={0,0,127}))", "connect(aimc.flange, idealGearR2T.flangeR)\r\n    annotation (Line(points={{0,-40},{12,-40}}))", "connect(idealGearR2T.flangeT, mass.flange_a)\r\n    annotation (Line(points={{32,-40},{36,-40},{40,-40}}, color={0,127,0}))", "connect(mass.flange_b, signForce.flange)\r\n    annotation (Line(points={{60,-40},{66,-40},{70,-40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 81, "end_line": 109, "start_col": 1, "end_col": 77}}, {"equations": ["connect(signalVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}))", "connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(vfController.y, signalVoltage.v)\r\n    annotation (Line(points={{-19,60},{-12,60}},color={0,0,255}))", "connect(signalVoltage.plug_p, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,50},{0,40},{0,10}}, color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20},{0,-20},{0,-10}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(vfController.u, gain.y)\r\n    annotation (Line(points={{-42,60},{-49,60}}, color={0,0,127}))", "connect(dutyCycle.y[1], gain.u)\r\n    annotation (Line(points={{-79,60},{-72,60}}, color={0,0,127}))", "connect(aimc.flange, idealGearR2T.flangeR)\r\n    annotation (Line(points={{0,-40},{12,-40}}))", "connect(idealGearR2T.flangeT, mass.flange_a)\r\n    annotation (Line(points={{32,-40},{36,-40},{40,-40}}, color={0,127,0}))", "connect(mass.flange_b, signForce.flange)\r\n    annotation (Line(points={{60,-40},{66,-40},{70,-40}}, color={0,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 82, "end_line": 109, "start_col": 3, "end_col": 77}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 81, "end_line": 81, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.is[1:2] = zeros(2)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 77, "end_line": 79, "start_col": 1, "end_col": 22}}, {"equations": ["aimc.is[1:2] = zeros(2)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 78, "end_line": 79, "start_col": 3, "end_col": 22}}, {"equations": ["aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 79, "end_line": 79, "start_col": 3, "end_col": 21}}, {"equations": ["aimc.is[1:2] = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 78, "end_line": 78, "start_col": 3, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 77, "end_line": 77, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 12 | params: VNominal, fNominal, wNominal | units: 0,0; 1,1; 4,1; 5,0; 10,0; 11, -1; 14,-1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo", "start_line": 2, "end_line": 126, "start_col": 1, "end_col": 17}, "code_text": "model IMC_Conveyor\r\n  \"Test example: InductionMachineSquirrelCage with inverter driving a conveyor\"\r\n  extends Modelica.Icons.Example;\r\n  import Modelica.Constants.pi;\r\n  constant Integer m=3 \"Number of phases\";\r\n  constant SI.Frequency unitFrequency=1 annotation(HideResult=true);\r\n  parameter SI.Voltage VNominal=100\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=aimcData.fsNominal\r\n    \"Nominal frequency\";\r\n  parameter SI.AngularVelocity wNominal=2*pi*fNominal/aimcData.p\r\n    \"Nominal speed\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.Inertia JLoad=0.29\r\n    \"Load's moment of inertia\";\r\n  parameter SI.Length r=0.05 \"Transmission radius\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(extent={{-10,10},{10,-10}}, rotation=270)));\r\n  Blocks.Sources.CombiTimeTable dutyCycle(\r\n    table=[0,0; 1,1; 4,1; 5,0; 10,0; 11, -1; 14,-1; 15,0; 20,0],\r\n    extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)\r\n    annotation (Placement(transformation(extent={{-100,50},{-80,70}})));\r\n  Machines.Utilities.VfController vfController(\r\n    final m=m,\r\n    VNominal=VNominal,\r\n    fNominal=fNominal)\r\n    annotation (Placement(transformation(extent={{-40,50},{-20,70}})));\r\n  Modelica.Electrical.Polyphase.Sources.SignalVoltage signalVoltage(\r\n      final m=m) annotation (Placement(transformation(\r\n        origin={0,60},\r\n        extent={{10,10},{-10,-10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(extent={{-50,80},{-70,100}})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={-90,90},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"Y\")\r\n    annotation (Placement(transformation(extent={{-20,-34},{0,-14}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\n  Blocks.Math.Gain gain(k=fNominal)\r\n    annotation (Placement(transformation(extent={{-70,50},{-50,70}})));\r\n  Mechanics.Translational.Components.IdealGearR2T idealGearR2T(ratio=1/r)\r\n    annotation (Placement(transformation(extent={{12,-50},{32,-30}})));\r\n  Mechanics.Translational.Components.Mass mass(m=JLoad/r^2)\r\n    annotation (Placement(transformation(extent={{40,-50},{60,-30}})));\r\n  Mechanics.Translational.Sources.SignForce signForce(                           v0(\r\n        displayUnit=\"m/s\") = 0.01*wNominal*r, f_nominal=-TLoad/r)\r\n    annotation (Placement(transformation(extent={{90,-50},{70,-30}})));\r\ninitial equation\r\n  aimc.is[1:2] = zeros(2);\r\n  aimc.ir = zeros(2);\r\n\r\nequation\r\n  connect(signalVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}));\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}));\r\n  connect(vfController.y, signalVoltage.v)\r\n    annotation (Line(points={{-19,60},{-12,60}},color={0,0,255}));\r\n  connect(signalVoltage.plug_p, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,50},{0,40},{0,10}}, color={0,0,255}));\r\n  connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20},{0,-20},{0,-10}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}));\r\n  connect(vfController.u, gain.y)\r\n    annotation (Line(points={{-42,60},{-49,60}}, color={0,0,127}));\r\n  connect(dutyCycle.y[1], gain.u)\r\n    annotation (Line(points={{-79,60},{-72,60}}, color={0,0,127}));\r\n  connect(aimc.flange, idealGearR2T.flangeR)\r\n    annotation (Line(points={{0,-40},{12,-40}}));\r\n  connect(idealGearR2T.flangeT, mass.flange_a)\r\n    annotation (Line(points={{32,-40},{36,-40},{40,-40}}, color={0,127,0}));\r\n  connect(mass.flange_b, signForce.flange)\r\n    annotation (Line(points={{60,-40},{66,-40},{70,-40}}, color={0,127,0}));\r\n  annotation (experiment(StopTime=20, Interval=1E-4, Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>An ideal frequency inverter is modeled by using a VfController and a three-phase SignalVoltage.\r\nFrequency is driven by a load cycle of acceleration, constant speed, deceleration and standstill.\r\nThe mechanical load is a constant torque like a conveyor (with regularization around zero speed).</p>\r\n\r\n<p>Simulate for 20 seconds and plot (versus time):</p>\r\n\r\n<ul>\r\n<li>currentQuasiRMSSensor.I: stator current RMS</li>\r\n<li>aimc.wMechanical: motor's speed</li>\r\n<li>aimc.tauElectrical: motor's torque</li>\r\n</ul>\r\n\r\n<p>Default machine parameters are used.</p>\r\n</html>\"));\r\nend IMC_Conveyor", "checksum": "b92a7daaa8311a186eccfd1d479a0ad07b3fd91a", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Conveyor.mo:2-126", "component_count": 1, "connection_count": 12, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 6, "equation_count": 8, "dependency_count": 29, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 49.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(signalVoltage.plug_n, star.plug_p) annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}))", "search_keywords": ["0,0; 1,1; 4,1; 5,0; 10,0; 11, -1; 14,-1; 15,0; 20,0", "Integer", "basic"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "signalVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "vfController.y", "to_connector": "signalVoltage.v", "condition": null}, {"from_connector": "signalVoltage.plug_p", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "terminalBox.plugSupply", "to_connector": "currentQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "vfController.u", "to_connector": "gain.y", "condition": null}, {"from_connector": "dutyCycle.y[1]", "to_connector": "gain.u", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "idealGearR2T.flangeR", "condition": null}, {"from_connector": "idealGearR2T.flangeT", "to_connector": "mass.flange_a", "condition": null}, {"from_connector": "mass.flange_b", "to_connector": "signForce.flange", "condition": null}], "variables": [{"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Blocks.Sources.CombiTimeTable dutyCycle(\r\n    table=[0,0", "comment": null}, {"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "m,\r\n    VNominal=VNominal,\r\n    fNominal=fNominal)\r\n    \r\n  Modelica.Electrical.Polyphase.Sources.SignalVoltage signalVoltage(\r\n      final m=m) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"Y\")\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    \r\n  Blocks.Math.Gain gain(k=fNominal)\r\n    \r\n  Mechanics.Translational.Components.IdealGearR2T idealGearR2T(ratio=1/r)\r\n    \r\n  Mechanics.Translational.Components.Mass mass(m=JLoad/r^2)\r\n    \r\n  Mechanics.Translational.Sources.SignForce signForce(                           v0(\r\n        displayUnit=\"m/s\") = 0.01*wNominal*r, f_nominal=-TLoad/r)\r\n    \r\ninitial equation\r\n  aimc.is[1:2] = zeros(2)", "comment": null}], "physical_quantities": [{"name": "K", "unit": "0,0; 1,1; 4,1; 5,0; 10,0; 11, -1; 14,-1; 15,0; 20,0", "display_unit": null, "quantity": null, "nominal": null}, {"name": "s", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Blocks.Math", "Blocks.Sources", "Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Mechanics.Translational.Components", "Mechanics.Translational.Sources", "Modelica.Blocks.Types.Extrapolation", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "currentQuasiRMSSensor", "dutyCycle", "gain", "ground", "idealGearR2T", "mass", "signForce", "signalVoltage", "star", "terminalBox", "vfController"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_DCBraking", "kind": "model", "name": "IMC_DCBraking", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "JLoad", "type": "SI.Inertia", "default": "4*imcData.Jr \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(imc.flange, loadInertia.flange_a)\r\n    annotation (Line(points={{40,0},{50,0}}, color={0,0,0}))", "connect(plugToPin1.pin_p, constantCurrent.n)\r\n    annotation (Line(points={{-32,80},{-50,80},{-50,72}}, color={0,0,255}))", "connect(plugToPin2.pin_p, constantCurrent.p)\r\n    annotation (Line(points={{-32,40},{-50,40},{-50,52}}, color={0,0,255}))", "connect(constantCurrent.p, plugToPin3.pin_p)\r\n    annotation (Line(points={{-50,52},{-50,0},{-32,0}}, color={0,0,255}))", "connect(plugToPin2.plug_p, plugToPin1.plug_p) annotation (Line(points={{-28,40},\r\n          {-20,40},{-20,80},{-28,80}}, color={0,0,255}))", "connect(plugToPin2.plug_p, plugToPin3.plug_p) annotation (Line(points={{-28,40},\r\n          {-20,40},{-20,0},{-28,0}}, color={0,0,255}))", "connect(terminalBox.plug_sn, imc.plug_sn)\r\n    annotation (Line(points={{24,10},{24,10}}, color={0,0,255}))", "connect(terminalBox.plug_sp, imc.plug_sp)\r\n    annotation (Line(points={{36,10},{36,10}}, color={0,0,255}))", "connect(plugToPin2.plug_p, terminalBox.plugSupply)\r\n    annotation (Line(points={{-28,40},{30,40},{30,12}}, color={0,0,255}))", "connect(plugToPin2.pin_p, ground.p)\r\n    annotation (Line(points={{-32,40},{-60,40}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 87, "end_line": 107, "start_col": 1, "end_col": 68}}, {"equations": ["connect(imc.flange, loadInertia.flange_a)\r\n    annotation (Line(points={{40,0},{50,0}}, color={0,0,0}))", "connect(plugToPin1.pin_p, constantCurrent.n)\r\n    annotation (Line(points={{-32,80},{-50,80},{-50,72}}, color={0,0,255}))", "connect(plugToPin2.pin_p, constantCurrent.p)\r\n    annotation (Line(points={{-32,40},{-50,40},{-50,52}}, color={0,0,255}))", "connect(constantCurrent.p, plugToPin3.pin_p)\r\n    annotation (Line(points={{-50,52},{-50,0},{-32,0}}, color={0,0,255}))", "connect(plugToPin2.plug_p, plugToPin1.plug_p) annotation (Line(points={{-28,40},\r\n          {-20,40},{-20,80},{-28,80}}, color={0,0,255}))", "connect(plugToPin2.plug_p, plugToPin3.plug_p) annotation (Line(points={{-28,40},\r\n          {-20,40},{-20,0},{-28,0}}, color={0,0,255}))", "connect(terminalBox.plug_sn, imc.plug_sn)\r\n    annotation (Line(points={{24,10},{24,10}}, color={0,0,255}))", "connect(terminalBox.plug_sp, imc.plug_sp)\r\n    annotation (Line(points={{36,10},{36,10}}, color={0,0,255}))", "connect(plugToPin2.plug_p, terminalBox.plugSupply)\r\n    annotation (Line(points={{-28,40},{30,40},{30,12}}, color={0,0,255}))", "connect(plugToPin2.pin_p, ground.p)\r\n    annotation (Line(points={{-32,40},{-60,40}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 88, "end_line": 107, "start_col": 3, "end_col": 68}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 87, "end_line": 87, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  if settings.layout==\"Y3\" then\r\n    //imc.is[2]=settings.is[2]", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if", "if settings.layout==\"Y2\" then\r\n    der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if", "if settings.layout==\"D2\" then\r\n    //imc.is[2]=settings.is[2]", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if", "if settings.layout==\"D3\" then\r\n    //der(imc.idq_ss[1])=0", "//der(imc.idq_ss[2])=0", "der(imc.is[1])=0", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 62, "end_line": 86, "start_col": 1, "end_col": 10}}, {"equations": ["if settings.layout==\"Y3\" then\r\n    //imc.is[2]=settings.is[2]", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if", "if settings.layout==\"Y2\" then\r\n    der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if", "if settings.layout==\"D2\" then\r\n    //imc.is[2]=settings.is[2]", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if", "if settings.layout==\"D3\" then\r\n    //der(imc.idq_ss[1])=0", "//der(imc.idq_ss[2])=0", "der(imc.is[1])=0", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 63, "end_line": 86, "start_col": 3, "end_col": 10}}, {"equations": ["if settings.layout==\"D3\" then\r\n    //der(imc.idq_ss[1])=0", "//der(imc.idq_ss[2])=0", "der(imc.is[1])=0", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 79, "end_line": 86, "start_col": 3, "end_col": 9}}, {"equations": ["der(imc.is[1])=0", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 82, "end_line": 85, "start_col": 5, "end_col": 26}}, {"equations": ["der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 85, "end_line": 85, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.idq_rs[1])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 84, "end_line": 84, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.is[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 83, "end_line": 83, "start_col": 5, "end_col": 21}}, {"equations": ["der(imc.is[1])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 82, "end_line": 82, "start_col": 5, "end_col": 21}}, {"equations": ["if settings.layout==\"D2\" then\r\n    //imc.is[2]=settings.is[2]", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 73, "end_line": 78, "start_col": 3, "end_col": 9}}, {"equations": ["der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 75, "end_line": 77, "start_col": 5, "end_col": 26}}, {"equations": ["der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 77, "end_line": 77, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.idq_rs[1])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 76, "end_line": 76, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.is[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 75, "end_line": 75, "start_col": 5, "end_col": 21}}, {"equations": ["if settings.layout==\"Y2\" then\r\n    der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 69, "end_line": 72, "start_col": 3, "end_col": 9}}, {"equations": ["der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 70, "end_line": 71, "start_col": 5, "end_col": 26}}, {"equations": ["der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 71, "end_line": 71, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.idq_rs[1])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 70, "end_line": 70, "start_col": 5, "end_col": 25}}, {"equations": ["if settings.layout==\"Y3\" then\r\n    //imc.is[2]=settings.is[2]", "der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 63, "end_line": 68, "start_col": 3, "end_col": 9}}, {"equations": ["der(imc.is[2])=0", "der(imc.idq_rs[1])=0", "der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 65, "end_line": 67, "start_col": 5, "end_col": 26}}, {"equations": ["der(imc.idq_rs[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 67, "end_line": 67, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.idq_rs[1])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 66, "end_line": 66, "start_col": 5, "end_col": 25}}, {"equations": ["der(imc.is[2])=0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 65, "end_line": 65, "start_col": 5, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 62, "end_line": 62, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: SI.Torque×2, Integer×1 | connections: 10 | params: JLoad | units: N.m, N.m, rad/s | eq: equation connect(imc.flange", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo", "start_line": 2, "end_line": 132, "start_col": 1, "end_col": 18}, "code_text": "model IMC_DCBraking \"Induction machine with DC current braking\"\r\n  extends Modelica.Icons.Example;\r\n  import Modelica.Constants.pi;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.AngularVelocity w0(displayUnit=\"rev/min\")=\r\n    2*pi*imcData.fsNominal/imcData.p \"Initial mechanical speed\";\r\n  parameter SI.Inertia JLoad=4*imcData.Jr\r\n    \"Load's moment of inertia\";\r\n  SI.Torque tauElectrical=imc.tauElectrical \"Electrical torque\";\r\n  SI.Torque tauShaft=imc.tauShaft \"Shaft torque\";\r\n  SI.AngularVelocity wMechanical(displayUnit=\"rev/min\") = imc.wMechanical\r\n    \"Shaft speed\";\r\n  parameter Modelica.Electrical.Machines.Utilities.DcBrakeSettings settings(INominal=\r\n        100, layout=\"D3\")\r\n    annotation (Placement(transformation(extent={{20,60},{40,80}})));\r\n  parameter\r\n    Modelica.Electrical.Machines.Utilities.ParameterRecords.IM_SquirrelCageData\r\n    imcData annotation (Placement(transformation(extent={{20,-40},{40,-20}})));\r\n  Modelica.Electrical.Machines.BasicMachines.InductionMachines.IM_SquirrelCage imc(\r\n    p=imcData.p,\r\n    fsNominal=imcData.fsNominal,\r\n    Rs=imcData.Rs,\r\n    TsRef=imcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = imcData.alpha20s,\r\n    Lssigma=imcData.Lssigma,\r\n    Jr=imcData.Jr,\r\n    Js=imcData.Js,\r\n    Lszero=imcData.Lszero,\r\n    frictionParameters=imcData.frictionParameters,\r\n    phiMechanical(fixed=true, start=0),\r\n    wMechanical(fixed=true, start=w0),\r\n    statorCoreParameters=imcData.statorCoreParameters,\r\n    strayLoadParameters=imcData.strayLoadParameters,\r\n    Lm=imcData.Lm,\r\n    Lrsigma=imcData.Lrsigma,\r\n    Rr=imcData.Rr,\r\n    TrRef=imcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=imcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{20,-10},{40,10}})));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{50,-10},{70,10}})));\r\n  Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(m=m,\r\n      terminalConnection=settings.terminalConnection)\r\n    annotation (Placement(transformation(extent={{20,6},{40,26}})));\r\n  Modelica.Electrical.Polyphase.Basic.PlugToPin_p plugToPin1(m=m, k=1)\r\n    annotation (Placement(transformation(extent={{-20,70},{-40,90}})));\r\n  Modelica.Electrical.Polyphase.Basic.PlugToPin_p plugToPin2(m=m, k=2)\r\n    annotation (Placement(transformation(extent={{-20,30},{-40,50}})));\r\n  Modelica.Electrical.Polyphase.Basic.PlugToPin_p plugToPin3(m=m, k=3) if  settings.connect3\r\n    annotation (Placement(transformation(extent={{-20,-10},{-40,10}})));\r\n  Modelica.Electrical.Analog.Sources.ConstantCurrent\r\n    constantCurrent(I=settings.Idc)\r\n    annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={-50,62})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground\r\n    annotation (Placement(transformation(extent={{-70,20},{-50,40}})));\r\ninitial equation\r\n  if settings.layout==\"Y3\" then\r\n    //imc.is[2]=settings.is[2];\r\n    der(imc.is[2])=0;\r\n    der(imc.idq_rs[1])=0;\r\n    der(imc.idq_rs[2])=0;\r\n  end if;\r\n  if settings.layout==\"Y2\" then\r\n    der(imc.idq_rs[1])=0;\r\n    der(imc.idq_rs[2])=0;\r\n  end if;\r\n  if settings.layout==\"D2\" then\r\n    //imc.is[2]=settings.is[2];\r\n    der(imc.is[2])=0;\r\n    der(imc.idq_rs[1])=0;\r\n    der(imc.idq_rs[2])=0;\r\n  end if;\r\n  if settings.layout==\"D3\" then\r\n    //der(imc.idq_ss[1])=0;\r\n    //der(imc.idq_ss[2])=0;\r\n    der(imc.is[1])=0;\r\n    der(imc.is[2])=0;\r\n    der(imc.idq_rs[1])=0;\r\n    der(imc.idq_rs[2])=0;\r\n  end if;\r\nequation\r\n  connect(imc.flange, loadInertia.flange_a)\r\n    annotation (Line(points={{40,0},{50,0}}, color={0,0,0}));\r\n  connect(plugToPin1.pin_p, constantCurrent.n)\r\n    annotation (Line(points={{-32,80},{-50,80},{-50,72}}, color={0,0,255}));\r\n  connect(plugToPin2.pin_p, constantCurrent.p)\r\n    annotation (Line(points={{-32,40},{-50,40},{-50,52}}, color={0,0,255}));\r\n  connect(constantCurrent.p, plugToPin3.pin_p)\r\n    annotation (Line(points={{-50,52},{-50,0},{-32,0}}, color={0,0,255}));\r\n  connect(plugToPin2.plug_p, plugToPin1.plug_p) annotation (Line(points={{-28,40},\r\n          {-20,40},{-20,80},{-28,80}}, color={0,0,255}));\r\n  connect(plugToPin2.plug_p, plugToPin3.plug_p) annotation (Line(points={{-28,40},\r\n          {-20,40},{-20,0},{-28,0}}, color={0,0,255}));\r\n  connect(terminalBox.plug_sn, imc.plug_sn)\r\n    annotation (Line(points={{24,10},{24,10}}, color={0,0,255}));\r\n  connect(terminalBox.plug_sp, imc.plug_sp)\r\n    annotation (Line(points={{36,10},{36,10}}, color={0,0,255}));\r\n  connect(plugToPin2.plug_p, terminalBox.plugSupply)\r\n    annotation (Line(points={{-28,40},{30,40},{30,12}}, color={0,0,255}));\r\n  connect(plugToPin2.pin_p, ground.p)\r\n    annotation (Line(points={{-32,40},{-60,40}}, color={0,0,255}));\r\n  annotation (experiment(\r\n      StopTime=25,\r\n      Interval=0.001,\r\n      Tolerance=1e-06), Documentation(info=\"<html>\r\n<p>\r\nThe stator windings of an induction machine are fed by a DC current, causing a stationary current space phasor.\r\nSince the rotor is turning, voltage is induced in the rotor cage which in turn drives rotor currents.\r\nThis creates a braking torque.\r\n</p>\r\n<p>\r\nChoose a layout and plot tauElectrical and tauShaft versus wMechanical.\r\n</p>\r\n<p>Default machine parameters are used.</p>\r\n<h4>References</h4>\r\n<table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n    <tr>\r\n      <td>[Fischer2017]</td>\r\n      <td>R. Fischer,\r\n         Elektrische Maschinen, 17<sup>th</sup> ed., chapter 5.3.3.,\r\n        <em>Hanser</em>,\r\n        ISBN 978-3-446-45218-3, 2017.</td>\r\n    </tr>\r\n</table>\r\n</html>\"));\r\nend IMC_DCBraking", "checksum": "0435848c018fbfffd954506e9242b20eb514580b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DCBraking.mo:2-132", "component_count": 3, "connection_count": 10, "variable_count": 5, "physical_quantity_count": 7, "parameter_count": 1, "equation_count": 26, "dependency_count": 21, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 62.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(imc.flange, loadInertia.flange_a) annotation (Line(points={{40,0},{50,0}}, color={0,0,0}))", "search_keywords": ["AngularVelocity", "Integer", "N.m", "SI.Torque", "Torque", "mechanical", "rad/s", "system"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "tauElectrical", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "tauShaft", "type_name": "SI.Torque", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "imc.flange", "to_connector": "loadInertia.flange_a", "condition": null}, {"from_connector": "plugToPin1.pin_p", "to_connector": "constantCurrent.n", "condition": null}, {"from_connector": "plugToPin2.pin_p", "to_connector": "constantCurrent.p", "condition": null}, {"from_connector": "constantCurrent.p", "to_connector": "plugToPin3.pin_p", "condition": null}, {"from_connector": "plugToPin2.plug_p", "to_connector": "plugToPin1.plug_p", "condition": null}, {"from_connector": "plugToPin2.plug_p", "to_connector": "plugToPin3.plug_p", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "imc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "imc.plug_sp", "condition": null}, {"from_connector": "plugToPin2.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "plugToPin2.pin_p", "to_connector": "ground.p", "condition": null}], "variables": [{"name": "tauElectrical", "type_name": "SI.Torque", "prefixes": [], "attributes": {}, "binding_equation": "imc.tauElectrical \"Electrical torque\"", "comment": null}, {"name": "tauShaft", "type_name": "SI.Torque", "prefixes": [], "attributes": {}, "binding_equation": "imc.tauShaft \"Shaft torque\"", "comment": null}, {"name": "wMechanical", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {"displayUnit": "rev/min"}, "binding_equation": "imc.wMechanical\r\n    \"Shaft speed\"", "comment": null}, {"name": "imc", "type_name": "Modelica.Electrical.Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "imcData.alpha20s,\r\n    Lssigma=imcData.Lssigma,\r\n    Jr=imcData.Jr,\r\n    Js=imcData.Js,\r\n    Lszero=imcData.Lszero,\r\n    frictionParameters=imcData.frictionParameters,\r\n    phiMechanical(fixed=true, start=0),\r\n    wMechanical(fixed=true, start=w0),\r\n    statorCoreParameters=imcData.statorCoreParameters,\r\n    strayLoadParameters=imcData.strayLoadParameters,\r\n    Lm=imcData.Lm,\r\n    Lrsigma=imcData.Lrsigma,\r\n    Rr=imcData.Rr,\r\n    TrRef=imcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=imcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(m=m,\r\n      terminalConnection=settings.terminalConnection)\r\n    \r\n  Modelica.Electrical.Polyphase.Basic.PlugToPin_p plugToPin1(m=m, k=1)\r\n    \r\n  Modelica.Electrical.Polyphase.Basic.PlugToPin_p plugToPin2(m=m, k=2)\r\n    \r\n  Modelica.Electrical.Polyphase.Basic.PlugToPin_p plugToPin3(m=m, k=3) if  settings.connect3\r\n    \r\n  Modelica.Electrical.Analog.Sources.ConstantCurrent\r\n    constantCurrent(I=settings.Idc)\r\n    \r\n  Modelica.Electrical.Analog.Basic.Ground ground\r\n    \r\ninitial equation\r\n  if settings.layout==\"Y3\" then\r\n    //imc.is[2]=settings.is[2]", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "tauElectrical", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "tauShaft", "unit": "N.m", "display_unit": null, "quantity": "Torque", "nominal": null}, {"name": "wMechanical", "unit": "rad/s", "display_unit": "rev/min", "quantity": "AngularVelocity", "nominal": null}, {"name": "Y3", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "Y2", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "D2", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "D3", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Sources", "Modelica.Electrical.Machines.BasicMachines.InductionMachines", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Machines.Utilities.ParameterRecords", "Modelica.Electrical.Polyphase.Basic", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "SI", "constantCurrent", "ground", "imc", "imcData", "loadInertia", "plugToPin1", "plugToPin2", "plugToPin3", "settings", "terminalBox"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_DOL", "kind": "model", "name": "IMC_DOL", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "tStart1", "type": "SI.Time", "default": "0.1 \"Start time\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}))", "connect(sineVoltage.plug_p, idealCloser.plug_p) annotation (Line(points=\r\n         {{0,50},{0,48},{0,46},{0,40}}, color={0,0,255}))", "connect(booleanStep.y, idealCloser.control) annotation (Line(points={{-59,40},{-20,40},{-20,30},{-12,30}},\r\n                                          color={255,0,255}))", "connect(idealCloser.plug_n, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,20},{0,17},{0,10}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20},{0,-20},{0,-10}},\r\n      color={0,0,255}))", "connect(loadInertia.flange_b, quadraticLoadTorque.flange) annotation (\r\n      Line(\r\n      points={{60,-40},{70,-40}}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 80, "end_line": 105, "start_col": 1, "end_col": 35}}, {"equations": ["connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}))", "connect(sineVoltage.plug_p, idealCloser.plug_p) annotation (Line(points=\r\n         {{0,50},{0,48},{0,46},{0,40}}, color={0,0,255}))", "connect(booleanStep.y, idealCloser.control) annotation (Line(points={{-59,40},{-20,40},{-20,30},{-12,30}},\r\n                                          color={255,0,255}))", "connect(idealCloser.plug_n, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,20},{0,17},{0,10}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20},{0,-20},{0,-10}},\r\n      color={0,0,255}))", "connect(loadInertia.flange_b, quadraticLoadTorque.flange) annotation (\r\n      Line(\r\n      points={{60,-40},{70,-40}}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 81, "end_line": 105, "start_col": 3, "end_col": 35}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 80, "end_line": 80, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.is = zeros(3)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 77, "end_line": 79, "start_col": 1, "end_col": 22}}, {"equations": ["aimc.is = zeros(3)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 78, "end_line": 79, "start_col": 3, "end_col": 22}}, {"equations": ["aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 79, "end_line": 79, "start_col": 3, "end_col": 21}}, {"equations": ["aimc.is = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 78, "end_line": 78, "start_col": 3, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 77, "end_line": 77, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 10 | params: VNominal, fNominal, tStart1 | units: m | eq: equation connect(star.pin_n, gro", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo", "start_line": 2, "end_line": 120, "start_col": 1, "end_col": 12}, "code_text": "model IMC_DOL\r\n  \"Test example: InductionMachineSquirrelCage direct-on-line\"\r\n  extends Modelica.Icons.Example;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.Voltage VNominal=100\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.Time tStart1=0.1 \"Start time\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.AngularVelocity wLoad(displayUnit=\"rev/min\")=\r\n       1440.45*2*Modelica.Constants.pi/60 \"Nominal load speed\";\r\n  parameter SI.Inertia JLoad=0.29\r\n    \"Load's moment of inertia\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(extent={{-10,10},{10,-10}}, rotation=270)));\r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) annotation (Placement(transformation(\r\n        origin={0,60},\r\n        extent={{10,-10},{-10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(extent={{-50,80},{-70,100}})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={-90,90},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Blocks.Sources.BooleanStep booleanStep[m](each startTime=\r\n        tStart1) annotation (Placement(transformation(extent={{-80,30},{-60,\r\n            50}})));\r\n  Modelica.Electrical.Polyphase.Ideal.IdealClosingSwitch idealCloser(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(1e-5, m)) annotation (Placement(transformation(\r\n        origin={0,30},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{40,-50},{60,-30}})));\r\n  Modelica.Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque\r\n    quadraticLoadTorque(\r\n    w_nominal=wLoad,\r\n    TorqueDirection=false,\r\n    tau_nominal=-TLoad,\r\n    useSupport=false) annotation (Placement(transformation(extent={{90,-50},\r\n            {70,-30}})));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    annotation (Placement(transformation(extent={{-20,-34},{0,-14}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\ninitial equation\r\n  aimc.is = zeros(3);\r\n  aimc.ir = zeros(2);\r\nequation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{0,70},{0,90},{-50,90}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_p, idealCloser.plug_p) annotation (Line(points=\r\n         {{0,50},{0,48},{0,46},{0,40}}, color={0,0,255}));\r\n  connect(booleanStep.y, idealCloser.control) annotation (Line(points={{-59,40},{-20,40},{-20,30},{-12,30}},\r\n                                          color={255,0,255}));\r\n  connect(idealCloser.plug_n, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,20},{0,17},{0,10}}, color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20},{0,-20},{0,-10}},\r\n      color={0,0,255}));\r\n  connect(loadInertia.flange_b, quadraticLoadTorque.flange) annotation (\r\n      Line(\r\n      points={{60,-40},{70,-40}}));\r\n  connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}));\r\n  annotation (experiment(StopTime=1.5, Interval=1E-4, Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>At start time tStart three-phase voltage is supplied to the induction machine with squirrel cage;\r\nthe machine starts from standstill, accelerating inertias against load torque quadratic dependent on speed,\r\nfinally reaching nominal speed.</p>\r\n\r\n<p>Simulate for 1.5 seconds and plot (versus time):</p>\r\n<ul>\r\n<li>currentQuasiRMSSensor.I: stator current RMS</li>\r\n<li>aimc.wMechanical: motor's speed</li>\r\n<li>aimc.tauElectrical: motor's torque</li>\r\n</ul>\r\n<p>Default machine parameters are used.</p>\r\n</html>\"));\r\nend IMC_DOL", "checksum": "0b6a6e6c8f52a10b90faec6f3c2b8cb9b659696e", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_DOL.mo:2-120", "component_count": 1, "connection_count": 10, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 5, "equation_count": 8, "dependency_count": 25, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 42.5, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star.pin_n, ground.p) annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "search_keywords": ["Integer", "basic", "mechanical"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "sineVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "sineVoltage.plug_p", "to_connector": "idealCloser.plug_p", "condition": null}, {"from_connector": "booleanStep.y", "to_connector": "idealCloser.control", "condition": null}, {"from_connector": "idealCloser.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "terminalBox.plugSupply", "to_connector": "currentQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "loadInertia.flange_b", "to_connector": "quadraticLoadTorque.flange", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "loadInertia.flange_a", "condition": null}], "variables": [{"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Modelica.Blocks.Sources.BooleanStep booleanStep[m](each startTime=\r\n        tStart1) \r\n  Modelica.Electrical.Polyphase.Ideal.IdealClosingSwitch idealCloser(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(1e-5, m)) \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Modelica.Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque\r\n    quadraticLoadTorque(\r\n    w_nominal=wLoad,\r\n    TorqueDirection=false,\r\n    tau_nominal=-TLoad,\r\n    useSupport=false) \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    \r\ninitial equation\r\n  aimc.is = zeros(3)", "comment": null}], "physical_quantities": [{"name": "K", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Ideal", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Sources", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "booleanStep", "currentQuasiRMSSensor", "ground", "idealCloser", "loadInertia", "quadraticLoadTorque", "sineVoltage", "star", "terminalBox"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_Inverter", "kind": "model", "name": "IMC_Inverter", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "f", "type": "SI.Frequency", "default": "50 \"Actual frequency\"", "description": null}, {"name": "tRamp", "type": "SI.Time", "default": "1 \"Frequency ramp\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "tStep", "type": "SI.Time", "default": "1.2 \"Time of load torque step\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(signalVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{30,40},{30,50}},        color={0,0,255}))", "connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{30,70},{30,80}},   color={0,0,255}))", "connect(ramp.y, vfController.u)\r\n    annotation (Line(points={{-79,30},{-72,30}}, color={0,0,255}))", "connect(vfController.y, signalVoltage.v)\r\n    annotation (Line(points={{-49,30},{18,30}}, color={0,0,255}))", "connect(loadTorqueStep.flange, loadInertia.flange_b)\r\n    annotation (Line(points={{70,-40},{60,-40}}))", "connect(signalVoltage.plug_p, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{30,20},{30,10},{-10,10},{-10,0}},\r\n                                                    color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 79, "end_line": 104, "start_col": 1, "end_col": 35}}, {"equations": ["connect(signalVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{30,40},{30,50}},        color={0,0,255}))", "connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{30,70},{30,80}},   color={0,0,255}))", "connect(ramp.y, vfController.u)\r\n    annotation (Line(points={{-79,30},{-72,30}}, color={0,0,255}))", "connect(vfController.y, signalVoltage.v)\r\n    annotation (Line(points={{-49,30},{18,30}}, color={0,0,255}))", "connect(loadTorqueStep.flange, loadInertia.flange_b)\r\n    annotation (Line(points={{70,-40},{60,-40}}))", "connect(signalVoltage.plug_p, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{30,20},{30,10},{-10,10},{-10,0}},\r\n                                                    color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 80, "end_line": 104, "start_col": 3, "end_col": 35}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 79, "end_line": 79, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.is[1:2] = zeros(2)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 76, "end_line": 78, "start_col": 1, "end_col": 22}}, {"equations": ["aimc.is[1:2] = zeros(2)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 77, "end_line": 78, "start_col": 3, "end_col": 22}}, {"equations": ["aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 78, "end_line": 78, "start_col": 3, "end_col": 21}}, {"equations": ["aimc.is[1:2] = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 77, "end_line": 77, "start_col": 3, "end_col": 26}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 76, "end_line": 76, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 10 | params: VNominal, fNominal, f | units: 1:2 | eq: equation connect(signalVoltage.plug_", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo", "start_line": 2, "end_line": 122, "start_col": 1, "end_col": 17}, "code_text": "model IMC_Inverter\r\n  \"Test example: InductionMachineSquirrelCage with inverter\"\r\n  extends Modelica.Icons.Example;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.Voltage VNominal=100\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.Frequency f=50 \"Actual frequency\";\r\n  parameter SI.Time tRamp=1 \"Frequency ramp\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.Time tStep=1.2 \"Time of load torque step\";\r\n  parameter SI.Inertia JLoad=0.29\r\n    \"Load's moment of inertia\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270,\r\n        origin={-10,-10})));\r\n  Modelica.Blocks.Sources.Ramp ramp(height=f, duration=tRamp) annotation (\r\n     Placement(transformation(extent={{-100,20},{-80,40}})));\r\n  Machines.Utilities.VfController vfController(\r\n    final m=m,\r\n    VNominal=VNominal,\r\n    fNominal=fNominal)\r\n    annotation (Placement(transformation(extent={{-70,20},{-50,40}})));\r\n  Modelica.Electrical.Polyphase.Sources.SignalVoltage signalVoltage(\r\n      final m=m) annotation (Placement(transformation(\r\n        origin={30,30},\r\n        extent={{10,10},{-10,-10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(extent={{10,-10},{-10,10}},\r\n        rotation=270,\r\n        origin={30,60})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={30,90},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=180)));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{40,-50},{60,-30}})));\r\n  Modelica.Mechanics.Rotational.Sources.TorqueStep loadTorqueStep(\r\n    startTime=tStep,\r\n    stepTorque=-TLoad,\r\n    useSupport=false,\r\n    offsetTorque=0) annotation (Placement(transformation(extent={{90,-50},\r\n            {70,-30}})));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"Y\")\r\n    annotation (Placement(transformation(extent={{-20,-34},{0,-14}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\ninitial equation\r\n  aimc.is[1:2] = zeros(2);\r\n  aimc.ir = zeros(2);\r\nequation\r\n  connect(signalVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{30,40},{30,50}},        color={0,0,255}));\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{30,70},{30,80}},   color={0,0,255}));\r\n  connect(ramp.y, vfController.u)\r\n    annotation (Line(points={{-79,30},{-72,30}}, color={0,0,255}));\r\n  connect(vfController.y, signalVoltage.v)\r\n    annotation (Line(points={{-49,30},{18,30}}, color={0,0,255}));\r\n  connect(loadTorqueStep.flange, loadInertia.flange_b)\r\n    annotation (Line(points={{70,-40},{60,-40}}));\r\n  connect(signalVoltage.plug_p, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{30,20},{30,10},{-10,10},{-10,0}},\r\n                                                    color={0,0,255}));\r\n  connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-20}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}));\r\n  connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}));\r\n  annotation (experiment(StopTime=1.5, Interval=1E-4, Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>\r\nAn ideal frequency inverter is modeled by using a VfController and a three-phase SignalVoltage.\r\nFrequency is raised by a ramp, causing the induction machine with squirrel cage to start,\r\nand accelerating inertias.<br>At time tStep a load step is applied.</p>\r\n\r\n<p>Simulate for 1.5 seconds and plot (versus time):</p>\r\n\r\n<ul>\r\n<li>currentQuasiRMSSensor.I: stator current RMS</li>\r\n<li>aimc.wMechanical: motor's speed</li>\r\n<li>aimc.tauElectrical: motor's torque</li>\r\n</ul>\r\n\r\n<p>Default machine parameters are used.</p>\r\n</html>\"));\r\nend IMC_Inverter", "checksum": "9d75ecb809e1e952323bb6b25b0cdef949ff7ddf", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Inverter.mo:2-122", "component_count": 1, "connection_count": 10, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 7, "equation_count": 8, "dependency_count": 23, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 43.5, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(signalVoltage.plug_n, star.plug_p) annotation (Line(points={{30,40},{30,50}}, color={0,0,255}))", "search_keywords": ["1:2", "Integer", "basic"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "signalVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "ramp.y", "to_connector": "vfController.u", "condition": null}, {"from_connector": "vfController.y", "to_connector": "signalVoltage.v", "condition": null}, {"from_connector": "loadTorqueStep.flange", "to_connector": "loadInertia.flange_b", "condition": null}, {"from_connector": "signalVoltage.plug_p", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "terminalBox.plugSupply", "to_connector": "currentQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "loadInertia.flange_a", "condition": null}], "variables": [{"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Modelica.Blocks.Sources.Ramp ramp(height=f, duration=tRamp) \r\n  Machines.Utilities.VfController vfController(\r\n    final m=m,\r\n    VNominal=VNominal,\r\n    fNominal=fNominal)\r\n    \r\n  Modelica.Electrical.Polyphase.Sources.SignalVoltage signalVoltage(\r\n      final m=m) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Modelica.Mechanics.Rotational.Sources.TorqueStep loadTorqueStep(\r\n    startTime=tStep,\r\n    stepTorque=-TLoad,\r\n    useSupport=false,\r\n    offsetTorque=0) \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"Y\")\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    \r\ninitial equation\r\n  aimc.is[1:2] = zeros(2)", "comment": null}], "physical_quantities": [{"name": "data", "unit": "1:2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Modelica.Blocks.Sources", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Sources", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "currentQuasiRMSSensor", "ground", "loadInertia", "loadTorqueStep", "ramp", "signalVoltage", "star", "terminalBox", "vfController"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_InverterDrive", "kind": "model", "name": "IMC_InverterDrive", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": ["Modelica.Constants.pi", "Modelica.Electrical.Polyphase.Functions.factorY2DC"], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "400 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "RGrid", "type": "SI.Resistance", "default": "10e-3 \"Grid choke resistance\"", "description": null}, {"name": "LGrid", "type": "SI.Inductance", "default": "500e-6 \"Grid choke inductance\"", "description": null}, {"name": "VDC", "type": "SI.Voltage", "default": "factorY2DC(m)*VNominal/sqrt(3) \"Theoretical DC voltage\"", "description": null}, {"name": "CDC", "type": "SI.Capacitance", "default": "5e-3 \"DC capacitor\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "wLoad", "type": "SI.AngularVelocity", "default": "1440.45*2*pi/60 \"Nominal load speed\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(loadTorque.flange, loadInertia.flange_b)\r\n    annotation (Line(points={{80,-30},{70,-30}}))", "connect(terminalBox.plugSupply, machineCurrent.plug_n)\r\n    annotation (Line(points={{30,-18},{30,-10}},\r\n                                               color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{24,-20},{24,-20}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{36,-20},{36,-20}},\r\n      color={0,0,255}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{40,-30},{50,-30}}))", "connect(vfController.u, ramp.y)\r\n    annotation (Line(points={{0,-32},{0,-50},{-9,-50}},\r\n                                               color={0,0,127}))", "connect(toSpacePhasor.u, vfController.y)\r\n    annotation (Line(points={{0,-2},{0,-9}},   color={0,0,127}))", "connect(pwm.u, toSpacePhasor.y)\r\n    annotation (Line(points={{0,28},{0,21}},   color={0,0,127}))", "connect(inverter.fire_p, pwm.fire_p)\r\n    annotation (Line(points={{-6,58},{-6,51}}, color={255,0,255}))", "connect(inverter.fire_n, pwm.fire_n)\r\n    annotation (Line(points={{6,58},{6,51}}, color={255,0,255}))", "connect(inverter.ac, machineCurrent.plug_p)\r\n    annotation (Line(points={{10,70},{30,70},{30,10}}, color={0,0,255}))", "connect(capacitor.p, inverter.dc_p) annotation (Line(points={{-30,80},{-20,80},\r\n          {-20,76},{-10,76}}, color={0,0,255}))", "connect(capacitor.n, inverter.dc_n) annotation (Line(points={{-30,60},{-20,60},\r\n          {-20,64},{-10,64}}, color={0,0,255}))", "connect(rectifier.dc_p, capacitor.p) annotation (Line(points={{-48,76},{-40,76},\r\n          {-40,80},{-30,80}}, color={0,0,255}))", "connect(rectifier.dc_n, capacitor.n) annotation (Line(points={{-48,64},{-40,64},\r\n          {-40,60},{-30,60}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-80,-40},{-80,-50}},   color={0,0,255}))", "connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-80,-70},{-80,-80}}, color={0,0,255}))", "connect(resistor.plug_n, inductor.plug_p)\r\n    annotation (Line(points={{-80,40},{-80,50}},   color={0,0,255}))", "connect(inductor.plug_n, rectifier.ac)\r\n    annotation (Line(points={{-80,70},{-68,70}},  color={0,0,255}))", "connect(resistor.plug_p, gridCurrent.plug_p)\r\n    annotation (Line(points={{-80,20},{-80,10}}, color={0,0,255}))", "connect(gridCurrent.plug_n, sineVoltage.plug_p)\r\n    annotation (Line(points={{-80,-10},{-80,-20}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 144, "end_line": 190, "start_col": 1, "end_col": 70}}, {"equations": ["connect(loadTorque.flange, loadInertia.flange_b)\r\n    annotation (Line(points={{80,-30},{70,-30}}))", "connect(terminalBox.plugSupply, machineCurrent.plug_n)\r\n    annotation (Line(points={{30,-18},{30,-10}},\r\n                                               color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{24,-20},{24,-20}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{36,-20},{36,-20}},\r\n      color={0,0,255}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{40,-30},{50,-30}}))", "connect(vfController.u, ramp.y)\r\n    annotation (Line(points={{0,-32},{0,-50},{-9,-50}},\r\n                                               color={0,0,127}))", "connect(toSpacePhasor.u, vfController.y)\r\n    annotation (Line(points={{0,-2},{0,-9}},   color={0,0,127}))", "connect(pwm.u, toSpacePhasor.y)\r\n    annotation (Line(points={{0,28},{0,21}},   color={0,0,127}))", "connect(inverter.fire_p, pwm.fire_p)\r\n    annotation (Line(points={{-6,58},{-6,51}}, color={255,0,255}))", "connect(inverter.fire_n, pwm.fire_n)\r\n    annotation (Line(points={{6,58},{6,51}}, color={255,0,255}))", "connect(inverter.ac, machineCurrent.plug_p)\r\n    annotation (Line(points={{10,70},{30,70},{30,10}}, color={0,0,255}))", "connect(capacitor.p, inverter.dc_p) annotation (Line(points={{-30,80},{-20,80},\r\n          {-20,76},{-10,76}}, color={0,0,255}))", "connect(capacitor.n, inverter.dc_n) annotation (Line(points={{-30,60},{-20,60},\r\n          {-20,64},{-10,64}}, color={0,0,255}))", "connect(rectifier.dc_p, capacitor.p) annotation (Line(points={{-48,76},{-40,76},\r\n          {-40,80},{-30,80}}, color={0,0,255}))", "connect(rectifier.dc_n, capacitor.n) annotation (Line(points={{-48,64},{-40,64},\r\n          {-40,60},{-30,60}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-80,-40},{-80,-50}},   color={0,0,255}))", "connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-80,-70},{-80,-80}}, color={0,0,255}))", "connect(resistor.plug_n, inductor.plug_p)\r\n    annotation (Line(points={{-80,40},{-80,50}},   color={0,0,255}))", "connect(inductor.plug_n, rectifier.ac)\r\n    annotation (Line(points={{-80,70},{-68,70}},  color={0,0,255}))", "connect(resistor.plug_p, gridCurrent.plug_p)\r\n    annotation (Line(points={{-80,20},{-80,10}}, color={0,0,255}))", "connect(gridCurrent.plug_n, sineVoltage.plug_p)\r\n    annotation (Line(points={{-80,-10},{-80,-20}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 145, "end_line": 190, "start_col": 3, "end_col": 70}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 144, "end_line": 144, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  inductor.i[1:2] = zeros(2)", "aimc.is[1:3] = zeros(3)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 140, "end_line": 143, "start_col": 1, "end_col": 22}}, {"equations": ["inductor.i[1:2] = zeros(2)", "aimc.is[1:3] = zeros(3)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 141, "end_line": 143, "start_col": 3, "end_col": 22}}, {"equations": ["aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 143, "end_line": 143, "start_col": 3, "end_col": 21}}, {"equations": ["aimc.is[1:3] = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 142, "end_line": 142, "start_col": 3, "end_col": 26}}, {"equations": ["inductor.i[1:2] = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 141, "end_line": 141, "start_col": 3, "end_col": 29}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 140, "end_line": 140, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 21 | params: VNominal, fNominal, RGrid | units: 1:3 | eq: equation connect(loadTorque.flan", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo", "start_line": 2, "end_line": 214, "start_col": 1, "end_col": 22}, "code_text": "model IMC_InverterDrive\r\n  \"Test example: InductionMachineSquirrelCage inverter drive\"\r\n  extends Modelica.Icons.Example;\r\n  import Modelica.Constants.pi;\r\n  import Modelica.Electrical.Polyphase.Functions.factorY2DC;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.Voltage VNominal=400\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.Resistance RGrid=10e-3 \"Grid choke resistance\";\r\n  parameter SI.Inductance LGrid=500e-6 \"Grid choke inductance\";\r\n  parameter SI.Voltage VDC=factorY2DC(m)*VNominal/sqrt(3) \"Theoretical DC voltage\";\r\n  parameter SI.Capacitance CDC=5e-3 \"DC capacitor\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.AngularVelocity wLoad=1440.45*2*pi/60 \"Nominal load speed\";\r\n  parameter SI.Inertia JLoad=0.29 \"Load's moment of inertia\";\r\n  Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    final phase=-Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m),\r\n    final f=fill(fNominal, m),\r\n    final offset=zeros(m),\r\n    final startTime=zeros(m),\r\n    final V=fill(VNominal*sqrt(2/3), m))\r\n  annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-80,-30})));\r\n  Polyphase.Basic.Star star(m=m) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-80,-60})));\r\n  Analog.Basic.Ground ground annotation (Placement(transformation(\r\n        origin={-80,-90},\r\n        extent={{-10,-10},{10,10}})));\r\n  Sensors.CurrentQuasiRMSSensor gridCurrent\r\n   annotation (Placement(\r\n        transformation(\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270,\r\n        origin={-80,0})));\r\n  Polyphase.Basic.Resistor resistor(\r\n    final m=m,\r\n    final R=fill(RGrid, m),\r\n    final T_ref=fill(20, m),\r\n    final alpha=zeros(m),\r\n    final T=fill(20, m))   annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={-80,30})));\r\n  Polyphase.Basic.Inductor inductor(m=m, final L=fill(LGrid, m))\r\n  annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={-80,60})));\r\n\r\n  PowerConverters.ACDC.DiodeBridge2mPulse rectifier(RonDiode=1e-4, GoffDiode=\r\n        1e-4)\r\n    annotation (Placement(transformation(extent={{-68,60},{-48,80}})));\r\n  Analog.Basic.Capacitor capacitor(v(fixed=true, start=VDC), C=CDC)\r\n    annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-30,70})));\r\n  PowerConverters.DCAC.Polyphase2Level inverter(\r\n    RonTransistor=1e-4,\r\n    GoffTransistor=1e-4,\r\n    RonDiode=1e-4,\r\n    GoffDiode=1e-4)                             annotation (Placement(\r\n        transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        origin={0,70})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor machineCurrent annotation (Placement(\r\n        transformation(\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270,\r\n        origin={30,0})));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    annotation (Placement(transformation(extent={{20,-24},{40,-4}})));\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{20,-40},{40,-20}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData(\r\n    Rs=0.03*16,\r\n    Rr=0.04*16,\r\n    Lssigma=3*(1 - sqrt(1 - 0.0667))/(2*pi*aimcData.fsNominal)*16,\r\n    Lm=3*sqrt(1 - 0.0667)/(2*pi*aimcData.fsNominal)*16,\r\n    Lrsigma=3*(1 - sqrt(1 - 0.0667))/(2*pi*aimcData.fsNominal)*16) \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{20,-70},{40,-50}})));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{50,-40},{70,-20}})));\r\n  Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque loadTorque(\r\n    useSupport=false, tau_nominal=-TLoad,\r\n    TorqueDirection=false,\r\n    w_nominal=wLoad)\r\n    annotation (Placement(transformation(extent={{100,-40},{80,-20}})));\r\n  Modelica.Blocks.Sources.Ramp ramp(height=fNominal,\r\n    startTime=0,\r\n    duration=1.2)\r\n    annotation (\r\n     Placement(transformation(extent={{-10,-10},{10,10}},\r\n        origin={-20,-50})));\r\n  Machines.Utilities.VfController vfController(\r\n    final m=m,\r\n    VNominal=VNominal,\r\n    fNominal=fNominal,\r\n    EconomyMode=true) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={0,-20})));\r\n\r\n  SpacePhasors.Blocks.ToSpacePhasor toSpacePhasor\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={0,10})));\r\n  PowerConverters.DCAC.Control.PWM pwm(uMax=VDC, f=2000)\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={0,40})));\r\ninitial equation\r\n  inductor.i[1:2] = zeros(2);\r\n  aimc.is[1:3] = zeros(3);\r\n  aimc.ir = zeros(2);\r\nequation\r\n  connect(loadTorque.flange, loadInertia.flange_b)\r\n    annotation (Line(points={{80,-30},{70,-30}}));\r\n  connect(terminalBox.plugSupply, machineCurrent.plug_n)\r\n    annotation (Line(points={{30,-18},{30,-10}},\r\n                                               color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{24,-20},{24,-20}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{36,-20},{36,-20}},\r\n      color={0,0,255}));\r\n  connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{40,-30},{50,-30}}));\r\n  connect(vfController.u, ramp.y)\r\n    annotation (Line(points={{0,-32},{0,-50},{-9,-50}},\r\n                                               color={0,0,127}));\r\n  connect(toSpacePhasor.u, vfController.y)\r\n    annotation (Line(points={{0,-2},{0,-9}},   color={0,0,127}));\r\n  connect(pwm.u, toSpacePhasor.y)\r\n    annotation (Line(points={{0,28},{0,21}},   color={0,0,127}));\r\n  connect(inverter.fire_p, pwm.fire_p)\r\n    annotation (Line(points={{-6,58},{-6,51}}, color={255,0,255}));\r\n  connect(inverter.fire_n, pwm.fire_n)\r\n    annotation (Line(points={{6,58},{6,51}}, color={255,0,255}));\r\n  connect(inverter.ac, machineCurrent.plug_p)\r\n    annotation (Line(points={{10,70},{30,70},{30,10}}, color={0,0,255}));\r\n  connect(capacitor.p, inverter.dc_p) annotation (Line(points={{-30,80},{-20,80},\r\n          {-20,76},{-10,76}}, color={0,0,255}));\r\n  connect(capacitor.n, inverter.dc_n) annotation (Line(points={{-30,60},{-20,60},\r\n          {-20,64},{-10,64}}, color={0,0,255}));\r\n  connect(rectifier.dc_p, capacitor.p) annotation (Line(points={{-48,76},{-40,76},\r\n          {-40,80},{-30,80}}, color={0,0,255}));\r\n  connect(rectifier.dc_n, capacitor.n) annotation (Line(points={{-48,64},{-40,64},\r\n          {-40,60},{-30,60}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-80,-40},{-80,-50}},   color={0,0,255}));\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-80,-70},{-80,-80}}, color={0,0,255}));\r\n  connect(resistor.plug_n, inductor.plug_p)\r\n    annotation (Line(points={{-80,40},{-80,50}},   color={0,0,255}));\r\n  connect(inductor.plug_n, rectifier.ac)\r\n    annotation (Line(points={{-80,70},{-68,70}},  color={0,0,255}));\r\n  connect(resistor.plug_p, gridCurrent.plug_p)\r\n    annotation (Line(points={{-80,20},{-80,10}}, color={0,0,255}));\r\n  connect(gridCurrent.plug_n, sineVoltage.plug_p)\r\n    annotation (Line(points={{-80,-10},{-80,-20}}, color={0,0,255}));\r\n  annotation (experiment(\r\n      StopTime=1.5,\r\n      Interval=5e-05,\r\n      Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>\r\nThis is a model of a complete inverter drive comprising:\r\n</p>\r\n<ul>\r\n<li>a grid model and a line choke</li>\r\n<li><a href=\\\"modelica://Modelica.Electrical.PowerConverters.ACDC.DiodeBridge2mPulse\\\">a diode rectifier</a></li>\r\n<li>a buffer capacitor</li>\r\n<li><a href=\\\"modelica://Modelica.Electrical.PowerConverters.DCAC.Polyphase2Level\\\">a switching inverter</a></li>\r\n<li><a href=\\\"modelica://Modelica.Electrical.PowerConverters.DCAC.Control.PWM\\\">a pulse width modulation</a></li>\r\n<li><a href=\\\"modelica://Modelica.Electrical.Machines.Utilities.VfController\\\">a voltage/frequency characteristic</a></li>\r\n<li>the reference frequency ramped up</li>\r\n<li>an induction machine with squirrel cage</li>\r\n<li>a load inertia and quadratic speed dependent load torque (like a fan or pump)</li>\r\n</ul>\r\n<p>Please note: Be patient, two switching devices cause many event iterations which cost performance.</p>\r\n<p>Note that due to the voltage drop the voltage at the machine can't reach the full voltage which means torque reduction.</p>\r\n<p>Default machine parameters are adapted to nominal phase voltage 400 V and nominal phase current 25 A.</p>\r\n</html>\"));\r\nend IMC_InverterDrive", "checksum": "b0aaaa9b71551bfd69af9ebaba202cc0c60a558d", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_InverterDrive.mo:2-214", "component_count": 1, "connection_count": 21, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 9, "equation_count": 9, "dependency_count": 44, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 78.5, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(loadTorque.flange, loadInertia.flange_b) annotation (Line(points={{80,-30},{70,-30}}))", "search_keywords": ["1:3", "Integer", "basic"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "loadTorque.flange", "to_connector": "loadInertia.flange_b", "condition": null}, {"from_connector": "terminalBox.plugSupply", "to_connector": "machineCurrent.plug_n", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "loadInertia.flange_a", "condition": null}, {"from_connector": "vfController.u", "to_connector": "ramp.y", "condition": null}, {"from_connector": "toSpacePhasor.u", "to_connector": "vfController.y", "condition": null}, {"from_connector": "pwm.u", "to_connector": "toSpacePhasor.y", "condition": null}, {"from_connector": "inverter.fire_p", "to_connector": "pwm.fire_p", "condition": null}, {"from_connector": "inverter.fire_n", "to_connector": "pwm.fire_n", "condition": null}, {"from_connector": "inverter.ac", "to_connector": "machineCurrent.plug_p", "condition": null}, {"from_connector": "capacitor.p", "to_connector": "inverter.dc_p", "condition": null}, {"from_connector": "capacitor.n", "to_connector": "inverter.dc_n", "condition": null}, {"from_connector": "rectifier.dc_p", "to_connector": "capacitor.p", "condition": null}, {"from_connector": "rectifier.dc_n", "to_connector": "capacitor.n", "condition": null}, {"from_connector": "sineVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "resistor.plug_n", "to_connector": "inductor.plug_p", "condition": null}, {"from_connector": "inductor.plug_n", "to_connector": "rectifier.ac", "condition": null}, {"from_connector": "resistor.plug_p", "to_connector": "gridCurrent.plug_p", "condition": null}, {"from_connector": "gridCurrent.plug_n", "to_connector": "sineVoltage.plug_p", "condition": null}], "variables": [{"name": "m", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "m,\r\n    final phase=-Modelica.Electrical.Polyphase.Functions.symmetricOrientation(m),\r\n    final f=fill(fNominal, m),\r\n    final offset=zeros(m),\r\n    final startTime=zeros(m),\r\n    final V=fill(VNominal*sqrt(2/3), m))\r\n  \r\n  Polyphase.Basic.Star star(m=m) \r\n  Analog.Basic.Ground ground \r\n  Sensors.CurrentQuasiRMSSensor gridCurrent\r\n   \r\n  Polyphase.Basic.Resistor resistor(\r\n    final m=m,\r\n    final R=fill(RGrid, m),\r\n    final T_ref=fill(20, m),\r\n    final alpha=zeros(m),\r\n    final T=fill(20, m))   \r\n  Polyphase.Basic.Inductor inductor(m=m, final L=fill(LGrid, m))\r\n  \r\n\r\n  PowerConverters.ACDC.DiodeBridge2mPulse rectifier(RonDiode=1e-4, GoffDiode=\r\n        1e-4)\r\n    \r\n  Analog.Basic.Capacitor capacitor(v(fixed=true, start=VDC), C=CDC)\r\n    \r\n  PowerConverters.DCAC.Polyphase2Level inverter(\r\n    RonTransistor=1e-4,\r\n    GoffTransistor=1e-4,\r\n    RonDiode=1e-4,\r\n    GoffDiode=1e-4)                             \r\n  Machines.Sensors.CurrentQuasiRMSSensor machineCurrent \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    \r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData(\r\n    Rs=0.03*16,\r\n    Rr=0.04*16,\r\n    Lssigma=3*(1 - sqrt(1 - 0.0667))/(2*pi*aimcData.fsNominal)*16,\r\n    Lm=3*sqrt(1 - 0.0667)/(2*pi*aimcData.fsNominal)*16,\r\n    Lrsigma=3*(1 - sqrt(1 - 0.0667))/(2*pi*aimcData.fsNominal)*16) \"Induction machine data\"\r\n    \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque loadTorque(\r\n    useSupport=false, tau_nominal=-TLoad,\r\n    TorqueDirection=false,\r\n    w_nominal=wLoad)\r\n    \r\n  Modelica.Blocks.Sources.Ramp ramp(height=fNominal,\r\n    startTime=0,\r\n    duration=1.2)\r\n    \r\n  Machines.Utilities.VfController vfController(\r\n    final m=m,\r\n    VNominal=VNominal,\r\n    fNominal=fNominal,\r\n    EconomyMode=true) \r\n\r\n  SpacePhasors.Blocks.ToSpacePhasor toSpacePhasor\r\n    \r\n  PowerConverters.DCAC.Control.PWM pwm(uMax=VDC, f=2000)\r\n    \r\ninitial equation\r\n  inductor.i[1:2] = zeros(2)", "comment": null}], "physical_quantities": [{"name": "data", "unit": "1:3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Analog.Basic", "Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Mechanics.Rotational.Sources", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Machines.Utilities", "Modelica.Electrical.Polyphase.Functions", "Modelica.Electrical.Polyphase.Functions.factorY2DC", "Modelica.Electrical.PowerConverters.ACDC", "Modelica.Electrical.PowerConverters.DCAC", "Modelica.Electrical.PowerConverters.DCAC.Control", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Polyphase.Basic", "Polyphase.Sources", "PowerConverters.ACDC", "PowerConverters.DCAC", "PowerConverters.DCAC.Control", "SI", "Sensors", "SpacePhasors.Blocks", "Utilities.ParameterRecords", "aimc", "aimcData", "capacitor", "gridCurrent", "ground", "inductor", "inverter", "loadInertia", "loadTorque", "machineCurrent", "pwm", "ramp", "rectifier", "resistor", "sineVoltage", "star", "terminalBox", "toSpacePhasor", "vfController"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_Transformer", "kind": "model", "name": "IMC_Transformer", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "tStart1", "type": "SI.Time", "default": "0.1 \"Start time\"", "description": null}, {"name": "tStart2", "type": "SI.Time", "default": "2.0 \"Start time of bypass transformer\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(loadInertia.flange_b, quadraticLoadTorque.flange) annotation (\r\n      Line(\r\n      points={{60,-40},{70,-40}}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))", "connect(star.plug_p, sineVoltage.plug_n) annotation (Line(\r\n      points={{-50,90},{-40,90}},\r\n      color={0,0,255}))", "connect(booleanStep2.y, idealCommutingSwitch.control) annotation (Line(\r\n      points={{-39,0},{-12,0}},color={255,0,255}))", "connect(transformer.starpoint2, ground2.p) annotation (Line(\r\n      points={{-30,25},{-30,20},{-40,20}},\r\n      color={0,0,255}))", "connect(idealCommutingSwitch.plug_p, terminalBox.plugSupply)\r\n    annotation (Line(\r\n      points={{0,-10},{-10,-10},{-10,-28}},\r\n      color={0,0,255}))", "connect(transformer.plug2, idealCommutingSwitch.plug_n1) annotation (\r\n      Line(\r\n      points={{-20,20},{-4,20},{-4,10}}, color={0,0,255}))", "connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-20,90},{0,90}},\r\n      color={0,0,255}))", "connect(booleanStep1.y, idealCloser.control) annotation (Line(\r\n      points={{-39,50},{-12,50}},color={255,0,255}))", "connect(currentQuasiRMSSensor.plug_n, idealCloser.plug_p) annotation (\r\n      Line(\r\n      points={{0,70},{0,60}},\r\n      color={0,0,255}))", "connect(transformer.plug1, idealCloser.plug_n) annotation (Line(\r\n      points={{-20,40},{0,40}},\r\n      color={0,0,255}))", "connect(idealCloser.plug_n, idealCommutingSwitch.plug_n2) annotation (\r\n      Line(\r\n      points={{0,40},{0,10}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 132, "end_line": 176, "start_col": 1, "end_col": 49}}, {"equations": ["connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(loadInertia.flange_b, quadraticLoadTorque.flange) annotation (\r\n      Line(\r\n      points={{60,-40},{70,-40}}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))", "connect(star.plug_p, sineVoltage.plug_n) annotation (Line(\r\n      points={{-50,90},{-40,90}},\r\n      color={0,0,255}))", "connect(booleanStep2.y, idealCommutingSwitch.control) annotation (Line(\r\n      points={{-39,0},{-12,0}},color={255,0,255}))", "connect(transformer.starpoint2, ground2.p) annotation (Line(\r\n      points={{-30,25},{-30,20},{-40,20}},\r\n      color={0,0,255}))", "connect(idealCommutingSwitch.plug_p, terminalBox.plugSupply)\r\n    annotation (Line(\r\n      points={{0,-10},{-10,-10},{-10,-28}},\r\n      color={0,0,255}))", "connect(transformer.plug2, idealCommutingSwitch.plug_n1) annotation (\r\n      Line(\r\n      points={{-20,20},{-4,20},{-4,10}}, color={0,0,255}))", "connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-20,90},{0,90}},\r\n      color={0,0,255}))", "connect(booleanStep1.y, idealCloser.control) annotation (Line(\r\n      points={{-39,50},{-12,50}},color={255,0,255}))", "connect(currentQuasiRMSSensor.plug_n, idealCloser.plug_p) annotation (\r\n      Line(\r\n      points={{0,70},{0,60}},\r\n      color={0,0,255}))", "connect(transformer.plug1, idealCloser.plug_n) annotation (Line(\r\n      points={{-20,40},{0,40}},\r\n      color={0,0,255}))", "connect(idealCloser.plug_n, idealCommutingSwitch.plug_n2) annotation (\r\n      Line(\r\n      points={{0,40},{0,10}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 133, "end_line": 176, "start_col": 3, "end_col": 49}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 132, "end_line": 132, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.is = zeros(3)", "aimc.ir = zeros(2)", "transformer.i1[1:2] = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 128, "end_line": 131, "start_col": 1, "end_col": 34}}, {"equations": ["aimc.is = zeros(3)", "aimc.ir = zeros(2)", "transformer.i1[1:2] = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 129, "end_line": 131, "start_col": 3, "end_col": 34}}, {"equations": ["transformer.i1[1:2] = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 131, "end_line": 131, "start_col": 3, "end_col": 33}}, {"equations": ["aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 130, "end_line": 130, "start_col": 3, "end_col": 21}}, {"equations": ["aimc.is = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 129, "end_line": 129, "start_col": 3, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 128, "end_line": 128, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 15 | params: VNominal, fNominal, tStart1 | units: m, m | eq: equation connect(star.pin_n, ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo", "start_line": 2, "end_line": 194, "start_col": 1, "end_col": 20}, "code_text": "model IMC_Transformer\r\n  \"Test example: InductionMachineSquirrelCage transformer starting\"\r\n  extends Modelica.Icons.Example;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.Voltage VNominal=100\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.Time tStart1=0.1 \"Start time\";\r\n  parameter SI.Time tStart2=2.0\r\n    \"Start time of bypass transformer\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.AngularVelocity wLoad(displayUnit=\"rev/min\")=\r\n       1440.45*2*Modelica.Constants.pi/60 \"Nominal load speed\";\r\n  parameter SI.Inertia JLoad=0.29\r\n    \"Load's moment of inertia\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(\r\n        origin={0,80},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) annotation (Placement(transformation(\r\n        origin={-30,90},\r\n        extent={{10,10},{-10,-10}})));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(extent={{-50,80},{-70,100}})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={-90,90},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Blocks.Sources.BooleanStep booleanStep1[m](each startTime=\r\n        tStart1) annotation (Placement(transformation(extent={{-60,40},{-40,\r\n            60}})));\r\n  Modelica.Electrical.Polyphase.Ideal.IdealClosingSwitch idealCloser(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(1e-5, m)) annotation (Placement(transformation(\r\n        origin={0,50},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Machines.BasicMachines.Transformers.Yy.Yy00 transformer(\r\n    n=transformerData.n,\r\n    R1=transformerData.R1,\r\n    L1sigma=transformerData.L1sigma,\r\n    R2=transformerData.R2,\r\n    L2sigma=transformerData.L2sigma,\r\n    T1Ref=293.15,\r\n    alpha20_1(displayUnit=\"1/K\") = Modelica.Electrical.Machines.Thermal.Constants.alpha20Zero,\r\n    T2Ref=293.15,\r\n    alpha20_2(displayUnit=\"1/K\") = Modelica.Electrical.Machines.Thermal.Constants.alpha20Zero,\r\n    T1Operational=293.15,\r\n    T2Operational=293.15) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-20,30})));\r\n\r\n  Modelica.Electrical.Analog.Basic.Ground ground2 annotation (Placement(\r\n        transformation(\r\n        origin={-50,20},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  parameter Machines.Utilities.TransformerData transformerData(\r\n    f=fNominal,\r\n    V1=VNominal,\r\n    C1=Modelica.Utilities.Strings.substring(\r\n        transformer.VectorGroup,\r\n        1,\r\n        1),\r\n    V2=VNominal/sqrt(3),\r\n    C2=Modelica.Utilities.Strings.substring(\r\n        transformer.VectorGroup,\r\n        2,\r\n        2),\r\n    SNominal=50E3,\r\n    v_sc=0.06,\r\n    P_sc=500) \"Transformer data\"\r\n    annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n  Modelica.Blocks.Sources.BooleanStep booleanStep2[m](each startTime=\r\n        tStart2) annotation (Placement(transformation(extent={{-60,-10},{\r\n            -40,10}})));\r\n  Modelica.Electrical.Polyphase.Ideal.IdealCommutingSwitch\r\n    idealCommutingSwitch(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(50E-5, m)) annotation (Placement(transformation(\r\n        extent={{10,10},{-10,-10}},\r\n        rotation=270)));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{40,-50},{60,-30}})));\r\n  Modelica.Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque\r\n    quadraticLoadTorque(\r\n    w_nominal=wLoad,\r\n    TorqueDirection=false,\r\n    tau_nominal=-TLoad,\r\n    useSupport=false) annotation (Placement(transformation(extent={{90,-50},\r\n            {70,-30}})));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    annotation (Placement(transformation(extent={{-20,-34},{0,-14}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\ninitial equation\r\n  aimc.is = zeros(3);\r\n  aimc.ir = zeros(2);\r\n  transformer.i1[1:2] = zeros(2);\r\nequation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}));\r\n  connect(loadInertia.flange_b, quadraticLoadTorque.flange) annotation (\r\n      Line(\r\n      points={{60,-40},{70,-40}}));\r\n  connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}));\r\n  connect(star.plug_p, sineVoltage.plug_n) annotation (Line(\r\n      points={{-50,90},{-40,90}},\r\n      color={0,0,255}));\r\n  connect(booleanStep2.y, idealCommutingSwitch.control) annotation (Line(\r\n      points={{-39,0},{-12,0}},color={255,0,255}));\r\n  connect(transformer.starpoint2, ground2.p) annotation (Line(\r\n      points={{-30,25},{-30,20},{-40,20}},\r\n      color={0,0,255}));\r\n  connect(idealCommutingSwitch.plug_p, terminalBox.plugSupply)\r\n    annotation (Line(\r\n      points={{0,-10},{-10,-10},{-10,-28}},\r\n      color={0,0,255}));\r\n  connect(transformer.plug2, idealCommutingSwitch.plug_n1) annotation (\r\n      Line(\r\n      points={{-20,20},{-4,20},{-4,10}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-20,90},{0,90}},\r\n      color={0,0,255}));\r\n  connect(booleanStep1.y, idealCloser.control) annotation (Line(\r\n      points={{-39,50},{-12,50}},color={255,0,255}));\r\n  connect(currentQuasiRMSSensor.plug_n, idealCloser.plug_p) annotation (\r\n      Line(\r\n      points={{0,70},{0,60}},\r\n      color={0,0,255}));\r\n  connect(transformer.plug1, idealCloser.plug_n) annotation (Line(\r\n      points={{-20,40},{0,40}},\r\n      color={0,0,255}));\r\n  connect(idealCloser.plug_n, idealCommutingSwitch.plug_n2) annotation (\r\n      Line(\r\n      points={{0,40},{0,10}}, color={0,0,255}));\r\n  annotation (experiment(StopTime=2.5, Interval=1E-4, Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>\r\nAt start time tStart1 three-phase voltage is supplied to the induction machine with squirrel cage via the transformer;\r\nthe machine starts from standstill, accelerating inertias against load torque quadratic dependent on speed;\r\nat start time tStart2 the machine is fed directly from the voltage source, finally reaching nominal speed.</p>\r\n\r\n<p>Simulate for 2.5 seconds and plot (versus time):</p>\r\n\r\n<ul>\r\n<li>currentQuasiRMSSensor.I: stator current RMS</li>\r\n<li>aimc.wMechanical: motor's speed</li>\r\n<li>aimc.tauElectrical: motor's torque</li>\r\n</ul>\r\n\r\n<p>Default machine parameters are used.</p>\r\n</html>\"));\r\nend IMC_Transformer", "checksum": "53f94377351146007bbef2112be72f924e3fbc5b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Transformer.mo:2-194", "component_count": 1, "connection_count": 15, "variable_count": 1, "physical_quantity_count": 2, "parameter_count": 6, "equation_count": 9, "dependency_count": 33, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 59.0, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star.pin_n, ground.p) annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "search_keywords": ["Integer", "basic", "mechanical"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "loadInertia.flange_b", "to_connector": "quadraticLoadTorque.flange", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "loadInertia.flange_a", "condition": null}, {"from_connector": "star.plug_p", "to_connector": "sineVoltage.plug_n", "condition": null}, {"from_connector": "booleanStep2.y", "to_connector": "idealCommutingSwitch.control", "condition": null}, {"from_connector": "transformer.starpoint2", "to_connector": "ground2.p", "condition": null}, {"from_connector": "idealCommutingSwitch.plug_p", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "transformer.plug2", "to_connector": "idealCommutingSwitch.plug_n1", "condition": null}, {"from_connector": "sineVoltage.plug_p", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "booleanStep1.y", "to_connector": "idealCloser.control", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "idealCloser.plug_p", "condition": null}, {"from_connector": "transformer.plug1", "to_connector": "idealCloser.plug_n", "condition": null}, {"from_connector": "idealCloser.plug_n", "to_connector": "idealCommutingSwitch.plug_n2", "condition": null}], "variables": [{"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Modelica.Blocks.Sources.BooleanStep booleanStep1[m](each startTime=\r\n        tStart1) \r\n  Modelica.Electrical.Polyphase.Ideal.IdealClosingSwitch idealCloser(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(1e-5, m)) \r\n  Machines.BasicMachines.Transformers.Yy.Yy00 transformer(\r\n    n=transformerData.n,\r\n    R1=transformerData.R1,\r\n    L1sigma=transformerData.L1sigma,\r\n    R2=transformerData.R2,\r\n    L2sigma=transformerData.L2sigma,\r\n    T1Ref=293.15,\r\n    alpha20_1(displayUnit=\"1/K\") = Modelica.Electrical.Machines.Thermal.Constants.alpha20Zero,\r\n    T2Ref=293.15,\r\n    alpha20_2(displayUnit=\"1/K\") = Modelica.Electrical.Machines.Thermal.Constants.alpha20Zero,\r\n    T1Operational=293.15,\r\n    T2Operational=293.15) \r\n\r\n  Modelica.Electrical.Analog.Basic.Ground ground2 \r\n  parameter Machines.Utilities.TransformerData transformerData(\r\n    f=fNominal,\r\n    V1=VNominal,\r\n    C1=Modelica.Utilities.Strings.substring(\r\n        transformer.VectorGroup,\r\n        1,\r\n        1),\r\n    V2=VNominal/sqrt(3),\r\n    C2=Modelica.Utilities.Strings.substring(\r\n        transformer.VectorGroup,\r\n        2,\r\n        2),\r\n    SNominal=50E3,\r\n    v_sc=0.06,\r\n    P_sc=500) \"Transformer data\"\r\n    \r\n  Modelica.Blocks.Sources.BooleanStep booleanStep2[m](each startTime=\r\n        tStart2) \r\n  Modelica.Electrical.Polyphase.Ideal.IdealCommutingSwitch\r\n    idealCommutingSwitch(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(50E-5, m)) \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Modelica.Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque\r\n    quadraticLoadTorque(\r\n    w_nominal=wLoad,\r\n    TorqueDirection=false,\r\n    tau_nominal=-TLoad,\r\n    useSupport=false) \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    \r\ninitial equation\r\n  aimc.is = zeros(3)", "comment": null}], "physical_quantities": [{"name": "K", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}, {"name": "data", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Machines.BasicMachines.InductionMachines", "Machines.BasicMachines.Transformers.Yy", "Machines.Sensors", "Machines.Utilities", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal.Constants", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Ideal", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Sources", "Modelica.Utilities.Strings", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "booleanStep1", "booleanStep2", "currentQuasiRMSSensor", "ground", "ground2", "idealCloser", "idealCommutingSwitch", "loadInertia", "quadraticLoadTorque", "sineVoltage", "star", "terminalBox", "transformer", "transformerData"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_withLosses", "kind": "model", "name": "IMC_withLosses", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": ["Modelica.Constants.pi", "Modelica.Units.Conversions.from_rpm", "Modelica.Units.Conversions.to_rpm", "Modelica.Units.Conversions.from_degC"], "parameters": [{"name": "PNominal", "type": "SI.Power", "default": "18500 \"Nominal output\"", "description": null}, {"name": "VNominal", "type": "SI.Voltage", "default": "400 \"Nominal RMS voltage\"", "description": null}, {"name": "INominal", "type": "SI.Current", "default": "32.85 \"Nominal RMS current\"", "description": null}, {"name": "pfNominal", "type": "Real", "default": "0.898 \"Nominal power factor\"", "description": null}, {"name": "PsNominal", "type": "SI.Power", "default": "sqrt(3)*VNominal*INominal*pfNominal \"Nominal stator power\"", "description": null}, {"name": "lossNominal", "type": "SI.Power", "default": "PsNominal-PNominal \"Nominal losses\"", "description": null}, {"name": "etaNominal", "type": "Real", "default": "0.9049 \"Nominal efficiency\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "wNominal", "type": "SI.AngularVelocity", "default": "from_rpm(1462.5) \"Nominal speed\"", "description": null}, {"name": "TNominal", "type": "SI.Torque", "default": "PNominal/wNominal \"Nominal torque\"", "description": null}, {"name": "TempNominal", "type": "SI.Temperature", "default": "from_degC(90) \"Nominal temperature\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,20},{-70,10}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-70,60},{-70,40}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-36,20},{-36,20}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-24,20},{-24,20}},\r\n      color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, electricalPowerSensor.plug_p)\r\n    annotation (Line(\r\n      points={{-30,60},{-30,57.5},{-30,57.5},{-30,55},{-30,50},{-30,50}},\r\n      color={0,0,255}))", "connect(electricalPowerSensor.plug_nv, star.plug_p) annotation (Line(\r\n      points={{-40,40},{-70,40}},\r\n      color={0,0,255}))", "connect(electricalPowerSensor.plug_ni, terminalBox.plugSupply)\r\n    annotation (Line(\r\n      points={{-30,30},{-30,22}},\r\n      color={0,0,255}))", "connect(aimc.flange, powerSensor.flange_a) annotation (Line(\r\n      points={{-20,10},{-10,10}}))", "connect(powerSensor.flange_b, loadInertia.flange_a) annotation (Line(\r\n      points={{10,10},{20,10}}))", "connect(torque.flange, loadInertia.flange_b) annotation (Line(\r\n      points={{50,10},{40,10}}))", "connect(gain.y, torque.tau) annotation (Line(\r\n      points={{71,-50},{80,-50},{80,10},{72,10}},\r\n      color={0,0,127}))", "connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-70,80},{-30,80}},\r\n      color={0,0,255}))", "connect(powerSensor.power, feedback.u2) annotation (Line(\r\n      points={{-8,-1},{-8,-20},{0,-20},{0,-42}},\r\n      color={0,0,127}))", "connect(feedback.y, PI.u) annotation (Line(\r\n      points={{9,-50},{18,-50}},\r\n      color={0,0,127}))", "connect(PI.y, gain.u) annotation (Line(\r\n      points={{41,-50},{48,-50}},\r\n      color={0,0,127}))", "connect(ramp.y, feedback.u1) annotation (Line(\r\n      points={{-19,-50},{-8,-50}},\r\n      color={0,0,127}))", "connect(powerSensor.power, combiTable1Ds.u) annotation (Line(\r\n      points={{-8,-1},{-8,-20},{18,-20}},\r\n      color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 149, "end_line": 199, "start_col": 1, "end_col": 25}}, {"equations": ["connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,20},{-70,10}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-70,60},{-70,40}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-36,20},{-36,20}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-24,20},{-24,20}},\r\n      color={0,0,255}))", "connect(currentQuasiRMSSensor.plug_n, electricalPowerSensor.plug_p)\r\n    annotation (Line(\r\n      points={{-30,60},{-30,57.5},{-30,57.5},{-30,55},{-30,50},{-30,50}},\r\n      color={0,0,255}))", "connect(electricalPowerSensor.plug_nv, star.plug_p) annotation (Line(\r\n      points={{-40,40},{-70,40}},\r\n      color={0,0,255}))", "connect(electricalPowerSensor.plug_ni, terminalBox.plugSupply)\r\n    annotation (Line(\r\n      points={{-30,30},{-30,22}},\r\n      color={0,0,255}))", "connect(aimc.flange, powerSensor.flange_a) annotation (Line(\r\n      points={{-20,10},{-10,10}}))", "connect(powerSensor.flange_b, loadInertia.flange_a) annotation (Line(\r\n      points={{10,10},{20,10}}))", "connect(torque.flange, loadInertia.flange_b) annotation (Line(\r\n      points={{50,10},{40,10}}))", "connect(gain.y, torque.tau) annotation (Line(\r\n      points={{71,-50},{80,-50},{80,10},{72,10}},\r\n      color={0,0,127}))", "connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-70,80},{-30,80}},\r\n      color={0,0,255}))", "connect(powerSensor.power, feedback.u2) annotation (Line(\r\n      points={{-8,-1},{-8,-20},{0,-20},{0,-42}},\r\n      color={0,0,127}))", "connect(feedback.y, PI.u) annotation (Line(\r\n      points={{9,-50},{18,-50}},\r\n      color={0,0,127}))", "connect(PI.y, gain.u) annotation (Line(\r\n      points={{41,-50},{48,-50}},\r\n      color={0,0,127}))", "connect(ramp.y, feedback.u1) annotation (Line(\r\n      points={{-19,-50},{-8,-50}},\r\n      color={0,0,127}))", "connect(powerSensor.power, combiTable1Ds.u) annotation (Line(\r\n      points={{-8,-1},{-8,-20},{18,-20}},\r\n      color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 150, "end_line": 199, "start_col": 3, "end_col": 25}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 149, "end_line": 149, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.i_0_s = 0", "der(aimc.idq_sr) = zeros(2)", "der(aimc.idq_rr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 145, "end_line": 148, "start_col": 1, "end_col": 31}}, {"equations": ["aimc.i_0_s = 0", "der(aimc.idq_sr) = zeros(2)", "der(aimc.idq_rr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 146, "end_line": 148, "start_col": 3, "end_col": 31}}, {"equations": ["der(aimc.idq_rr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 148, "end_line": 148, "start_col": 3, "end_col": 30}}, {"equations": ["der(aimc.idq_sr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 147, "end_line": 147, "start_col": 3, "end_col": 30}}, {"equations": ["aimc.i_0_s = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 146, "end_line": 146, "start_col": 3, "end_col": 17}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 145, "end_line": 145, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: SI.Power×5, Real×4, SI.Current×2 | connections: 17 | params: PNominal, VNominal, INominal | units: W, W, W | eq: eq", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo", "start_line": 2, "end_line": 259, "start_col": 1, "end_col": 19}, "code_text": "model IMC_withLosses\r\n  \"Test example: InductionMachineSquirrelCage with losses\"\r\n  extends Modelica.Icons.Example;\r\n  constant Integer m=3 \"Number of phases\";\r\n  import Modelica.Constants.pi;\r\n  import Modelica.Units.Conversions.from_rpm;\r\n  import Modelica.Units.Conversions.to_rpm;\r\n  import Modelica.Units.Conversions.from_degC;\r\nprotected\r\n  parameter SI.Power PNominal=18500 \"Nominal output\";\r\n  parameter SI.Voltage VNominal=400 \"Nominal RMS voltage\";\r\n  parameter SI.Current INominal=32.85 \"Nominal RMS current\";\r\n  parameter Real pfNominal=0.898 \"Nominal power factor\";\r\n  parameter SI.Power PsNominal=sqrt(3)*VNominal*INominal*pfNominal \"Nominal stator power\";\r\n  parameter SI.Power lossNominal=PsNominal-PNominal \"Nominal losses\";\r\n  parameter Real etaNominal=0.9049 \"Nominal efficiency\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.AngularVelocity wNominal=from_rpm(1462.5)\r\n    \"Nominal speed\";\r\n  parameter SI.Torque TNominal=PNominal/wNominal\r\n    \"Nominal torque\";\r\n  parameter SI.Temperature TempNominal=from_degC(90)\r\n    \"Nominal temperature\";\r\n  SI.Power Pel=electricalPowerSensor.P;\r\n  SI.ReactivePower Qel=electricalPowerSensor.Q;\r\n  SI.ApparentPower Sel=sqrt(Pel^2 + Qel^2);\r\n  parameter Real Ptable[:]={1E-6,1845,3549,5325,7521,9372,11010,12930,\r\n      14950,16360,18500,18560,20180,22170};\r\n  parameter Real Itable[:]={11.0,11.20,12.27,13.87,16.41,18.78,21.07,\r\n      23.92,27.05,29.40,32.85,32.95,35.92,39.35};\r\n  parameter Real wtable[:]=from_rpm({1500,1496,1493,1490,1486,1482,1479,1475,1471,\r\n      1467,1462,1462,1458,1453});\r\n  parameter Real ctable[:]={0.085,0.327,0.506,0.636,0.741,0.797,0.831,\r\n      0.857,0.875,0.887,0.896,0.896,0.902,0.906};\r\n  parameter Real etable[:]={0,0.7250,0.8268,0.8698,0.8929,0.9028,0.9064,\r\n      0.9088,0.9089,0.9070,0.9044,0.9043,0.9008,0.8972};\r\npublic\r\n  output SI.Power Pmech=powerSensor.power \"Mechanical output\";\r\n  output SI.Power Ps_sim=sqrt(3)*VNominal*I_sim*pf_sim \"Simulated stator power\";\r\n  output SI.Power Ps_meas=sqrt(3)*VNominal*I_meas*pf_meas \"Simulated stator power\";\r\n  output SI.Power loss_sim=Ps_sim-Pmech \"Simulated total losses\";\r\n  output SI.Power loss_meas=Ps_meas-Pmech \"Measured total losses\";\r\n  output SI.Current I_sim=currentQuasiRMSSensor.I \"Simulated current\";\r\n  output SI.Current I_meas=combiTable1Ds.y[1] \"Measured current\";\r\n  output SI.AngularVelocity w_sim(displayUnit=\"rev/min\")=aimc.wMechanical \"Simulated speed\";\r\n  output SI.AngularVelocity w_meas(displayUnit=\"rev/min\")=combiTable1Ds.y[2] \"Measured speed\";\r\n  output Real pf_sim=if noEvent(Sel > Modelica.Constants.small) then Pel/Sel else 0 \"Simulated power factor\";\r\n  output Real pf_meas=combiTable1Ds.y[3] \"Measured power factor\";\r\n  output Real eff_sim=if noEvent(abs(Pel) > Modelica.Constants.small) then Pmech/Pel else 0 \"Simulated efficiency\";\r\n  output Real eff_meas=combiTable1Ds.y[4] \"Measured efficiency\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=TempNominal,\r\n    TrOperational=TempNominal,\r\n    wMechanical(fixed=true, start=2*pi*aimcData.fsNominal/aimcData.p),\r\n    alpha20r=aimcData.alpha20r)\r\n    annotation (Placement(transformation(extent={{-40,0},{-20,20}})));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    annotation (Placement(transformation(extent={{-40,16},{-20,36}})));\r\n  Machines.Sensors.ElectricalPowerSensor electricalPowerSensor annotation (\r\n      Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-30,40})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(\r\n        origin={-30,70},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) annotation (Placement(transformation(\r\n        origin={-70,70},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(\r\n        extent={{10,-10},{-10,10}},\r\n        rotation=90,\r\n        origin={-70,30})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={-70,0},\r\n        extent={{-10,-10},{10,10}})));\r\n  Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor\r\n    annotation (Placement(transformation(extent={{-10,0},{10,20}})));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=aimcData.Jr)\r\n    annotation (Placement(transformation(extent={{20,0},{40,20}})));\r\n  Modelica.Mechanics.Rotational.Sources.Torque torque\r\n    annotation (Placement(transformation(extent={{70,0},{50,20}})));\r\n  Modelica.Blocks.Math.Gain gain(k=-1)\r\n    annotation (Placement(transformation(extent={{50,-60},{70,-40}})));\r\n  Modelica.Blocks.Continuous.PI PI(\r\n    k=0.01,\r\n    T=0.01,\r\n    initType=Modelica.Blocks.Types.Init.InitialState)\r\n    annotation (Placement(transformation(extent={{20,-60},{40,-40}})));\r\n  Modelica.Blocks.Math.Feedback feedback\r\n    annotation (Placement(transformation(extent={{-10,-40},{10,-60}})));\r\n  Modelica.Blocks.Sources.Ramp ramp(\r\n    height=1.2*PNominal,\r\n    offset=0,\r\n    startTime=4.5,\r\n    duration=5.5)\r\n    annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));\r\n  Modelica.Blocks.Tables.CombiTable1Ds combiTable1Ds(table={{Ptable[j],\r\n        Itable[j],wtable[j],ctable[j],etable[j]} for j in 1:size(Ptable,\r\n        1)}, smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative)\r\n    annotation (Placement(transformation(extent={{20,-30},{40,-10}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData(\r\n    statorCoreParameters(PRef=410, VRef=387.9),\r\n    Jr=0.12,\r\n    Rs=0.56,\r\n    alpha20s(displayUnit=\"1/K\")=Modelica.Electrical.Machines.Thermal.Constants.alpha20Copper,\r\n    Lssigma=1.52/(2*pi*fNominal),\r\n    frictionParameters(PRef=180, wRef=wNominal),\r\n    strayLoadParameters(\r\n      PRef=0.005*sqrt(3)*VNominal*INominal*pfNominal,\r\n      IRef=INominal/sqrt(3),\r\n      wRef=wNominal),\r\n    Lm=66.4/(2*pi*fNominal),\r\n    Lrsigma=2.31/(2*pi*fNominal),\r\n    Rr=0.42,\r\n    alpha20r(displayUnit=\"1/K\")=Modelica.Electrical.Machines.Thermal.Constants.alpha20Aluminium)   \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-40,-30},{-20,-10}})));\r\n\r\ninitial equation\r\n  aimc.i_0_s = 0;\r\n  der(aimc.idq_sr) = zeros(2);\r\n  der(aimc.idq_rr) = zeros(2);\r\nequation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,20},{-70,10}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-70,60},{-70,40}}, color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-36,20},{-36,20}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-24,20},{-24,20}},\r\n      color={0,0,255}));\r\n  connect(currentQuasiRMSSensor.plug_n, electricalPowerSensor.plug_p)\r\n    annotation (Line(\r\n      points={{-30,60},{-30,57.5},{-30,57.5},{-30,55},{-30,50},{-30,50}},\r\n      color={0,0,255}));\r\n\r\n  connect(electricalPowerSensor.plug_nv, star.plug_p) annotation (Line(\r\n      points={{-40,40},{-70,40}},\r\n      color={0,0,255}));\r\n  connect(electricalPowerSensor.plug_ni, terminalBox.plugSupply)\r\n    annotation (Line(\r\n      points={{-30,30},{-30,22}},\r\n      color={0,0,255}));\r\n  connect(aimc.flange, powerSensor.flange_a) annotation (Line(\r\n      points={{-20,10},{-10,10}}));\r\n  connect(powerSensor.flange_b, loadInertia.flange_a) annotation (Line(\r\n      points={{10,10},{20,10}}));\r\n  connect(torque.flange, loadInertia.flange_b) annotation (Line(\r\n      points={{50,10},{40,10}}));\r\n  connect(gain.y, torque.tau) annotation (Line(\r\n      points={{71,-50},{80,-50},{80,10},{72,10}},\r\n      color={0,0,127}));\r\n  connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-70,80},{-30,80}},\r\n      color={0,0,255}));\r\n  connect(powerSensor.power, feedback.u2) annotation (Line(\r\n      points={{-8,-1},{-8,-20},{0,-20},{0,-42}},\r\n      color={0,0,127}));\r\n  connect(feedback.y, PI.u) annotation (Line(\r\n      points={{9,-50},{18,-50}},\r\n      color={0,0,127}));\r\n  connect(PI.y, gain.u) annotation (Line(\r\n      points={{41,-50},{48,-50}},\r\n      color={0,0,127}));\r\n  connect(ramp.y, feedback.u1) annotation (Line(\r\n      points={{-19,-50},{-8,-50}},\r\n      color={0,0,127}));\r\n  connect(powerSensor.power, combiTable1Ds.u) annotation (Line(\r\n      points={{-8,-1},{-8,-20},{18,-20}},\r\n      color={0,0,127}));\r\n  annotation (\r\n    experiment(StopTime=5.0, Interval=1E-4, Tolerance=1e-06),\r\n    Documentation(info=\"<html>\r\n<ul>\r\n<li>Simulate for 5 seconds: The machine is started at nominal speed, flux is build up in the machine.</li>\r\n<li>Continue the simulation for additional 5 seconds: Subsequently a load ramp is applied.</li>\r\n<li>Compare by plotting versus Pmech:</li>\r\n</ul>\r\n<table>\r\n<tr><td>Current      </td><td>I_sim   </td><td>I_meas  </td></tr>\r\n<tr><td>Speed        </td><td>w_sim   </td><td>w_meas  </td></tr>\r\n<tr><td>Power factor </td><td>pf_sim  </td><td>pf_meas </td></tr>\r\n<tr><td>Efficiency   </td><td>eff_sim </td><td>eff_meas</td></tr>\r\n</table>\r\n<p>Machine parameters are taken from a standard 18.5 kW 400 V 50 Hz motor, simulation results are compared with measurements.</p>\r\n<table>\r\n<tr><td>Nominal stator current            </td><td>     32.85  </td><td>A      </td></tr>\r\n<tr><td>Power factor                      </td><td>      0.898 </td><td>       </td></tr>\r\n<tr><td>Speed                             </td><td>   1462.5   </td><td>rpm    </td></tr>\r\n<tr><td>Electrical input                  </td><td> 20,443.95  </td><td>W      </td></tr>\r\n<tr><td>Stator copper losses              </td><td>    770.13  </td><td>W      </td></tr>\r\n<tr><td>Stator core losses                </td><td>    410.00  </td><td>W      </td></tr>\r\n<tr><td>Rotor  copper losses              </td><td>    481.60  </td><td>W      </td></tr>\r\n<tr><td>Stray load losses                 </td><td>    102.22  </td><td>W      </td></tr>\r\n<tr><td>Friction losses                   </td><td>    180.00  </td><td>W      </td></tr>\r\n<tr><td>Mechanical output                 </td><td> 18,500.00  </td><td>W      </td></tr>\r\n<tr><td>Efficiency                        </td><td>     90.49  </td><td>%      </td></tr>\r\n<tr><td>Nominal torque                    </td><td>    120.79  </td><td>Nm     </td></tr>\r\n</table>\r\n<br>\r\n<table>\r\n<tr><td>Stator resistance per phase       </td><td>  0.56     </td><td>&Omega;</td></tr>\r\n<tr><td>Temperature coefficient           </td><td> copper    </td><td>       </td></tr>\r\n<tr><td>Reference temperature             </td><td> 20        </td><td>&deg;C </td></tr>\r\n<tr><td>Operation temperature             </td><td> 90        </td><td>&deg;C </td></tr>\r\n<tr><td>Stator leakage reactance at 50 Hz </td><td>  1.52     </td><td>&Omega;</td></tr>\r\n<tr><td>Main  field    reactance at 50 Hz </td><td> 66.40     </td><td>&Omega;</td></tr>\r\n<tr><td>Rotor  leakage reactance at 50 Hz </td><td>  2.31     </td><td>&Omega;</td></tr>\r\n<tr><td>Rotor  resistance per phase       </td><td>  0.42     </td><td>&Omega;</td></tr>\r\n<tr><td>Temperature coefficient           </td><td> aluminium </td><td>       </td></tr>\r\n<tr><td>Reference temperature             </td><td> 20        </td><td>&deg;C </td></tr>\r\n<tr><td>Operation temperature             </td><td> 90        </td><td>&deg;C </td></tr>\r\n</table>\r\n<p>See:<br>\r\nAnton Haumer, Christian Kral, Hansj&ouml;rg Kapeller, Thomas B&auml;uml, Johannes V. Gragger<br>\r\n<a href=\\\"https://2009.international.conference.modelica.org/proceedings/pages/papers/0103/0103_FI.pdf\\\">\r\nThe AdvancedMachines Library: Loss Models for Electric Machines</a><br>\r\nModelica 2009, 7<sup>th</sup> International Modelica Conference</p>\r\n</html>\"),\r\n    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},\r\n            {100,100}}), graphics={Text(\r\n                extent={{-72,100},{68,80}},\r\n                textColor={0,0,255},\r\n                textString=\r\n            \"Simulate for 5 seconds for starting the machine.\"),Text(\r\n                extent={{-100,-80},{100,-100}},\r\n                textColor={0,0,255},\r\n                textString=\r\n            \"Continue the simulation for additional 5 seconds: a load ramp is applied.\")}));\r\nend IMC_withLosses", "checksum": "43bb0c3f10fc32e2166fc458c214483475682661", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_withLosses.mo:2-259", "component_count": 16, "connection_count": 17, "variable_count": 17, "physical_quantity_count": 16, "parameter_count": 11, "equation_count": 9, "dependency_count": 42, "has_physical_interface": true, "interface_component_count": 12, "has_connections": true, "is_composite_model": true, "complexity_score": 97.5, "model_type": "system", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star.pin_n, ground.p) annotation (Line(points={{-70,20},{-70,10}}, color={0,0,255}))", "search_keywords": ["AngularVelocity", "ElectricCurrent", "Integer", "Power", "Real", "SI.AngularVelocity", "SI.ApparentPower", "SI.Current", "SI.Power", "SI.ReactivePower", "electrical", "rad/s", "system"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Pel", "type_name": "SI.Power", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Qel", "type_name": "SI.ReactivePower", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Sel", "type_name": "SI.ApparentPower", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Ps_sim", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "Ps_meas", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "loss_sim", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "loss_meas", "type_name": "SI.Power", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "I_sim", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "I_meas", "type_name": "SI.Current", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "w_sim", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "modifications": {"displayUnit": "\"rev/min\""}, "condition": null, "array_dims": null, "comment": null}, {"name": "w_meas", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "modifications": {"displayUnit": "\"rev/min\""}, "condition": null, "array_dims": null, "comment": null}, {"name": "pf_sim", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "pf_meas", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "eff_sim", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "eff_meas", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "sineVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "currentQuasiRMSSensor.plug_n", "to_connector": "electricalPowerSensor.plug_p", "condition": null}, {"from_connector": "electricalPowerSensor.plug_nv", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "electricalPowerSensor.plug_ni", "to_connector": "terminalBox.plugSupply", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "powerSensor.flange_a", "condition": null}, {"from_connector": "powerSensor.flange_b", "to_connector": "loadInertia.flange_a", "condition": null}, {"from_connector": "torque.flange", "to_connector": "loadInertia.flange_b", "condition": null}, {"from_connector": "gain.y", "to_connector": "torque.tau", "condition": null}, {"from_connector": "sineVoltage.plug_p", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "powerSensor.power", "to_connector": "feedback.u2", "condition": null}, {"from_connector": "feedback.y", "to_connector": "PI.u", "condition": null}, {"from_connector": "PI.y", "to_connector": "gain.u", "condition": null}, {"from_connector": "ramp.y", "to_connector": "feedback.u1", "condition": null}, {"from_connector": "powerSensor.power", "to_connector": "combiTable1Ds.u", "condition": null}], "variables": [{"name": "Pel", "type_name": "SI.Power", "prefixes": [], "attributes": {}, "binding_equation": "electricalPowerSensor.P", "comment": null}, {"name": "Qel", "type_name": "SI.ReactivePower", "prefixes": [], "attributes": {}, "binding_equation": "electricalPowerSensor.Q", "comment": null}, {"name": "Sel", "type_name": "SI.ApparentPower", "prefixes": [], "attributes": {}, "binding_equation": "sqrt(Pel^2 + Qel^2)", "comment": null}, {"name": "Pmech", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "powerSensor.power \"Mechanical output\"", "comment": null}, {"name": "Ps_sim", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "sqrt(3)*VNominal*I_sim*pf_sim \"Simulated stator power\"", "comment": null}, {"name": "Ps_meas", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "sqrt(3)*VNominal*I_meas*pf_meas \"Simulated stator power\"", "comment": null}, {"name": "loss_sim", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "Ps_sim-Pmech \"Simulated total losses\"", "comment": null}, {"name": "loss_meas", "type_name": "SI.Power", "prefixes": ["output"], "attributes": {}, "binding_equation": "Ps_meas-Pmech \"Measured total losses\"", "comment": null}, {"name": "I_sim", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": "currentQuasiRMSSensor.I \"Simulated current\"", "comment": null}, {"name": "I_meas", "type_name": "SI.Current", "prefixes": ["output"], "attributes": {}, "binding_equation": "combiTable1Ds.y[1] \"Measured current\"", "comment": null}, {"name": "w_sim", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "attributes": {"displayUnit": "rev/min"}, "binding_equation": "aimc.wMechanical \"Simulated speed\"", "comment": null}, {"name": "w_meas", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "attributes": {"displayUnit": "rev/min"}, "binding_equation": "combiTable1Ds.y[2] \"Measured speed\"", "comment": null}, {"name": "pf_sim", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "if noEvent(Sel > Modelica.Constants.small) then Pel/Sel else 0 \"Simulated power factor\"", "comment": null}, {"name": "pf_meas", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "combiTable1Ds.y[3] \"Measured power factor\"", "comment": null}, {"name": "eff_sim", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "if noEvent(abs(Pel) > Modelica.Constants.small) then Pmech/Pel else 0 \"Simulated efficiency\"", "comment": null}, {"name": "eff_meas", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": "combiTable1Ds.y[4] \"Measured efficiency\"", "comment": null}, {"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=TempNominal,\r\n    TrOperational=TempNominal,\r\n    wMechanical(fixed=true, start=2*pi*aimcData.fsNominal/aimcData.p),\r\n    alpha20r=aimcData.alpha20r)\r\n    \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    \r\n  Machines.Sensors.ElectricalPowerSensor electricalPowerSensor \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Modelica.Mechanics.Rotational.Sensors.PowerSensor powerSensor\r\n    \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=aimcData.Jr)\r\n    \r\n  Modelica.Mechanics.Rotational.Sources.Torque torque\r\n    \r\n  Modelica.Blocks.Math.Gain gain(k=-1)\r\n    \r\n  Modelica.Blocks.Continuous.PI PI(\r\n    k=0.01,\r\n    T=0.01,\r\n    initType=Modelica.Blocks.Types.Init.InitialState)\r\n    \r\n  Modelica.Blocks.Math.Feedback feedback\r\n    \r\n  Modelica.Blocks.Sources.Ramp ramp(\r\n    height=1.2*PNominal,\r\n    offset=0,\r\n    startTime=4.5,\r\n    duration=5.5)\r\n    \r\n  Modelica.Blocks.Tables.CombiTable1Ds combiTable1Ds(table={{Ptable[j],\r\n        Itable[j],wtable[j],ctable[j],etable[j]} for j in 1:size(Ptable,\r\n        1)}, smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative)\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData(\r\n    statorCoreParameters(PRef=410, VRef=387.9),\r\n    Jr=0.12,\r\n    Rs=0.56,\r\n    alpha20s(displayUnit=\"1/K\")=Modelica.Electrical.Machines.Thermal.Constants.alpha20Copper,\r\n    Lssigma=1.52/(2*pi*fNominal),\r\n    frictionParameters(PRef=180, wRef=wNominal),\r\n    strayLoadParameters(\r\n      PRef=0.005*sqrt(3)*VNominal*INominal*pfNominal,\r\n      IRef=INominal/sqrt(3),\r\n      wRef=wNominal),\r\n    Lm=66.4/(2*pi*fNominal),\r\n    Lrsigma=2.31/(2*pi*fNominal),\r\n    Rr=0.42,\r\n    alpha20r(displayUnit=\"1/K\")=Modelica.Electrical.Machines.Thermal.Constants.alpha20Aluminium)   \"Induction machine data\"\r\n    \r\n\r\ninitial equation\r\n  aimc.i_0_s = 0", "comment": null}], "physical_quantities": [{"name": "Pel", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "Pmech", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "Ps_sim", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "Ps_meas", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "loss_sim", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "loss_meas", "unit": "W", "display_unit": null, "quantity": "Power", "nominal": null}, {"name": "I_sim", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "I_meas", "unit": "A", "display_unit": null, "quantity": "ElectricCurrent", "nominal": null}, {"name": "w_sim", "unit": "rad/s", "display_unit": "rev/min", "quantity": "AngularVelocity", "nominal": null}, {"name": "w_meas", "unit": "rad/s", "display_unit": "rev/min", "quantity": "AngularVelocity", "nominal": null}, {"name": "temperature", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "current", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "min", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "factor", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}, {"name": "efficiency", "unit": "4", "display_unit": null, "quantity": null, "nominal": null}, {"name": "D", "unit": "j", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Modelica.Blocks.Continuous", "Modelica.Blocks.Math", "Modelica.Blocks.Sources", "Modelica.Blocks.Tables", "Modelica.Blocks.Types.Init", "Modelica.Blocks.Types.Smoothness", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Machines.Thermal.Constants", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Sensors", "Modelica.Mechanics.Rotational.Sources", "Modelica.Units.Conversions", "Modelica.Units.Conversions.from_degC", "Modelica.Units.Conversions.from_rpm", "Modelica.Units.Conversions.to_rpm", "PI", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "combiTable1Ds", "currentQuasiRMSSensor", "electricalPowerSensor", "feedback", "gain", "ground", "international.conference.modelica", "loadInertia", "powerSensor", "ramp", "sineVoltage", "star", "terminalBox", "torque"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_YD", "kind": "model", "name": "IMC_YD", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "tStart1", "type": "SI.Time", "default": "0.1 \"Start time\"", "description": null}, {"name": "tStart2", "type": "SI.Time", "default": "2.0 \"Start time from Y to D\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-40,90},{-50,90}},      color={0,0,255}))", "connect(sineVoltage.plug_p, idealCloser.plug_p) annotation (Line(points={{-20,90},\r\n          {0,90},{0,30}},               color={0,0,255}))", "connect(loadInertia.flange_b, quadraticLoadTorque.flange)\r\n    annotation (Line(points={{60,-50},{70,-50}}))", "connect(booleanStep.y, idealCloser.control) annotation (Line(points={{-59,30},\r\n          {-20,30},{-20,20},{-12,20}},    color={255,0,255}))", "connect(booleanStepYD.y, switchYD.control)\r\n    annotation (Line(points={{-59,-30},{-22,-30}}, color={255,0,255}))", "connect(idealCloser.plug_n, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,10},{0,0}},         color={0,0,255}))", "connect(switchYD.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-40},{-16,-40}},\r\n      color={0,0,255}))", "connect(switchYD.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-40},{-4,-40}},\r\n      color={0,0,255}))", "connect(switchYD.plugSupply, currentQuasiRMSSensor.plug_n) annotation (\r\n      Line(\r\n      points={{-10,-20},{0,-20}},\r\n      color={0,0,255}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-50},{40,-50}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 83, "end_line": 109, "start_col": 1, "end_col": 35}}, {"equations": ["connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-40,90},{-50,90}},      color={0,0,255}))", "connect(sineVoltage.plug_p, idealCloser.plug_p) annotation (Line(points={{-20,90},\r\n          {0,90},{0,30}},               color={0,0,255}))", "connect(loadInertia.flange_b, quadraticLoadTorque.flange)\r\n    annotation (Line(points={{60,-50},{70,-50}}))", "connect(booleanStep.y, idealCloser.control) annotation (Line(points={{-59,30},\r\n          {-20,30},{-20,20},{-12,20}},    color={255,0,255}))", "connect(booleanStepYD.y, switchYD.control)\r\n    annotation (Line(points={{-59,-30},{-22,-30}}, color={255,0,255}))", "connect(idealCloser.plug_n, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,10},{0,0}},         color={0,0,255}))", "connect(switchYD.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-40},{-16,-40}},\r\n      color={0,0,255}))", "connect(switchYD.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-40},{-4,-40}},\r\n      color={0,0,255}))", "connect(switchYD.plugSupply, currentQuasiRMSSensor.plug_n) annotation (\r\n      Line(\r\n      points={{-10,-20},{0,-20}},\r\n      color={0,0,255}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-50},{40,-50}}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 84, "end_line": 109, "start_col": 3, "end_col": 35}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 83, "end_line": 83, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.is = zeros(3)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 80, "end_line": 82, "start_col": 1, "end_col": 22}}, {"equations": ["aimc.is = zeros(3)", "aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 81, "end_line": 82, "start_col": 3, "end_col": 22}}, {"equations": ["aimc.ir = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 82, "end_line": 82, "start_col": 3, "end_col": 21}}, {"equations": ["aimc.is = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 81, "end_line": 81, "start_col": 3, "end_col": 21}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 80, "end_line": 80, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 11 | params: VNominal, fNominal, tStart1 | units: m | eq: equation connect(star.pin_n, gro", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo", "start_line": 2, "end_line": 126, "start_col": 1, "end_col": 11}, "code_text": "model IMC_YD\r\n  \"Test example: InductionMachineSquirrelCage Y-D\"\r\n  extends Modelica.Icons.Example;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.Voltage VNominal=100\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.Time tStart1=0.1 \"Start time\";\r\n  parameter SI.Time tStart2=2.0 \"Start time from Y to D\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.AngularVelocity wLoad(displayUnit=\"rev/min\")=\r\n       1440.45*2*Modelica.Constants.pi/60 \"Nominal load speed\";\r\n  parameter SI.Inertia JLoad=0.29\r\n    \"Load's moment of inertia\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(extent={{-10,10},{10,-10}}, rotation=270,\r\n        origin={0,-10})));\r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) annotation (Placement(transformation(\r\n        origin={-30,90},\r\n        extent={{10,-10},{-10,10}})));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(extent={{-50,80},{-70,100}})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={-90,90},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Blocks.Sources.BooleanStep booleanStep[m](each startTime=\r\n        tStart1) annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n  Modelica.Electrical.Polyphase.Ideal.IdealClosingSwitch idealCloser(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(1e-5, m)) annotation (Placement(transformation(\r\n        origin={0,20},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Machines.Utilities.SwitchYD switchYD(m=m)\r\n    annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));\r\n  Modelica.Blocks.Sources.BooleanStep booleanStepYD[m](each startTime=\r\n        tStart2) annotation (Placement(transformation(extent={{-80,-40},{-60,\r\n            -20}})));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{40,-60},{60,-40}})));\r\n  Modelica.Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque\r\n    quadraticLoadTorque(\r\n    w_nominal=wLoad,\r\n    TorqueDirection=false,\r\n    tau_nominal=-TLoad,\r\n    useSupport=false) annotation (Placement(transformation(extent={{90,-60},{70,\r\n            -40}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-20,-90},{0,-70}})));\r\ninitial equation\r\n  aimc.is = zeros(3);\r\n  aimc.ir = zeros(2);\r\nequation\r\n  connect(star.pin_n, ground.p)\r\n    annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-40,90},{-50,90}},      color={0,0,255}));\r\n  connect(sineVoltage.plug_p, idealCloser.plug_p) annotation (Line(points={{-20,90},\r\n          {0,90},{0,30}},               color={0,0,255}));\r\n  connect(loadInertia.flange_b, quadraticLoadTorque.flange)\r\n    annotation (Line(points={{60,-50},{70,-50}}));\r\n  connect(booleanStep.y, idealCloser.control) annotation (Line(points={{-59,30},\r\n          {-20,30},{-20,20},{-12,20}},    color={255,0,255}));\r\n  connect(booleanStepYD.y, switchYD.control)\r\n    annotation (Line(points={{-59,-30},{-22,-30}}, color={255,0,255}));\r\n  connect(idealCloser.plug_n, currentQuasiRMSSensor.plug_p)\r\n    annotation (Line(points={{0,10},{0,0}},         color={0,0,255}));\r\n  connect(switchYD.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-40},{-16,-40}},\r\n      color={0,0,255}));\r\n  connect(switchYD.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-40},{-4,-40}},\r\n      color={0,0,255}));\r\n  connect(switchYD.plugSupply, currentQuasiRMSSensor.plug_n) annotation (\r\n      Line(\r\n      points={{-10,-20},{0,-20}},\r\n      color={0,0,255}));\r\n  connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-50},{40,-50}}));\r\n  annotation (experiment(StopTime=2.5, Interval=1E-4, Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>At start time tStart three-phase voltage is supplied to the induction machine with squirrel cage,\r\nfirst star-connected, then delta-connected; the machine starts from standstill, accelerating inertias against\r\nload torque quadratic dependent on speed, finally reaching nominal speed.</p>\r\n\r\n<p>Simulate for 2.5 seconds and plot (versus time):</p>\r\n\r\n<ul>\r\n<li>currentQuasiRMSSensor.I: stator current RMS</li>\r\n<li>aimc.wMechanical: motor's speed</li>\r\n<li>aimc.tauElectrical: motor's torque</li>\r\n</ul>\r\n\r\n<p>Default machine parameters are used.</p>\r\n</html>\"));\r\nend IMC_YD", "checksum": "9fa1fdfa28ac405c1624300dbfc50da06caafa97", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_YD.mo:2-126", "component_count": 1, "connection_count": 11, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 6, "equation_count": 8, "dependency_count": 26, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 46.0, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star.pin_n, ground.p) annotation (Line(points={{-70,90},{-80,90}}, color={0,0,255}))", "search_keywords": ["Integer", "basic", "mechanical"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "sineVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "sineVoltage.plug_p", "to_connector": "idealCloser.plug_p", "condition": null}, {"from_connector": "loadInertia.flange_b", "to_connector": "quadraticLoadTorque.flange", "condition": null}, {"from_connector": "booleanStep.y", "to_connector": "idealCloser.control", "condition": null}, {"from_connector": "booleanStepYD.y", "to_connector": "switchYD.control", "condition": null}, {"from_connector": "idealCloser.plug_n", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}, {"from_connector": "switchYD.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "switchYD.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "switchYD.plugSupply", "to_connector": "currentQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "loadInertia.flange_a", "condition": null}], "variables": [{"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    phiMechanical(fixed=true),\r\n    wMechanical(fixed=true),\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Modelica.Blocks.Sources.BooleanStep booleanStep[m](each startTime=\r\n        tStart1) \r\n  Modelica.Electrical.Polyphase.Ideal.IdealClosingSwitch idealCloser(\r\n    final m=m,\r\n    Ron=fill(1e-5, m),\r\n    Goff=fill(1e-5, m)) \r\n  Machines.Utilities.SwitchYD switchYD(m=m)\r\n    \r\n  Modelica.Blocks.Sources.BooleanStep booleanStepYD[m](each startTime=\r\n        tStart2) \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Modelica.Mechanics.Rotational.Sources.QuadraticSpeedDependentTorque\r\n    quadraticLoadTorque(\r\n    w_nominal=wLoad,\r\n    TorqueDirection=false,\r\n    tau_nominal=-TLoad,\r\n    useSupport=false) \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    \r\ninitial equation\r\n  aimc.is = zeros(3)", "comment": null}], "physical_quantities": [{"name": "K", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Modelica.Blocks.Sources", "Modelica.Constants", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Ideal", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "Modelica.Mechanics.Rotational.Sources", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "booleanStep", "booleanStepYD", "currentQuasiRMSSensor", "ground", "idealCloser", "loadInertia", "quadraticLoadTorque", "sineVoltage", "star", "switchYD"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "ConsistentInitialization.Fluid.Mechanical.TwoMassesEquationsReducedSteadyState", "kind": "model", "name": "TwoMassesEquationsReducedSteadyState", "package_path": ["ConsistentInitialization", "Fluid", "Mechanical"], "extends": ["BaseClasses.TwoMassesEquations", "Modelica.Icons.Example"], "imports": [], "parameters": [], "equations": [{"equations": ["initial equation\r\n        der(x1) = 0", "der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 465, "end_line": 467, "start_col": 7, "end_col": 21}}, {"equations": ["der(x1) = 0", "der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 466, "end_line": 467, "start_col": 9, "end_col": 21}}, {"equations": ["der(v1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 467, "end_line": 467, "start_col": 9, "end_col": 20}}, {"equations": ["der(x1) = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 466, "end_line": 466, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 465, "end_line": 465, "start_col": 15, "end_col": 23}}], "docstring": "extends BaseClasses.TwoMassesEquations | eq: initial equation der(x1) = 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 461, "end_line": 469, "start_col": 7, "end_col": 47}, "code_text": "model TwoMassesEquationsReducedSteadyState\r\n        \"Fully specified initial values for states after index reduction\"\r\n        extends BaseClasses.TwoMassesEquations;\r\n        extends Modelica.Icons.Example;\r\n      initial equation\r\n        der(x1) = 0;\r\n        der(v1) = 0;\r\n        annotation(experiment(StopTime=1.0));\r\n      end TwoMassesEquationsReducedSteadyState", "checksum": "ea1aba9bc8596ed137cba22ee7ee769cfba8fdd6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo:461-469", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 5, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 5.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "initial equation der(x1) = 0", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["BaseClasses", "Modelica.Icons"], "inheritance_chain": ["BaseClasses.TwoMassesEquations", "Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Analog.Ideal.IdealOpAmpLimited", "kind": "model", "name": "IdealOpAmpLimited", "package_path": ["Modelica", "Electrical", "Analog", "Ideal"], "extends": [], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  in_p.i = 0", "in_n.i = 0", "VMax.i = 0", "VMin.i = 0", "vin = in_p.v - in_n.v", "in_p.v - in_n.v = unitVoltage*smooth(0, (if s < -1 then s + 1 else if s > 1\r\n     then s - 1 else 0))", "out.v = smooth(0, if s < -1 then VMin.v else if s > 1 then VMax.v else (\r\n    VMax.v - VMin.v)*s/2 + (VMax.v + VMin.v)/2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 18, "end_line": 27, "start_col": 1, "end_col": 49}}, {"equations": ["in_p.i = 0", "in_n.i = 0", "VMax.i = 0", "VMin.i = 0", "vin = in_p.v - in_n.v", "in_p.v - in_n.v = unitVoltage*smooth(0, (if s < -1 then s + 1 else if s > 1\r\n     then s - 1 else 0))", "out.v = smooth(0, if s < -1 then VMin.v else if s > 1 then VMax.v else (\r\n    VMax.v - VMin.v)*s/2 + (VMax.v + VMin.v)/2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 19, "end_line": 27, "start_col": 3, "end_col": 49}}, {"equations": ["out.v = smooth(0, if s < -1 then VMin.v else if s > 1 then VMax.v else (\r\n    VMax.v - VMin.v)*s/2 + (VMax.v + VMin.v)/2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 26, "end_line": 27, "start_col": 3, "end_col": 48}}, {"equations": ["in_p.v - in_n.v = unitVoltage*smooth(0, (if s < -1 then s + 1 else if s > 1\r\n     then s - 1 else 0))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 24, "end_line": 25, "start_col": 3, "end_col": 25}}, {"equations": ["vin = in_p.v - in_n.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 23, "end_line": 23, "start_col": 3, "end_col": 24}}, {"equations": ["VMin.i = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 22, "end_line": 22, "start_col": 3, "end_col": 13}}, {"equations": ["VMax.i = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 21, "end_line": 21, "start_col": 3, "end_col": 13}}, {"equations": ["in_n.i = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 20, "end_line": 20, "start_col": 3, "end_col": 13}}, {"equations": ["in_p.i = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 19, "end_line": 19, "start_col": 3, "end_col": 13}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 18, "end_line": 18, "start_col": 1, "end_col": 9}}], "docstring": "components: SI.Voltage×1 | units: 1, V | eq: equation in_p.i = 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo", "start_line": 2, "end_line": 66, "start_col": 1, "end_col": 22}, "code_text": "model IdealOpAmpLimited \"Ideal operational amplifier with limitation\"\r\n  Interfaces.PositivePin in_p \"Positive pin of the input port\" annotation (\r\n      Placement(transformation(extent={{-110,-70},{-90,-50}}), iconTransformation(extent={{-110,-70},{-90,-50}})));\r\n  Interfaces.NegativePin in_n \"Negative pin of the input port\" annotation (\r\n      Placement(transformation(extent={{-110,50},{-90,70}}), iconTransformation(extent={{-110,50},{-90,70}})));\r\n  Interfaces.PositivePin out \"Output pin\" annotation (Placement(\r\n        transformation(extent={{90,-10},{110,10}})));\r\n  Interfaces.PositivePin VMax \"Positive output voltage limitation\"\r\n    annotation (Placement(transformation(extent={{-10,90},{10,110}}), iconTransformation(extent={{-10,90},{10,110}})));\r\n  Interfaces.NegativePin VMin \"Negative output voltage limitation\"\r\n    annotation (Placement(transformation(extent={{-10,-110},{10,-90}}), iconTransformation(extent={{-10,-110},{10,-90}})));\r\n  SI.Voltage vin \"Input voltage\";\r\nprotected\r\n  Real s(start=0, final unit=\"1\") \"Auxiliary variable\";\r\n  constant SI.Voltage unitVoltage=1 annotation (HideResult=true);\r\n\r\nequation\r\n  in_p.i = 0;\r\n  in_n.i = 0;\r\n  VMax.i = 0;\r\n  VMin.i = 0;\r\n  vin = in_p.v - in_n.v;\r\n  in_p.v - in_n.v = unitVoltage*smooth(0, (if s < -1 then s + 1 else if s > 1\r\n     then s - 1 else 0));\r\n  out.v = smooth(0, if s < -1 then VMin.v else if s > 1 then VMax.v else (\r\n    VMax.v - VMin.v)*s/2 + (VMax.v + VMin.v)/2);\r\n  annotation (defaultComponentName=\"opAmp\",\r\n    Documentation(info=\"<html>\r\n<p>\r\nThe ideal OpAmp with limitation behaves like an ideal OpAmp without limitation,\r\nif the output voltage is within the limits VMin and VMax. In this case\r\nthe input voltage vin = in_p.v - in_n.v is zero.\r\nIf the input voltage vin less than 0, the output voltage is out.v = VMin.\r\nIf the input voltage is vin larger than 0, the output voltage is out.v = VMax.\r\n</p>\r\n</html>\",\r\n        revisions=\"<html>\r\n<ul>\r\n<li><em> 1998   </em>\r\n       by Christoph Clauss<br> initially implemented<br>\r\n       </li>\r\n</ul>\r\n</html>\"),\r\n    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n            100}}), graphics={\r\n        Line(points={{60,0},{90,0}}, color={0,0,255}),\r\n        Polygon(\r\n          points={{70,0},{-70,80},{-70,-80},{70,0}},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid,\r\n          lineColor={0,0,255}),\r\n        Line(points={{-100,60},{-70,60}}, color={0,0,255}),\r\n        Line(points={{-100,-60},{-70,-60}}, color={0,0,255}),\r\n        Line(points={{-60,50},{-40,50}}, color={0,0,255}),\r\n        Line(points={{-50,-40},{-50,-60}}, color={0,0,255}),\r\n        Line(points={{-60,-50},{-40,-50}}, color={0,0,255}),\r\n        Line(points={{70,0},{100,0}}, color={0,0,255}),\r\n        Line(points={{-45,-10},{-10,-10},{-10,10},{20,10}}, color={0,0,255}),\r\n        Text(\r\n          extent={{-150,150},{150,110}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255}),\r\n        Line(points={{0,40},{0,100}}, color={0,0,255}),\r\n        Line(points={{0,-100},{0,-40}}, color={0,0,255})}));\r\nend IdealOpAmpLimited", "checksum": "0c1cb96c6b26c7c8da42d08a9424f279dfcb7c4f", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Ideal\\IdealOpAmpLimited.mo:2-66", "component_count": 1, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 10, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 12.0, "model_type": "basic", "physical_domains": ["electrical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation in_p.i = 0", "search_keywords": ["ElectricPotential", "SI.Voltage", "basic", "electrical"]}, "components": [{"name": "vin", "type_name": "SI.Voltage", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Input voltage"}], "connections": [], "variables": [{"name": "vin", "type_name": "SI.Voltage", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Input voltage\""}, {"name": "s", "type_name": "Real", "prefixes": [], "attributes": {"unit": "1", "start": "0"}, "binding_equation": null, "comment": "\"Auxiliary variable\""}], "physical_quantities": [{"name": "s", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "vin", "unit": "V", "display_unit": null, "quantity": "ElectricPotential", "nominal": null}], "dependencies": ["FillPattern", "Interfaces", "SI", "VMax", "VMin", "in_n", "in_p", "out"], "inheritance_chain": []}
{"fqn": "Modelica.Electrical.QuasiStatic.Polyphase.Basic.Impedance", "kind": "model", "name": "Impedance", "package_path": ["Modelica", "Electrical", "QuasiStatic", "Polyphase", "Basic"], "extends": ["Interfaces.TwoPlug", "Modelica.Electrical.Polyphase.Interfaces.ConditionalHeatPort"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n\r\n  connect(plugToPins_p.pin_p, impedance.pin_p) annotation (Line(points={{-68,0},{-53.5,0},{-39,0},{-10,0}}, color={85,170,255}))", "connect(impedance.pin_n, plugToPins_n.pin_n) annotation (Line(points={{10,0},{39,0},{68,0}}, color={85,170,255}))", "connect(impedance.heatPort, heatPort) annotation (Line(points={{0,-10},{0,-10},{0,-100}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Basic\\Impedance.mo", "start_line": 24, "end_line": 28, "start_col": 1, "end_col": 111}}, {"equations": ["connect(plugToPins_p.pin_p, impedance.pin_p) annotation (Line(points={{-68,0},{-53.5,0},{-39,0},{-10,0}}, color={85,170,255}))", "connect(impedance.pin_n, plugToPins_n.pin_n) annotation (Line(points={{10,0},{39,0},{68,0}}, color={85,170,255}))", "connect(impedance.heatPort, heatPort) annotation (Line(points={{0,-10},{0,-10},{0,-100}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Basic\\Impedance.mo", "start_line": 26, "end_line": 28, "start_col": 3, "end_col": 111}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Basic\\Impedance.mo", "start_line": 24, "end_line": 24, "start_col": 1, "end_col": 9}}], "docstring": "extends Interfaces.TwoPlug | connections: 3 | units: m, m, m | eq: equation connect(plugToPins_p.pin_p, impedance.pin_p) annotation (Line(points={{-68,0},{-53.5", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Basic\\Impedance.mo", "start_line": 2, "end_line": 88, "start_col": 1, "end_col": 14}, "code_text": "model Impedance \"Polyphase linear impedance\"\r\n  extends Interfaces.TwoPlug;\r\n  parameter SI.ComplexImpedance Z_ref[m](re(start=fill(1,m)),im(start=fill(0,m)))\r\n    \"Complex impedances R_ref + j*X_ref\";\r\n  parameter SI.Temperature T_ref[m]=fill(293.15, m)\r\n    \"Reference temperatures\";\r\n  parameter SI.LinearTemperatureCoefficient alpha_ref[m]=zeros(m)\r\n    \"Temperature coefficient of resistance (R_actual = R_ref*(1 + alpha_ref*(heatPort.T - T_ref))\";\r\n  extends Modelica.Electrical.Polyphase.Interfaces.ConditionalHeatPort(final mh=m, T=T_ref);\r\n  parameter Boolean frequencyDependent = false \"Consider frequency dependency, if true\"\r\n    annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n  parameter SI.Frequency f_ref = 1 \"Reference frequency, if frequency dependency is considered\"\r\n    annotation(Dialog(enable=frequencyDependent));\r\n  QuasiStatic.SinglePhase.Basic.Impedance impedance[m](\r\n    final Z_ref=Z_ref,\r\n    final T_ref=T_ref,\r\n    final alpha_ref=alpha_ref,\r\n    final useHeatPort=fill(useHeatPort, m),\r\n    final frequencyDependent=fill(frequencyDependent, m),\r\n    final f_ref=fill(f_ref, m),\r\n    final T=T_ref)\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\nequation\r\n\r\n  connect(plugToPins_p.pin_p, impedance.pin_p) annotation (Line(points={{-68,0},{-53.5,0},{-39,0},{-10,0}}, color={85,170,255}));\r\n  connect(impedance.pin_n, plugToPins_n.pin_n) annotation (Line(points={{10,0},{39,0},{68,0}}, color={85,170,255}));\r\n  connect(impedance.heatPort, heatPort) annotation (Line(points={{0,-10},{0,-10},{0,-100}}, color={191,0,0}));\r\n  annotation (Icon(graphics={\r\n                Text(\r\n              extent={{150,-80},{-150,-40}},\r\n              textString=\"m=%m\"), Line(points={{60,0},{90,0}}, color={85,170,255}),\r\n          Line(points={{-90,0},{-60,0}}, color={85,170,255}),\r\n          Rectangle(\r\n              extent={{-70,30},{70,-30}},\r\n              lineColor={85,170,255},\r\n              fillColor={255,255,255},\r\n              fillPattern=FillPattern.Solid),\r\n                                 Polygon(\r\n              points={{-70,-30},{70,30},{70,-30},{-70,-30}},\r\n              lineColor={85,170,255},\r\n              fillColor={85,170,255},\r\n              fillPattern=FillPattern.Solid),\r\n        Text(\r\n          extent={{-150,90},{150,50}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255})}), Documentation(info=\"<html>\r\n<p>The impedance model represents a <strong>series</strong> connection of a resistor and either an inductor or capacitor\r\nin each phase.<br>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Electrical/QuasiStatic/SinglePhase/Basic/RX_impedance.png\\\"></p>\r\n\r\n<p>\r\nThe linear impedance connects the voltage <code><u>v</u></code> with the\r\ncurrent <code><u>i</u></code> by  <code><u>v</u> = <u>Z</u>*<u>i</u></code> in each phase, using <code>m</code>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Basic.Impedance\\\">single-phase impedances</a>.\r\nThe resistive\r\ncomponents are modeled temperature dependent, so the real parts <code>R_actual = real(<u>Z</u>)</code> are determined from\r\nthe actual operating temperatures and the reference input resistances <code>real(Z_ref)</code>.\r\n<a href=\\\"modelica://Modelica.Electrical.Polyphase.Interfaces.ConditionalHeatPort\\\">Conditional heat ports</a> are considered.\r\nThe reactive components <code>X_actual = imag(<u>Z</u>)</code>\r\nare equal to <code>imag(Z_ref)</code> if <code>frequencyDependent = false</code>.\r\nFrequency dependency is considered by <code>frequencyDependent = true</code>, distinguishing two cases:\r\n</p>\r\n\r\n<dl>\r\n<dt>(a) <code>imag(Z_ref) &gt; 0</code>: inductive case</dt>\r\n<dd>The actual reactances <code>X_actual</code> are proportional to <code>f/f_ref</code></dd>\r\n<dt>(b) <code>imag(Z_ref) &lt; 0</code>: capacitive case</dt>\r\n<dd>The actual reactances <code>X_actual</code> are proportional to <code>f_ref/f</code></dd>\r\n</dl>\r\n\r\n<h4>See also</h4>\r\n<p>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Basic.Impedance\\\">Impedance</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.Resistor\\\">Resistor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.Conductor\\\">Conductor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.Capacitor\\\">Capacitor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.Inductor\\\">Inductor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.Admittance\\\">Admittance</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.VariableResistor\\\">Variable resistor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.VariableConductor\\\">Variable conductor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.VariableCapacitor\\\">Variable capacitor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.VariableInductor\\\">Variable inductor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.VariableImpedance\\\">Variable impedance</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Basic.VariableAdmittance\\\">Variable admittance</a>\r\n</p>\r\n</html>\"));\r\nend Impedance", "checksum": "ad20110b2e2f7360fb6ac4f7fdf5f984412ec450", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Basic\\Impedance.mo:2-88", "component_count": 0, "connection_count": 3, "variable_count": 0, "physical_quantity_count": 4, "parameter_count": 0, "equation_count": 3, "dependency_count": 12, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 12.0, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(plugToPins_p.pin_p, impedance.pin_p) annotation (Line(points={{-68,0},{-53.5,0},{-39,0},{-10,0}}, color={85,170,255}))", "search_keywords": ["basic", "mechanical"]}, "components": [], "connections": [{"from_connector": "plugToPins_p.pin_p", "to_connector": "impedance.pin_p", "condition": null}, {"from_connector": "impedance.pin_n", "to_connector": "plugToPins_n.pin_n", "condition": null}, {"from_connector": "impedance.heatPort", "to_connector": "heatPort", "condition": null}], "variables": [], "physical_quantities": [{"name": "impedance", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}, {"name": "X_ref", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}, {"name": "temperatures", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}, {"name": "considered", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Interfaces", "Modelica.Electrical.Polyphase.Interfaces", "Modelica.Electrical.QuasiStatic.Polyphase.Basic", "Modelica.Electrical.QuasiStatic.SinglePhase.Basic", "QuasiStatic.SinglePhase.Basic", "RX_impedance", "SI", "heatPort", "impedance", "plugToPins_n", "plugToPins_p"], "inheritance_chain": ["Interfaces.TwoPlug", "Modelica.Electrical.Polyphase.Interfaces.ConditionalHeatPort"]}
{"fqn": "Modelica.Electrical.Analog.Sensors.PowerSensor", "kind": "model", "name": "PowerSensor", "package_path": ["Modelica", "Electrical", "Analog", "Sensors"], "extends": ["Modelica.Icons.RoundSensor"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  connect(pv, voltageSensor.p) annotation (Line(points={{0,100},{0,-20}}, color={0,0,255}))", "connect(voltageSensor.n, nv) annotation (Line(points={{0,-40},{0,-63},{0,-100}}, color={0,0,255}))", "connect(pc, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}))", "connect(currentSensor.n, nc)\r\n    annotation (Line(points={{-30,0},{100,0}}, color={0,0,255}))", "connect(currentSensor.i, product.u2) annotation (Line(points={{-40,-11},{-40,-30},{-36,-30},{-36,-38}}, color={0,0,127}))", "connect(voltageSensor.v, product.u1) annotation (Line(points={{-11,-30},{-24,-30},{-24,-38}}, color={0,0,127}))", "connect(product.y, power) annotation (Line(points={{-30,-61},{-30,-80},{-100,-80},{-100,-110}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Sensors\\PowerSensor.mo", "start_line": 38, "end_line": 47, "start_col": 1, "end_col": 117}}, {"equations": ["connect(pv, voltageSensor.p) annotation (Line(points={{0,100},{0,-20}}, color={0,0,255}))", "connect(voltageSensor.n, nv) annotation (Line(points={{0,-40},{0,-63},{0,-100}}, color={0,0,255}))", "connect(pc, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}))", "connect(currentSensor.n, nc)\r\n    annotation (Line(points={{-30,0},{100,0}}, color={0,0,255}))", "connect(currentSensor.i, product.u2) annotation (Line(points={{-40,-11},{-40,-30},{-36,-30},{-36,-38}}, color={0,0,127}))", "connect(voltageSensor.v, product.u1) annotation (Line(points={{-11,-30},{-24,-30},{-24,-38}}, color={0,0,127}))", "connect(product.y, power) annotation (Line(points={{-30,-61},{-30,-80},{-100,-80},{-100,-110}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Sensors\\PowerSensor.mo", "start_line": 39, "end_line": 47, "start_col": 3, "end_col": 117}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Sensors\\PowerSensor.mo", "start_line": 38, "end_line": 38, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Icons.RoundSensor | connections: 7 | eq: equation connect(pv, voltageSensor.p) annotation (Line(points={{0,100},{0,-20}}, color={0,0,255}))", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Sensors\\PowerSensor.mo", "start_line": 2, "end_line": 67, "start_col": 1, "end_col": 16}, "code_text": "model PowerSensor \"Sensor to measure the power\"\r\n  extends Modelica.Icons.RoundSensor;\r\n  Modelica.Electrical.Analog.Interfaces.PositivePin pc\r\n      \"Positive pin, current path\"\r\n    annotation (Placement(transformation(extent={{-90,-10},{-110,10}})));\r\n  Modelica.Electrical.Analog.Interfaces.NegativePin nc\r\n      \"Negative pin, current path\"\r\n    annotation (Placement(transformation(extent={{110,-10},{90,10}})));\r\n  Modelica.Electrical.Analog.Interfaces.PositivePin pv\r\n      \"Positive pin, voltage path\"\r\n    annotation (Placement(transformation(extent={{-10,110},{10,90}})));\r\n  Modelica.Electrical.Analog.Interfaces.NegativePin nv\r\n      \"Negative pin, voltage path\"\r\n    annotation (Placement(transformation(extent={{10,-110},{-10,-90}})));\r\n  Modelica.Blocks.Interfaces.RealOutput power(unit=\"W\")\r\n      \"Instantaneous power as output signal\"\r\n    annotation (Placement(transformation(\r\n          origin={-100,-110},\r\n          extent={{-10,10},{10,-10}},\r\n          rotation=270), iconTransformation(\r\n          extent={{-10,10},{10,-10}},\r\n          rotation=270,\r\n          origin={-100,-110})));\r\n  Modelica.Electrical.Analog.Sensors.VoltageSensor voltageSensor\r\n    annotation (Placement(transformation(\r\n          origin={0,-30},\r\n          extent={{10,10},{-10,-10}},\r\n          rotation=90)));\r\n  Modelica.Electrical.Analog.Sensors.CurrentSensor currentSensor\r\n    annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));\r\n  Modelica.Blocks.Math.Product product\r\n    annotation (Placement(transformation(\r\n          origin={-30,-50},\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270)));\r\n\r\nequation\r\n  connect(pv, voltageSensor.p) annotation (Line(points={{0,100},{0,-20}}, color={0,0,255}));\r\n  connect(voltageSensor.n, nv) annotation (Line(points={{0,-40},{0,-63},{0,-100}}, color={0,0,255}));\r\n  connect(pc, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-50,0}}, color={0,0,255}));\r\n  connect(currentSensor.n, nc)\r\n    annotation (Line(points={{-30,0},{100,0}}, color={0,0,255}));\r\n  connect(currentSensor.i, product.u2) annotation (Line(points={{-40,-11},{-40,-30},{-36,-30},{-36,-38}}, color={0,0,127}));\r\n  connect(voltageSensor.v, product.u1) annotation (Line(points={{-11,-30},{-24,-30},{-24,-38}}, color={0,0,127}));\r\n  connect(product.y, power) annotation (Line(points={{-30,-61},{-30,-80},{-100,-80},{-100,-110}}, color={0,0,127}));\r\n  annotation (\r\n    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n      Line(points = {{0,100},{0,70}}, color = {0,0,255}),\r\n      Line(points = {{0,-70},{0,-100}}, color = {0,0,255}),\r\n      Line(points={{-100,-100},{-100,-80},{-58,-38}}, color = {0,0,127}),\r\n      Line(points = {{-100,0},{100,0}}, color = {0,0,255}),\r\n      Text(textColor = {0,0,255}, extent={{-150,110},{150,150}},   textString = \"%name\"),\r\n      Line(points = {{0,70},{0,40}}),\r\n        Text(\r\n            extent={{-30,-10},{30,-70}},\r\n            textColor={64,64,64},\r\n            textString=\"W\")}),\r\n    Documentation(info=\"<html>\r\n<p>This power sensor measures instantaneous electrical power of a single-phase system and has a separated voltage and current path. The pins of the voltage path are pv and nv, the pins of the current path are pc and nc. The internal resistance of the current path is zero, the internal resistance of the voltage path is infinite.</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>January 12, 2006</em> by Anton Haumer implemented</li>\r\n</ul>\r\n</html>\"));\r\nend PowerSensor", "checksum": "ff06e00e09b2d3dacaf3e5e6bbdf4a56b1250487", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Sensors\\PowerSensor.mo:2-67", "component_count": 0, "connection_count": 7, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 24.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(pv, voltageSensor.p) annotation (Line(points={{0,100},{0,-20}}, color={0,0,255}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "pv", "to_connector": "voltageSensor.p", "condition": null}, {"from_connector": "voltageSensor.n", "to_connector": "nv", "condition": null}, {"from_connector": "pc", "to_connector": "currentSensor.p", "condition": null}, {"from_connector": "currentSensor.n", "to_connector": "nc", "condition": null}, {"from_connector": "currentSensor.i", "to_connector": "product.u2", "condition": null}, {"from_connector": "voltageSensor.v", "to_connector": "product.u1", "condition": null}, {"from_connector": "product.y", "to_connector": "power", "condition": null}], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Analog.Sensors", "Modelica.Icons", "currentSensor", "product", "voltageSensor"], "inheritance_chain": ["Modelica.Icons.RoundSensor"]}
{"fqn": "ModelicaTest.Tables.CombiTable1Ds.Test5", "kind": "model", "name": "Test5", "package_path": ["ModelicaTest", "Tables", "CombiTable1Ds"], "extends": ["Modelica.Icons.Example", "TestDer2"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.Example | units: 0.3, 0, 0; 0.4, 1, -1; 0.5, 0, 0; 0.6, -1, 1; 0.7, 0, 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable1Ds.mo", "start_line": 58, "end_line": 65, "start_col": 3, "end_col": 12}, "code_text": "model Test5 \"Third column, Akima\"\r\n    extends Modelica.Icons.Example;\r\n    extends TestDer2(t_new(\r\n        table=[0.3, 0, 0; 0.4, 1, -1; 0.5, 0, 0; 0.6, -1, 1; 0.7, 0, 0],\r\n        columns={3},\r\n        smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative));\r\n    annotation (experiment(StartTime=0, StopTime=1));\r\n  end Test5", "checksum": "929e08fc312ad0f2e67d967850ecb355c3561597", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable1Ds.mo:58-65", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["0.3, 0, 0; 0.4, 1, -1; 0.5, 0, 0; 0.6, -1, 1; 0.7, 0, 0", "basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [{"name": "Akima", "unit": "0.3, 0, 0; 0.4, 1, -1; 0.5, 0, 0; 0.6, -1, 1; 0.7, 0, 0", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Blocks.Types.Smoothness", "Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Example", "TestDer2"]}
{"fqn": "Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sh_T", "kind": "model", "name": "Inverse_sh_T", "package_path": ["Modelica", "Media", "Examples", "SolveOneNonlinearEquation"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "T_min", "type": "SI.Temperature", "default": "300 \"Vary temperature linearly from T_min (time=0) up to T_max (time=1)\"", "description": null}, {"name": "T_max", "type": "SI.Temperature", "default": "500 \"Vary temperature linearly from T_min (time=0) up to T_max (time=1)\"", "description": null}, {"name": "p", "type": "SI.Pressure", "default": "1.0e5 \"Fixed pressure in model\"", "description": null}], "equations": [{"equations": ["equation\r\n      // Define specific enthalpy and specific entropy\r\n      der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0", "der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0", "// Solve for temperatures\r\n      Th = Medium.temperature_phX(p, h1, fill(0.0, 0))", "Ts = Medium.temperature_psX(p, s1, fill(0.0, 0))", "// Check (h2 must be identical to h1, s2 must be identical to s1)\r\n      h2 = Medium.specificEnthalpy_pTX(p, Th, fill(0.0, 0))", "s2 = Medium.specificEntropy(Medium.setState_pT(p, Ts))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3019, "end_line": 3030, "start_col": 5, "end_col": 62}}, {"equations": ["der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0", "der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0", "// Solve for temperatures\r\n      Th = Medium.temperature_phX(p, h1, fill(0.0, 0))", "Ts = Medium.temperature_psX(p, s1, fill(0.0, 0))", "// Check (h2 must be identical to h1, s2 must be identical to s1)\r\n      h2 = Medium.specificEnthalpy_pTX(p, Th, fill(0.0, 0))", "s2 = Medium.specificEntropy(Medium.setState_pT(p, Ts))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3021, "end_line": 3030, "start_col": 7, "end_col": 62}}, {"equations": ["s2 = Medium.specificEntropy(Medium.setState_pT(p, Ts))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3030, "end_line": 3030, "start_col": 7, "end_col": 61}}, {"equations": ["h2 = Medium.specificEnthalpy_pTX(p, Th, fill(0.0, 0))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3029, "end_line": 3029, "start_col": 7, "end_col": 60}}, {"equations": ["Ts = Medium.temperature_psX(p, s1, fill(0.0, 0))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3026, "end_line": 3026, "start_col": 7, "end_col": 55}}, {"equations": ["Th = Medium.temperature_phX(p, h1, fill(0.0, 0))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3025, "end_line": 3025, "start_col": 7, "end_col": 55}}, {"equations": ["der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3022, "end_line": 3022, "start_col": 7, "end_col": 71}}, {"equations": ["der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3021, "end_line": 3021, "start_col": 7, "end_col": 71}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 3019, "end_line": 3019, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.Example | components: SI.Temperature×2, SI.SpecificEntropy×1 | params: T_min, T_max, p | units: K, K | eq: equation // Define specific en", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 2985, "end_line": 3047, "start_col": 5, "end_col": 21}, "code_text": "model Inverse_sh_T\r\n      \"Solve h = h_T(T), s = s_T(T) for T, if h or s is given for ideal gas NASA\"\r\n      extends Modelica.Icons.Example;\r\n\r\n      replaceable package Medium = Modelica.Media.Air.DryAirNasa constrainedby Modelica.Media.IdealGases.Common.SingleGasNasa\r\n        \"Medium model\"\r\n        annotation (choicesAllMatching=true);\r\n\r\n      parameter SI.Temperature T_min=300\r\n        \"Vary temperature linearly from T_min (time=0) up to T_max (time=1)\";\r\n      parameter SI.Temperature T_max=500\r\n        \"Vary temperature linearly from T_min (time=0) up to T_max (time=1)\";\r\n      parameter SI.Pressure p=1.0e5 \"Fixed pressure in model\";\r\n      final parameter SI.SpecificEnthalpy h_min=Medium.specificEnthalpy(\r\n          Medium.setState_pT(p, T_min)) \"Specific enthalpy at T_min\";\r\n      final parameter SI.SpecificEnthalpy h_max=Medium.specificEnthalpy(\r\n          Medium.setState_pT(p, T_max)) \"Specific enthalpy at T_max\";\r\n      final parameter SI.SpecificEntropy s_min=Medium.specificEntropy(\r\n          Medium.setState_pT(p, T_min)) \"Specific entropy at T_min\";\r\n      final parameter SI.SpecificEntropy s_max=Medium.specificEntropy(\r\n          Medium.setState_pT(p, T_max)) \"Specific entropy at T_max\";\r\n      SI.SpecificEnthalpy h1(start=h_min, fixed=true)\r\n        \"Pre-defined specific enthalpy\";\r\n      SI.SpecificEnthalpy h2\r\n        \"Specific enthalpy computed from Th (= h1 required)\";\r\n      SI.SpecificEntropy s1(start=s_min, fixed=true)\r\n        \"Pre-defined specific entropy\";\r\n      SI.SpecificEntropy s2 \"Specific entropy computed from Ts (= s1 required)\";\r\n      SI.Temperature Th \"Temperature computed from h1\";\r\n      SI.Temperature Ts \"Temperature computed from s1\";\r\n\r\n    protected\r\n      constant SI.Time timeUnit=1.0;\r\n\r\n    equation\r\n      // Define specific enthalpy and specific entropy\r\n      der(h1) = if time < 1.0 then 1/timeUnit*(h_max - h_min) else 0.0;\r\n      der(s1) = if time < 1.0 then 1/timeUnit*(s_max - s_min) else 0.0;\r\n\r\n      // Solve for temperatures\r\n      Th = Medium.temperature_phX(p, h1, fill(0.0, 0));\r\n      Ts = Medium.temperature_psX(p, s1, fill(0.0, 0));\r\n\r\n      // Check (h2 must be identical to h1, s2 must be identical to s1)\r\n      h2 = Medium.specificEnthalpy_pTX(p, Th, fill(0.0, 0));\r\n      s2 = Medium.specificEntropy(Medium.setState_pT(p, Ts));\r\n      annotation (experiment(StopTime=1), Documentation(info=\"<html>\r\n<p>\r\nThis models computes the temperature <code>Th</code> for predefined specific enthalpy <code>h1</code> via numerical inversion of function <a href=\\\"modelica://Modelica.Media.IdealGases.Common.Functions.h_T\\\">Modelica.Media.IdealGases.Common.Functions.h_T</a>.\r\nThe specific enthalpy <code>h2</code> is computed as check variable from temperature <code>Th</code> and must be identical to <code>h1</code>.\r\n</p>\r\n\r\n<p>\r\nIn an analogous manner, the temperature <code>Ts</code> is computed for predefined specific entropy <code>s1</code> via numerical inversion of function <a href=\\\"modelica://Modelica.Media.IdealGases.Common.Functions.s0_T\\\">Modelica.Media.IdealGases.Common.Functions.s0_T</a>.\r\nThe specific entropy <code>s2</code> is computed as check variable from temperature <code>Ts</code> and must be identical to <code>s1</code>.\r\n</p>\r\n\r\n<p>\r\nThe numerical computation of the inverse function is performed by function <a href=\\\"modelica://Modelica.Math.Nonlinear.solveOneNonlinearEquation\\\">Modelica.Math.Nonlinear.solveOneNonlinearEquation</a> in both cases.\r\n</p>\r\n\r\n</html>\"));\r\n    end Inverse_sh_T", "checksum": "99beff4608b2d7f0d5d5f9f1237f2b5fc4d359c6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo:2985-3047", "component_count": 3, "connection_count": 0, "variable_count": 6, "physical_quantity_count": 2, "parameter_count": 3, "equation_count": 9, "dependency_count": 7, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 16.5, "model_type": "basic", "physical_domains": ["thermal"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation // Define specific enthalpy and specific entropy der(h1) = if(条件なら) time < 1.0 then 1/timeUnit*(h_max - h_min) else(それ以外) 0.0", "search_keywords": ["SI.SpecificEntropy", "SI.Temperature", "ThermodynamicTemperature", "basic", "thermal"]}, "components": [{"name": "s2", "type_name": "SI.SpecificEntropy", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Specific entropy computed from Ts (= s1 required)"}, {"name": "Th", "type_name": "SI.Temperature", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Temperature computed from h1"}, {"name": "Ts", "type_name": "SI.Temperature", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Temperature computed from s1"}], "connections": [], "variables": [{"name": "h1", "type_name": "SI.SpecificEnthalpy", "prefixes": [], "attributes": {"start": "h_min", "fixed": "true"}, "binding_equation": null, "comment": "\"Pre-defined specific enthalpy\""}, {"name": "h2", "type_name": "SI.SpecificEnthalpy", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Specific enthalpy computed from Th (= h1 required)\""}, {"name": "s1", "type_name": "SI.SpecificEntropy", "prefixes": [], "attributes": {"start": "s_min", "fixed": "true"}, "binding_equation": null, "comment": "\"Pre-defined specific entropy\""}, {"name": "s2", "type_name": "SI.SpecificEntropy", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Specific entropy computed from Ts (= s1 required)\""}, {"name": "Th", "type_name": "SI.Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Temperature computed from h1\""}, {"name": "Ts", "type_name": "SI.Temperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Temperature computed from s1\""}], "physical_quantities": [{"name": "Th", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}, {"name": "Ts", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": null}], "dependencies": ["Medium", "Modelica.Icons", "Modelica.Math.Nonlinear", "Modelica.Media.Air", "Modelica.Media.IdealGases.Common", "Modelica.Media.IdealGases.Common.Functions", "SI"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "ModelicaTest.Tables.CombiTable2Ds.Test6", "kind": "model", "name": "Test6", "package_path": ["ModelicaTest", "Tables", "CombiTable2Ds"], "extends": ["Modelica.Icons.Example", "TestDer"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    connect(clock2.y, t_new.u2) annotation (Line(\r\n        points={{-59,-10},{-52,-10},{-52,4},{-42,4}}, color={0,0,127}))", "connect(clock1.y, t_new.u1) annotation (Line(\r\n        points={{-59,30},{-52,30},{-52,16},{-42,16}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo", "start_line": 151, "end_line": 155, "start_col": 3, "end_col": 73}}, {"equations": ["connect(clock2.y, t_new.u2) annotation (Line(\r\n        points={{-59,-10},{-52,-10},{-52,4},{-42,4}}, color={0,0,127}))", "connect(clock1.y, t_new.u1) annotation (Line(\r\n        points={{-59,30},{-52,30},{-52,16},{-42,16}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo", "start_line": 152, "end_line": 155, "start_col": 5, "end_col": 73}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo", "start_line": 151, "end_line": 151, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.Example | connections: 2 | units: 0, 0, 5, 10, 15, 20, 25, 30, 35, 40; 0, 58.2, 61.5, 47.9, 62.3, 34.6, 45.5, 38.2, 41.2, 41.7; 5, 37.2, ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo", "start_line": 137, "end_line": 157, "start_col": 3, "end_col": 12}, "code_text": "model Test6 \"Bilinear, u1 and u2 extrapolation\"\r\n    extends Modelica.Icons.Example;\r\n    extends TestDer(t_new(table=[0, 0, 5, 10, 15, 20, 25, 30, 35, 40; 0, 58.2,\r\n            61.5, 47.9, 62.3, 34.6, 45.5, 38.2, 41.2, 41.7; 5, 37.2, 40, 27,\r\n            41.3, 14.1, 24.5, 17.3, 20.2, 20.8; 10, 22.4, 22.5, 14.6, 22.5, 4.7,\r\n            7.2, 1.8, 2.1, 2.1; 15, 21.8, 20.5, 12.8, 17.6, 5.8, 7.6, 0.8, 0.6,\r\n            0.6; 20, 16.8, 14.4, 8.1, 6.9, 6.2, 0.6, 0.1, 0, 0; 25, 12, 8, 5.3,\r\n            2.9, 0.6, 0, 0, 0, 0; 30, 7.4, 4.8, 1.4, 0.1, 0, 0, 0, 0, 0; 35,\r\n            3.2, 0.7, 0, 0, 0, 0, 0, 0, 0; 40, 0, 0, 0, 0, 0, 0, 0, 0, 0; 45, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0; 50, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\r\n    Modelica.Blocks.Sources.ContinuousClock clock1\r\n      annotation (Placement(transformation(extent={{-80,20},{-60,40}})));\r\n    Modelica.Blocks.Sources.ContinuousClock clock2\r\n      annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));\r\n  equation\r\n    connect(clock2.y, t_new.u2) annotation (Line(\r\n        points={{-59,-10},{-52,-10},{-52,4},{-42,4}}, color={0,0,127}));\r\n    connect(clock1.y, t_new.u1) annotation (Line(\r\n        points={{-59,30},{-52,30},{-52,16},{-42,16}}, color={0,0,127}));\r\n    annotation (experiment(StartTime=0, StopTime=60));\r\n  end Test6", "checksum": "16bf1f4e156fb649591b0c1629d7f7676704c6fb", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable2Ds.mo:137-157", "component_count": 0, "connection_count": 2, "variable_count": 0, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 3, "dependency_count": 5, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 9.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(clock2.y, t_new.u2) annotation (Line( points={{-59,-10},{-52,-10},{-52,4},{-42,4}}, color={0,0,127}))", "search_keywords": ["0, 0, 5, 10, 15, 20, 25, 30, 35, 40; 0, 58.2,\r\n            61.5, 47.9, 62.3, 34.6, 45.5, 38.2, 41.2, 41.7; 5, 37.2, 40, 27,\r\n            41.3, 14.1, 24.5, 17.3, 20.2, 20.8; 10, 22.4, 22.5, 14.6, 22.5, 4.7,\r\n            7.2, 1.8, 2.1, 2.1; 15, 21.8, 20.5, 12.8, 17.6, 5.8, 7.6, 0.8, 0.6,\r\n            0.6; 20, 16.8, 14.4, 8.1, 6.9, 6.2, 0.6, 0.1, 0, 0; 25, 12, 8, 5.3,\r\n            2.9, 0.6, 0, 0, 0, 0; 30, 7.4, 4.8, 1.4, 0.1, 0, 0, 0, 0, 0; 35,\r\n            3.2, 0.7, 0, 0, 0, 0, 0, 0, 0; 40, 0, 0, 0, 0, 0, 0, 0, 0, 0; 45, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0; 50, 0, 0, 0, 0, 0, 0, 0, 0, 0", "basic"]}, "components": [], "connections": [{"from_connector": "clock2.y", "to_connector": "t_new.u2", "condition": null}, {"from_connector": "clock1.y", "to_connector": "t_new.u1", "condition": null}], "variables": [], "physical_quantities": [{"name": "extrapolation", "unit": "0, 0, 5, 10, 15, 20, 25, 30, 35, 40; 0, 58.2,\r\n            61.5, 47.9, 62.3, 34.6, 45.5, 38.2, 41.2, 41.7; 5, 37.2, 40, 27,\r\n            41.3, 14.1, 24.5, 17.3, 20.2, 20.8; 10, 22.4, 22.5, 14.6, 22.5, 4.7,\r\n            7.2, 1.8, 2.1, 2.1; 15, 21.8, 20.5, 12.8, 17.6, 5.8, 7.6, 0.8, 0.6,\r\n            0.6; 20, 16.8, 14.4, 8.1, 6.9, 6.2, 0.6, 0.1, 0, 0; 25, 12, 8, 5.3,\r\n            2.9, 0.6, 0, 0, 0, 0; 30, 7.4, 4.8, 1.4, 0.1, 0, 0, 0, 0, 0; 35,\r\n            3.2, 0.7, 0, 0, 0, 0, 0, 0, 0; 40, 0, 0, 0, 0, 0, 0, 0, 0, 0; 45, 0,\r\n            0, 0, 0, 0, 0, 0, 0, 0; 50, 0, 0, 0, 0, 0, 0, 0, 0, 0", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Blocks.Sources", "Modelica.Icons", "clock1", "clock2", "t_new"], "inheritance_chain": ["Modelica.Icons.Example", "TestDer"]}
{"fqn": "ModelicaTest.Tables.CombiTimeTable.Test40", "kind": "model", "name": "Test40", "package_path": ["ModelicaTest", "Tables", "CombiTimeTable"], "extends": ["Modelica.Icons.Example", "TestDer"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.Example | units: 0, 0; 2.5, 0; 2.5, 1; 3, 1; 3, 0", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTimeTable.mo", "start_line": 505, "end_line": 510, "start_col": 3, "end_col": 13}, "code_text": "model Test40 \"Two time events (Ticket #628), periodic\"\r\n    extends Modelica.Icons.Example;\r\n    extends TestDer(t_new(table=[0, 0; 2.5, 0; 2.5, 1; 3, 1; 3, 0], extrapolation\r\n          =Modelica.Blocks.Types.Extrapolation.Periodic));\r\n    annotation (experiment(StartTime=0, StopTime=100));\r\n  end Test40", "checksum": "88fcd2622982cb211963b4fcb70105e03198abb6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTimeTable.mo:505-510", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["0, 0; 2.5, 0; 2.5, 1; 3, 1; 3, 0", "basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [{"name": "periodic", "unit": "0, 0; 2.5, 0; 2.5, 1; 3, 1; 3, 0", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Blocks.Types.Extrapolation", "Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Example", "TestDer"]}
{"fqn": "Modelica.Electrical.Machines.Interfaces.DCMachines.PartialThermalAmbientDCMachines", "kind": "model", "name": "PartialThermalAmbientDCMachines", "package_path": ["Modelica", "Electrical", "Machines", "Interfaces", "DCMachines"], "extends": [], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  connect(constTa.y, temperatureArmature.T) annotation (Line(\r\n      points={{-80,1},{-80,18}}, color={0,0,127}))", "connect(TArmature, temperatureArmature.T) annotation (Line(\r\n      points={{-100,-120},{-100,-60},{-100,8},{-80,8},{-80,18}}, color={0,0,127}))", "connect(temperatureArmature.port, thermalPort.heatPortArmature)\r\n    annotation (Line(\r\n      points={{-80,40},{-80,102},{-1,102}}, color={191,0,0}))", "connect(temperatureBrush.port, thermalPort.heatPortBrush) annotation (\r\n      Line(\r\n      points={{20,20},{20,104},{0,104}}, color={191,0,0}))", "connect(temperatureCore.port, thermalPort.heatPortCore) annotation (\r\n      Line(\r\n      points={{40,40},{40,102},{1,102}}, color={191,0,0}))", "connect(temperatureStrayLoad.port, thermalPort.heatPortStrayLoad)\r\n    annotation (Line(\r\n      points={{60,20},{60,100},{1,100}}, color={191,0,0}))", "connect(temperatureFriction.port, thermalPort.heatPortFriction)\r\n    annotation (Line(\r\n      points={{80,40},{80,98},{1,98}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Interfaces\\DCMachines\\PartialThermalAmbientDCMachines.mo", "start_line": 65, "end_line": 85, "start_col": 1, "end_col": 58}}, {"equations": ["connect(constTa.y, temperatureArmature.T) annotation (Line(\r\n      points={{-80,1},{-80,18}}, color={0,0,127}))", "connect(TArmature, temperatureArmature.T) annotation (Line(\r\n      points={{-100,-120},{-100,-60},{-100,8},{-80,8},{-80,18}}, color={0,0,127}))", "connect(temperatureArmature.port, thermalPort.heatPortArmature)\r\n    annotation (Line(\r\n      points={{-80,40},{-80,102},{-1,102}}, color={191,0,0}))", "connect(temperatureBrush.port, thermalPort.heatPortBrush) annotation (\r\n      Line(\r\n      points={{20,20},{20,104},{0,104}}, color={191,0,0}))", "connect(temperatureCore.port, thermalPort.heatPortCore) annotation (\r\n      Line(\r\n      points={{40,40},{40,102},{1,102}}, color={191,0,0}))", "connect(temperatureStrayLoad.port, thermalPort.heatPortStrayLoad)\r\n    annotation (Line(\r\n      points={{60,20},{60,100},{1,100}}, color={191,0,0}))", "connect(temperatureFriction.port, thermalPort.heatPortFriction)\r\n    annotation (Line(\r\n      points={{80,40},{80,98},{1,98}}, color={191,0,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Interfaces\\DCMachines\\PartialThermalAmbientDCMachines.mo", "start_line": 66, "end_line": 85, "start_col": 3, "end_col": 58}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Interfaces\\DCMachines\\PartialThermalAmbientDCMachines.mo", "start_line": 65, "end_line": 65, "start_col": 1, "end_col": 9}}], "docstring": "connections: 7 | eq: equation connect(constTa.y, temperatureArmature.T) annotation (Line( points={{-80,1},{-80,18}}, color={0,0,127}))", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Interfaces\\DCMachines\\PartialThermalAmbientDCMachines.mo", "start_line": 2, "end_line": 104, "start_col": 1, "end_col": 36}, "code_text": "model PartialThermalAmbientDCMachines\r\n  \"Partial thermal ambience for DC machines\"\r\n  parameter Boolean useTemperatureInputs=false\r\n    \"If true, temperature inputs are used; else, temperatures are constant\"\r\n    annotation (Evaluate=true);\r\n  constant SI.Temperature TDefault=293.15\r\n    \"Default temperature\";\r\n  parameter SI.Temperature Ta(start=TDefault)\r\n    \"Temperature of armature\"\r\n    annotation (Dialog(enable=not useTemperatureInputs));\r\n  output SI.HeatFlowRate Q_flowArmature=temperatureArmature.port.Q_flow\r\n    \"Heat flow rate of armature\";\r\n  output SI.HeatFlowRate Q_flowCore=temperatureCore.port.Q_flow\r\n    \"Heat flow rate of core losses\";\r\n  output SI.HeatFlowRate Q_flowStrayLoad=\r\n      temperatureStrayLoad.port.Q_flow\r\n    \"Heat flow rate of stray load losses\";\r\n  output SI.HeatFlowRate Q_flowFriction=temperatureFriction.port.Q_flow\r\n    \"Heat flow rate of friction losses\";\r\n  output SI.HeatFlowRate Q_flowBrush=temperatureBrush.port.Q_flow\r\n    \"Heat flow rate of brushes\";\r\n  replaceable Machines.Interfaces.DCMachines.PartialThermalPortDCMachines thermalPort\r\n    annotation (Placement(transformation(extent={{-10,90},{10,110}})));\r\n  Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature\r\n    temperatureArmature annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={-80,30})));\r\n  Modelica.Thermal.HeatTransfer.Sources.FixedTemperature temperatureCore(\r\n      final T=TDefault) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={40,30})));\r\n  Modelica.Thermal.HeatTransfer.Sources.FixedTemperature\r\n    temperatureStrayLoad(final T=TDefault) annotation (Placement(\r\n        transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={60,10})));\r\n  Modelica.Thermal.HeatTransfer.Sources.FixedTemperature\r\n    temperatureFriction(final T=TDefault) annotation (Placement(\r\n        transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={80,30})));\r\n  Modelica.Blocks.Interfaces.RealInput TArmature(unit=\"K\") if useTemperatureInputs\r\n    \"Temperature of armature\" annotation (Placement(transformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=90,\r\n        origin={-100,-120}), iconTransformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=90,\r\n        origin={-100,-120})));\r\n  Modelica.Blocks.Sources.Constant constTa(final k=Ta) if not\r\n    useTemperatureInputs annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={-80,-10})));\r\n  Modelica.Thermal.HeatTransfer.Sources.FixedTemperature temperatureBrush(\r\n      final T=TDefault) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={20,10})));\r\nequation\r\n  connect(constTa.y, temperatureArmature.T) annotation (Line(\r\n      points={{-80,1},{-80,18}}, color={0,0,127}));\r\n  connect(TArmature, temperatureArmature.T) annotation (Line(\r\n      points={{-100,-120},{-100,-60},{-100,8},{-80,8},{-80,18}}, color={0,0,127}));\r\n\r\n  connect(temperatureArmature.port, thermalPort.heatPortArmature)\r\n    annotation (Line(\r\n      points={{-80,40},{-80,102},{-1,102}}, color={191,0,0}));\r\n  connect(temperatureBrush.port, thermalPort.heatPortBrush) annotation (\r\n      Line(\r\n      points={{20,20},{20,104},{0,104}}, color={191,0,0}));\r\n  connect(temperatureCore.port, thermalPort.heatPortCore) annotation (\r\n      Line(\r\n      points={{40,40},{40,102},{1,102}}, color={191,0,0}));\r\n  connect(temperatureStrayLoad.port, thermalPort.heatPortStrayLoad)\r\n    annotation (Line(\r\n      points={{60,20},{60,100},{1,100}}, color={191,0,0}));\r\n  connect(temperatureFriction.port, thermalPort.heatPortFriction)\r\n    annotation (Line(\r\n      points={{80,40},{80,98},{1,98}}, color={191,0,0}));\r\n  annotation (Icon(graphics={Rectangle(\r\n                extent={{-100,100},{100,-100}},\r\n                pattern=LinePattern.None,\r\n                fillColor={159,159,223},\r\n                fillPattern=FillPattern.Backward),Line(\r\n                points={{-14,0},{54,0}},\r\n                color={191,0,0},\r\n                thickness=0.5,\r\n                origin={0,-6},\r\n                rotation=90),Polygon(\r\n                points={{-20,-20},{-20,20},{20,0},{-20,-20}},\r\n                lineColor={191,0,0},\r\n                fillColor={191,0,0},\r\n                fillPattern=FillPattern.Solid,\r\n                origin={0,68},\r\n                rotation=90)}), Documentation(info=\"<html>\r\nPartial thermal ambience for induction machines\r\n</html>\"));\r\nend PartialThermalAmbientDCMachines", "checksum": "c1de88f329b34849bb4627c758585c152b228109", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Interfaces\\DCMachines\\PartialThermalAmbientDCMachines.mo:2-104", "component_count": 0, "connection_count": 7, "variable_count": 5, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 19, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 24.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(constTa.y, temperatureArmature.T) annotation (Line( points={{-80,1},{-80,18}}, color={0,0,127}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "constTa.y", "to_connector": "temperatureArmature.T", "condition": null}, {"from_connector": "TArmature", "to_connector": "temperatureArmature.T", "condition": null}, {"from_connector": "temperatureArmature.port", "to_connector": "thermalPort.heatPortArmature", "condition": null}, {"from_connector": "temperatureBrush.port", "to_connector": "thermalPort.heatPortBrush", "condition": null}, {"from_connector": "temperatureCore.port", "to_connector": "thermalPort.heatPortCore", "condition": null}, {"from_connector": "temperatureStrayLoad.port", "to_connector": "thermalPort.heatPortStrayLoad", "condition": null}, {"from_connector": "temperatureFriction.port", "to_connector": "thermalPort.heatPortFriction", "condition": null}], "variables": [{"name": "Q_flowArmature", "type_name": "SI.HeatFlowRate", "prefixes": ["output"], "attributes": {}, "binding_equation": "temperatureArmature.port.Q_flow\r\n    \"Heat flow rate of armature\"", "comment": null}, {"name": "Q_flowCore", "type_name": "SI.HeatFlowRate", "prefixes": ["output"], "attributes": {}, "binding_equation": "temperatureCore.port.Q_flow\r\n    \"Heat flow rate of core losses\"", "comment": null}, {"name": "Q_flowStrayLoad", "type_name": "SI.HeatFlowRate", "prefixes": ["output"], "attributes": {}, "binding_equation": "temperatureStrayLoad.port.Q_flow\r\n    \"Heat flow rate of stray load losses\"", "comment": null}, {"name": "Q_flowFriction", "type_name": "SI.HeatFlowRate", "prefixes": ["output"], "attributes": {}, "binding_equation": "temperatureFriction.port.Q_flow\r\n    \"Heat flow rate of friction losses\"", "comment": null}, {"name": "Q_flowBrush", "type_name": "SI.HeatFlowRate", "prefixes": ["output"], "attributes": {}, "binding_equation": "temperatureBrush.port.Q_flow\r\n    \"Heat flow rate of brushes\"", "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern", "LinePattern", "Machines.Interfaces.DCMachines", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Sources", "Modelica.Thermal.HeatTransfer.Sources", "SI", "constTa", "temperatureArmature", "temperatureArmature.port", "temperatureBrush", "temperatureBrush.port", "temperatureCore", "temperatureCore.port", "temperatureFriction", "temperatureFriction.port", "temperatureStrayLoad", "temperatureStrayLoad.port", "thermalPort"], "inheritance_chain": []}
{"fqn": "ModelicaTest.Fluid.TestPipesAndValves.SeriesPipes2", "kind": "model", "name": "SeriesPipes2", "package_path": ["ModelicaTest", "Fluid", "TestPipesAndValves"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    connect(source.ports[1], pipe1.port_a) annotation (Line(points={{-88,6},{-83,6},\r\n            {-78,6}}, color={0,127,255}))", "connect(valveIncompressible1.port_b, sink.ports[1]) annotation (Line(points={{\r\n            28,-40},{46,-40},{46,-14},{62,-14}}, color={0,127,255}))", "connect(pipe3.port_b, valveIncompressible1.port_a) annotation (Line(points={{-10,-40},\r\n            {8,-40}}, color={0,127,255}))", "connect(pipe1.port_b, pipe3.port_a) annotation (Line(points={{-58,6},{-44,6},\r\n            {-44,-40},{-30,-40}}, color={0,127,255}))", "connect(valveOpening1.y, valveIncompressible1.opening) annotation (Line(\r\n        points={{1,0},{18,0},{18,-32}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestPipesAndValves.mo", "start_line": 1593, "end_line": 1603, "start_col": 3, "end_col": 59}}, {"equations": ["connect(source.ports[1], pipe1.port_a) annotation (Line(points={{-88,6},{-83,6},\r\n            {-78,6}}, color={0,127,255}))", "connect(valveIncompressible1.port_b, sink.ports[1]) annotation (Line(points={{\r\n            28,-40},{46,-40},{46,-14},{62,-14}}, color={0,127,255}))", "connect(pipe3.port_b, valveIncompressible1.port_a) annotation (Line(points={{-10,-40},\r\n            {8,-40}}, color={0,127,255}))", "connect(pipe1.port_b, pipe3.port_a) annotation (Line(points={{-58,6},{-44,6},\r\n            {-44,-40},{-30,-40}}, color={0,127,255}))", "connect(valveOpening1.y, valveIncompressible1.opening) annotation (Line(\r\n        points={{1,0},{18,0},{18,-32}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestPipesAndValves.mo", "start_line": 1594, "end_line": 1603, "start_col": 5, "end_col": 59}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestPipesAndValves.mo", "start_line": 1593, "end_line": 1593, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.Example | components: Modelica.Blocks.Sources.TimeTable×1 | connections: 5 | eq: equation connect(source.ports[1], pipe1.port_a) annotati", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestPipesAndValves.mo", "start_line": 1539, "end_line": 1609, "start_col": 3, "end_col": 19}, "code_text": "model SeriesPipes2\r\n    extends Modelica.Icons.Example;\r\n    // replaceable package Medium = Modelica.Media.Air.SimpleAir;\r\n    replaceable package Medium = Modelica.Media.Water.StandardWater;\r\n    Modelica.Fluid.Sources.Boundary_pT source(nPorts=1,\r\n      redeclare package Medium = Medium,\r\n      p=5.0e5,\r\n      T=300) annotation (Placement(transformation(extent={{-100,0},{-88,12}})));\r\n    Modelica.Fluid.Pipes.DynamicPipe pipe1(\r\n      redeclare package Medium = Medium,\r\n      p_a_start=5.0e5,\r\n      use_T_start=true,\r\n      length=10,\r\n      diameter=2.54e-2,\r\n      p_b_start=4.95e5,\r\n      redeclare model FlowModel =\r\n          Modelica.Fluid.Pipes.BaseClasses.FlowModels.DetailedPipeFlow,\r\n      nNodes=1,\r\n      modelStructure=Modelica.Fluid.Types.ModelStructure.a_vb)\r\n                        annotation (Placement(transformation(extent={{-78,-4},{\r\n              -58,16}})));\r\n    Modelica.Fluid.Valves.ValveIncompressible valveIncompressible1(\r\n      redeclare package Medium = Medium,\r\n      CvData=Modelica.Fluid.Types.CvTypes.OpPoint,\r\n      m_flow_nominal=1,\r\n      rho_nominal=5,\r\n      filteredOpening=true,\r\n      riseTime=0.1,\r\n      dp_nominal=100000,\r\n      dp(start=400000))\r\n                  annotation (Placement(transformation(extent={{8,-50},{28,-30}})));\r\n    Modelica.Fluid.Sources.Boundary_pT sink(nPorts=1,\r\n      redeclare package Medium = Medium,\r\n      T=300,\r\n      p=1.0e5) annotation (Placement(transformation(extent={{74,-20},{62,-8}})));\r\n    Modelica.Fluid.Pipes.DynamicPipe pipe3(\r\n      redeclare package Medium = Medium,\r\n      use_T_start=true,\r\n      length=10,\r\n      diameter=2.54e-2,\r\n      p_a_start=4.95e5,\r\n      p_b_start=4.90e5,\r\n      redeclare model FlowModel =\r\n          Modelica.Fluid.Pipes.BaseClasses.FlowModels.DetailedPipeFlow,\r\n      nNodes=1,\r\n      modelStructure=Modelica.Fluid.Types.ModelStructure.a_vb)\r\n                        annotation (Placement(transformation(extent={{-30,-50},\r\n              {-10,-30}})));\r\n    Modelica.Blocks.Sources.TimeTable valveOpening1(offset=0, table=[0,1; 1,1;\r\n          1,0; 100,0]) annotation (Placement(transformation(extent={{-20,-10},{\r\n              0,10}})));\r\n    inner Modelica.Fluid.System system(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial, use_eps_Re=true)\r\n                          annotation (Placement(transformation(extent={{-100,60},\r\n              {-80,80}})));\r\n  equation\r\n    connect(source.ports[1], pipe1.port_a) annotation (Line(points={{-88,6},{-83,6},\r\n            {-78,6}}, color={0,127,255}));\r\n    connect(valveIncompressible1.port_b, sink.ports[1]) annotation (Line(points={{\r\n            28,-40},{46,-40},{46,-14},{62,-14}}, color={0,127,255}));\r\n    connect(pipe3.port_b, valveIncompressible1.port_a) annotation (Line(points={{-10,-40},\r\n            {8,-40}}, color={0,127,255}));\r\n    connect(pipe1.port_b, pipe3.port_a) annotation (Line(points={{-58,6},{-44,6},\r\n            {-44,-40},{-30,-40}}, color={0,127,255}));\r\n    connect(valveOpening1.y, valveIncompressible1.opening) annotation (Line(\r\n        points={{1,0},{18,0},{18,-32}}, color={0,0,127}));\r\n    annotation (\r\n      experiment(StopTime=5),\r\n      Documentation(info=\"<html>\r\nSimulation starts with valve 1 open. At t=1, valve 1 closes.\r\n</html>\"));\r\n  end SeriesPipes2", "checksum": "65bc4422eaf9f7df849eaddbc53fa62aa21c3480", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Fluid\\TestPipesAndValves.mo:1539-1609", "component_count": 1, "connection_count": 5, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 18, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 20.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(source.ports[1], pipe1.port_a) annotation (Line(points={{-88,6},{-83,6}, {-78,6}}, color={0,127,255}))", "search_keywords": ["Modelica.Blocks.Sources.TimeTable", "basic"]}, "components": [{"name": "valveOpening1", "type_name": "Modelica.Blocks.Sources.TimeTable", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "source.ports[1]", "to_connector": "pipe1.port_a", "condition": null}, {"from_connector": "valveIncompressible1.port_b", "to_connector": "sink.ports[1]", "condition": null}, {"from_connector": "pipe3.port_b", "to_connector": "valveIncompressible1.port_a", "condition": null}, {"from_connector": "pipe1.port_b", "to_connector": "pipe3.port_a", "condition": null}, {"from_connector": "valveOpening1.y", "to_connector": "valveIncompressible1.opening", "condition": null}], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Blocks.Sources", "Modelica.Fluid", "Modelica.Fluid.Pipes", "Modelica.Fluid.Pipes.BaseClasses.FlowModels", "Modelica.Fluid.Sources", "Modelica.Fluid.Types.CvTypes", "Modelica.Fluid.Types.Dynamics", "Modelica.Fluid.Types.ModelStructure", "Modelica.Fluid.Valves", "Modelica.Icons", "Modelica.Media.Air", "Modelica.Media.Water", "pipe1", "pipe3", "sink", "source", "valveIncompressible1", "valveOpening1"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Digital.Registers.DFFR", "kind": "model", "name": "DFFR", "package_path": ["Modelica", "Electrical", "Digital", "Registers"], "extends": [], "imports": ["D", "L", "S", "T"], "parameters": [{"name": "strength", "type": "D.Interfaces.Strength", "default": "S.'S_X01' \"Output strength\"", "description": null}, {"name": "n(min", "type": "Integer", "default": "1) = 1 \"Data width\"", "description": null}], "equations": [{"equations": ["algorithm\r\n        if change(clock) or change(reset) then\r\n\r\n          if change(clock) then\r\n            if initial() then\r\n              clock_flag := T.ClockMap[L.'U',clock]", "else\r\n              clock_flag := T.ClockMap[pre(clock),clock]", "end if", "end if", "reset_flag :=  ResetMap[reset]", "for i in 1:n loop\r\n            if reset_flag == 1 then\r\n              nextstate[i] := L.'U'", "elseif reset_flag == 2 then\r\n              nextstate[i] := T.StrengthMap[L.'0', strength]", "elseif reset_flag == 3 then\r\n              if clock_flag == 0 then\r\n                break", "elseif clock_flag == 1 then\r\n                nextstate[i] := T.StrengthMap[dataIn[i], strength]", "else\r\n                if (next_assign_val[i] == T.StrengthMap[dataIn[i], strength])\r\n                  or (next_assign_val[i] == L.'U') then\r\n                    break", "elseif dataIn[i] == L.'U' then\r\n                    nextstate[i] := L.'U'", "else\r\n                    nextstate[i] := T.StrengthMap[L.'X', strength]", "end if", "end if", "elseif reset_flag == 4 then\r\n              if (next_assign_val[i] == T.StrengthMap[L.'0', strength])\r\n                and (dataIn[i] == L.'0' or dataIn[i] == L.'L' or clock_flag == 0) then\r\n                  break", "elseif (dataIn[i] == L.'0' or dataIn[i] == L.'L') and (clock_flag == 1) then\r\n                  nextstate[i] := T.StrengthMap[L.'0', strength]", "elseif ((next_assign_val[i] == L.'U') and not (clock_flag == 1))\r\n                or ((dataIn[i] == L.'U') and not (clock_flag == 0)) then\r\n                  nextstate[i] := L.'U'", "else\r\n                nextstate[i] := T.StrengthMap[L.'X', strength]", "end if", "end if", "end for", "end if", "next_assign_val := nextstate", "dataOut := nextstate"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 4437, "end_line": 4485, "start_col": 9, "end_col": 30}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 4437, "end_line": 4437, "start_col": 9, "end_col": 18}}], "docstring": "components: Integer×1, D.Interfaces.Logic×1 | params: strength, n(min | units: L, L.'X', strength | eq: algorithm if(条件なら)(条件なら) change(clock) or change(reset) ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 4399, "end_line": 4581, "start_col": 9, "end_col": 17}, "code_text": "model DFFR \"Edge triggered register bank with reset\"\r\n          import D = Modelica.Electrical.Digital;\r\n          import L = Modelica.Electrical.Digital.Interfaces.Logic;\r\n          import S = Modelica.Electrical.Digital.Interfaces.Strength;\r\n          import T = Modelica.Electrical.Digital.Tables;\r\n          parameter Integer ResetMap[L] = {1, 4, 3, 2, 4, 4, 3, 2, 4}\r\n        \"Function selection, defaults for high active reset\";\r\n          parameter D.Interfaces.Strength strength = S.'S_X01'\r\n        \"Output strength\";\r\n          parameter Integer n(min=1) = 1 \"Data width\";\r\n\r\n          D.Interfaces.DigitalInput reset\r\n            annotation (Placement(transformation(extent={{-10,-100},{10,-80}}),\r\n                iconTransformation(extent={{-10,-100},{10,-80}})));\r\n          D.Interfaces.DigitalInput clock annotation (Placement(transformation(\r\n                  extent={{-90,-30},{-70,-10}}),iconTransformation(extent={{-90,-30},{\r\n                    -70,-10}})));\r\n          D.Interfaces.DigitalInput dataIn[n] annotation (Placement(transformation(\r\n                  extent={{-90,20},{-70,40}}), iconTransformation(extent={{-90,20},{-70,\r\n                    40}})));\r\n          D.Interfaces.DigitalOutput dataOut[n] annotation (Placement(\r\n                transformation(extent={{64,26},{84,46}}),  iconTransformation(\r\n                  extent={{69,20},{89,40}})));\r\n    protected\r\n                  Integer clock_flag(start=0);\r\n                    // 0: 0-Transition\r\n                    // 1: rising edge\r\n                    // 2: X-Transition\r\n\r\n                   Integer reset_flag(start=1);\r\n                    // 1: output := U\r\n                    // 2: output := 0\r\n                    // 3: output := -dataInUX\r\n                    // 4: output := U-0X\r\n    protected\r\n                  D.Interfaces.Logic nextstate[n](start=fill(L.'U',n));\r\n                  D.Interfaces.Logic next_assign_val[n](start=fill(L.'U',n));\r\n\r\n        algorithm\r\n        if change(clock) or change(reset) then\r\n\r\n          if change(clock) then\r\n            if initial() then\r\n              clock_flag := T.ClockMap[L.'U',clock];\r\n            else\r\n              clock_flag := T.ClockMap[pre(clock),clock];\r\n            end if;\r\n          end if;\r\n\r\n          reset_flag :=  ResetMap[reset];\r\n          for i in 1:n loop\r\n            if reset_flag == 1 then\r\n              nextstate[i] := L.'U';\r\n            elseif reset_flag == 2 then\r\n              nextstate[i] := T.StrengthMap[L.'0', strength];\r\n            elseif reset_flag == 3 then\r\n              if clock_flag == 0 then\r\n                break;\r\n              elseif clock_flag == 1 then\r\n                nextstate[i] := T.StrengthMap[dataIn[i], strength];\r\n              else\r\n                if (next_assign_val[i] == T.StrengthMap[dataIn[i], strength])\r\n                  or (next_assign_val[i] == L.'U') then\r\n                    break;\r\n                elseif dataIn[i] == L.'U' then\r\n                    nextstate[i] := L.'U';\r\n                else\r\n                    nextstate[i] := T.StrengthMap[L.'X', strength];\r\n                end if;\r\n              end if;\r\n            elseif reset_flag == 4 then\r\n              if (next_assign_val[i] == T.StrengthMap[L.'0', strength])\r\n                and (dataIn[i] == L.'0' or dataIn[i] == L.'L' or clock_flag == 0) then\r\n                  break;\r\n              elseif (dataIn[i] == L.'0' or dataIn[i] == L.'L') and (clock_flag == 1) then\r\n                  nextstate[i] := T.StrengthMap[L.'0', strength];\r\n              elseif ((next_assign_val[i] == L.'U') and not (clock_flag == 1))\r\n                or ((dataIn[i] == L.'U') and not (clock_flag == 0)) then\r\n                  nextstate[i] := L.'U';\r\n              else\r\n                nextstate[i] := T.StrengthMap[L.'X', strength];\r\n              end if;\r\n            end if;\r\n          end for;\r\n        end if;\r\n        next_assign_val := nextstate;\r\n        dataOut := nextstate;\r\n          annotation (Icon(coordinateSystem(\r\n                  preserveAspectRatio=true, extent={{-100,-100},{100,100}}),\r\n            graphics={\r\n            Rectangle(\r\n              extent={{-50,60},{50,-60}},\r\n              lineColor={127,33,107},\r\n              lineThickness=0.5,\r\n              fillPattern=FillPattern.Solid,\r\n              fillColor={255,255,255}),\r\n            Line(\r\n              points={{-70,30},{-50,30}},\r\n              color={127,33,107},\r\n              thickness=1),\r\n            Line(\r\n              points={{50,30},{76,30}},\r\n              color={127,33,107},\r\n              thickness=1),\r\n            Line(\r\n              points={{-80,-20},{-50,-20}},\r\n              color={127,33,107}),\r\n            Line(\r\n              points={{0,-84},{0,-60}},\r\n              color={127,33,107}),\r\n            Line(\r\n              points={{-50,-8},{-34,-20},{-50,-32}},\r\n              color={127,33,107}),\r\n            Text(\r\n              extent={{-30,54},{20,8}},\r\n              textColor={127,33,107},\r\n              textString=\"DFFR\"),\r\n            Text(\r\n              extent={{-32,-14},{-6,-26}},\r\n              textColor={127,33,107},\r\n              textString=\"clock\"),\r\n            Text(\r\n              extent={{-14,-44},{12,-56}},\r\n              textColor={127,33,107},\r\n              textString=\"reset\")}),\r\n            Documentation(info=\"<html>\r\n<p>Description in VHDL is given by http://www.cs.sfu.ca/~ggbaker/reference/std_logic/src/std_logic_entities</p>\r\n<p><strong>Truth Table for high active reset:</strong></p>\r\n\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>DataIn</strong></td>\r\n      <td><strong>Clock</strong></td>\r\n      <td><strong>Reset</strong></td>\r\n      <td><strong>DataOut</strong></td>\r\n      <td>Map</td>\r\n  </tr>\r\n\r\n  <tr><td>*</td> <td>*</td> <td>U</td>  <td>U</td> <td>1</td> </tr>\r\n  <tr><td>*</td> <td>*</td> <td>1</td>  <td>0</td> <td>2</td> </tr>\r\n  <tr><td>*</td> <td>0-Trns</td> <td>0</td>  <td>NC</td> <td>3</td> </tr>\r\n  <tr><td>*</td> <td>1-Trns</td> <td>0</td>  <td>DataIn</td> <td>3</td> </tr>\r\n  <tr><td>*</td> <td>X-Trns</td> <td>0</td>  <td>X or U or NC</td> <td>3</td> </tr>\r\n  <tr><td>*</td> <td>*</td> <td>X</td> <td>X or U or 0 or NC</td> <td>4</td> </tr>\r\n</table>\r\n\r\n<p><strong>Truth Table for low active reset:</strong></p>\r\n\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>DataIn</strong></td>\r\n      <td><strong>Clock</strong></td>\r\n      <td><strong>Reset</strong></td>\r\n      <td><strong>DataOut</strong></td>\r\n      <td>Map</td>\r\n  </tr>\r\n\r\n  <tr><td>*</td> <td>*</td> <td>U</td>  <td>U</td> <td>1</td> </tr>\r\n  <tr><td>*</td> <td>*</td> <td>0</td>  <td>0</td> <td>2</td> </tr>\r\n  <tr><td>*</td> <td>0-Trns</td> <td>1</td>  <td>NC</td> <td>3</td> </tr>\r\n  <tr><td>*</td> <td>1-Trns</td> <td>1</td>  <td>DataIn</td> <td>3</td> </tr>\r\n  <tr><td>*</td> <td>X-Trns</td> <td>1</td>  <td>X or U or NC</td> <td>3</td> </tr>\r\n  <tr><td>*</td> <td>*</td> <td>X</td> <td>X or U or 0 or NC</td> <td>4</td> </tr>\r\n</table>\r\n\r\n<blockquote><pre>\r\n  *  = do not care\r\n  U  = L.'U'\r\n  0  = L.'0' or L.'L'\r\n  1  = L.'1' or L.'H'\r\n  X  = L.'X' or L.'W' or L.'Z' or L.'-'\r\n  NC = no change\r\n\r\nClock transition definitions:\r\n  1-Trns: 0 -> 1\r\n  0-Trns: ~ -> 0 or 1 -> * or X -> X|U or U -> X|U\r\n  X-Trns: 0 -> X|U or X|U -> 1\r\n</pre></blockquote>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>September 11, 2009</em> created by Ulrich Donath<br>\r\n       </li>\r\n</ul>\r\n</html>\"));\r\n        end DFFR", "checksum": "9f18ac0a3bde3a5ed64d48721daf3b2caccb0f6b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo:4399-4581", "component_count": 2, "connection_count": 0, "variable_count": 9, "physical_quantity_count": 2, "parameter_count": 2, "equation_count": 2, "dependency_count": 10, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 7.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "algorithm if(条件なら) change(clock) or change(reset) then if(条件なら) change(clock) then if(条件なら) initial() then clock_flag := T.ClockMap[L.'U',clock]", "search_keywords": ["D.Interfaces.Logic", "Integer", "L.'X', strength", "basic"]}, "components": [{"name": "reset_flag", "type_name": "Integer", "prefixes": [], "modifications": {"start": "1"}, "condition": null, "array_dims": null, "comment": null}, {"name": "next_assign_val", "type_name": "D.Interfaces.Logic", "prefixes": [], "modifications": {"start": "fill(L.'U'"}, "condition": null, "array_dims": "[n]", "comment": null}], "connections": [], "variables": [{"name": "D", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital", "comment": null}, {"name": "L", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Interfaces.Logic", "comment": null}, {"name": "S", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Interfaces.Strength", "comment": null}, {"name": "T", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Tables", "comment": null}, {"name": "clock_flag", "type_name": "elseif", "prefixes": [], "attributes": {"start": "0"}, "binding_equation": "1 then\r\n                nextstate[i] := T.StrengthMap[dataIn[i], strength]", "comment": null}, {"name": "reset_flag", "type_name": "elseif", "prefixes": [], "attributes": {"start": "1"}, "binding_equation": "4 then\r\n              if (next_assign_val[i] == T.StrengthMap[L.'0', strength])\r\n                and (dataIn[i] == L.'0' or dataIn[i] == L.'L' or clock_flag == 0) then\r\n                  break", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dataIn", "type_name": "elseif", "prefixes": [], "attributes": {}, "binding_equation": "L.'U' then\r\n                    nextstate[i] := L.'U'", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "reset", "unit": "L", "display_unit": null, "quantity": null, "nominal": null}, {"name": "width", "unit": "L.'X', strength", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["D", "D.Interfaces", "FillPattern", "L", "Modelica.Electrical", "Modelica.Electrical.Digital", "Modelica.Electrical.Digital.Interfaces", "S", "T", "www.cs.sfu"], "inheritance_chain": []}
{"fqn": "Modelica.Media.Interfaces.PartialPureSubstance.extends", "kind": "model", "name": "extends", "package_path": ["Modelica", "Media", "Interfaces", "PartialPureSubstance"], "extends": ["BaseProperties"], "imports": [], "parameters": [], "equations": [], "docstring": "extends BaseProperties", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 4765, "end_line": 4767, "start_col": 27, "end_col": 23}, "code_text": "partial model extends BaseProperties(final\r\n        standardOrderComponents=true)\r\n    end BaseProperties", "checksum": "475e61fec7c29de7406bfadbe049febc0ea94ba3", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo:4765-4767", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": ["BaseProperties"]}
{"fqn": "ModelicaTest.Tables.CombiTable1Dv.Test27", "kind": "model", "name": "Test27", "package_path": ["ModelicaTest", "Tables", "CombiTable1Dv"], "extends": ["Modelica.Icons.Example", "TestDer2"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.Example", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable1Dv.mo", "start_line": 256, "end_line": 262, "start_col": 3, "end_col": 13}, "code_text": "model Test27 \"Fritsch-Butland, data set AKIMA 3 (Ticket #1717)\"\r\n    extends Modelica.Icons.Example;\r\n    extends TestDer2(t_new(\r\n      table=[0,10;2,10;3,10;5,10;6,10;8,10;9,10.5;11,15;12,50;14,60;15,85],\r\n      smoothness=Modelica.Blocks.Types.Smoothness.MonotoneContinuousDerivative1));\r\n    annotation (experiment(StartTime=0, StopTime=15));\r\n  end Test27", "checksum": "232dfbfc69f5fafdc2bca2c6d63b85e5a840e54f", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTable1Dv.mo:256-262", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Blocks.Types.Smoothness", "Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Example", "TestDer2"]}
{"fqn": "Modelica.Magnetic.FluxTubes.Examples.Hysteresis.ThreePhaseTransformerWithRectifier", "kind": "model", "name": "ThreePhaseTransformerWithRectifier", "package_path": ["Modelica", "Magnetic", "FluxTubes", "Examples", "Hysteresis"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  connect(vSource1.n, ground1.p) annotation (Line(points={{-140,-50},{-140,-70},{-110,-70}}, color={0,0,255}))", "connect(vSource2.n, ground1.p) annotation (Line(points={{-120,-50},{-120,-70},{-110,-70}}, color={0,0,255}))", "connect(vSource3.n, ground1.p) annotation (Line(points={{-100,-50},{-100,-70},{-110,-70}}, color={0,0,255}))", "connect(resistor1.n, transformer.p1) annotation (Line(points={{-60,15},{-50,15},{-50,1},{-40,1}}, color={0,0,255}))", "connect(resistor1.p, vSource1.p) annotation (Line(points={{-80,15},{-140,15},{-140,-30}}, color={0,0,255}))", "connect(resistor2.n, transformer.p2) annotation (Line(points={{-60,-5},{-40,-5}}, color={0,0,255}))", "connect(resistor2.p, vSource2.p) annotation (Line(points={{-80,-5},{-120,-5},{-120,-30}}, color={0,0,255}))", "connect(vSource3.p, resistor3.p) annotation (Line(points={{-100,-30},{-100,-25},{-80,-25}}, color={0,0,255}))", "connect(resistor3.n, transformer.p3) annotation (Line(points={{-60,-25},{-50,-25},{-50,-11},{-40,-11}}, color={0,0,255}))", "connect(diode2.n, diode1.p) annotation (Line(points={{30,-20},{30,10}}, color={0,0,255}))", "connect(diode4.n, diode3.p) annotation (Line(points={{50,-20},{50,10}}, color={0,0,255}))", "connect(diode6.n, diode5.p) annotation (Line(points={{70,-20},{70,10}}, color={0,0,255}))", "connect(diode2.p, diode4.p) annotation (Line(points={{30,-40},{50,-40}}, color={0,0,255}))", "connect(diode4.p, diode6.p) annotation (Line(points={{50,-40},{70,-40}}, color={0,0,255}))", "connect(diode1.n, diode3.n) annotation (Line(points={{30,30},{50,30}}, color={0,0,255}))", "connect(diode3.n, diode5.n) annotation (Line(points={{50,30},{70,30}}, color={0,0,255}))", "connect(diode5.n, capacitor1.p) annotation (Line(points={{70,30},{90,30}}, color={0,0,255}))", "connect(resistorL.p, capacitor1.p) annotation (Line(points={{120,5},{120,30},{90,30}}, color={0,0,255}))", "connect(transformer.n1, inductor1.p) annotation (Line(points={{-20,1},{-10,1},{-10,14}}, color={0,0,255}))", "connect(transformer.n2, inductor2.p) annotation (Line(points={{-20,-5},{-10,-5}}, color={0,0,255}))", "connect(inductor2.n, diode3.p) annotation (Line(points={{10,-5},{50,-5},{50,10}}, color={0,0,255}))", "connect(inductor3.p, transformer.n3) annotation (Line(points={{-10,-25},{-10,-11},{-20,-11}}, color={0,0,255}))", "connect(inductor3.n, diode6.n) annotation (Line(points={{10,-25},{10,-10},{70,-10},{70,-20}}, color={0,0,255}))", "connect(capacitor2.n, diode6.p) annotation (Line(points={{90,-40},{70,-40}}, color={0,0,255}))", "connect(capacitor2.p, capacitor1.n) annotation (Line(points={{90,-20},{90,10}},color={0,0,255}))", "connect(inductor1.n, diode1.p) annotation (Line(points={{10,14},{10,0},{30,0},{30,10}}, color={0,0,255}))", "connect(resistorL.n, capacitor2.n) annotation (Line(points={{120,-15},{120,-40},{90,-40}}, color={0,0,255}))", "connect(transformer.starPoint1, ground1.p) annotation (Line(points={{-34,-15},{-34,-70},{-110,-70}}, color={0,0,255}))", "connect(transformer.starPoint2, ground2.p) annotation (Line(points={{-26,-15},{-26,-70}}, color={0,0,255}))", "connect(ground2.p, capacitor2.p) annotation (Line(points={{-26,-70},{105,-70},{105,-4},{90,-4},{90,-20}}, color={0,0,255}))", "connect(rExp3.y,pdissCopAvg. u) annotation (Line(points={{-79.4,45},{-51,45}}, color={0,0,127}))", "connect(rExp2.y,pdissEddyAvg. u) annotation (Line(points={{-79.4,65},{-51,65}}, color={0,0,127}))", "connect(rExp1.y,pdissStatAvg. u) annotation (Line(points={{-80.45,85},{-51,85}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 112, "end_line": 145, "start_col": 1, "end_col": 102}}, {"equations": ["connect(vSource1.n, ground1.p) annotation (Line(points={{-140,-50},{-140,-70},{-110,-70}}, color={0,0,255}))", "connect(vSource2.n, ground1.p) annotation (Line(points={{-120,-50},{-120,-70},{-110,-70}}, color={0,0,255}))", "connect(vSource3.n, ground1.p) annotation (Line(points={{-100,-50},{-100,-70},{-110,-70}}, color={0,0,255}))", "connect(resistor1.n, transformer.p1) annotation (Line(points={{-60,15},{-50,15},{-50,1},{-40,1}}, color={0,0,255}))", "connect(resistor1.p, vSource1.p) annotation (Line(points={{-80,15},{-140,15},{-140,-30}}, color={0,0,255}))", "connect(resistor2.n, transformer.p2) annotation (Line(points={{-60,-5},{-40,-5}}, color={0,0,255}))", "connect(resistor2.p, vSource2.p) annotation (Line(points={{-80,-5},{-120,-5},{-120,-30}}, color={0,0,255}))", "connect(vSource3.p, resistor3.p) annotation (Line(points={{-100,-30},{-100,-25},{-80,-25}}, color={0,0,255}))", "connect(resistor3.n, transformer.p3) annotation (Line(points={{-60,-25},{-50,-25},{-50,-11},{-40,-11}}, color={0,0,255}))", "connect(diode2.n, diode1.p) annotation (Line(points={{30,-20},{30,10}}, color={0,0,255}))", "connect(diode4.n, diode3.p) annotation (Line(points={{50,-20},{50,10}}, color={0,0,255}))", "connect(diode6.n, diode5.p) annotation (Line(points={{70,-20},{70,10}}, color={0,0,255}))", "connect(diode2.p, diode4.p) annotation (Line(points={{30,-40},{50,-40}}, color={0,0,255}))", "connect(diode4.p, diode6.p) annotation (Line(points={{50,-40},{70,-40}}, color={0,0,255}))", "connect(diode1.n, diode3.n) annotation (Line(points={{30,30},{50,30}}, color={0,0,255}))", "connect(diode3.n, diode5.n) annotation (Line(points={{50,30},{70,30}}, color={0,0,255}))", "connect(diode5.n, capacitor1.p) annotation (Line(points={{70,30},{90,30}}, color={0,0,255}))", "connect(resistorL.p, capacitor1.p) annotation (Line(points={{120,5},{120,30},{90,30}}, color={0,0,255}))", "connect(transformer.n1, inductor1.p) annotation (Line(points={{-20,1},{-10,1},{-10,14}}, color={0,0,255}))", "connect(transformer.n2, inductor2.p) annotation (Line(points={{-20,-5},{-10,-5}}, color={0,0,255}))", "connect(inductor2.n, diode3.p) annotation (Line(points={{10,-5},{50,-5},{50,10}}, color={0,0,255}))", "connect(inductor3.p, transformer.n3) annotation (Line(points={{-10,-25},{-10,-11},{-20,-11}}, color={0,0,255}))", "connect(inductor3.n, diode6.n) annotation (Line(points={{10,-25},{10,-10},{70,-10},{70,-20}}, color={0,0,255}))", "connect(capacitor2.n, diode6.p) annotation (Line(points={{90,-40},{70,-40}}, color={0,0,255}))", "connect(capacitor2.p, capacitor1.n) annotation (Line(points={{90,-20},{90,10}},color={0,0,255}))", "connect(inductor1.n, diode1.p) annotation (Line(points={{10,14},{10,0},{30,0},{30,10}}, color={0,0,255}))", "connect(resistorL.n, capacitor2.n) annotation (Line(points={{120,-15},{120,-40},{90,-40}}, color={0,0,255}))", "connect(transformer.starPoint1, ground1.p) annotation (Line(points={{-34,-15},{-34,-70},{-110,-70}}, color={0,0,255}))", "connect(transformer.starPoint2, ground2.p) annotation (Line(points={{-26,-15},{-26,-70}}, color={0,0,255}))", "connect(ground2.p, capacitor2.p) annotation (Line(points={{-26,-70},{105,-70},{105,-4},{90,-4},{90,-20}}, color={0,0,255}))", "connect(rExp3.y,pdissCopAvg. u) annotation (Line(points={{-79.4,45},{-51,45}}, color={0,0,127}))", "connect(rExp2.y,pdissEddyAvg. u) annotation (Line(points={{-79.4,65},{-51,65}}, color={0,0,127}))", "connect(rExp1.y,pdissStatAvg. u) annotation (Line(points={{-80.45,85},{-51,85}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 113, "end_line": 145, "start_col": 3, "end_col": 102}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 112, "end_line": 112, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  transformer.core1.derHstat = 0.0", "transformer.core2.derHstat = 0.0", "transformer.core3.derHstat = 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 108, "end_line": 111, "start_col": 1, "end_col": 36}}, {"equations": ["transformer.core1.derHstat = 0.0", "transformer.core2.derHstat = 0.0", "transformer.core3.derHstat = 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 109, "end_line": 111, "start_col": 3, "end_col": 36}}, {"equations": ["transformer.core3.derHstat = 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 111, "end_line": 111, "start_col": 3, "end_col": 35}}, {"equations": ["transformer.core2.derHstat = 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 110, "end_line": 110, "start_col": 3, "end_col": 35}}, {"equations": ["transformer.core1.derHstat = 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 109, "end_line": 109, "start_col": 3, "end_col": 35}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 108, "end_line": 108, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | connections: 33 | eq: equation connect(vSource1.n, ground1.p) annotation (Line(points={{-140,-50},{-140,-70},{-110,-70}}, color", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo", "start_line": 2, "end_line": 173, "start_col": 1, "end_col": 39}, "code_text": "model ThreePhaseTransformerWithRectifier\r\n  \"Three-phase transformer (including hysteresis effect) with rectifier\"\r\n  extends Modelica.Icons.Example;\r\n\r\n  Modelica.Electrical.Analog.Basic.Ground ground1 annotation (Placement(transformation(extent={{-120,-90},{-100,-70}})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground2 annotation (Placement(transformation(extent={{-36,-90},{-16,-70}})));\r\n  Modelica.Electrical.Analog.Sources.SineVoltage vSource1(\r\n    offset=0,\r\n    f=50,\r\n    V=50) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-140,-40})));\r\n  Components.Transformer3PhaseYyWithHysteresis transformer(\r\n    EddyCurrents=true,\r\n    N1=200,\r\n    N2=10,\r\n    mat=FluxTubes.Material.HysteresisEverettParameter.M330_50A(),\r\n    sigma=2.2e6,\r\n    HFixed={true,true,true},\r\n    MagRelFixed={true,true,false},\r\n    I1Fixed={true,true,true},\r\n    I2Fixed={true,false,false},\r\n    useHeatPort=false,\r\n    MagRelStart={-0.4,0.8,-0.4},\r\n    l1=0.2,\r\n    l2=0.15,\r\n    a=0.04,\r\n    b=0.04,\r\n    t=0.0005) annotation (Placement(transformation(extent={{-40,-15},{-20,5}})));\r\n  Modelica.Electrical.Analog.Sources.SineVoltage vSource2(\r\n    offset=0,\r\n    f=vSource1.f,\r\n    V=50,\r\n    phase=4.1887902047864) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-120,-40})));\r\n  Modelica.Electrical.Analog.Sources.SineVoltage vSource3(\r\n    offset=0,\r\n    f=vSource1.f,\r\n    V=50,\r\n    phase=2.0943951023932) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-100,-40})));\r\n  Modelica.Electrical.Analog.Basic.Resistor resistor1(R=0) annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={-70,15})));\r\n  Modelica.Electrical.Analog.Basic.Resistor resistor2(R=resistor1.R) annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={-70,-5})));\r\n  Modelica.Electrical.Analog.Basic.Resistor resistor3(R=resistor1.R) annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={-70,-25})));\r\n  Modelica.Electrical.Analog.Ideal.IdealDiode diode1(Vknee=0.7) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={30,20})));\r\n  Modelica.Electrical.Analog.Ideal.IdealDiode diode2(Vknee=0.7) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={30,-30})));\r\n  Modelica.Electrical.Analog.Basic.Resistor resistorL(R=5) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={120,-5})));\r\n  Modelica.Electrical.Analog.Ideal.IdealDiode diode3(Vknee=0.7) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={50,20})));\r\n  Modelica.Electrical.Analog.Ideal.IdealDiode diode4(Vknee=0.7) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={50,-30})));\r\n  Modelica.Electrical.Analog.Ideal.IdealDiode diode5(Vknee=0.7) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={70,20})));\r\n  Modelica.Electrical.Analog.Ideal.IdealDiode diode6(Vknee=0.7) annotation (Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90,\r\n        origin={70,-30})));\r\n  Modelica.Electrical.Analog.Basic.Capacitor capacitor1(C=1e-6, v(fixed=\r\n          true)) annotation (\r\n     Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={90,20})));\r\n  Modelica.Electrical.Analog.Basic.Inductor inductor1(L=1e-3) annotation (Placement(transformation(extent={{-10,4},{10,24}})));\r\n  Modelica.Electrical.Analog.Basic.Inductor inductor2(L=1e-3)\r\n    annotation (Placement(transformation(extent={{-10,-15},{10,5}})));\r\n  Modelica.Electrical.Analog.Basic.Inductor inductor3(L=1e-3)\r\n    annotation (Placement(transformation(extent={{-10,-35},{10,-15}})));\r\n  Modelica.Electrical.Analog.Basic.Capacitor capacitor2(C=1e-6, v(fixed=\r\n          true)) annotation (\r\n     Placement(transformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={90,-30})));\r\n  Modelica.Blocks.Sources.RealExpression rExp1(y=transformer.LossPowerStat) annotation (Placement(transformation(extent={{-113,77},{-82,93}})));\r\n  Modelica.Blocks.Sources.RealExpression rExp2(y=transformer.LossPowerEddy) annotation (Placement(transformation(extent={{-113,57},{-81,73}})));\r\n  Modelica.Blocks.Sources.RealExpression rExp3(y=transformer.LossPowerWinding) annotation (Placement(transformation(extent={{-113,37},{-81,53}})));\r\n  Modelica.Blocks.Continuous.Filter pdissStatAvg(f_cut=10)\r\n    \"Approx. average static hysteresis losses\"\r\n    annotation (Placement(transformation(extent={{-50,80},{-40,90}})));\r\n  Modelica.Blocks.Continuous.Filter pdissEddyAvg(f_cut=10)\r\n    \"Approx. average eddy current losses\"\r\n    annotation (Placement(transformation(extent={{-50,60},{-40,70}})));\r\n  Modelica.Blocks.Continuous.Filter pdissCopAvg(f_cut=10)\r\n    \"Approx. average copper losses\"\r\n    annotation (Placement(transformation(extent={{-50,40},{-40,50}})));\r\ninitial equation\r\n  transformer.core1.derHstat = 0.0;\r\n  transformer.core2.derHstat = 0.0;\r\n  transformer.core3.derHstat = 0.0;\r\nequation\r\n  connect(vSource1.n, ground1.p) annotation (Line(points={{-140,-50},{-140,-70},{-110,-70}}, color={0,0,255}));\r\n  connect(vSource2.n, ground1.p) annotation (Line(points={{-120,-50},{-120,-70},{-110,-70}}, color={0,0,255}));\r\n  connect(vSource3.n, ground1.p) annotation (Line(points={{-100,-50},{-100,-70},{-110,-70}}, color={0,0,255}));\r\n  connect(resistor1.n, transformer.p1) annotation (Line(points={{-60,15},{-50,15},{-50,1},{-40,1}}, color={0,0,255}));\r\n  connect(resistor1.p, vSource1.p) annotation (Line(points={{-80,15},{-140,15},{-140,-30}}, color={0,0,255}));\r\n  connect(resistor2.n, transformer.p2) annotation (Line(points={{-60,-5},{-40,-5}}, color={0,0,255}));\r\n  connect(resistor2.p, vSource2.p) annotation (Line(points={{-80,-5},{-120,-5},{-120,-30}}, color={0,0,255}));\r\n  connect(vSource3.p, resistor3.p) annotation (Line(points={{-100,-30},{-100,-25},{-80,-25}}, color={0,0,255}));\r\n  connect(resistor3.n, transformer.p3) annotation (Line(points={{-60,-25},{-50,-25},{-50,-11},{-40,-11}}, color={0,0,255}));\r\n  connect(diode2.n, diode1.p) annotation (Line(points={{30,-20},{30,10}}, color={0,0,255}));\r\n  connect(diode4.n, diode3.p) annotation (Line(points={{50,-20},{50,10}}, color={0,0,255}));\r\n  connect(diode6.n, diode5.p) annotation (Line(points={{70,-20},{70,10}}, color={0,0,255}));\r\n  connect(diode2.p, diode4.p) annotation (Line(points={{30,-40},{50,-40}}, color={0,0,255}));\r\n  connect(diode4.p, diode6.p) annotation (Line(points={{50,-40},{70,-40}}, color={0,0,255}));\r\n  connect(diode1.n, diode3.n) annotation (Line(points={{30,30},{50,30}}, color={0,0,255}));\r\n  connect(diode3.n, diode5.n) annotation (Line(points={{50,30},{70,30}}, color={0,0,255}));\r\n  connect(diode5.n, capacitor1.p) annotation (Line(points={{70,30},{90,30}}, color={0,0,255}));\r\n  connect(resistorL.p, capacitor1.p) annotation (Line(points={{120,5},{120,30},{90,30}}, color={0,0,255}));\r\n  connect(transformer.n1, inductor1.p) annotation (Line(points={{-20,1},{-10,1},{-10,14}}, color={0,0,255}));\r\n  connect(transformer.n2, inductor2.p) annotation (Line(points={{-20,-5},{-10,-5}}, color={0,0,255}));\r\n  connect(inductor2.n, diode3.p) annotation (Line(points={{10,-5},{50,-5},{50,10}}, color={0,0,255}));\r\n  connect(inductor3.p, transformer.n3) annotation (Line(points={{-10,-25},{-10,-11},{-20,-11}}, color={0,0,255}));\r\n  connect(inductor3.n, diode6.n) annotation (Line(points={{10,-25},{10,-10},{70,-10},{70,-20}}, color={0,0,255}));\r\n  connect(capacitor2.n, diode6.p) annotation (Line(points={{90,-40},{70,-40}}, color={0,0,255}));\r\n  connect(capacitor2.p, capacitor1.n) annotation (Line(points={{90,-20},{90,10}},color={0,0,255}));\r\n  connect(inductor1.n, diode1.p) annotation (Line(points={{10,14},{10,0},{30,0},{30,10}}, color={0,0,255}));\r\n  connect(resistorL.n, capacitor2.n) annotation (Line(points={{120,-15},{120,-40},{90,-40}}, color={0,0,255}));\r\n  connect(transformer.starPoint1, ground1.p) annotation (Line(points={{-34,-15},{-34,-70},{-110,-70}}, color={0,0,255}));\r\n  connect(transformer.starPoint2, ground2.p) annotation (Line(points={{-26,-15},{-26,-70}}, color={0,0,255}));\r\n  connect(ground2.p, capacitor2.p) annotation (Line(points={{-26,-70},{105,-70},{105,-4},{90,-4},{90,-20}}, color={0,0,255}));\r\n  connect(rExp3.y,pdissCopAvg. u) annotation (Line(points={{-79.4,45},{-51,45}}, color={0,0,127}));\r\n  connect(rExp2.y,pdissEddyAvg. u) annotation (Line(points={{-79.4,65},{-51,65}}, color={0,0,127}));\r\n  connect(rExp1.y,pdissStatAvg. u) annotation (Line(points={{-80.45,85},{-51,85}}, color={0,0,127}));\r\n  annotation (experiment(StartTime=0, StopTime=0.2, Interval=1e-4, Tolerance=1e-006), Diagram(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        extent={{-150,-100},{150,100}},\r\n        grid={1,1})), Documentation(info=\"<html>\r\n<p>\r\nThis is a model of a three-phase transformer and rectifier unit using the <a href=\\\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis.Components.Transformer3PhaseYyWithHysteresis\\\">Transformer3PhaseYyWithHysteresis</a> model. Use the following simulation settings:\r\n</p>\r\n\r\n<ul>\r\n  <li>Stop time: 0.2 s</li>\r\n  <li>Number of intervals: 5000</li>\r\n  <li>Tolerance: 1e-6</li>\r\n</ul>\r\n\r\n<p>\r\nAn example simulation shows the transformer inrush currents due to an initially magnetized transformer core.\r\n</p>\r\n\r\n<table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<caption><strong>Fig. 1:</strong> Transformer inrush currents due to initial magnetization of the magnetic core; (a) transformer primary currents; (b)  transformer secondary currents; (c) flux densities of the transformer legs; (d) B(H) hysteresis loops of transformer leg one.; (e) instantaneous static hysteresis, eddy current and copper losses of the transformer; (f) approximated average static hysteresis, eddy current and copper losses of the transformer</caption>\r\n  <tr>\r\n    <td>\r\n      <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/ThreePhaseTransformerWithRectifier/plot01.png\\\" hspace=\\\"10\\\" vspace=\\\"10\\\">\r\n    </td>\r\n  </tr>\r\n</table>\r\n</html>\"));\r\nend ThreePhaseTransformerWithRectifier", "checksum": "ed0ccfe339ea6615f6693280e824f92741531453", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\FluxTubes\\Examples\\Hysteresis\\ThreePhaseTransformerWithRectifier.mo:2-173", "component_count": 0, "connection_count": 33, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 9, "dependency_count": 37, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 108.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(vSource1.n, ground1.p) annotation (Line(points={{-140,-50},{-140,-70},{-110,-70}}, color={0,0,255}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "vSource1.n", "to_connector": "ground1.p", "condition": null}, {"from_connector": "vSource2.n", "to_connector": "ground1.p", "condition": null}, {"from_connector": "vSource3.n", "to_connector": "ground1.p", "condition": null}, {"from_connector": "resistor1.n", "to_connector": "transformer.p1", "condition": null}, {"from_connector": "resistor1.p", "to_connector": "vSource1.p", "condition": null}, {"from_connector": "resistor2.n", "to_connector": "transformer.p2", "condition": null}, {"from_connector": "resistor2.p", "to_connector": "vSource2.p", "condition": null}, {"from_connector": "vSource3.p", "to_connector": "resistor3.p", "condition": null}, {"from_connector": "resistor3.n", "to_connector": "transformer.p3", "condition": null}, {"from_connector": "diode2.n", "to_connector": "diode1.p", "condition": null}, {"from_connector": "diode4.n", "to_connector": "diode3.p", "condition": null}, {"from_connector": "diode6.n", "to_connector": "diode5.p", "condition": null}, {"from_connector": "diode2.p", "to_connector": "diode4.p", "condition": null}, {"from_connector": "diode4.p", "to_connector": "diode6.p", "condition": null}, {"from_connector": "diode1.n", "to_connector": "diode3.n", "condition": null}, {"from_connector": "diode3.n", "to_connector": "diode5.n", "condition": null}, {"from_connector": "diode5.n", "to_connector": "capacitor1.p", "condition": null}, {"from_connector": "resistorL.p", "to_connector": "capacitor1.p", "condition": null}, {"from_connector": "transformer.n1", "to_connector": "inductor1.p", "condition": null}, {"from_connector": "transformer.n2", "to_connector": "inductor2.p", "condition": null}, {"from_connector": "inductor2.n", "to_connector": "diode3.p", "condition": null}, {"from_connector": "inductor3.p", "to_connector": "transformer.n3", "condition": null}, {"from_connector": "inductor3.n", "to_connector": "diode6.n", "condition": null}, {"from_connector": "capacitor2.n", "to_connector": "diode6.p", "condition": null}, {"from_connector": "capacitor2.p", "to_connector": "capacitor1.n", "condition": null}, {"from_connector": "inductor1.n", "to_connector": "diode1.p", "condition": null}, {"from_connector": "resistorL.n", "to_connector": "capacitor2.n", "condition": null}, {"from_connector": "transformer.starPoint1", "to_connector": "ground1.p", "condition": null}, {"from_connector": "transformer.starPoint2", "to_connector": "ground2.p", "condition": null}, {"from_connector": "ground2.p", "to_connector": "capacitor2.p", "condition": null}, {"from_connector": "rExp3.y", "to_connector": "pdissCopAvg. u", "condition": null}, {"from_connector": "rExp2.y", "to_connector": "pdissEddyAvg. u", "condition": null}, {"from_connector": "rExp1.y", "to_connector": "pdissStatAvg. u", "condition": null}], "variables": [], "physical_quantities": [], "dependencies": ["Components", "FluxTubes.Material.HysteresisEverettParameter", "Modelica.Blocks.Continuous", "Modelica.Blocks.Sources", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Analog.Ideal", "Modelica.Electrical.Analog.Sources", "Modelica.Icons", "Modelica.Magnetic.FluxTubes.Examples.Hysteresis.Components", "capacitor1", "capacitor2", "diode1", "diode2", "diode3", "diode4", "diode5", "diode6", "ground1", "ground2", "inductor1", "inductor2", "inductor3", "plot01", "rExp1", "rExp2", "rExp3", "resistor1", "resistor2", "resistor3", "resistorL", "transformer", "transformer.core1", "transformer.core2", "transformer.core3", "vSource1", "vSource2", "vSource3"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.QuasiStatic.Polyphase.Sensors.PowerSensor", "kind": "model", "name": "PowerSensor", "package_path": ["Modelica", "Electrical", "QuasiStatic", "Polyphase", "Sensors"], "extends": ["Modelica.Icons.RoundSensor"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  connect(plugToPinsCurrentP.plug_p, currentP) annotation (Line(points={{-72,\r\n          0},{-79,0},{-86,0},{-100,0}}, color={85,170,255}))", "connect(currentN, plugToPinsCurrentN.plug_n) annotation (Line(points={{\r\n          100,0},{93,0},{86,0},{72,0}}, color={85,170,255}))", "connect(voltageP, plugToPinsVoltageP.plug_p)\r\n    annotation (Line(points={{0,100},{0,100},{0,72}}, color={85,170,255}))", "connect(plugToPinsVoltageN.plug_n, voltageN) annotation (Line(points={{0,\r\n          -72},{0,-72},{0,-100}}, color={85,170,255}))", "connect(plugToPinsCurrentP.pin_p, powerSensor.currentP) annotation (Line(\r\n        points={{-68,0},{-53.5,0},{-53.5,0},{-39,0},{-39,0},{-10,0}}, color={85,170,255}))", "connect(powerSensor.currentN, plugToPinsCurrentN.pin_n) annotation (Line(\r\n        points={{10,0},{24.5,0},{24.5,0},{39,0},{39,0},{68,0}}, color={85,\r\n          170,255}))", "connect(powerSensor.voltageP, plugToPinsVoltageP.pin_p) annotation (Line(\r\n        points={{0,10},{0,10},{0,68},{0,68}}, color={85,170,255}))", "connect(powerSensor.voltageN, plugToPinsVoltageN.pin_n) annotation (Line(\r\n        points={{0,-10},{0,-10},{0,-68},{0,-68}}, color={85,170,255}))", "connect(powerSensor.apparentPower, sum.u) annotation (Line(points={{-10,-11},{-10,-40},{-80,-40},{-80,-58}}, color={85,170,255}))", "connect(sum.y, apparentPower) annotation (Line(points={{-80,-81},{-80,-90},{-100,-90},{-100,-110}}, color={85,170,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Sensors\\PowerSensor.mo", "start_line": 46, "end_line": 65, "start_col": 1, "end_col": 124}}, {"equations": ["connect(plugToPinsCurrentP.plug_p, currentP) annotation (Line(points={{-72,\r\n          0},{-79,0},{-86,0},{-100,0}}, color={85,170,255}))", "connect(currentN, plugToPinsCurrentN.plug_n) annotation (Line(points={{\r\n          100,0},{93,0},{86,0},{72,0}}, color={85,170,255}))", "connect(voltageP, plugToPinsVoltageP.plug_p)\r\n    annotation (Line(points={{0,100},{0,100},{0,72}}, color={85,170,255}))", "connect(plugToPinsVoltageN.plug_n, voltageN) annotation (Line(points={{0,\r\n          -72},{0,-72},{0,-100}}, color={85,170,255}))", "connect(plugToPinsCurrentP.pin_p, powerSensor.currentP) annotation (Line(\r\n        points={{-68,0},{-53.5,0},{-53.5,0},{-39,0},{-39,0},{-10,0}}, color={85,170,255}))", "connect(powerSensor.currentN, plugToPinsCurrentN.pin_n) annotation (Line(\r\n        points={{10,0},{24.5,0},{24.5,0},{39,0},{39,0},{68,0}}, color={85,\r\n          170,255}))", "connect(powerSensor.voltageP, plugToPinsVoltageP.pin_p) annotation (Line(\r\n        points={{0,10},{0,10},{0,68},{0,68}}, color={85,170,255}))", "connect(powerSensor.voltageN, plugToPinsVoltageN.pin_n) annotation (Line(\r\n        points={{0,-10},{0,-10},{0,-68},{0,-68}}, color={85,170,255}))", "connect(powerSensor.apparentPower, sum.u) annotation (Line(points={{-10,-11},{-10,-40},{-80,-40},{-80,-58}}, color={85,170,255}))", "connect(sum.y, apparentPower) annotation (Line(points={{-80,-81},{-80,-90},{-100,-90},{-100,-110}}, color={85,170,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Sensors\\PowerSensor.mo", "start_line": 47, "end_line": 65, "start_col": 3, "end_col": 124}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Sensors\\PowerSensor.mo", "start_line": 46, "end_line": 46, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Icons.RoundSensor | components: SI.AngularVelocity×1, SI.ApparentPower×1, SI.Angle×1 | connections: 10 | units: rad/s, m | eq: equation connect", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Sensors\\PowerSensor.mo", "start_line": 2, "end_line": 102, "start_col": 1, "end_col": 16}, "code_text": "model PowerSensor \"Power sensor\"\r\n  extends Modelica.Icons.RoundSensor;\r\n  parameter Integer m(min=1) = 3 \"Number of phases\" annotation(Evaluate=true);\r\n  SI.AngularVelocity omega=der(currentP.reference.gamma);\r\n  Interfaces.PositivePlug currentP(final m=m) annotation (Placement(\r\n        transformation(extent={{-110,-10},{-90,10}})));\r\n  Interfaces.NegativePlug currentN(final m=m) annotation (Placement(\r\n        transformation(extent={{90,-10},{110,10}})));\r\n  Interfaces.PositivePlug voltageP(final m=m) annotation (Placement(\r\n        transformation(extent={{-10,90},{10,110}})));\r\n  Interfaces.NegativePlug voltageN(final m=m) annotation (Placement(\r\n        transformation(extent={{-10,-110},{10,-90}})));\r\n  Modelica.ComplexBlocks.Interfaces.ComplexOutput apparentPower \"Total apparent power as complex output signal\" annotation (Placement(transformation(\r\n        origin={-100,-110},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270), iconTransformation(\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270,\r\n        origin={-100,-110})));\r\n  Basic.PlugToPins_p plugToPinsCurrentP(final m=m) annotation (Placement(\r\n        transformation(extent={{-80,-10},{-60,10}})));\r\n  Basic.PlugToPins_p plugToPinsVoltageP(final m=m) annotation (Placement(\r\n        transformation(\r\n        origin={0,70},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Basic.PlugToPins_n plugToPinsCurrentN(final m=m) annotation (Placement(\r\n        transformation(extent={{80,-10},{60,10}})));\r\n  Basic.PlugToPins_n plugToPinsVoltageN(final m=m) annotation (Placement(\r\n        transformation(\r\n        origin={0,-70},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=90)));\r\n  QuasiStatic.SinglePhase.Sensors.PowerSensor powerSensor[m]\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\n  Modelica.ComplexBlocks.ComplexMath.Sum sum(final nin=m) annotation (\r\n      Placement(transformation(\r\n        origin={-80,-70},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n\r\n  SI.ApparentPower abs_apparentPower=Modelica.ComplexMath.abs(apparentPower) \"Magnitude of complex apparent power\";\r\n  SI.Angle arg_apparentPower=Modelica.ComplexMath.arg(apparentPower) \"Argument of complex apparent power\";\r\n\r\nequation\r\n  connect(plugToPinsCurrentP.plug_p, currentP) annotation (Line(points={{-72,\r\n          0},{-79,0},{-86,0},{-100,0}}, color={85,170,255}));\r\n  connect(currentN, plugToPinsCurrentN.plug_n) annotation (Line(points={{\r\n          100,0},{93,0},{86,0},{72,0}}, color={85,170,255}));\r\n  connect(voltageP, plugToPinsVoltageP.plug_p)\r\n    annotation (Line(points={{0,100},{0,100},{0,72}}, color={85,170,255}));\r\n  connect(plugToPinsVoltageN.plug_n, voltageN) annotation (Line(points={{0,\r\n          -72},{0,-72},{0,-100}}, color={85,170,255}));\r\n  connect(plugToPinsCurrentP.pin_p, powerSensor.currentP) annotation (Line(\r\n        points={{-68,0},{-53.5,0},{-53.5,0},{-39,0},{-39,0},{-10,0}}, color={85,170,255}));\r\n  connect(powerSensor.currentN, plugToPinsCurrentN.pin_n) annotation (Line(\r\n        points={{10,0},{24.5,0},{24.5,0},{39,0},{39,0},{68,0}}, color={85,\r\n          170,255}));\r\n  connect(powerSensor.voltageP, plugToPinsVoltageP.pin_p) annotation (Line(\r\n        points={{0,10},{0,10},{0,68},{0,68}}, color={85,170,255}));\r\n  connect(powerSensor.voltageN, plugToPinsVoltageN.pin_n) annotation (Line(\r\n        points={{0,-10},{0,-10},{0,-68},{0,-68}}, color={85,170,255}));\r\n  connect(powerSensor.apparentPower, sum.u) annotation (Line(points={{-10,-11},{-10,-40},{-80,-40},{-80,-58}}, color={85,170,255}));\r\n  connect(sum.y, apparentPower) annotation (Line(points={{-80,-81},{-80,-90},{-100,-90},{-100,-110}}, color={85,170,255}));\r\n  annotation (\r\n    Icon(graphics={\r\n        Line(points={{0,100},{0,70}}, color={85,170,255}),\r\n        Line(points={{0,-70},{0,-100}}, color={85,170,255}),\r\n        Text(\r\n          textColor={0,0,255},\r\n          extent={{-150,110},{150,150}},\r\n          textString=\"%name\"),\r\n        Line(points={{-100,0},{100,0}}, color={85,170,255}),\r\n      Line(points={{-100,-100},{-100,-80},{-58,-38}}, color={85,170,255}),\r\n        Text(\r\n          extent={{-30,-10},{30,-70}},\r\n          textColor={64,64,64},\r\n          textString=\"V.A\")}),\r\n    Documentation(info=\"<html>\r\n\r\n<p>\r\nThis sensor can be used to measure <em>m</em> complex apparent power values, using <em>m</em>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Sensors.PowerSensor\\\">single-phase PowerSensors</a>.\r\n</p>\r\n\r\n<h4>See also</h4>\r\n\r\n<p>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Sensors.PowerSensor\\\">SinglePhase.Sensors.PowerSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.ReferenceSensor\\\">ReferenceSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.FrequencySensor\\\">FrequencySensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.PotentialSensor\\\">PotentialSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.VoltageSensor\\\">VoltageSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.VoltageQuasiRMSSensor\\\">VoltageQuasiRMSSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.CurrentSensor\\\">CurrentSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.CurrentQuasiRMSSensor\\\">CurrentQuasiRMSSensor</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Sensors.MultiSensor\\\">MultiSensor</a>\r\n</p>\r\n\r\n</html>\"));\r\nend PowerSensor", "checksum": "8c6553314f5be4ce4a89a21c1d5034320d762d9a", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Sensors\\PowerSensor.mo:2-102", "component_count": 3, "connection_count": 10, "variable_count": 3, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 3, "dependency_count": 19, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 39.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(plugToPinsCurrentP.plug_p, currentP) annotation (Line(points={{-72, 0},{-79,0},{-86,0},{-100,0}}, color={85,170,255}))", "search_keywords": ["AngularVelocity", "SI.Angle", "SI.AngularVelocity", "SI.ApparentPower", "mechanical", "rad/s", "system"]}, "components": [{"name": "omega", "type_name": "SI.AngularVelocity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "abs_apparentPower", "type_name": "SI.ApparentPower", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "arg_apparentPower", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "plugToPinsCurrentP.plug_p", "to_connector": "currentP", "condition": null}, {"from_connector": "currentN", "to_connector": "plugToPinsCurrentN.plug_n", "condition": null}, {"from_connector": "voltageP", "to_connector": "plugToPinsVoltageP.plug_p", "condition": null}, {"from_connector": "plugToPinsVoltageN.plug_n", "to_connector": "voltageN", "condition": null}, {"from_connector": "plugToPinsCurrentP.pin_p", "to_connector": "powerSensor.currentP", "condition": null}, {"from_connector": "powerSensor.currentN", "to_connector": "plugToPinsCurrentN.pin_n", "condition": null}, {"from_connector": "powerSensor.voltageP", "to_connector": "plugToPinsVoltageP.pin_p", "condition": null}, {"from_connector": "powerSensor.voltageN", "to_connector": "plugToPinsVoltageN.pin_n", "condition": null}, {"from_connector": "powerSensor.apparentPower", "to_connector": "sum.u", "condition": null}, {"from_connector": "sum.y", "to_connector": "apparentPower", "condition": null}], "variables": [{"name": "omega", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "der(currentP.reference.gamma)", "comment": null}, {"name": "abs_apparentPower", "type_name": "SI.ApparentPower", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.ComplexMath.abs(apparentPower) \"Magnitude of complex apparent power\"", "comment": null}, {"name": "arg_apparentPower", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.ComplexMath.arg(apparentPower) \"Argument of complex apparent power\"", "comment": null}], "physical_quantities": [{"name": "omega", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "signal", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Basic", "Interfaces", "Modelica.ComplexBlocks.ComplexMath", "Modelica.ComplexBlocks.Interfaces", "Modelica.ComplexMath", "Modelica.Electrical.QuasiStatic.Polyphase.Sensors", "Modelica.Electrical.QuasiStatic.SinglePhase.Sensors", "Modelica.Icons", "QuasiStatic.SinglePhase.Sensors", "SI", "SinglePhase.Sensors", "V", "currentP.reference", "plugToPinsCurrentN", "plugToPinsCurrentP", "plugToPinsVoltageN", "plugToPinsVoltageP", "powerSensor", "sum"], "inheritance_chain": ["Modelica.Icons.RoundSensor"]}
{"fqn": "ModelicaTest.Tables.CombiTimeTable.Test41", "kind": "model", "name": "Test41", "package_path": ["ModelicaTest", "Tables", "CombiTimeTable"], "extends": ["Modelica.Icons.Example", "TestDer"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.Example", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTimeTable.mo", "start_line": 512, "end_line": 519, "start_col": 3, "end_col": 13}, "code_text": "model Test41 \"Two time events (Ticket #628), periodic, startTime > 0\"\r\n    extends Modelica.Icons.Example;\r\n    extends TestDer(t_new(\r\n        table=[0, 0; 2.5, 0; 2.5, 1; 3, 1; 3, 0],\r\n        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,\r\n        startTime=5));\r\n    annotation (experiment(StartTime=0, StopTime=100));\r\n  end Test41", "checksum": "98d92fae2da7bbec13c8fdf03945327a7c03cee3", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Tables\\CombiTimeTable.mo:512-519", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Blocks.Types.Extrapolation", "Modelica.Icons"], "inheritance_chain": ["Modelica.Icons.Example", "TestDer"]}
{"fqn": "Modelica.Fluid.Fittings.BaseClasses.QuadraticTurbulent.BaseModelNonconstantCrossSectionArea", "kind": "model", "name": "BaseModelNonconstantCrossSectionArea", "package_path": ["Modelica", "Fluid", "Fittings", "BaseClasses", "QuadraticTurbulent"], "extends": ["Modelica.Fluid.Interfaces.PartialTwoPortTransport", "Modelica.Fluid.Interfaces.PartialLumpedFlow"], "imports": [], "parameters": [{"name": "m_flow_nominal", "type": "SI.MassFlowRate", "default": "if system.use_eps_Re then system.m_flow_nominal else 1e2*system.m_flow_small \"Nominal mass flow rate\" // Advanced /// Other settings than the final values are not yet implemented /", "description": null}, {"name": "show_Re", "type": "Boolean", "default": "false \"= true, if Reynolds number is included for plotting\" SI.ReynoldsNumber Re = Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.ReynoldsNumber_m_flow( m_flow, noEvent(if ", "description": null}, {"name": "show_totalPressures", "type": "Boolean", "default": "false \"= true, if total pressures are included for plotting\" SI.AbsolutePressure p_total_a = port_a.p + 0.5 * m_flow^2 /((Modelica.Constants.pi/4 * data.diameter_a^2)^2 * noEvent(i", "description": null}, {"name": "show_portVelocities", "type": "Boolean", "default": "false \"= true, if port velocities are included for plotting\" SI.Velocity v_a = port_a.m_flow /(Modelica.Constants.pi/4 * data.diameter_a^2 * noEvent(if port_a.m_flow > 0 then Mediu", "description": null}, {"name": "data \"Loss factor data\"", "type": "LossFactorData", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n        Ib_flow = 0", "F_p = A_mean*(Medium.pressure(state_b) - Medium.pressure(state_a))", "F_fg = A_mean*dp_fg", "if from_dp then\r\n           m_flow = if use_Re then\r\n                       massFlowRate_dp_and_Re(\r\n                          dp_fg, Medium.density(state_a), Medium.density(state_b),\r\n                          Medium.dynamicViscosity(state_a),\r\n                          Medium.dynamicViscosity(state_b),\r\n                          data) else\r\n                       massFlowRate_dp(dp_fg, Medium.density(state_a), Medium.density(state_b), data, dp_small)", "else\r\n           dp_fg = if use_Re then\r\n                   pressureLoss_m_flow_and_Re(\r\n                       m_flow, Medium.density(state_a), Medium.density(state_b),\r\n                       Medium.dynamicViscosity(state_a),\r\n                       Medium.dynamicViscosity(state_b),\r\n                       data) else\r\n                   pressureLoss_m_flow_totalPressure(m_flow,\r\n                     Medium.density(state_a),\r\n                     Medium.density(state_b_des),\r\n                     Medium.density(state_b),\r\n                     Medium.density(state_a_nondes),\r\n                     data, m_flow_small)", "end if", "// Isenthalpic state transformation (no storage and no loss of energy)\r\n        port_a.h_outflow = inStream(port_b.h_outflow)", "port_b.h_outflow = inStream(port_a.h_outflow)", "// medium states for downstream properties, may want to change this neglecting the only difference from state_a, state_b, which is in pressure\r\n        // This will remove the extra interaction variables\r\n        state_b_des = Medium.setState_phX(port_b.p, inStream(port_a.h_outflow), inStream(port_a.Xi_outflow))", "state_a_nondes = Medium.setState_phX(port_a.p, inStream(port_b.h_outflow), inStream(port_b.Xi_outflow))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1812, "end_line": 1846, "start_col": 7, "end_col": 113}}, {"equations": ["Ib_flow = 0", "F_p = A_mean*(Medium.pressure(state_b) - Medium.pressure(state_a))", "F_fg = A_mean*dp_fg", "if from_dp then\r\n           m_flow = if use_Re then\r\n                       massFlowRate_dp_and_Re(\r\n                          dp_fg, Medium.density(state_a), Medium.density(state_b),\r\n                          Medium.dynamicViscosity(state_a),\r\n                          Medium.dynamicViscosity(state_b),\r\n                          data) else\r\n                       massFlowRate_dp(dp_fg, Medium.density(state_a), Medium.density(state_b), data, dp_small)", "else\r\n           dp_fg = if use_Re then\r\n                   pressureLoss_m_flow_and_Re(\r\n                       m_flow, Medium.density(state_a), Medium.density(state_b),\r\n                       Medium.dynamicViscosity(state_a),\r\n                       Medium.dynamicViscosity(state_b),\r\n                       data) else\r\n                   pressureLoss_m_flow_totalPressure(m_flow,\r\n                     Medium.density(state_a),\r\n                     Medium.density(state_b_des),\r\n                     Medium.density(state_b),\r\n                     Medium.density(state_a_nondes),\r\n                     data, m_flow_small)", "end if", "// Isenthalpic state transformation (no storage and no loss of energy)\r\n        port_a.h_outflow = inStream(port_b.h_outflow)", "port_b.h_outflow = inStream(port_a.h_outflow)", "// medium states for downstream properties, may want to change this neglecting the only difference from state_a, state_b, which is in pressure\r\n        // This will remove the extra interaction variables\r\n        state_b_des = Medium.setState_phX(port_b.p, inStream(port_a.h_outflow), inStream(port_a.Xi_outflow))", "state_a_nondes = Medium.setState_phX(port_a.p, inStream(port_b.h_outflow), inStream(port_b.Xi_outflow))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1813, "end_line": 1846, "start_col": 9, "end_col": 113}}, {"equations": ["state_a_nondes = Medium.setState_phX(port_a.p, inStream(port_b.h_outflow), inStream(port_b.Xi_outflow))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1846, "end_line": 1846, "start_col": 9, "end_col": 112}}, {"equations": ["state_b_des = Medium.setState_phX(port_b.p, inStream(port_a.h_outflow), inStream(port_a.Xi_outflow))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1845, "end_line": 1845, "start_col": 9, "end_col": 109}}, {"equations": ["port_b.h_outflow = inStream(port_a.h_outflow)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1841, "end_line": 1841, "start_col": 9, "end_col": 54}}, {"equations": ["port_a.h_outflow = inStream(port_b.h_outflow)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1840, "end_line": 1840, "start_col": 9, "end_col": 54}}, {"equations": ["if from_dp then\r\n           m_flow = if use_Re then\r\n                       massFlowRate_dp_and_Re(\r\n                          dp_fg, Medium.density(state_a), Medium.density(state_b),\r\n                          Medium.dynamicViscosity(state_a),\r\n                          Medium.dynamicViscosity(state_b),\r\n                          data) else\r\n                       massFlowRate_dp(dp_fg, Medium.density(state_a), Medium.density(state_b), data, dp_small)", "else\r\n           dp_fg = if use_Re then\r\n                   pressureLoss_m_flow_and_Re(\r\n                       m_flow, Medium.density(state_a), Medium.density(state_b),\r\n                       Medium.dynamicViscosity(state_a),\r\n                       Medium.dynamicViscosity(state_b),\r\n                       data) else\r\n                   pressureLoss_m_flow_totalPressure(m_flow,\r\n                     Medium.density(state_a),\r\n                     Medium.density(state_b_des),\r\n                     Medium.density(state_b),\r\n                     Medium.density(state_a_nondes),\r\n                     data, m_flow_small)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1816, "end_line": 1837, "start_col": 9, "end_col": 15}}, {"equations": ["dp_fg = if use_Re then\r\n                   pressureLoss_m_flow_and_Re(\r\n                       m_flow, Medium.density(state_a), Medium.density(state_b),\r\n                       Medium.dynamicViscosity(state_a),\r\n                       Medium.dynamicViscosity(state_b),\r\n                       data) else\r\n                   pressureLoss_m_flow_totalPressure(m_flow,\r\n                     Medium.density(state_a),\r\n                     Medium.density(state_b_des),\r\n                     Medium.density(state_b),\r\n                     Medium.density(state_a_nondes),\r\n                     data, m_flow_small)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1825, "end_line": 1836, "start_col": 12, "end_col": 42}}, {"equations": ["m_flow = if use_Re then\r\n                       massFlowRate_dp_and_Re(\r\n                          dp_fg, Medium.density(state_a), Medium.density(state_b),\r\n                          Medium.dynamicViscosity(state_a),\r\n                          Medium.dynamicViscosity(state_b),\r\n                          data) else\r\n                       massFlowRate_dp(dp_fg, Medium.density(state_a), Medium.density(state_b), data, dp_small)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1817, "end_line": 1823, "start_col": 12, "end_col": 113}}, {"equations": ["F_fg = A_mean*dp_fg"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1815, "end_line": 1815, "start_col": 9, "end_col": 28}}, {"equations": ["F_p = A_mean*(Medium.pressure(state_b) - Medium.pressure(state_a))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1814, "end_line": 1814, "start_col": 9, "end_col": 75}}, {"equations": ["Ib_flow = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1813, "end_line": 1813, "start_col": 9, "end_col": 20}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1812, "end_line": 1812, "start_col": 7, "end_col": 15}}], "docstring": "extends Modelica.Fluid.Interfaces.PartialTwoPortTransport | params: m_flow_nominal, show_Re, show_totalPressures | units: m/s, m/s, Pa | eq: equation Ib_flow = ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo", "start_line": 1735, "end_line": 1956, "start_col": 7, "end_col": 47}, "code_text": "partial model BaseModelNonconstantCrossSectionArea\r\n        \"Generic pressure drop component with constant turbulent loss factor data and without an icon, for non-constant cross section area\"\r\n\r\n        extends Modelica.Fluid.Interfaces.PartialTwoPortTransport(\r\n          final dp_start = dp_nominal,\r\n          m_flow_small = if system.use_eps_Re then system.eps_m_flow*m_flow_nominal else system.m_flow_small,\r\n          m_flow(stateSelect = if momentumDynamics == Types.Dynamics.SteadyState then StateSelect.default\r\n                               else StateSelect.prefer));\r\n        extends Modelica.Fluid.Interfaces.PartialLumpedFlow(\r\n          final pathLength = 0,\r\n          final momentumDynamics = Types.Dynamics.SteadyState);\r\n\r\n        parameter LossFactorData data \"Loss factor data\";\r\n        parameter SI.MassFlowRate m_flow_nominal=if system.use_eps_Re then system.m_flow_nominal else 1e2*system.m_flow_small\r\n          \"Nominal mass flow rate\"\r\n          annotation(Dialog(group=\"Nominal operating point\"));\r\n\r\n        // Advanced\r\n        /// Other settings than the final values are not yet implemented ///\r\n        final parameter Boolean use_Re = false\r\n          \"= true, if turbulent region is defined by Re, otherwise by m_flow_small\"\r\n          annotation(Evaluate=true, Dialog(tab=\"Advanced\"));\r\n        final parameter Boolean from_dp = false\r\n          \"= true, use m_flow = f(dp) else dp = f(m_flow)\"\r\n          annotation (Evaluate=true, Dialog(tab=\"Advanced\"));\r\n        // End not yet implemented /////////////////////////////////////////\r\n      protected\r\n        parameter Medium.ThermodynamicState state_nominal=Medium.setState_pTX(\r\n                             Medium.reference_p,\r\n                             Medium.reference_T,\r\n                             Medium.reference_X)\r\n          \"Medium state to compute nominal pressure drop\" annotation(HideResult=true);\r\n        parameter SI.Pressure dp_nominal=\r\n          pressureLoss_m_flow(m_flow_nominal, Medium.density(state_nominal), Medium.density(state_nominal), data, m_flow_small)\r\n          \"Nominal pressure loss\";\r\n        parameter Medium.AbsolutePressure dp_small(min=0) = if system.use_eps_Re then dp_nominal/m_flow_nominal*m_flow_small else system.dp_small\r\n          \"Regularization of zero flow if |dp| < dp_small\"\r\n          annotation(Dialog(tab=\"Advanced\", enable=not use_Re and from_dp));\r\n        //parameter Medium.MassFlowRate m_flow_small = system.m_flow_small\r\n        //  \"Turbulent flow if |m_flow| >= m_flow_small\"\r\n        //  annotation(Dialog(tab = \"Advanced\", enable=not from_dp));\r\n\r\n        // Diagnostics\r\n      public\r\n        parameter Boolean show_Re = false\r\n          \"= true, if Reynolds number is included for plotting\"\r\n           annotation (Evaluate=true, Dialog(tab=\"Advanced\", group=\"Diagnostics\"));\r\n        SI.ReynoldsNumber Re = Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.ReynoldsNumber_m_flow(\r\n              m_flow,\r\n              noEvent(if m_flow>0 then Medium.dynamicViscosity(state_a) else Medium.dynamicViscosity(state_b)),\r\n              data.D_Re) if show_Re \"Reynolds number at diameter data.D_Re\";\r\n        parameter Boolean show_totalPressures = false\r\n          \"= true, if total pressures are included for plotting\"\r\n           annotation (Evaluate=true, Dialog(tab=\"Advanced\", group=\"Diagnostics\"));\r\n        SI.AbsolutePressure p_total_a = port_a.p + 0.5 * m_flow^2 /((Modelica.Constants.pi/4 * data.diameter_a^2)^2 * noEvent(if port_a.m_flow > 0 then Medium.density(state_a) else Medium.density(state_b))) if\r\n          show_totalPressures \"Total pressure at port_a\";\r\n        SI.AbsolutePressure p_total_b = port_b.p + 0.5 * m_flow^2 /((Modelica.Constants.pi/4 * data.diameter_b^2)^2 * noEvent(if port_b.m_flow > 0 then Medium.density(state_b) else Medium.density(state_a))) if\r\n          show_totalPressures \"Total pressure at port_a\";\r\n        parameter Boolean show_portVelocities = false\r\n          \"= true, if port velocities are included for plotting\"\r\n           annotation (Evaluate=true, Dialog(tab=\"Advanced\", group=\"Diagnostics\"));\r\n        SI.Velocity v_a = port_a.m_flow /(Modelica.Constants.pi/4 * data.diameter_a^2 * noEvent(if port_a.m_flow > 0 then Medium.density(state_a) else Medium.density(state_b))) if\r\n          show_portVelocities \"Fluid velocity into port_a\";\r\n        SI.Velocity v_b = port_b.m_flow /(Modelica.Constants.pi/4 * data.diameter_b^2 * noEvent(if port_b.m_flow > 0 then Medium.density(state_b) else Medium.density(state_a))) if\r\n          show_portVelocities \"Fluid velocity into port_b\";\r\n\r\n        // Variables\r\n        SI.Pressure dp_fg\r\n          \"Pressure loss due to friction and gravity\";\r\n        SI.Area A_mean = Modelica.Constants.pi/4*(data.diameter_a^2+data.diameter_b^2)/2\r\n          \"Mean cross flow area\";\r\n\r\n        Medium.ThermodynamicState state_b_des\r\n          \"Thermodynamic state at port b for flow a -> b\";\r\n        Medium.ThermodynamicState state_a_nondes\r\n          \"Thermodynamic state at port a for flow a <- b\";\r\n\r\n      equation\r\n        Ib_flow = 0;\r\n        F_p = A_mean*(Medium.pressure(state_b) - Medium.pressure(state_a));\r\n        F_fg = A_mean*dp_fg;\r\n        if from_dp then\r\n           m_flow = if use_Re then\r\n                       massFlowRate_dp_and_Re(\r\n                          dp_fg, Medium.density(state_a), Medium.density(state_b),\r\n                          Medium.dynamicViscosity(state_a),\r\n                          Medium.dynamicViscosity(state_b),\r\n                          data) else\r\n                       massFlowRate_dp(dp_fg, Medium.density(state_a), Medium.density(state_b), data, dp_small);\r\n        else\r\n           dp_fg = if use_Re then\r\n                   pressureLoss_m_flow_and_Re(\r\n                       m_flow, Medium.density(state_a), Medium.density(state_b),\r\n                       Medium.dynamicViscosity(state_a),\r\n                       Medium.dynamicViscosity(state_b),\r\n                       data) else\r\n                   pressureLoss_m_flow_totalPressure(m_flow,\r\n                     Medium.density(state_a),\r\n                     Medium.density(state_b_des),\r\n                     Medium.density(state_b),\r\n                     Medium.density(state_a_nondes),\r\n                     data, m_flow_small);\r\n        end if;\r\n\r\n        // Isenthalpic state transformation (no storage and no loss of energy)\r\n        port_a.h_outflow = inStream(port_b.h_outflow);\r\n        port_b.h_outflow = inStream(port_a.h_outflow);\r\n\r\n        // medium states for downstream properties, may want to change this neglecting the only difference from state_a, state_b, which is in pressure\r\n        // This will remove the extra interaction variables\r\n        state_b_des = Medium.setState_phX(port_b.p, inStream(port_a.h_outflow), inStream(port_a.Xi_outflow));\r\n        state_a_nondes = Medium.setState_phX(port_a.p, inStream(port_b.h_outflow), inStream(port_b.Xi_outflow));\r\n\r\n        annotation (\r\n          Documentation(info=\"<html>\r\n<p>\r\nThis model computes the pressure loss of a pipe\r\nsegment (orifice, bending etc.) with a minimum amount of data\r\nprovided via parameter <strong>data</strong>.\r\nIf available, data should be provided for <strong>both flow directions</strong>,\r\ni.e., flow from port_a to port_b and from port_b to port_a,\r\nas well as for the <strong>laminar</strong> and the <strong>turbulent</strong> region.\r\nIt is also an option to provide the loss factor <strong>only</strong> for the\r\n<strong>turbulent</strong> region for a flow from port_a to port_b.\r\n</p>\r\n<p>\r\nThe following equations are used:\r\n</p>\r\n<blockquote><pre>\r\n&Delta;p = 0.5*&zeta;*&rho;*v*|v|\r\n   = 0.5*&zeta;/A^2 * (1/&rho;) * m_flow*|m_flow|\r\n     Re = |v|*D*&rho;/&mu;\r\n</pre></blockquote>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><td><strong>flow type</strong></td>\r\n    <td><strong>&zeta;</strong> = </td>\r\n    <td><strong>flow region</strong></td></tr>\r\n<tr><td>turbulent</td>\r\n    <td><strong>zeta1</strong> = const.</td>\r\n    <td>Re &ge;  Re_turbulent, v &ge; 0</td></tr>\r\n<tr><td></td>\r\n    <td><strong>zeta2</strong> = const.</td>\r\n    <td>Re &ge; Re_turbulent, v &lt; 0</td></tr>\r\n<tr><td>laminar</td>\r\n    <td><strong>c0</strong>/Re</td>\r\n    <td>both flow directions, Re small; c0 = const.</td></tr>\r\n</table>\r\n<p>\r\nwhere\r\n</p>\r\n<ul>\r\n<li> &Delta;p is the pressure drop: &Delta;p = port_a.p - port_b.p</li>\r\n<li> v is the mean velocity.</li>\r\n<li> &rho; is the density.</li>\r\n<li> &zeta; is the loss factor that depends on the geometry of\r\n     the pipe. In the turbulent flow regime, it is assumed that\r\n     &zeta; is constant and is given by \\\"zeta1\\\" and\r\n     \\\"zeta2\\\" depending on the flow direction.<br>\r\n     When the Reynolds number Re is below \\\"Re_turbulent\\\", the\r\n     flow is laminar for small flow velocities. For higher\r\n     velocities there is a transition region from\r\n     laminar to turbulent flow. The loss factor for\r\n     laminar flow at small velocities is defined by the often occurring\r\n     approximation c0/Re. If c0 is different for the two\r\n     flow directions, the mean value has to be used\r\n     (c0 = (c0_ab + c0_ba)/2).</li>\r\n<li> The equation \\\"&Delta;p = 0.5*&zeta;*&rho;*v*|v|\\\" is either with\r\n     respect to port_a or to port_b, depending on the definition\r\n     of the particular loss factor &zeta; (in some references loss\r\n     factors are defined with respect to port_a, in other references\r\n     with respect to port_b).</li>\r\n\r\n<li> Re = |v|*D_Re*&rho;/&mu; = |m_flow|*D_Re/(A_Re*&mu;)\r\n     is the Reynolds number at the smallest cross\r\n     section area. This is often at port_a or at port_b, but can\r\n     also be between the two ports. In the record, the diameter\r\n     D_Re of this smallest cross section area has to be provided, as\r\n     well, as Re_turbulent, the absolute value of the\r\n     Reynolds number at which\r\n     the turbulent flow starts. If Re_turbulent is different for\r\n     the two flow directions, use the smaller value as Re_turbulent.</li>\r\n<li> D is the diameter of the pipe. If the pipe has not a\r\n     circular cross section, D = 4*A/P, where A is the cross section\r\n     area and P is the wetted perimeter.</li>\r\n<li> A is the cross section area with A = &pi;(D/2)^2.</li>\r\n<li> &mu; is the dynamic viscosity.</li>\r\n</ul>\r\n<p>\r\nThe laminar and the transition region is usually of\r\nnot much technical interest because the operating point is\r\nmostly in the turbulent regime. For simplification and for\r\nnumerical reasons, this whole region is described by two\r\npolynomials of third order, one polynomial for m_flow &ge; 0\r\nand one for m_flow &lt; 0. The polynomials start at\r\nRe = |m_flow|*4/(&pi;*D_Re*&mu;), where D_Re is the\r\nsmallest diameter between port_a and port_b.\r\nThe common derivative\r\nof the two polynomials at Re = 0 is\r\ncomputed from the equation \\\"c0/Re\\\". Note, the pressure drop\r\nequation above in the laminar region is always defined\r\nwith respect to the smallest diameter D_Re.\r\n</p>\r\n<p>\r\nIf no data for c0 is available, the derivative at Re = 0 is computed in such\r\na way, that the second derivatives of the two polynomials\r\nare identical at Re = 0. The polynomials are constructed, such that\r\nthey smoothly touch the characteristic curves in the turbulent\r\nregions. The whole characteristic is therefore <strong>continuous</strong>\r\nand has a <strong>finite</strong>, <strong>continuous first derivative everywhere</strong>.\r\nIn some cases, the constructed polynomials would \\\"vibrate\\\". This is\r\navoided by reducing the derivative at Re=0 in such a way that\r\nthe polynomials are guaranteed to be monotonically increasing.\r\nThe used sufficient criteria for monotonicity follows from:\r\n</p>\r\n\r\n<dl>\r\n<dt> Fritsch F.N. and Carlson R.E. (1980):</dt>\r\n<dd> <strong>Monotone piecewise cubic interpolation</strong>.\r\n     SIAM J. Numerc. Anal., Vol. 17, No. 2, April 1980, pp. 238-246</dd>\r\n</dl>\r\n</html>\"));\r\n      end BaseModelNonconstantCrossSectionArea", "checksum": "83a48d9cad9a8e89d4baf2c047acace2e5c65973", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Fittings.mo:1735-1956", "component_count": 0, "connection_count": 0, "variable_count": 13, "physical_quantity_count": 3, "parameter_count": 5, "equation_count": 13, "dependency_count": 14, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 15.5, "model_type": "basic", "physical_domains": ["hydraulic", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "model", "equation_summary": "equation Ib_flow = 0", "search_keywords": ["Pa", "Pressure", "Velocity", "basic", "hydraulic", "m/s", "mechanical"]}, "components": [], "connections": [], "variables": [{"name": "dp_start", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "dp_nominal,\r\n          m_flow_small = if system.use_eps_Re then system.eps_m_flow*m_flow_nominal else system.m_flow_small,\r\n          m_flow(stateSelect = if momentumDynamics == Types.Dynamics.SteadyState then StateSelect.default\r\n                               else StateSelect.prefer))", "comment": null}, {"name": "pathLength", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "0,\r\n          final momentumDynamics = Types.Dynamics.SteadyState)", "comment": null}, {"name": "Re", "type_name": "SI.ReynoldsNumber", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.ReynoldsNumber_m_flow(\r\n              m_flow,\r\n              noEvent(if m_flow>0 then Medium.dynamicViscosity(state_a) else Medium.dynamicViscosity(state_b)),\r\n              data.D_Re) if show_Re \"Reynolds number at diameter data.D_Re\"", "comment": null}, {"name": "p_total_a", "type_name": "SI.AbsolutePressure", "prefixes": [], "attributes": {}, "binding_equation": "port_a.p + 0.5 * m_flow^2 /((Modelica.Constants.pi/4 * data.diameter_a^2)^2 * noEvent(if port_a.m_flow > 0 then Medium.density(state_a) else Medium.density(state_b))) if\r\n          show_totalPressures \"Total pressure at port_a\"", "comment": null}, {"name": "p_total_b", "type_name": "SI.AbsolutePressure", "prefixes": [], "attributes": {}, "binding_equation": "port_b.p + 0.5 * m_flow^2 /((Modelica.Constants.pi/4 * data.diameter_b^2)^2 * noEvent(if port_b.m_flow > 0 then Medium.density(state_b) else Medium.density(state_a))) if\r\n          show_totalPressures \"Total pressure at port_a\"", "comment": null}, {"name": "v_a", "type_name": "SI.Velocity", "prefixes": [], "attributes": {}, "binding_equation": "port_a.m_flow /(Modelica.Constants.pi/4 * data.diameter_a^2 * noEvent(if port_a.m_flow > 0 then Medium.density(state_a) else Medium.density(state_b))) if\r\n          show_portVelocities \"Fluid velocity into port_a\"", "comment": null}, {"name": "v_b", "type_name": "SI.Velocity", "prefixes": [], "attributes": {}, "binding_equation": "port_b.m_flow /(Modelica.Constants.pi/4 * data.diameter_b^2 * noEvent(if port_b.m_flow > 0 then Medium.density(state_b) else Medium.density(state_a))) if\r\n          show_portVelocities \"Fluid velocity into port_b\"", "comment": null}, {"name": "dp_fg", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "if use_Re then\r\n                   pressureLoss_m_flow_and_Re(\r\n                       m_flow, Medium.density(state_a), Medium.density(state_b),\r\n                       Medium.dynamicViscosity(state_a),\r\n                       Medium.dynamicViscosity(state_b),\r\n                       data) else\r\n                   pressureLoss_m_flow_totalPressure(m_flow,\r\n                     Medium.density(state_a),\r\n                     Medium.density(state_b_des),\r\n                     Medium.density(state_b),\r\n                     Medium.density(state_a_nondes),\r\n                     data, m_flow_small)", "comment": "\"Pressure loss due to friction and gravity\""}, {"name": "A_mean", "type_name": "SI.Area", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Constants.pi/4*(data.diameter_a^2+data.diameter_b^2)/2\r\n          \"Mean cross flow area\"", "comment": null}, {"name": "state_b_des", "type_name": "Medium.ThermodynamicState", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Thermodynamic state at port b for flow a -> b\""}, {"name": "state_a_nondes", "type_name": "Medium.ThermodynamicState", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Thermodynamic state at port a for flow a <- b\""}, {"name": "Ib_flow", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "0", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "v_a", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "v_b", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}, {"name": "dp_fg", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": null}], "dependencies": ["F", "Medium", "Modelica.Constants", "Modelica.Fluid.Interfaces", "Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers", "R", "SI", "StateSelect", "Types.Dynamics", "data", "i", "port_a", "port_b", "system"], "inheritance_chain": ["Modelica.Fluid.Interfaces.PartialTwoPortTransport", "Modelica.Fluid.Interfaces.PartialLumpedFlow"]}
{"fqn": "Modelica.Fluid.Sensors.SpecificEntropy", "kind": "model", "name": "SpecificEntropy", "package_path": ["Modelica", "Fluid", "Sensors"], "extends": ["Sensors.BaseClasses.PartialAbsoluteSensor", "Modelica.Icons.RoundSensor"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    s = Medium.specificEntropy(Medium.setState_phX(port.p, inStream(port.h_outflow), inStream(port.Xi_outflow)))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Sensors.mo", "start_line": 330, "end_line": 331, "start_col": 3, "end_col": 114}}, {"equations": ["s = Medium.specificEntropy(Medium.setState_phX(port.p, inStream(port.h_outflow), inStream(port.Xi_outflow)))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Sensors.mo", "start_line": 331, "end_line": 331, "start_col": 5, "end_col": 114}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Sensors.mo", "start_line": 330, "end_line": 330, "start_col": 3, "end_col": 11}}], "docstring": "extends Sensors.BaseClasses.PartialAbsoluteSensor | eq: equation s = Medium.specificEntropy(Medium.setState_phX(port.p, inStream(port.h_outflow), inStream(port.", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Sensors.mo", "start_line": 322, "end_line": 350, "start_col": 3, "end_col": 22}, "code_text": "model SpecificEntropy \"Ideal one port specific entropy sensor\"\r\n    extends Sensors.BaseClasses.PartialAbsoluteSensor;\r\n    extends Modelica.Icons.RoundSensor;\r\n    Modelica.Blocks.Interfaces.RealOutput s(final quantity=\"SpecificEntropy\",\r\n                                            final unit=\"J/(kg.K)\")\r\n      \"Specific entropy in port medium\"\r\n      annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n\r\n  equation\r\n    s = Medium.specificEntropy(Medium.setState_phX(port.p, inStream(port.h_outflow), inStream(port.Xi_outflow)));\r\n  annotation (defaultComponentName=\"specificEntropy\",\r\n    Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,\r\n              100}}), graphics={\r\n          Line(points={{0,-70},{0,-100}}, color={0,0,127}),\r\n          Text(\r\n            extent={{-150,80},{150,120}},\r\n            textString=\"%name\",\r\n            textColor={0,0,255}),\r\n          Text(\r\n            extent={{156,-24},{54,-54}},\r\n            textString=\"s\"),\r\n          Line(points={{70,0},{100,0}}, color={0,0,127})}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis component monitors the specific entropy of the fluid passing its port.\r\nThe sensor is ideal, i.e., it does not influence the fluid.\r\n</p>\r\n</html>\"));\r\n  end SpecificEntropy", "checksum": "e983bebae22a1ace2fa18d08dd7e5855bf0cc644", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Sensors.mo:322-350", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 7, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 3.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation s = Medium.specificEntropy(Medium.setState_phX(port.p, inStream(port.h_outflow), inStream(port.Xi_outflow)))", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "unit", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "\"J/(kg.K)\")\r\n      \"Specific entropy in port medium\"\r\n      \r\n\r\n  equation\r\n    s = Medium.specificEntropy(Medium.setState_phX(port.p, inStream(port.h_outflow), inStream(port.Xi_outflow)))", "comment": null}], "physical_quantities": [], "dependencies": ["Medium", "Modelica.Blocks.Interfaces", "Modelica.Icons", "Sensors.BaseClasses", "i", "kg", "port"], "inheritance_chain": ["Sensors.BaseClasses.PartialAbsoluteSensor", "Modelica.Icons.RoundSensor"]}
{"fqn": "ConsistentInitialization.Fluid.Mechanical.BaseClasses.TwoMassesEquations", "kind": "model", "name": "TwoMassesEquations", "package_path": ["ConsistentInitialization", "Fluid", "Mechanical", "BaseClasses"], "extends": [], "imports": [], "parameters": [{"name": "M", "type": "Real", "default": "1", "description": null}, {"name": "K", "type": "Real", "default": "1", "description": null}, {"name": "F0", "type": "Real", "default": "1", "description": null}], "equations": [{"equations": ["equation\r\n          der(x1) = v1", "M*der(v1) = F1+F2", "der(x2) = v2", "M*der(v2) = -F2", "F1 = -K*x1", "x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 535, "end_line": 541, "start_col": 9, "end_col": 19}}, {"equations": ["der(x1) = v1", "M*der(v1) = F1+F2", "der(x2) = v2", "M*der(v2) = -F2", "F1 = -K*x1", "x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 536, "end_line": 541, "start_col": 11, "end_col": 19}}, {"equations": ["x1 = x2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 541, "end_line": 541, "start_col": 11, "end_col": 18}}, {"equations": ["F1 = -K*x1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 540, "end_line": 540, "start_col": 11, "end_col": 21}}, {"equations": ["M*der(v2) = -F2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 539, "end_line": 539, "start_col": 11, "end_col": 26}}, {"equations": ["der(x2) = v2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 538, "end_line": 538, "start_col": 11, "end_col": 23}}, {"equations": ["M*der(v1) = F1+F2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 537, "end_line": 537, "start_col": 11, "end_col": 28}}, {"equations": ["der(x1) = v1"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 536, "end_line": 536, "start_col": 11, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 535, "end_line": 535, "start_col": 9, "end_col": 17}}], "docstring": "components: Real×6 | params: M, K, F0 | eq: equation der(x1) = v1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo", "start_line": 529, "end_line": 542, "start_col": 9, "end_col": 31}, "code_text": "model TwoMassesEquations\r\n          \"Two rigidly connected masses, connected to ground via a spring, equation-based\"\r\n          Real x1, v1, x2, v2, F1, F2;\r\n          parameter Real M = 1;\r\n          parameter Real K = 1;\r\n          parameter Real F0 = 1;\r\n        equation\r\n          der(x1) = v1;\r\n          M*der(v1) = F1+F2;\r\n          der(x2) = v2;\r\n          M*der(v2) = -F2;\r\n          F1 = -K*x1;\r\n          x1 = x2;\r\n        end TwoMassesEquations", "checksum": "6576204ca09cb86e0f7890aa431752ff639796ca", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTestOverdetermined.mo:529-542", "component_count": 6, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 3, "equation_count": 9, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 22.5, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation der(x1) = v1", "search_keywords": ["Real", "basic"]}, "components": [{"name": "x1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "x2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "v2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F1", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "F2", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "der", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "v1", "comment": null}], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Electrical.Machines.BasicMachines.Transformers.Yz.Yz09", "kind": "model", "name": "Yz09", "package_path": ["Modelica", "Electrical", "Machines", "BasicMachines", "Transformers", "Yz"], "extends": ["Machines.Interfaces.PartialBasicTransformer"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  connect(star1.pin_n, starpoint1) annotation (Line(points={{-10,-90},{\r\n          -10,-100},{-50,-100}}, color={0,0,255}))", "connect(star2.pin_n, starpoint2) annotation (Line(points={{10,-90},{\r\n          10,-100},{50,-100}}, color={0,0,255}))", "connect(l1sigma.plug_n, core.plug_p1) annotation (Line(points={{-50,0},\r\n          {-50,20},{-10,20},{-10,5}}, color={0,0,255}))", "connect(core.plug_n1, star1.plug_p) annotation (Line(points={{-10,-5},\r\n          {-10,-70},{-10,-70}}, color={0,0,255}))", "connect(core.plug_p2, Rot21.plug_n)\r\n    annotation (Line(points={{10,10},{30,10}}, color={0,0,255}))", "connect(core.plug_p3, Rot21.plug_p) annotation (Line(points={{10,-4},\r\n          {20,-4},{20,-10},{30,-10}}, color={0,0,255}))", "connect(core.plug_n3, star2.plug_p) annotation (Line(points={{10,-10},\r\n          {10,-70},{10,-70}}, color={0,0,255}))", "connect(l2sigma.plug_n, Rot22.plug_n) annotation (Line(points={{50,0},\r\n          {50,20},{50,20}}, color={0,0,255}))", "connect(Rot22.plug_p, core.plug_n2) annotation (Line(points={{30,20},\r\n          {20,20},{20,4},{10,4}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\Transformers\\Yz\\Yz09.mo", "start_line": 28, "end_line": 46, "start_col": 1, "end_col": 53}}, {"equations": ["connect(star1.pin_n, starpoint1) annotation (Line(points={{-10,-90},{\r\n          -10,-100},{-50,-100}}, color={0,0,255}))", "connect(star2.pin_n, starpoint2) annotation (Line(points={{10,-90},{\r\n          10,-100},{50,-100}}, color={0,0,255}))", "connect(l1sigma.plug_n, core.plug_p1) annotation (Line(points={{-50,0},\r\n          {-50,20},{-10,20},{-10,5}}, color={0,0,255}))", "connect(core.plug_n1, star1.plug_p) annotation (Line(points={{-10,-5},\r\n          {-10,-70},{-10,-70}}, color={0,0,255}))", "connect(core.plug_p2, Rot21.plug_n)\r\n    annotation (Line(points={{10,10},{30,10}}, color={0,0,255}))", "connect(core.plug_p3, Rot21.plug_p) annotation (Line(points={{10,-4},\r\n          {20,-4},{20,-10},{30,-10}}, color={0,0,255}))", "connect(core.plug_n3, star2.plug_p) annotation (Line(points={{10,-10},\r\n          {10,-70},{10,-70}}, color={0,0,255}))", "connect(l2sigma.plug_n, Rot22.plug_n) annotation (Line(points={{50,0},\r\n          {50,20},{50,20}}, color={0,0,255}))", "connect(Rot22.plug_p, core.plug_n2) annotation (Line(points={{30,20},\r\n          {20,20},{20,4},{10,4}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\Transformers\\Yz\\Yz09.mo", "start_line": 29, "end_line": 46, "start_col": 3, "end_col": 53}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\Transformers\\Yz\\Yz09.mo", "start_line": 28, "end_line": 28, "start_col": 1, "end_col": 9}}], "docstring": "extends Machines.Interfaces.PartialBasicTransformer | connections: 9 | eq: equation connect(star1.pin_n, starpoint1) annotation (Line(points={{-10,-90},{ -10,-1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\Transformers\\Yz\\Yz09.mo", "start_line": 2, "end_line": 52, "start_col": 1, "end_col": 9}, "code_text": "model Yz09 \"Transformer Yz9\"\r\n  extends Machines.Interfaces.PartialBasicTransformer(final VectorGroup=\"Yz09\");\r\n  Modelica.Electrical.Polyphase.Basic.Star star1(final m=m)\r\n    annotation (Placement(transformation(\r\n        origin={-10,-80},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Analog.Interfaces.NegativePin starpoint1\r\n    annotation (Placement(transformation(extent={{-60,-110},{-40,-90}})));\r\n  Modelica.Electrical.Polyphase.Basic.Star star2(final m=m)\r\n    annotation (Placement(transformation(\r\n        origin={10,-80},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Analog.Interfaces.NegativePin starpoint2\r\n    annotation (Placement(transformation(extent={{40,-110},{60,-90}})));\r\n  Modelica.Electrical.Polyphase.Basic.Delta Rot21(final m=m)\r\n    annotation (Placement(transformation(\r\n        origin={30,0},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=90)));\r\n  Modelica.Electrical.Polyphase.Basic.Delta Rot22(final m=m)\r\n    annotation (Placement(transformation(\r\n        origin={40,20},\r\n        extent={{10,10},{-10,-10}},\r\n        rotation=180)));\r\nequation\r\n  connect(star1.pin_n, starpoint1) annotation (Line(points={{-10,-90},{\r\n          -10,-100},{-50,-100}}, color={0,0,255}));\r\n  connect(star2.pin_n, starpoint2) annotation (Line(points={{10,-90},{\r\n          10,-100},{50,-100}}, color={0,0,255}));\r\n  connect(l1sigma.plug_n, core.plug_p1) annotation (Line(points={{-50,0},\r\n          {-50,20},{-10,20},{-10,5}}, color={0,0,255}));\r\n  connect(core.plug_n1, star1.plug_p) annotation (Line(points={{-10,-5},\r\n          {-10,-70},{-10,-70}}, color={0,0,255}));\r\n  connect(core.plug_p2, Rot21.plug_n)\r\n    annotation (Line(points={{10,10},{30,10}}, color={0,0,255}));\r\n  connect(core.plug_p3, Rot21.plug_p) annotation (Line(points={{10,-4},\r\n          {20,-4},{20,-10},{30,-10}}, color={0,0,255}));\r\n  connect(core.plug_n3, star2.plug_p) annotation (Line(points={{10,-10},\r\n          {10,-70},{10,-70}}, color={0,0,255}));\r\n  connect(l2sigma.plug_n, Rot22.plug_n) annotation (Line(points={{50,0},\r\n          {50,20},{50,20}}, color={0,0,255}));\r\n  connect(Rot22.plug_p, core.plug_n2) annotation (Line(points={{30,20},\r\n          {20,20},{20,4},{10,4}}, color={0,0,255}));\r\n  annotation (defaultComponentName=\"transformer\", Documentation(info=\"<html>\r\nTransformer Yz9\r\n<br>Typical parameters see:\r\n<a href=\\\"modelica://Modelica.Electrical.Machines.Interfaces.PartialBasicTransformer\\\">PartialBasicTransformer</a>\r\n</html>\"));\r\nend Yz09", "checksum": "621c25c2b3ee212591de3497db32aa2fd605159a", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\BasicMachines\\Transformers\\Yz\\Yz09.mo:2-52", "component_count": 0, "connection_count": 9, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 11, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 30.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star1.pin_n, starpoint1) annotation (Line(points={{-10,-90},{ -10,-100},{-50,-100}}, color={0,0,255}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "star1.pin_n", "to_connector": "starpoint1", "condition": null}, {"from_connector": "star2.pin_n", "to_connector": "starpoint2", "condition": null}, {"from_connector": "l1sigma.plug_n", "to_connector": "core.plug_p1", "condition": null}, {"from_connector": "core.plug_n1", "to_connector": "star1.plug_p", "condition": null}, {"from_connector": "core.plug_p2", "to_connector": "Rot21.plug_n", "condition": null}, {"from_connector": "core.plug_p3", "to_connector": "Rot21.plug_p", "condition": null}, {"from_connector": "core.plug_n3", "to_connector": "star2.plug_p", "condition": null}, {"from_connector": "l2sigma.plug_n", "to_connector": "Rot22.plug_n", "condition": null}, {"from_connector": "Rot22.plug_p", "to_connector": "core.plug_n2", "condition": null}], "variables": [], "physical_quantities": [], "dependencies": ["Machines.Interfaces", "Modelica.Electrical.Analog.Interfaces", "Modelica.Electrical.Machines.Interfaces", "Modelica.Electrical.Polyphase.Basic", "Rot21", "Rot22", "core", "l1sigma", "l2sigma", "star1", "star2"], "inheritance_chain": ["Machines.Interfaces.PartialBasicTransformer"]}
{"fqn": "Modelica.Electrical.Spice3.Examples.Oscillator", "kind": "model", "name": "Oscillator", "package_path": ["Modelica", "Electrical", "Spice3", "Examples"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n      connect(r.n, r1.n) annotation (Line(\r\n          points={{-36,30},{-6,30}}, color={0,0,255}))", "connect(r1.n, r2.n) annotation (Line(\r\n          points={{-6,30},{18,30}}, color={0,0,255}))", "connect(r2.n, r3.n) annotation (Line(\r\n          points={{18,30},{50,30}}, color={0,0,255}))", "connect(r.p, c.p) annotation (Line(\r\n          points={{-36,10},{-32,10}}, color={0,0,255}))", "connect(c.n, r1.p) annotation (Line(\r\n          points={{-12,10},{-6,10}}, color={0,0,255}))", "connect(r2.p, c1.p) annotation (Line(\r\n          points={{18,10},{24,10}}, color={0,0,255}))", "connect(c1.n, r3.p) annotation (Line(\r\n          points={{44,10},{50,10}}, color={0,0,255}))", "connect(r1.p, T2.B) annotation (Line(\r\n          points={{-6,10},{-6,-30},{30.4,-30}}, color={0,0,255}))", "connect(r2.p, T1.B) annotation (Line(\r\n          points={{18,10},{18,-24},{-20.4,-24}}, color={0,0,255}))", "connect(T1.C, r.p) annotation (Line(\r\n          points={{-33,-34},{-48,-34},{-48,10},{-36,10}}, color={0,0,255}))", "connect(T1.E, ground1.p) annotation (Line(\r\n          points={{-33,-14},{-68,-14}}, color={0,0,255}))", "connect(T2.E, ground2.p) annotation (Line(\r\n          points={{43,-40},{60,-40}}, color={0,0,255}))", "connect(r3.p, T2.C) annotation (Line(\r\n          points={{50,10},{50,-20},{43,-20}}, color={0,0,255}))", "connect(r3.p, r4.p) annotation (Line(\r\n          points={{50,10},{58,10},{58,8},{64,8}}, color={0,0,255}))", "connect(ground2.p, r4.n) annotation (Line(\r\n          points={{60,-40},{60,-12},{64,-12}}, color={0,0,255}))", "connect(v.p, r.n) annotation (Line(\r\n          points={{-68,30},{-36,30}}, color={0,0,255}))", "connect(v.n, ground1.p) annotation (Line(\r\n          points={{-68,10},{-68,-14}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 1073, "end_line": 1107, "start_col": 5, "end_col": 58}}, {"equations": ["connect(r.n, r1.n) annotation (Line(\r\n          points={{-36,30},{-6,30}}, color={0,0,255}))", "connect(r1.n, r2.n) annotation (Line(\r\n          points={{-6,30},{18,30}}, color={0,0,255}))", "connect(r2.n, r3.n) annotation (Line(\r\n          points={{18,30},{50,30}}, color={0,0,255}))", "connect(r.p, c.p) annotation (Line(\r\n          points={{-36,10},{-32,10}}, color={0,0,255}))", "connect(c.n, r1.p) annotation (Line(\r\n          points={{-12,10},{-6,10}}, color={0,0,255}))", "connect(r2.p, c1.p) annotation (Line(\r\n          points={{18,10},{24,10}}, color={0,0,255}))", "connect(c1.n, r3.p) annotation (Line(\r\n          points={{44,10},{50,10}}, color={0,0,255}))", "connect(r1.p, T2.B) annotation (Line(\r\n          points={{-6,10},{-6,-30},{30.4,-30}}, color={0,0,255}))", "connect(r2.p, T1.B) annotation (Line(\r\n          points={{18,10},{18,-24},{-20.4,-24}}, color={0,0,255}))", "connect(T1.C, r.p) annotation (Line(\r\n          points={{-33,-34},{-48,-34},{-48,10},{-36,10}}, color={0,0,255}))", "connect(T1.E, ground1.p) annotation (Line(\r\n          points={{-33,-14},{-68,-14}}, color={0,0,255}))", "connect(T2.E, ground2.p) annotation (Line(\r\n          points={{43,-40},{60,-40}}, color={0,0,255}))", "connect(r3.p, T2.C) annotation (Line(\r\n          points={{50,10},{50,-20},{43,-20}}, color={0,0,255}))", "connect(r3.p, r4.p) annotation (Line(\r\n          points={{50,10},{58,10},{58,8},{64,8}}, color={0,0,255}))", "connect(ground2.p, r4.n) annotation (Line(\r\n          points={{60,-40},{60,-12},{64,-12}}, color={0,0,255}))", "connect(v.p, r.n) annotation (Line(\r\n          points={{-68,30},{-36,30}}, color={0,0,255}))", "connect(v.n, ground1.p) annotation (Line(\r\n          points={{-68,10},{-68,-14}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 1074, "end_line": 1107, "start_col": 7, "end_col": 58}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 1073, "end_line": 1073, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.Example | connections: 17 | eq: equation connect(r.n, r1.n) annotation (Line( points={{-36,30},{-6,30}}, color={0,0,255}))", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 1013, "end_line": 1118, "start_col": 5, "end_col": 19}, "code_text": "model Oscillator \"Oscillator circuit\"\r\n      extends Modelica.Icons.Example;\r\n\r\n      Basic.R_Resistor r(R=1000) annotation (Placement(\r\n            transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=90,\r\n            origin={-36,20})));\r\n      Basic.C_Capacitor c(\r\n        C=1e-7,\r\n        IC=0,\r\n        UIC=true)\r\n        annotation (Placement(transformation(extent={{-32,0},{-12,20}})));\r\n      Basic.C_Capacitor c1(\r\n        C=1e-7,\r\n        IC=0,\r\n        UIC=true)\r\n        annotation (Placement(transformation(extent={{24,0},{44,20}})));\r\n      Basic.R_Resistor r1(R=22000) annotation (Placement(\r\n            transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=90,\r\n            origin={-6,20})));\r\n      Basic.R_Resistor r2(R=22000) annotation (Placement(\r\n            transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=90,\r\n            origin={18,20})));\r\n      Basic.R_Resistor r3(R=1000) annotation (Placement(\r\n            transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=90,\r\n            origin={50,20})));\r\n      Semiconductors.Q_NPNBJT T1(modelcard(CJE=1e-9, CJC=1e-9), vbe(start=0, fixed=true))\r\n        annotation (Placement(transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=180,\r\n            origin={-30,-24})));\r\n      Semiconductors.Q_NPNBJT T2(modelcard(CJE=1e-9, CJC=1e-9), vbe(start=0, fixed=true))\r\n        annotation (Placement(transformation(extent={{30,-40},{50,-20}})));\r\n      Basic.Ground ground1\r\n        annotation (Placement(transformation(extent={{-78,-34},{-58,-14}})));\r\n      Basic.Ground ground2\r\n        annotation (Placement(transformation(extent={{50,-60},{70,-40}})));\r\n      Basic.R_Resistor r4(R=10000) annotation (\r\n          Placement(transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=270,\r\n            origin={64,-2})));\r\n      Sources.V_pulse v(\r\n        V2=8,\r\n        TD=0.0005,\r\n        TR=0.01,\r\n        PW=1000,\r\n        PER=1000,\r\n        TF=0) annotation (Placement(transformation(\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=270,\r\n            origin={-68,20})));\r\n\r\n    equation\r\n      connect(r.n, r1.n) annotation (Line(\r\n          points={{-36,30},{-6,30}}, color={0,0,255}));\r\n      connect(r1.n, r2.n) annotation (Line(\r\n          points={{-6,30},{18,30}}, color={0,0,255}));\r\n      connect(r2.n, r3.n) annotation (Line(\r\n          points={{18,30},{50,30}}, color={0,0,255}));\r\n      connect(r.p, c.p) annotation (Line(\r\n          points={{-36,10},{-32,10}}, color={0,0,255}));\r\n      connect(c.n, r1.p) annotation (Line(\r\n          points={{-12,10},{-6,10}}, color={0,0,255}));\r\n      connect(r2.p, c1.p) annotation (Line(\r\n          points={{18,10},{24,10}}, color={0,0,255}));\r\n      connect(c1.n, r3.p) annotation (Line(\r\n          points={{44,10},{50,10}}, color={0,0,255}));\r\n      connect(r1.p, T2.B) annotation (Line(\r\n          points={{-6,10},{-6,-30},{30.4,-30}}, color={0,0,255}));\r\n      connect(r2.p, T1.B) annotation (Line(\r\n          points={{18,10},{18,-24},{-20.4,-24}}, color={0,0,255}));\r\n      connect(T1.C, r.p) annotation (Line(\r\n          points={{-33,-34},{-48,-34},{-48,10},{-36,10}}, color={0,0,255}));\r\n      connect(T1.E, ground1.p) annotation (Line(\r\n          points={{-33,-14},{-68,-14}}, color={0,0,255}));\r\n      connect(T2.E, ground2.p) annotation (Line(\r\n          points={{43,-40},{60,-40}}, color={0,0,255}));\r\n      connect(r3.p, T2.C) annotation (Line(\r\n          points={{50,10},{50,-20},{43,-20}}, color={0,0,255}));\r\n      connect(r3.p, r4.p) annotation (Line(\r\n          points={{50,10},{58,10},{58,8},{64,8}}, color={0,0,255}));\r\n      connect(ground2.p, r4.n) annotation (Line(\r\n          points={{60,-40},{60,-12},{64,-12}}, color={0,0,255}));\r\n      connect(v.p, r.n) annotation (Line(\r\n          points={{-68,30},{-36,30}}, color={0,0,255}));\r\n      connect(v.n, ground1.p) annotation (Line(\r\n          points={{-68,10},{-68,-14}}, color={0,0,255}));\r\n      annotation (\r\n        experiment(StopTime=0.025),\r\n        Documentation(info=\"<html>\r\n<p>The oscillator circuit demonstrates the usage of BJT transistors.</p>\r\n<p>Simulate until 0.025 s. Display v.p.v, which is rising until 5 V. Furthermore display r4.p.v, which starts oscillating.</p>\r\n</html>\", revisions=\"<html>\r\n<ul>\r\n<li><em>Jan. 2010</em> by Jonathan Gerbet initially implemented</li>\r\n</ul>\r\n</html>\"));\r\n    end Oscillator", "checksum": "c618246bb166ba4585d31785970f52b5d3107322", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo:1013-1118", "component_count": 0, "connection_count": 17, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 18, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 54.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(r.n, r1.n) annotation (Line( points={{-36,30},{-6,30}}, color={0,0,255}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "r.n", "to_connector": "r1.n", "condition": null}, {"from_connector": "r1.n", "to_connector": "r2.n", "condition": null}, {"from_connector": "r2.n", "to_connector": "r3.n", "condition": null}, {"from_connector": "r.p", "to_connector": "c.p", "condition": null}, {"from_connector": "c.n", "to_connector": "r1.p", "condition": null}, {"from_connector": "r2.p", "to_connector": "c1.p", "condition": null}, {"from_connector": "c1.n", "to_connector": "r3.p", "condition": null}, {"from_connector": "r1.p", "to_connector": "T2.B", "condition": null}, {"from_connector": "r2.p", "to_connector": "T1.B", "condition": null}, {"from_connector": "T1.C", "to_connector": "r.p", "condition": null}, {"from_connector": "T1.E", "to_connector": "ground1.p", "condition": null}, {"from_connector": "T2.E", "to_connector": "ground2.p", "condition": null}, {"from_connector": "r3.p", "to_connector": "T2.C", "condition": null}, {"from_connector": "r3.p", "to_connector": "r4.p", "condition": null}, {"from_connector": "ground2.p", "to_connector": "r4.n", "condition": null}, {"from_connector": "v.p", "to_connector": "r.n", "condition": null}, {"from_connector": "v.n", "to_connector": "ground1.p", "condition": null}], "variables": [], "physical_quantities": [], "dependencies": ["Basic", "Modelica.Icons", "Semiconductors", "Sources", "T1", "T2", "c", "c1", "ground1", "ground2", "r", "r1", "r2", "r3", "r4", "r4.p", "v", "v.p"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Digital.Tristates.BUF3S", "kind": "model", "name": "BUF3S", "package_path": ["Modelica", "Electrical", "Digital", "Tristates"], "extends": [], "imports": [], "parameters": [{"name": "tHL", "type": "SI.Time", "default": "0 \"High->Low delay\"", "description": null}, {"name": "tLH", "type": "SI.Time", "default": "0 \"Low->High delay\"", "description": null}, {"name": "strength", "type": "D.Interfaces.Strength", "default": "S.'S_X01' \"Output strength\"", "description": null}], "equations": [{"equations": ["equation\r\n      connect(yy, inertialDelaySensitive.x)", "connect(inertialDelaySensitive.y, y)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 6449, "end_line": 6451, "start_col": 5, "end_col": 44}}, {"equations": ["connect(yy, inertialDelaySensitive.x)", "connect(inertialDelaySensitive.y, y)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 6450, "end_line": 6451, "start_col": 7, "end_col": 44}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 6449, "end_line": 6449, "start_col": 5, "end_col": 13}}, {"equations": ["algorithm\r\n      nextstate := T.Buf3sTable[strength, T.UX01Conv[enable], T.UX01Conv[x]]", "yy := nextstate"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 6446, "end_line": 6448, "start_col": 5, "end_col": 23}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 6446, "end_line": 6446, "start_col": 5, "end_col": 14}}], "docstring": "components: D.Interfaces.DigitalOutput×1, D.Delay.InertialDelaySensitive×1 | connections: 2 | params: tHL, tLH, strength | units: x | eq: equation connect(yy, i", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 6429, "end_line": 6506, "start_col": 5, "end_col": 14}, "code_text": "model BUF3S \"Tristate buffer with enable active high\"\r\n      parameter SI.Time tHL=0 \"High->Low delay\";\r\n      parameter SI.Time tLH=0 \"Low->High delay\";\r\n      parameter D.Interfaces.Strength strength = S.'S_X01' \"Output strength\";\r\n      D.Interfaces.DigitalInput enable\r\n        annotation (Placement(transformation(extent={{-100,60},{-80,80}}),\r\n            iconTransformation(extent={{-100,60},{-80,80}})));\r\n      D.Interfaces.DigitalInput x\r\n        annotation (Placement(transformation(extent={{-100,-20},{-80,0}}),\r\n            iconTransformation(extent={{-100,-20},{-80,0}})));\r\n      D.Interfaces.DigitalOutput y\r\n        annotation (Placement(transformation(extent={{80,-20},{100,0}}),\r\n            iconTransformation(extent={{80,-20},{100,0}})));\r\n    protected\r\n      D.Interfaces.Logic nextstate(start=L.'U');\r\n      D.Interfaces.DigitalOutput yy(start=L.'U');\r\n      D.Delay.InertialDelaySensitive inertialDelaySensitive(tLH=tLH, tHL=tHL, y(start=L.'U', fixed=true));\r\n    algorithm\r\n      nextstate := T.Buf3sTable[strength, T.UX01Conv[enable], T.UX01Conv[x]];\r\n      yy := nextstate;\r\n    equation\r\n      connect(yy, inertialDelaySensitive.x);\r\n      connect(inertialDelaySensitive.y, y);\r\n      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,\r\n                -100},{100,100}}), graphics={\r\n            Line(\r\n              points={{-80,70},{0,70},{0,14}},\r\n              color={127,0,127},\r\n              thickness=1),\r\n            Polygon(\r\n              points={{-40,40},{-40,-60},{40,-10},{-40,40}},\r\n              lineColor={127,0,127},\r\n              fillColor={213,170,255},\r\n              fillPattern=FillPattern.Solid),\r\n            Line(\r\n              points={{-80,-10},{-40,-10}},\r\n              color={127,0,127},\r\n              thickness=1),\r\n            Line(\r\n              points={{40,-10},{82,-10}},\r\n              color={127,0,127},\r\n              thickness=1),\r\n            Text(\r\n              extent={{-54,-62},{20,-84}},\r\n              textColor={0,0,255},\r\n              textString=\"%name\")}),\r\n        Documentation(revisions=\"<html>\r\n<ul>\r\n<li><em>January 22, 2010</em> created by Ulrich Donath<br>\r\n       </li>\r\n</ul>\r\n</html>\", info=\"<html>\r\n<p>Description in VHDL is given by http://www.cs.sfu.ca/~ggbaker/reference/std_logic/src/std_logic_entities.vhd</p>\r\n<p>and for tristate table http://www.cs.sfu.ca/~ggbaker/reference/std_logic/src/std_logic_misc.vhd</p>\r\n<p><strong>Truth Table</strong></p>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <tr><td><strong>DataIn</strong></td>\r\n      <td><strong>Enable</strong></td>\r\n      <td><strong>DataOut*</strong></td>\r\n  </tr>\r\n\r\n  <tr><td>*</td> <td>U</td> <td>U</td></tr>\r\n  <tr><td>*</td> <td>X</td> <td>UX</td></tr>\r\n  <tr><td>*</td> <td>0</td> <td>Z</td></tr>\r\n  <tr><td>*</td> <td>1</td> <td>DataIn</td></tr>\r\n  <tr><td>*</td> <td>Z</td> <td>UX</td></tr>\r\n  <tr><td>*</td> <td>W</td> <td>UX</td></tr>\r\n  <tr><td>*</td> <td>L</td> <td>Z</td></tr>\r\n  <tr><td>*</td> <td>H</td> <td>DataIn</td></tr>\r\n  <tr><td>*</td> <td>-</td> <td>UX</td></tr>\r\n</table>\r\n\r\n<blockquote><pre>\r\nUX: if dataIn == U then U else X\r\nDataOut*: Strength map for DataOut according to tristate table Buf3sTable\r\n</pre></blockquote>\r\n</html>\"));\r\n    end BUF3S", "checksum": "f2d9815d59f36bd0f63a7ad6ecc8604db7bb1172", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo:6429-6506", "component_count": 2, "connection_count": 2, "variable_count": 3, "physical_quantity_count": 1, "parameter_count": 3, "equation_count": 5, "dependency_count": 9, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 16.5, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(yy, inertialDelaySensitive.x)", "search_keywords": ["D.Delay.InertialDelaySensitive", "D.Interfaces.DigitalOutput", "system"]}, "components": [{"name": "yy", "type_name": "D.Interfaces.DigitalOutput", "prefixes": [], "modifications": {"start": "L.'U'"}, "condition": null, "array_dims": null, "comment": null}, {"name": "inertialDelaySensitive", "type_name": "D.Delay.InertialDelaySensitive", "prefixes": [], "modifications": {"tLH": "tLH", "tHL": "tHL", "start": "L.'U'", "fixed": "true"}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "yy", "to_connector": "inertialDelaySensitive.x", "condition": null}, {"from_connector": "inertialDelaySensitive.y", "to_connector": "y", "condition": null}], "variables": [{"name": "nextstate", "type_name": "D.Interfaces.Logic", "prefixes": [], "attributes": {"start": "L.'U'"}, "binding_equation": null, "comment": null}, {"name": "yy", "type_name": "D.Interfaces.DigitalOutput", "prefixes": [], "attributes": {"start": "L.'U'"}, "binding_equation": null, "comment": null}, {"name": "connect", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "strength", "unit": "x", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["D.Delay", "D.Interfaces", "FillPattern", "SI", "T", "inertialDelaySensitive", "std_logic_entities", "std_logic_misc", "www.cs.sfu"], "inheritance_chain": []}
{"fqn": "ModelicaTest.MultiBody.FourbarVariants.JointSSR", "kind": "model", "name": "JointSSR", "package_path": ["ModelicaTest", "MultiBody", "FourbarVariants"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [{"name": "L", "type": "SI.Distance", "default": "Modelica.Math.Vectors.length({-1, 0.3,0.1})", "description": null}], "equations": [{"equations": ["equation\r\n      j1_phi = jointSSR.revolute.phi", "j2_s = j2.s", "j1_w = der(jointSSR.revolute.phi)", "j2_v = j2.v", "connect(jointSSR.axis, damper.flange_b) annotation (Line(points={{-20,18},\r\n              {-50,18},{-50,20},{-60,20}}))", "connect(jointSSR.bearing, damper.flange_a) annotation (Line(points={{-20,\r\n              14},{-50,14},{-50,0},{-60,0}}))", "connect(world.frame_b, b3.frame_a) annotation (Line(\r\n          points={{-60,-70},{-30,-70}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(world.frame_b, jointSSR.frame_b) annotation (Line(\r\n          points={{-60,-70},{-40,-70},{-40,10},{-20,10}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(b3.frame_b, j2.frame_a) annotation (Line(\r\n          points={{-10,-70},{10,-70}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(j2.frame_b, b2.frame_a) annotation (Line(\r\n          points={{30,-70},{40,-70},{40,-40}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(b2.frame_b, jointSSR.frame_a) annotation (Line(\r\n          points={{40,-20},{40,10},{0,10}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(Body1.frame_a, jointSSR.frame_ib) annotation (Line(\r\n          points={{-30,40},{-18,40},{-18,20}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(Body2.frame_a, jointSSR.frame_im) annotation (Line(\r\n          points={{0,40},{-10,40},{-10,20}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(FixedFrame1.frame_a, jointSSR.frame_ib) annotation (Line(\r\n          points={{-30,70},{-18,70},{-18,20}},\r\n          color={95,95,95},\r\n          thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 803, "end_line": 843, "start_col": 5, "end_col": 27}}, {"equations": ["j1_phi = jointSSR.revolute.phi", "j2_s = j2.s", "j1_w = der(jointSSR.revolute.phi)", "j2_v = j2.v", "connect(jointSSR.axis, damper.flange_b) annotation (Line(points={{-20,18},\r\n              {-50,18},{-50,20},{-60,20}}))", "connect(jointSSR.bearing, damper.flange_a) annotation (Line(points={{-20,\r\n              14},{-50,14},{-50,0},{-60,0}}))", "connect(world.frame_b, b3.frame_a) annotation (Line(\r\n          points={{-60,-70},{-30,-70}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(world.frame_b, jointSSR.frame_b) annotation (Line(\r\n          points={{-60,-70},{-40,-70},{-40,10},{-20,10}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(b3.frame_b, j2.frame_a) annotation (Line(\r\n          points={{-10,-70},{10,-70}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(j2.frame_b, b2.frame_a) annotation (Line(\r\n          points={{30,-70},{40,-70},{40,-40}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(b2.frame_b, jointSSR.frame_a) annotation (Line(\r\n          points={{40,-20},{40,10},{0,10}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(Body1.frame_a, jointSSR.frame_ib) annotation (Line(\r\n          points={{-30,40},{-18,40},{-18,20}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(Body2.frame_a, jointSSR.frame_im) annotation (Line(\r\n          points={{0,40},{-10,40},{-10,20}},\r\n          color={95,95,95},\r\n          thickness=0.5))", "connect(FixedFrame1.frame_a, jointSSR.frame_ib) annotation (Line(\r\n          points={{-30,70},{-18,70},{-18,20}},\r\n          color={95,95,95},\r\n          thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 804, "end_line": 843, "start_col": 7, "end_col": 27}}, {"equations": ["j2_v = j2.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 807, "end_line": 807, "start_col": 7, "end_col": 18}}, {"equations": ["j1_w = der(jointSSR.revolute.phi)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 806, "end_line": 806, "start_col": 7, "end_col": 40}}, {"equations": ["j2_s = j2.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 805, "end_line": 805, "start_col": 7, "end_col": 18}}, {"equations": ["j1_phi = jointSSR.revolute.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 804, "end_line": 804, "start_col": 7, "end_col": 37}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 803, "end_line": 803, "start_col": 5, "end_col": 13}}], "docstring": "extends Modelica.Icons.Example | components: SI.Angle×1, SI.Position×1, SI.AngularVelocity×1 | connections: 10 | params: L | units: rad/s, m/s | eq: equation j1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo", "start_line": 761, "end_line": 876, "start_col": 5, "end_col": 17}, "code_text": "model JointSSR \"One kinematic loop with four bars (using JointSSR joint)\"\r\n\r\n      extends Modelica.Icons.Example;\r\n      parameter SI.Distance L=Modelica.Math.Vectors.length({-1,\r\n          0.3,0.1});\r\n      output SI.Angle j1_phi \"angle of revolute joint j1\";\r\n      output SI.Position j2_s \"distance of prismatic joint j2\";\r\n      output SI.AngularVelocity j1_w \"axis speed of revolute joint j1\";\r\n      output SI.Velocity j2_v \"axis velocity of prismatic joint j2\";\r\n\r\n      inner MultiBody.World world annotation (Placement(\r\n            transformation(extent={{-80,-80},{-60,-60}})));\r\n      MultiBody.Joints.Prismatic j2(\r\n        n={1,0,0},\r\n        stateSelect=StateSelect.always,\r\n        a(fixed=false),\r\n        s(fixed=true),\r\n        v(fixed=true, start=-0.2)) annotation (Placement(transformation(extent={{10,-80},{30,-60}})));\r\n      MultiBody.Parts.BodyCylinder b2(r={0,0.2,0}, diameter=\r\n            0.05) annotation (Placement(transformation(\r\n            origin={40,-30},\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=90)));\r\n      MultiBody.Parts.FixedTranslation b3(animation=false, r=\r\n           {1,0,0}) annotation (Placement(transformation(extent={{-30,-80},{-10,-60}})));\r\n      MultiBody.Joints.Assemblies.JointSSR jointSSR(\r\n        n_b={1,0,0},\r\n        rRod2_ib={0,0.5,0.1},\r\n        rod1Length=L,\r\n        checkTotalPower=true,\r\n        rod1Mass=0.1) annotation (Placement(transformation(extent={{0,0},{-20,20}})));\r\n      MultiBody.Visualizers.FixedFrame FixedFrame1\r\n        annotation (Placement(transformation(extent={{-30,60},{-50,80}})));\r\n      MultiBody.Parts.Body Body1(r_CM=jointSSR.rRod2_ib/2, m=\r\n           0.1) annotation (Placement(transformation(extent={{-30,30},{-50,50}})));\r\n      MultiBody.Parts.Body Body2(m=0.1, r_CM={0,0,0})\r\n        annotation (Placement(transformation(extent={{0,30},{20,50}})));\r\n      Modelica.Mechanics.Rotational.Components.Damper damper(d=0.5) annotation (\r\n         Placement(transformation(\r\n            origin={-60,10},\r\n            extent={{-10,-10},{10,10}},\r\n            rotation=90)));\r\n    equation\r\n      j1_phi = jointSSR.revolute.phi;\r\n      j2_s = j2.s;\r\n      j1_w = der(jointSSR.revolute.phi);\r\n      j2_v = j2.v;\r\n      connect(jointSSR.axis, damper.flange_b) annotation (Line(points={{-20,18},\r\n              {-50,18},{-50,20},{-60,20}}));\r\n      connect(jointSSR.bearing, damper.flange_a) annotation (Line(points={{-20,\r\n              14},{-50,14},{-50,0},{-60,0}}));\r\n      connect(world.frame_b, b3.frame_a) annotation (Line(\r\n          points={{-60,-70},{-30,-70}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(world.frame_b, jointSSR.frame_b) annotation (Line(\r\n          points={{-60,-70},{-40,-70},{-40,10},{-20,10}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(b3.frame_b, j2.frame_a) annotation (Line(\r\n          points={{-10,-70},{10,-70}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(j2.frame_b, b2.frame_a) annotation (Line(\r\n          points={{30,-70},{40,-70},{40,-40}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(b2.frame_b, jointSSR.frame_a) annotation (Line(\r\n          points={{40,-20},{40,10},{0,10}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(Body1.frame_a, jointSSR.frame_ib) annotation (Line(\r\n          points={{-30,40},{-18,40},{-18,20}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(Body2.frame_a, jointSSR.frame_im) annotation (Line(\r\n          points={{0,40},{-10,40},{-10,20}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      connect(FixedFrame1.frame_a, jointSSR.frame_ib) annotation (Line(\r\n          points={{-30,70},{-18,70},{-18,20}},\r\n          color={95,95,95},\r\n          thickness=0.5));\r\n      annotation (experiment(StopTime=1.1), Documentation(info=\"<html>\r\n<p>\r\nThis is a fourth version of the \\\"four-bar\\\" mechanism. In this case\r\nthe three revolute joints on the left top-side and the two revolute\r\njoints on the right top side have been replaced by the joint <strong>UniversalSpherical</strong>\r\nthat is a rod with a spherical and a universal joint on two sides. This joint is defined\r\nby <strong>1 constraint</strong> stating that the distance between the two spherical joints is\r\nconstant. Using this joint in a kinematic loop reduces the sizes of\r\nnon-linear algebraic equations. For this loop, only one non-linear\r\nalgebraic system of equations of order 1 remains.\r\n</p>\r\n<p>\r\nThe essential difference to joint SphericalSpherical is that the\r\norientation of the rod can be computed by removing one degree of freedom\r\nof one of the spherical joints (i.e., replacing it by a universal joint).\r\nUsually, the eigenrotation of the connecting rod is of no technical\r\ninterest and by this approximation it is constrained to move in a\r\nsomewhat arbitrary way. This allows to have an additional connector,\r\n<strong>frame_ia</strong>, to be fixed on the rod, where other objects can be attached.\r\nIn this example, the coordinate system of frame_ia is visualized.\r\n</p>\r\n<p>\r\nAnother nice feature is that the <strong>length</strong> of the connecting rod can be\r\nautomatically calculated during <strong>initialization</strong>. In order to do this,\r\nanother initialization condition has to be given. In this example, the\r\ninitial value of the distance of the prismatic joint j2 has been fixed\r\n(via the \\\"Initialization\\\" menu) and the length parameter of joint\r\n\\\"UniversalSpherical\\\" is computed during initialization since parameter\r\n<strong>computeLength</strong> = <strong>true</strong> is set in the joint parameter\r\nmenu (this sets \\\"fixed=false\\\" on parameter \\\"length\\\").\r\n</p>\r\n</html>\"));\r\n    end JointSSR", "checksum": "a81a7a1d77a43757bb9028669b85dc8c7dc29050", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\MultiBody.mo:761-876", "component_count": 4, "connection_count": 10, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 1, "equation_count": 7, "dependency_count": 21, "has_physical_interface": true, "interface_component_count": 4, "has_connections": true, "is_composite_model": true, "complexity_score": 45.5, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation j1_phi = jointSSR.revolute.phi", "search_keywords": ["AngularVelocity", "SI.Angle", "SI.AngularVelocity", "SI.Position", "SI.Velocity", "Velocity", "m/s", "mechanical", "rad/s", "system"]}, "components": [{"name": "j1_phi", "type_name": "SI.Angle", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "angle of revolute joint j1"}, {"name": "j2_s", "type_name": "SI.Position", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "distance of prismatic joint j2"}, {"name": "j1_w", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "axis speed of revolute joint j1"}, {"name": "j2_v", "type_name": "SI.Velocity", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "axis velocity of prismatic joint j2"}], "connections": [{"from_connector": "jointSSR.axis", "to_connector": "damper.flange_b", "condition": null}, {"from_connector": "jointSSR.bearing", "to_connector": "damper.flange_a", "condition": null}, {"from_connector": "world.frame_b", "to_connector": "b3.frame_a", "condition": null}, {"from_connector": "world.frame_b", "to_connector": "jointSSR.frame_b", "condition": null}, {"from_connector": "b3.frame_b", "to_connector": "j2.frame_a", "condition": null}, {"from_connector": "j2.frame_b", "to_connector": "b2.frame_a", "condition": null}, {"from_connector": "b2.frame_b", "to_connector": "jointSSR.frame_a", "condition": null}, {"from_connector": "Body1.frame_a", "to_connector": "jointSSR.frame_ib", "condition": null}, {"from_connector": "Body2.frame_a", "to_connector": "jointSSR.frame_im", "condition": null}, {"from_connector": "FixedFrame1.frame_a", "to_connector": "jointSSR.frame_ib", "condition": null}], "variables": [{"name": "j1_phi", "type_name": "equation", "prefixes": ["output"], "attributes": {}, "binding_equation": "jointSSR.revolute.phi", "comment": "\"angle of revolute joint j1\""}, {"name": "j2_s", "type_name": "SI.Position", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"distance of prismatic joint j2\""}, {"name": "j1_w", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"axis speed of revolute joint j1\""}, {"name": "j2_v", "type_name": "SI.Velocity", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"axis velocity of prismatic joint j2\""}], "physical_quantities": [{"name": "j1_w", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "j2_v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}], "dependencies": ["Body1", "Body2", "FixedFrame1", "Modelica.Icons", "Modelica.Math.Vectors", "Modelica.Mechanics.Rotational.Components", "MultiBody", "MultiBody.Joints", "MultiBody.Joints.Assemblies", "MultiBody.Parts", "MultiBody.Visualizers", "SI", "StateSelect", "b2", "b3", "damper", "i", "j2", "jointSSR", "jointSSR.revolute", "world"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Electrical.Digital.Examples.DLATREGSRL", "kind": "model", "name": "DLATREGSRL", "package_path": ["Modelica", "Electrical", "Digital", "Examples"], "extends": ["Modelica.Icons.Example"], "imports": ["L"], "parameters": [], "equations": [{"equations": ["equation\r\n\r\n          connect(reset.y, dLATREGSRL.reset) annotation (Line(\r\n              points={{-66,-60},{-40.44,-60},{-40.44,-20.2}}, color={127,0,127}))", "connect(enable.y, dLATREGSRL.enable) annotation (Line(\r\n              points={{-66,-22},{-56,-22},{-56,2.6},{-40.44,2.6}}, color={127,0,127}))", "connect(data_0.y, dLATREGSRL.dataIn[1]) annotation (Line(\r\n              points={{-66,18},{-56,18},{-56,34.52},{-40.44,34.52}}, color={127,0,127}))", "connect(data_1.y, dLATREGSRL.dataIn[2]) annotation (Line(\r\n              points={{-66,50},{-56,50},{-56,39.08},{-40.44,39.08}}, color={127,0,127}))", "connect(set.y, dLATREGSRL.set) annotation (Line(\r\n              points={{-66,84},{-40.44,84},{-40.44,59.6}}, color={127,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 891, "end_line": 902, "start_col": 9, "end_col": 80}}, {"equations": ["connect(reset.y, dLATREGSRL.reset) annotation (Line(\r\n              points={{-66,-60},{-40.44,-60},{-40.44,-20.2}}, color={127,0,127}))", "connect(enable.y, dLATREGSRL.enable) annotation (Line(\r\n              points={{-66,-22},{-56,-22},{-56,2.6},{-40.44,2.6}}, color={127,0,127}))", "connect(data_0.y, dLATREGSRL.dataIn[1]) annotation (Line(\r\n              points={{-66,18},{-56,18},{-56,34.52},{-40.44,34.52}}, color={127,0,127}))", "connect(data_1.y, dLATREGSRL.dataIn[2]) annotation (Line(\r\n              points={{-66,50},{-56,50},{-56,39.08},{-40.44,39.08}}, color={127,0,127}))", "connect(set.y, dLATREGSRL.set) annotation (Line(\r\n              points={{-66,84},{-40.44,84},{-40.44,59.6}}, color={127,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 893, "end_line": 902, "start_col": 11, "end_col": 80}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 891, "end_line": 891, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | connections: 5 | units: 2 | eq: equation connect(reset.y, dLATREGSRL.reset) annotation (Line( points={{-66,-60},{-40.44,-60},{-", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo", "start_line": 873, "end_line": 907, "start_col": 9, "end_col": 23}, "code_text": "model DLATREGSRL \"Level sensitive D-Register-Bank, low active set and reset\"\r\n          import L = Modelica.Electrical.Digital.Interfaces.Logic;\r\n          extends Modelica.Icons.Example;\r\n\r\n          Modelica.Electrical.Digital.Sources.Table enable(t={0,10,18}, x={L.'0',L.'1',L.'0'})\r\n            annotation (Placement(transformation(extent={{-86,-32},{-66,-12}})));\r\n          Modelica.Electrical.Digital.Sources.Table data_0(x={L.'W',L.'1'}, t={0,15})\r\n            annotation (Placement(transformation(extent={{-86,8},{-66,28}})));\r\n          Modelica.Electrical.Digital.Sources.Table reset(t={0,1,2,20,21}, x={L.'1',L.'0',L.'1',L.'0',L.'1'})\r\n            annotation (Placement(transformation(extent={{-86,-70},{-66,-50}})));\r\n          Modelica.Electrical.Digital.Sources.Table data_1(x={L.'0',L.'1'}, t={0,16})\r\n            annotation (Placement(transformation(extent={{-86,40},{-66,60}})));\r\n          Modelica.Electrical.Digital.Sources.Table set(t={0,5,6}, x={L.'1',L.'0',L.'1'})\r\n            annotation (Placement(transformation(extent={{-86,74},{-66,94}})));\r\n          Modelica.Electrical.Digital.Registers.DLATREGSRL dLATREGSRL(\r\n            tHL=2,\r\n            tLH=3,\r\n            n=2, delay(inertialDelaySensitive(each y(start=L.'U',fixed=true)))) annotation (Placement(transformation(extent={{-45,-43},{69,71}})));\r\n        equation\r\n\r\n          connect(reset.y, dLATREGSRL.reset) annotation (Line(\r\n              points={{-66,-60},{-40.44,-60},{-40.44,-20.2}}, color={127,0,127}));\r\n          connect(enable.y, dLATREGSRL.enable) annotation (Line(\r\n              points={{-66,-22},{-56,-22},{-56,2.6},{-40.44,2.6}}, color={127,0,127}));\r\n          connect(data_0.y, dLATREGSRL.dataIn[1]) annotation (Line(\r\n              points={{-66,18},{-56,18},{-56,34.52},{-40.44,34.52}}, color={127,0,127}));\r\n          connect(data_1.y, dLATREGSRL.dataIn[2]) annotation (Line(\r\n              points={{-66,50},{-56,50},{-56,39.08},{-40.44,39.08}}, color={127,0,127}));\r\n          connect(set.y, dLATREGSRL.set) annotation (Line(\r\n              points={{-66,84},{-40.44,84},{-40.44,59.6}}, color={127,0,127}));\r\n          annotation (experiment(StopTime=25),\r\n        Documentation(info=\"<html>\r\n<p>This example is a simple test of the Registers.DLATREGSRL component. The data width is set to two. After simulation plot both the dataIn and the dataOut vectors. To verify the results compare the truth table which is documented in the DLATREGSRL component.</p>\r\n</html>\"));\r\n        end DLATREGSRL", "checksum": "76ae1f424a7ca25bbc9201f171a2858298ac8f2f", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Digital.mo:873-907", "component_count": 0, "connection_count": 5, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 3, "dependency_count": 12, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 18.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(reset.y, dLATREGSRL.reset) annotation (Line( points={{-66,-60},{-40.44,-60},{-40.44,-20.2}}, color={127,0,127}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "reset.y", "to_connector": "dLATREGSRL.reset", "condition": null}, {"from_connector": "enable.y", "to_connector": "dLATREGSRL.enable", "condition": null}, {"from_connector": "data_0.y", "to_connector": "dLATREGSRL.dataIn[1]", "condition": null}, {"from_connector": "data_1.y", "to_connector": "dLATREGSRL.dataIn[2]", "condition": null}, {"from_connector": "set.y", "to_connector": "dLATREGSRL.set", "condition": null}], "variables": [{"name": "L", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Electrical.Digital.Interfaces.Logic", "comment": null}], "physical_quantities": [{"name": "reset", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["L", "Modelica.Electrical.Digital.Interfaces", "Modelica.Electrical.Digital.Registers", "Modelica.Electrical.Digital.Sources", "Modelica.Icons", "Registers", "dLATREGSRL", "data_0", "data_1", "enable", "reset", "set"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Magnetic.QuasiStatic.FundamentalWave.Components.EddyCurrent", "kind": "model", "name": "EddyCurrent", "package_path": ["Modelica", "Magnetic", "QuasiStatic", "FundamentalWave", "Components"], "extends": ["Interfaces.TwoPort", "Modelica.Thermal.HeatTransfer.Interfaces.PartialElementaryConditionalHeatPort"], "imports": ["Modelica.Constants.pi"], "parameters": [], "equations": [{"equations": ["equation\r\n  lossPower = (pi/2)*Modelica.ComplexMath.imag(omega*V_m*\r\n    Modelica.ComplexMath.conj(Phi))", "// Alternative calculation of loss power\r\n  // lossPower = -(pi/2)*Modelica.ComplexMath.real(j*omega*V_m*Modelica.ComplexMath.conj(Phi))", "if G > 0 then\r\n    (pi/2)*V_m = j*omega*G*Phi", "else\r\n    V_m = Complex(0, 0)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 14, "end_line": 23, "start_col": 1, "end_col": 10}}, {"equations": ["lossPower = (pi/2)*Modelica.ComplexMath.imag(omega*V_m*\r\n    Modelica.ComplexMath.conj(Phi))", "// Alternative calculation of loss power\r\n  // lossPower = -(pi/2)*Modelica.ComplexMath.real(j*omega*V_m*Modelica.ComplexMath.conj(Phi))", "if G > 0 then\r\n    (pi/2)*V_m = j*omega*G*Phi", "else\r\n    V_m = Complex(0, 0)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 15, "end_line": 23, "start_col": 3, "end_col": 10}}, {"equations": ["if G > 0 then\r\n    (pi/2)*V_m = j*omega*G*Phi", "else\r\n    V_m = Complex(0, 0)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 19, "end_line": 23, "start_col": 3, "end_col": 9}}, {"equations": ["V_m = Complex(0, 0)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 22, "end_line": 22, "start_col": 5, "end_col": 25}}, {"equations": ["(pi/2)*V_m = j*omega*G*Phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 20, "end_line": 20, "start_col": 5, "end_col": 32}}, {"equations": ["lossPower = (pi/2)*Modelica.ComplexMath.imag(omega*V_m*\r\n    Modelica.ComplexMath.conj(Phi))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 15, "end_line": 16, "start_col": 3, "end_col": 36}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 14, "end_line": 14, "start_col": 1, "end_col": 9}}], "docstring": "extends Interfaces.TwoPort | components: Complex×1 | units: rad/s | eq: equation lossPower = (pi/2)*Modelica.ComplexMath.imag(omega*V_m* Modelica.ComplexMath.co", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo", "start_line": 2, "end_line": 104, "start_col": 1, "end_col": 16}, "code_text": "model EddyCurrent\r\n  \"Constant loss model under sinusoidal magnetic conditions\"\r\n  import Modelica.Constants.pi;\r\n  constant Complex j=Complex(0, 1);\r\n  extends Interfaces.TwoPort;\r\n  parameter SI.Conductance G(min=0)\r\n    \"Equivalent symmetric loss conductance\";\r\n  extends\r\n    Modelica.Thermal.HeatTransfer.Interfaces.PartialElementaryConditionalHeatPort(\r\n      final T=273.15);\r\n  SI.AngularVelocity omega=der(port_p.reference.gamma)\r\n    \"Angular velocity\";\r\nequation\r\n  lossPower = (pi/2)*Modelica.ComplexMath.imag(omega*V_m*\r\n    Modelica.ComplexMath.conj(Phi));\r\n  // Alternative calculation of loss power\r\n  // lossPower = -(pi/2)*Modelica.ComplexMath.real(j*omega*V_m*Modelica.ComplexMath.conj(Phi));\r\n  if G > 0 then\r\n    (pi/2)*V_m = j*omega*G*Phi;\r\n  else\r\n    V_m = Complex(0, 0);\r\n  end if;\r\n  annotation (\r\n    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n            100,100}}), graphics={Rectangle(\r\n              extent={{-70,30},{70,-30}},\r\n              lineColor={255,170,85},\r\n              fillColor={255,170,85},\r\n              fillPattern=FillPattern.Solid),Line(points={{-96,0},{-70,0}},\r\n          color={255,170,85}),Line(points={{70,0},{96,0}}, color={255,170,85}),\r\n                                  Text(\r\n              extent={{0,-40},{0,-80}},\r\n              textString=\"G=%G\"),\r\n        Text(\r\n          extent={{150,90},{-150,50}},\r\n          textColor={0,0,255},\r\n          textString=\"%name\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThe eddy current loss model with respect to fundamental wave effects is designed in accordance to\r\n<a href=\\\"modelica://Modelica.Magnetic.FluxTubes.Basic.EddyCurrent\\\">FluxTubes.Basic.EddyCurrent</a> and\r\n<a href=\\\"modelica://Modelica.Magnetic.FundamentalWave.Components.EddyCurrent\\\">FundamentalWave.Components.EddyCurrent</a>.\r\n</p>\r\n\r\n<p>\r\n&nbsp;&nbsp;<img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/eddycurrent.png\\\">.\r\n</p>\r\n\r\n<table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n  <caption>Fig. 1: equivalent models of eddy current losses</caption>\r\n  <tr>\r\n    <td>\r\n      <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/eddycurrent_electric.png\\\">\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n<p>Due to the nature of eddy current losses, which can be represented by symmetric\r\nconductors in an equivalent electric circuit (Fig. 1), the respective\r\nnumber of phases <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/m.png\\\"> has to be taken into account.\r\nAssume that the <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/m.png\\\"> conductances\r\nof the equivalent circuit are <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/Gc.png\\\">,\r\nthe conductance for the eddy current loss model is determined by</p>\r\n\r\n<p>\r\n&nbsp;&nbsp;<img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/GGc.png\\\">\r\n</p>\r\n\r\n<p>\r\nwhere <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/N.png\\\"> is the number of turns of the symmetric electromagnetic coupling.\r\n</p>\r\n\r\n<p>For such an <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/m.png\\\"> phase system\r\nthe relationship between the voltage and current <a href=\\\"https://www.haumer.at/refimg/SpacePhasors.pdf\\\">space phasors</a>\r\nand the magnetic flux and magnetic potential difference phasor is\r\n</p>\r\n\r\n<p>\r\n&nbsp;&nbsp;<img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/vPhi.png\\\">,<br>\r\n&nbsp;&nbsp;<img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/iV_m.png\\\">,\r\n</p>\r\n\r\n<p>\r\nwhere <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/v_k.png\\\">\r\nand <img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/i_k.png\\\">\r\nare the phase voltages and currents, respectively.\r\n</p>\r\n\r\n<p>\r\nThe dissipated loss power\r\n</p>\r\n<p>\r\n&nbsp;&nbsp;<img src=\\\"modelica://Modelica/Resources/Images/Magnetic/FundamentalWave/Components/lossPower.png\\\">\r\n</p>\r\n<p>\r\ncan be determined for the <a href=\\\"https://www.haumer.at/refimg/SpacePhasors.pdf\\\">space phasor</a>\r\nrelationship of the voltage and current space phasor.\r\n</p>\r\n<h4>See also</h4>\r\n\r\n<p><a href=\\\"modelica://Modelica.Magnetic.FluxTubes.Basic.EddyCurrent\\\">FluxTubes.Basic.EddyCurrent</a></p>\r\n</html>\"));\r\nend EddyCurrent", "checksum": "d951f02df47526dc52d20e78dabe5e8105a492f1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\Components\\EddyCurrent.mo:2-104", "component_count": 1, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 7, "dependency_count": 25, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 9.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation lossPower = (pi/2)*Modelica.ComplexMath.imag(omega*V_m* Modelica.ComplexMath.conj(Phi))", "search_keywords": ["AngularVelocity", "Complex", "basic", "rad/s"]}, "components": [{"name": "j", "type_name": "Complex", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "T", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "273.15)", "comment": null}, {"name": "omega", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": "der(port_p.reference.gamma)\r\n    \"Angular velocity\"", "comment": null}, {"name": "lossPower", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "(pi/2)*Modelica.ComplexMath.imag(omega*V_m*\r\n    Modelica.ComplexMath.conj(Phi))", "comment": null}, {"name": "V_m", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Complex(0, 0)", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "omega", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}], "dependencies": ["FillPattern", "FluxTubes.Basic", "FundamentalWave.Components", "GGc", "Gc", "Interfaces", "Modelica.ComplexMath", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Magnetic.FluxTubes.Basic", "Modelica.Magnetic.FundamentalWave.Components", "Modelica.Thermal.HeatTransfer.Interfaces", "N", "SI", "SpacePhasors", "eddycurrent", "eddycurrent_electric", "iV_m", "i_k", "lossPower", "m", "port_p.reference", "vPhi", "v_k", "www.haumer"], "inheritance_chain": ["Interfaces.TwoPort", "Modelica.Thermal.HeatTransfer.Interfaces.PartialElementaryConditionalHeatPort"]}
{"fqn": "Modelica.Fluid.Examples.AST_BatchPlant.BatchPlant_StandardWater.Monitoring", "kind": "model", "name": "Monitoring", "package_path": ["Modelica", "Fluid", "Examples", "AST_BatchPlant", "BatchPlant_StandardWater"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Examples\\AST_BatchPlant.mo", "start_line": 233, "end_line": 234, "start_col": 17, "end_col": 80}, "code_text": "model Monitoring =\r\n          Modelica.Fluid.Machines.BaseClasses.PumpMonitoring.PumpMonitoringNPSH", "checksum": "3de6a740e55d374b509995bc0597b7a075a9c2e3", "meta": {"node_type": "short_class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Examples\\AST_BatchPlant.mo:233-234", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Fluid.Machines.BaseClasses.PumpMonitoring"], "inheritance_chain": []}
{"fqn": "Modelica.Electrical.Polyphase.Sensors.CurrentSensor", "kind": "model", "name": "CurrentSensor", "package_path": ["Modelica", "Electrical", "Polyphase", "Sensors"], "extends": ["Modelica.Icons.RoundSensor"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  connect(plug_p.pin, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-10,0}}, color={0,0,255}))", "connect(currentSensor.n, plug_n.pin)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}))", "connect(currentSensor.i, i) annotation (Line(\r\n      points={{0,-11},{0,-110}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Polyphase\\Sensors\\CurrentSensor.mo", "start_line": 17, "end_line": 23, "start_col": 1, "end_col": 52}}, {"equations": ["connect(plug_p.pin, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-10,0}}, color={0,0,255}))", "connect(currentSensor.n, plug_n.pin)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}))", "connect(currentSensor.i, i) annotation (Line(\r\n      points={{0,-11},{0,-110}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Polyphase\\Sensors\\CurrentSensor.mo", "start_line": 18, "end_line": 23, "start_col": 3, "end_col": 52}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Polyphase\\Sensors\\CurrentSensor.mo", "start_line": 17, "end_line": 17, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Icons.RoundSensor | connections: 3 | units: m, m | eq: equation connect(plug_p.pin, currentSensor.p) annotation (Line(points={{-100,0},{-10,0}}", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Polyphase\\Sensors\\CurrentSensor.mo", "start_line": 2, "end_line": 45, "start_col": 1, "end_col": 18}, "code_text": "model CurrentSensor \"Polyphase current sensor\"\r\n  extends Modelica.Icons.RoundSensor;\r\n  parameter Integer m(final min=1) = 3 \"Number of phases\" annotation(Evaluate=true);\r\n  Interfaces.PositivePlug plug_p(final m=m) annotation (Placement(\r\n        transformation(extent={{-110,-10},{-90,10}})));\r\n  Interfaces.NegativePlug plug_n(final m=m) annotation (Placement(\r\n        transformation(extent={{90,-10},{110,10}})));\r\n  Modelica.Blocks.Interfaces.RealOutput i[m](each unit=\"A\")\r\n    \"Current in the branch from p to n as output signal\" annotation (\r\n      Placement(transformation(\r\n        origin={0,-110},\r\n        extent={{10,-10},{-10,10}},\r\n        rotation=90)));\r\n  Modelica.Electrical.Analog.Sensors.CurrentSensor currentSensor[m]\r\n    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));\r\nequation\r\n  connect(plug_p.pin, currentSensor.p)\r\n    annotation (Line(points={{-100,0},{-10,0}}, color={0,0,255}));\r\n  connect(currentSensor.n, plug_n.pin)\r\n    annotation (Line(points={{10,0},{100,0}}, color={0,0,255}));\r\n  connect(currentSensor.i, i) annotation (Line(\r\n      points={{0,-11},{0,-110}}, color={0,0,127}));\r\n  annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,\r\n            -100},{100,100}}), graphics={\r\n                                       Line(points={{0,-100},\r\n          {0,-70}}, color={0,0,127}),\r\n        Text(\r\n          extent={{150,-100},{-150,-70}},\r\n          textString=\"m=%m\"),\r\n        Text(\r\n          extent={{-150,80},{150,120}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255}),\r\n        Text(\r\n          extent={{-30,-10},{30,-70}},\r\n          textColor={64,64,64},\r\n          textString=\"A\"),  Line(points={{100,0},{-100,0}}, color={0,0,255})}),\r\n                                  Documentation(info=\"<html>\r\n<p>\r\nContains m current sensors (Modelica.Electrical.Analog.Sensors.CurrentSensor),\r\nthus measuring the m currents <em>i[m]</em> flowing from the m pins of plug_p to the m pins of plug_n.\r\n</p>\r\n</html>\"));\r\nend CurrentSensor", "checksum": "ba5e58690fa12b7598b2dec23ea25132d6311157", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Polyphase\\Sensors\\CurrentSensor.mo:2-45", "component_count": 0, "connection_count": 3, "variable_count": 0, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 3, "dependency_count": 7, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 12.0, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(plug_p.pin, currentSensor.p) annotation (Line(points={{-100,0},{-10,0}}, color={0,0,255}))", "search_keywords": ["basic", "mechanical"]}, "components": [], "connections": [{"from_connector": "plug_p.pin", "to_connector": "currentSensor.p", "condition": null}, {"from_connector": "currentSensor.n", "to_connector": "plug_n.pin", "condition": null}, {"from_connector": "currentSensor.i", "to_connector": "i", "condition": null}], "variables": [], "physical_quantities": [{"name": "phases", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signal", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Interfaces", "Modelica.Blocks.Interfaces", "Modelica.Electrical.Analog.Sensors", "Modelica.Icons", "currentSensor", "plug_n", "plug_p"], "inheritance_chain": ["Modelica.Icons.RoundSensor"]}
{"fqn": "Modelica.Electrical.Machines.Examples.InductionMachines.IMC_Initialize", "kind": "model", "name": "IMC_Initialize", "package_path": ["Modelica", "Electrical", "Machines", "Examples", "InductionMachines"], "extends": ["Modelica.Icons.Example"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "VNominal", "type": "SI.Voltage", "default": "100 \"Nominal RMS voltage per phase\"", "description": null}, {"name": "fNominal", "type": "SI.Frequency", "default": "50 \"Nominal frequency\"", "description": null}, {"name": "wSync", "type": "SI.AngularVelocity", "default": "2*pi*fNominal/aimc.p \"Synchronous speed\"", "description": null}, {"name": "tStart", "type": "SI.Time", "default": "0.5 \"Start time\"", "description": null}, {"name": "TLoad", "type": "SI.Torque", "default": "161.4 \"Nominal load torque\"", "description": null}, {"name": "JLoad", "type": "SI.Inertia", "default": "0.29 \"Load's moment of inertia\"", "description": null}], "equations": [{"equations": ["equation\r\n  connect(star.pin_n, ground.p) annotation (Line(points={{-70,-30},{-70,-30},\r\n          {-70,-40}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-70,0},{-70,-10}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-10}},\r\n      color={0,0,255}))", "connect(loadInertia.flange_b, torqueStep.flange) annotation (Line(\r\n      points={{60,-40},{70,-40}}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))", "connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-70,20},{-10,20},{-10,10}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 77, "end_line": 98, "start_col": 1, "end_col": 62}}, {"equations": ["connect(star.pin_n, ground.p) annotation (Line(points={{-70,-30},{-70,-30},\r\n          {-70,-40}}, color={0,0,255}))", "connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-70,0},{-70,-10}}, color={0,0,255}))", "connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}))", "connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-10}},\r\n      color={0,0,255}))", "connect(loadInertia.flange_b, torqueStep.flange) annotation (Line(\r\n      points={{60,-40},{70,-40}}))", "connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}))", "connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-70,20},{-10,20},{-10,10}}, color={0,0,255}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 78, "end_line": 98, "start_col": 3, "end_col": 62}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 77, "end_line": 77, "start_col": 1, "end_col": 9}}, {"equations": ["initial equation\r\n  aimc.wMechanical = wSync", "aimc.i_0_s = 0", "der(aimc.idq_sr) = zeros(2)", "der(aimc.idq_rr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 72, "end_line": 76, "start_col": 1, "end_col": 31}}, {"equations": ["aimc.wMechanical = wSync", "aimc.i_0_s = 0", "der(aimc.idq_sr) = zeros(2)", "der(aimc.idq_rr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 73, "end_line": 76, "start_col": 3, "end_col": 31}}, {"equations": ["der(aimc.idq_rr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 76, "end_line": 76, "start_col": 3, "end_col": 30}}, {"equations": ["der(aimc.idq_sr) = zeros(2)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 75, "end_line": 75, "start_col": 3, "end_col": 30}}, {"equations": ["aimc.i_0_s = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 74, "end_line": 74, "start_col": 3, "end_col": 17}}, {"equations": ["aimc.wMechanical = wSync"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 73, "end_line": 73, "start_col": 3, "end_col": 27}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 72, "end_line": 72, "start_col": 9, "end_col": 17}}], "docstring": "extends Modelica.Icons.Example | components: Integer×1 | connections: 8 | params: VNominal, fNominal, wSync | eq: equation connect(star.pin_n, ground.p) annotat", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo", "start_line": 2, "end_line": 114, "start_col": 1, "end_col": 19}, "code_text": "model IMC_Initialize\r\n  \"Test example: Steady-State Initialization of InductionMachineSquirrelCage\"\r\n  extends Modelica.Icons.Example;\r\n  import Modelica.Constants.pi;\r\n  constant Integer m=3 \"Number of phases\";\r\n  parameter SI.Voltage VNominal=100\r\n    \"Nominal RMS voltage per phase\";\r\n  parameter SI.Frequency fNominal=50 \"Nominal frequency\";\r\n  parameter SI.AngularVelocity wSync=2*pi*fNominal/aimc.p \"Synchronous speed\";\r\n  parameter SI.Time tStart=0.5 \"Start time\";\r\n  parameter SI.Torque TLoad=161.4 \"Nominal load torque\";\r\n  parameter SI.AngularVelocity wLoad(displayUnit=\"rev/min\")=\r\n       1440.45*2*Modelica.Constants.pi/60 \"Nominal load speed\";\r\n  parameter SI.Inertia JLoad=0.29\r\n    \"Load's moment of inertia\";\r\n  Machines.BasicMachines.InductionMachines.IM_SquirrelCage aimc(\r\n    p=aimcData.p,\r\n    fsNominal=aimcData.fsNominal,\r\n    Rs=aimcData.Rs,\r\n    TsRef=aimcData.TsRef,\r\n    alpha20s(displayUnit=\"1/K\") = aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    phiMechanical(fixed=true),\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));\r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (\r\n      Placement(transformation(\r\n        origin={-10,0},\r\n        extent={{-10,10},{10,-10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) annotation (Placement(transformation(\r\n        origin={-70,10},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=270)));\r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) annotation (\r\n      Placement(transformation(\r\n        extent={{10,-10},{-10,10}},\r\n        rotation=90,\r\n        origin={-70,-20})));\r\n  Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(\r\n        transformation(\r\n        origin={-70,-50},\r\n        extent={{-10,-10},{10,10}})));\r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    annotation (Placement(transformation(extent={{40,-50},{60,-30}})));\r\n  Mechanics.Rotational.Sources.TorqueStep torqueStep(\r\n    useSupport=false,\r\n    startTime=tStart,\r\n    stepTorque=-TLoad,\r\n    offsetTorque=0) annotation (Placement(transformation(extent={{90,-50},\r\n            {70,-30}})));\r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    annotation (Placement(transformation(extent={{-20,-34},{0,-14}})));\r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));\r\ninitial equation\r\n  aimc.wMechanical = wSync;\r\n  aimc.i_0_s = 0;\r\n  der(aimc.idq_sr) = zeros(2);\r\n  der(aimc.idq_rr) = zeros(2);\r\nequation\r\n  connect(star.pin_n, ground.p) annotation (Line(points={{-70,-30},{-70,-30},\r\n          {-70,-40}}, color={0,0,255}));\r\n  connect(sineVoltage.plug_n, star.plug_p)\r\n    annotation (Line(points={{-70,0},{-70,-10}}, color={0,0,255}));\r\n  connect(terminalBox.plug_sn, aimc.plug_sn) annotation (Line(\r\n      points={{-16,-30},{-16,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plug_sp, aimc.plug_sp) annotation (Line(\r\n      points={{-4,-30},{-4,-30}},\r\n      color={0,0,255}));\r\n  connect(terminalBox.plugSupply, currentQuasiRMSSensor.plug_n)\r\n    annotation (Line(\r\n      points={{-10,-28},{-10,-10}},\r\n      color={0,0,255}));\r\n  connect(loadInertia.flange_b, torqueStep.flange) annotation (Line(\r\n      points={{60,-40},{70,-40}}));\r\n  connect(aimc.flange, loadInertia.flange_a) annotation (Line(\r\n      points={{0,-40},{40,-40}}));\r\n  connect(sineVoltage.plug_p, currentQuasiRMSSensor.plug_p) annotation (\r\n      Line(\r\n      points={{-70,20},{-10,20},{-10,10}}, color={0,0,255}));\r\n  annotation (experiment(StopTime=1.5, Interval=1E-4, Tolerance=1e-06), Documentation(\r\n        info=\"<html>\r\n<p>The induction machine with squirrel cage is initialized in steady-state at no-load;\r\nat time tStart a load torque step is applied.</p>\r\n\r\n<p>Simulate for 1.5 seconds and plot (versus time):</p>\r\n\r\n<ul>\r\n<li>currentQuasiRMSSensor.I: stator current RMS</li>\r\n<li>aimc.wMechanical: motor's speed</li>\r\n<li>aimc.tauElectrical: motor's torque</li>\r\n</ul>\r\n\r\n<p>Default machine parameters are used.</p>\r\n</html>\"));\r\nend IMC_Initialize", "checksum": "6cbec6d7b9e649c4be24e72c3ff3f0e01515e247", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Examples\\InductionMachines\\IMC_Initialize.mo:2-114", "component_count": 1, "connection_count": 8, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 6, "equation_count": 10, "dependency_count": 22, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 39.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(star.pin_n, ground.p) annotation (Line(points={{-70,-30},{-70,-30}, {-70,-40}}, color={0,0,255}))", "search_keywords": ["Integer", "basic"]}, "components": [{"name": "m", "type_name": "Integer", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "star.pin_n", "to_connector": "ground.p", "condition": null}, {"from_connector": "sineVoltage.plug_n", "to_connector": "star.plug_p", "condition": null}, {"from_connector": "terminalBox.plug_sn", "to_connector": "aimc.plug_sn", "condition": null}, {"from_connector": "terminalBox.plug_sp", "to_connector": "aimc.plug_sp", "condition": null}, {"from_connector": "terminalBox.plugSupply", "to_connector": "currentQuasiRMSSensor.plug_n", "condition": null}, {"from_connector": "loadInertia.flange_b", "to_connector": "torqueStep.flange", "condition": null}, {"from_connector": "aimc.flange", "to_connector": "loadInertia.flange_a", "condition": null}, {"from_connector": "sineVoltage.plug_p", "to_connector": "currentQuasiRMSSensor.plug_p", "condition": null}], "variables": [{"name": "aimc", "type_name": "Machines.BasicMachines.InductionMachines.IM_SquirrelCage", "prefixes": [], "attributes": {"displayUnit": "1/K"}, "binding_equation": "aimcData.alpha20s,\r\n    Lszero=aimcData.Lszero,\r\n    Lssigma=aimcData.Lssigma,\r\n    Jr=aimcData.Jr,\r\n    Js=aimcData.Js,\r\n    frictionParameters=aimcData.frictionParameters,\r\n    statorCoreParameters=aimcData.statorCoreParameters,\r\n    strayLoadParameters=aimcData.strayLoadParameters,\r\n    Lm=aimcData.Lm,\r\n    Lrsigma=aimcData.Lrsigma,\r\n    Rr=aimcData.Rr,\r\n    TrRef=aimcData.TrRef,\r\n    phiMechanical(fixed=true),\r\n    TsOperational=293.15,\r\n    alpha20r=aimcData.alpha20r,\r\n    TrOperational=293.15)\r\n    \r\n  Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor \r\n  Modelica.Electrical.Polyphase.Sources.SineVoltage sineVoltage(\r\n    final m=m,\r\n    f=fill(fNominal, m),\r\n    V=fill(sqrt(2/3)*VNominal, m)) \r\n  Modelica.Electrical.Polyphase.Basic.Star star(final m=m) \r\n  Modelica.Electrical.Analog.Basic.Ground ground \r\n  Modelica.Mechanics.Rotational.Components.Inertia loadInertia(J=JLoad)\r\n    \r\n  Mechanics.Rotational.Sources.TorqueStep torqueStep(\r\n    useSupport=false,\r\n    startTime=tStart,\r\n    stepTorque=-TLoad,\r\n    offsetTorque=0) \r\n  Machines.Utilities.TerminalBox terminalBox(terminalConnection=\"D\")\r\n    \r\n  parameter Utilities.ParameterRecords.IM_SquirrelCageData aimcData \"Induction machine data\"\r\n    \r\ninitial equation\r\n  aimc.wMechanical = wSync", "comment": null}], "physical_quantities": [], "dependencies": ["Machines.BasicMachines.InductionMachines", "Machines.Sensors", "Machines.Utilities", "Mechanics.Rotational.Sources", "Modelica.Constants", "Modelica.Constants.pi", "Modelica.Electrical.Analog.Basic", "Modelica.Electrical.Polyphase.Basic", "Modelica.Electrical.Polyphase.Sources", "Modelica.Icons", "Modelica.Mechanics.Rotational.Components", "SI", "Utilities.ParameterRecords", "aimc", "aimcData", "currentQuasiRMSSensor", "ground", "loadInertia", "sineVoltage", "star", "terminalBox", "torqueStep"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Mechanics.Rotational.Components.AngleToTorqueAdaptor.Move_w", "kind": "model", "name": "Move_w", "package_path": ["Modelica", "Mechanics", "Rotational", "Components", "AngleToTorqueAdaptor"], "extends": ["Modelica.Mechanics.Rotational.Interfaces.PartialElementaryOneFlangeAndSupport2", "Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    phi = flange.phi - phi_support", "phi = position(u, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 128, "end_line": 130, "start_col": 3, "end_col": 29}}, {"equations": ["phi = flange.phi - phi_support", "phi = position(u, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 129, "end_line": 130, "start_col": 5, "end_col": 29}}, {"equations": ["phi = position(u, time)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 130, "end_line": 130, "start_col": 5, "end_col": 28}}, {"equations": ["phi = flange.phi - phi_support"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 129, "end_line": 129, "start_col": 5, "end_col": 35}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 128, "end_line": 128, "start_col": 3, "end_col": 11}}, {"equations": ["algorithm\r\n      qd := q_qd[2]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 125, "end_line": 126, "start_col": 5, "end_col": 21}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 125, "end_line": 125, "start_col": 5, "end_col": 14}}, {"equations": ["algorithm\r\n      q := q_qd[1]"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 112, "end_line": 113, "start_col": 5, "end_col": 20}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 112, "end_line": 112, "start_col": 5, "end_col": 14}}], "docstring": "extends Modelica.Mechanics.Rotational.Interfaces.PartialElementaryOneFlangeAndSupport2 | components: Real×4 | units: 2, 2 | eq: equation phi = flange.phi - phi_", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo", "start_line": 96, "end_line": 166, "start_col": 3, "end_col": 13}, "code_text": "model Move_w\r\n    \"Forced movement of a flange according to an angle and speed signal\"\r\n    extends Modelica.Mechanics.Rotational.Interfaces.PartialElementaryOneFlangeAndSupport2;\r\n\r\n    SI.Angle phi\r\n      \"Rotation angle of flange with respect to support\";\r\n    Modelica.Blocks.Interfaces.RealInput u[2]\r\n      \"Angle and angular velocity of flange with respect to support as input signals\"\r\n      annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n  protected\r\n    function position\r\n      extends Modelica.Icons.Function;\r\n      input Real q_qd[2] \"Required values for position and speed\";\r\n      input Real dummy\r\n        \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n      output Real q;\r\n    algorithm\r\n      q := q_qd[1];\r\n      annotation (derivative(noDerivative=q_qd) = position_der,\r\n          InlineAfterIndexReduction=true);\r\n    end position;\r\n\r\n    function position_der\r\n      extends Modelica.Icons.Function;\r\n      input Real q_qd[2] \"Required values for position and speed\";\r\n      input Real dummy\r\n        \"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\";\r\n      input Real dummy_der;\r\n      output Real qd;\r\n    algorithm\r\n      qd := q_qd[2];\r\n    end position_der;\r\n  equation\r\n    phi = flange.phi - phi_support;\r\n    phi = position(u, time);\r\n    annotation (Documentation(info=\"<html>\r\n<p>\r\nFlange <strong>flange</strong> is <strong>forced</strong> to move relative to flange support with a predefined motion\r\naccording to the input signals:\r\n</p>\r\n<blockquote><pre>\r\nu[1]: angle of flange\r\nu[2]: angular velocity of flange\r\n</pre></blockquote>\r\n<p>\r\nThe user has to guarantee that the input signals are consistent to each other,\r\ni.e., that u[2] is the derivative of u[1].\r\n</p>\r\n<p>\r\nThe input signals can be provided from one of the signal generator\r\nblocks of the block library Modelica.Blocks.Sources.\r\n</p>\r\n</html>\"),\r\n       Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={Text(\r\n                  extent={{-80,-60},{-80,-100}},\r\n                  textString=\"phi,w\"),Rectangle(\r\n                  extent={{-100,20},{100,-20}},\r\n                  lineColor={64,64,64},\r\n                  fillPattern=FillPattern.HorizontalCylinder,\r\n                  fillColor={192,192,192}),Line(points={{-30,-32},{30,-32}}),Line(points={{0,52},{0,32}}),Line(\r\n            points={{-29,32},{30,32}}),Line(points={{0,-32},\r\n            {0,-100}}),Line(points={{30,-42},{20,-52}}),Line(points={{30,-32},{10,-52}}),\r\n            Line(points={{20,-32},{0,-52}}),Line(points={{10,\r\n            -32},{-10,-52}}),Line(points={{0,-32},{-20,-52}}),Line(points={{-10,-32},{-30,-52}}),\r\n            Line(points={{-20,-32},{-30,-42}}),Text(\r\n                  extent={{-150,100},{150,60}},\r\n                  textString=\"%name\",\r\n                  textColor={0,0,255})}));\r\n  end Move_w", "checksum": "b54292a506d8e7f7ac8999f15ee87bae323436f8", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\Rotational\\Components\\AngleToTorqueAdaptor.mo:96-166", "component_count": 4, "connection_count": 0, "variable_count": 8, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 9, "dependency_count": 8, "has_physical_interface": true, "interface_component_count": 4, "has_connections": false, "is_composite_model": false, "complexity_score": 17.0, "model_type": "component", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation phi = flange.phi - phi_support", "search_keywords": ["Real", "component"]}, "components": [{"name": "q_qd", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[2]", "comment": "Required values for position and speed"}, {"name": "q", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "dummy_der", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "qd", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "phi", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "flange.phi - phi_support", "comment": "\"Rotation angle of flange with respect to support\""}, {"name": "q_qd", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Required values for position and speed\""}, {"name": "dummy", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Just to have one input signal that should be differentiated to avoid possible problems in the Modelica tool (is not used)\""}, {"name": "q", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "position", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "dummy_der", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "qd", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "position_der", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "support", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "signals", "unit": "2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "Modelica.Blocks", "Modelica.Blocks.Interfaces", "Modelica.Icons", "Modelica.Mechanics.Rotational.Interfaces", "SI", "flange", "i"], "inheritance_chain": ["Modelica.Mechanics.Rotational.Interfaces.PartialElementaryOneFlangeAndSupport2", "Modelica.Icons.Function"]}
{"fqn": "ModelicaTest.Magnetic.FluxTubes.Sensors", "kind": "model", "name": "Sensors", "package_path": ["ModelicaTest", "Magnetic", "FluxTubes"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n\r\n    connect(signalSource.V_m, ramp.y)\r\n      annotation (Line(points={{-39,20},{-43.4,20}}, color={0,0,127}))", "connect(signalSource.port_n, ground1.port)\r\n      annotation (Line(points={{-30,10},{-30,5},{-30,0}}, color={255,127,0}))", "connect(genericFluxTube.port_n, ground1.port)\r\n      annotation (Line(points={{30,10},{30,0},{-30,0}}, color={255,127,0}))", "connect(magneticPotentialDifferenceSensor.port_n, ground1.port)\r\n      annotation (Line(points={{54,10},{54,0},{-30,0}}, color={255,127,0}))", "connect(magneticFluxSensor.port_p, signalSource.port_p) annotation (Line(\r\n          points={{-10,40},{-30,40},{-30,30}}, color={255,127,0}))", "connect(magneticFluxSensor.port_n, genericFluxTube.port_p)\r\n      annotation (Line(points={{10,40},{30,40},{30,30}}, color={255,127,0}))", "connect(magneticPotentialDifferenceSensor.port_p, genericFluxTube.port_p)\r\n      annotation (Line(points={{54,30},{54,40},{30,40},{30,30}}, color={255,127,\r\n            0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Magnetic\\FluxTubes.mo", "start_line": 669, "end_line": 685, "start_col": 3, "end_col": 18}}, {"equations": ["connect(signalSource.V_m, ramp.y)\r\n      annotation (Line(points={{-39,20},{-43.4,20}}, color={0,0,127}))", "connect(signalSource.port_n, ground1.port)\r\n      annotation (Line(points={{-30,10},{-30,5},{-30,0}}, color={255,127,0}))", "connect(genericFluxTube.port_n, ground1.port)\r\n      annotation (Line(points={{30,10},{30,0},{-30,0}}, color={255,127,0}))", "connect(magneticPotentialDifferenceSensor.port_n, ground1.port)\r\n      annotation (Line(points={{54,10},{54,0},{-30,0}}, color={255,127,0}))", "connect(magneticFluxSensor.port_p, signalSource.port_p) annotation (Line(\r\n          points={{-10,40},{-30,40},{-30,30}}, color={255,127,0}))", "connect(magneticFluxSensor.port_n, genericFluxTube.port_p)\r\n      annotation (Line(points={{10,40},{30,40},{30,30}}, color={255,127,0}))", "connect(magneticPotentialDifferenceSensor.port_p, genericFluxTube.port_p)\r\n      annotation (Line(points={{54,30},{54,40},{30,40},{30,30}}, color={255,127,\r\n            0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Magnetic\\FluxTubes.mo", "start_line": 671, "end_line": 685, "start_col": 5, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Magnetic\\FluxTubes.mo", "start_line": 669, "end_line": 669, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Icons.Example | connections: 7 | eq: equation connect(signalSource.V_m, ramp.y) annotation (Line(points={{-39,20},{-43.4,20}}, color={0,0,127})", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Magnetic\\FluxTubes.mo", "start_line": 638, "end_line": 687, "start_col": 3, "end_col": 14}, "code_text": "model Sensors\r\n    extends Modelica.Icons.Example;\r\n    Modelica.Magnetic.FluxTubes.Sources.SignalMagneticPotentialDifference\r\n      signalSource annotation (Placement(transformation(\r\n          extent={{-10,10},{10,-10}},\r\n          rotation=270,\r\n          origin={-30,20})));\r\n    Modelica.Magnetic.FluxTubes.Shapes.FixedShape.GenericFluxTube\r\n      genericFluxTube(\r\n      nonLinearPermeability=false,\r\n      mu_rConst=1000,\r\n      l=0.01,\r\n      area=1e-4) annotation (Placement(transformation(\r\n          extent={{-10,-10},{10,10}},\r\n          rotation=270,\r\n          origin={30,20})));\r\n    Modelica.Blocks.Sources.Ramp ramp(\r\n      duration=1,\r\n      offset=0,\r\n      startTime=0,\r\n      height=15.9)\r\n      annotation (Placement(transformation(extent={{-56,14},{-44,26}})));\r\n    Modelica.Magnetic.FluxTubes.Basic.Ground ground1\r\n      annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));\r\n    Modelica.Magnetic.FluxTubes.Sensors.MagneticPotentialDifferenceSensor\r\n      magneticPotentialDifferenceSensor annotation (Placement(transformation(\r\n          extent={{-10,10},{10,-10}},\r\n          rotation=270,\r\n          origin={54,20})));\r\n    Modelica.Magnetic.FluxTubes.Sensors.MagneticFluxSensor magneticFluxSensor\r\n      annotation (Placement(transformation(extent={{-10,30},{10,50}})));\r\n  equation\r\n\r\n    connect(signalSource.V_m, ramp.y)\r\n      annotation (Line(points={{-39,20},{-43.4,20}}, color={0,0,127}));\r\n    connect(signalSource.port_n, ground1.port)\r\n      annotation (Line(points={{-30,10},{-30,5},{-30,0}}, color={255,127,0}));\r\n    connect(genericFluxTube.port_n, ground1.port)\r\n      annotation (Line(points={{30,10},{30,0},{-30,0}}, color={255,127,0}));\r\n    connect(magneticPotentialDifferenceSensor.port_n, ground1.port)\r\n      annotation (Line(points={{54,10},{54,0},{-30,0}}, color={255,127,0}));\r\n    connect(magneticFluxSensor.port_p, signalSource.port_p) annotation (Line(\r\n          points={{-10,40},{-30,40},{-30,30}}, color={255,127,0}));\r\n    connect(magneticFluxSensor.port_n, genericFluxTube.port_p)\r\n      annotation (Line(points={{10,40},{30,40},{30,30}}, color={255,127,0}));\r\n    connect(magneticPotentialDifferenceSensor.port_p, genericFluxTube.port_p)\r\n      annotation (Line(points={{54,30},{54,40},{30,40},{30,30}}, color={255,127,\r\n            0}));\r\n    annotation (experiment(StartTime=0, StopTime=1, Interval=1e-3, Tolerance=1e-005));\r\n  end Sensors", "checksum": "9ad9207c910f32da3051109b59a18051f8503eac", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ModelicaTest\\Magnetic\\FluxTubes.mo:638-687", "component_count": 0, "connection_count": 7, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 12, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 24.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation connect(signalSource.V_m, ramp.y) annotation (Line(points={{-39,20},{-43.4,20}}, color={0,0,127}))", "search_keywords": ["basic"]}, "components": [], "connections": [{"from_connector": "signalSource.V_m", "to_connector": "ramp.y", "condition": null}, {"from_connector": "signalSource.port_n", "to_connector": "ground1.port", "condition": null}, {"from_connector": "genericFluxTube.port_n", "to_connector": "ground1.port", "condition": null}, {"from_connector": "magneticPotentialDifferenceSensor.port_n", "to_connector": "ground1.port", "condition": null}, {"from_connector": "magneticFluxSensor.port_p", "to_connector": "signalSource.port_p", "condition": null}, {"from_connector": "magneticFluxSensor.port_n", "to_connector": "genericFluxTube.port_p", "condition": null}, {"from_connector": "magneticPotentialDifferenceSensor.port_p", "to_connector": "genericFluxTube.port_p", "condition": null}], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Blocks.Sources", "Modelica.Icons", "Modelica.Magnetic.FluxTubes.Basic", "Modelica.Magnetic.FluxTubes.Sensors", "Modelica.Magnetic.FluxTubes.Shapes.FixedShape", "Modelica.Magnetic.FluxTubes.Sources", "genericFluxTube", "ground1", "magneticFluxSensor", "magneticPotentialDifferenceSensor", "ramp", "signalSource"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.StateGraph.PartialCompositeStep.InnerState", "kind": "model", "name": "InnerState", "package_path": ["Modelica", "StateGraph", "PartialCompositeStep"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": "components: Interfaces.CompositeStepState×1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 2547, "end_line": 2549, "start_col": 3, "end_col": 17}, "code_text": "model InnerState\r\n    outer Interfaces.CompositeStepState stateGraphRoot;\r\n  end InnerState", "checksum": "7f9ddba5349a2153cfd0478c393fa220bfa883b6", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo:2547-2549", "component_count": 1, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "model", "search_keywords": ["Interfaces.CompositeStepState", "basic"]}, "components": [{"name": "stateGraphRoot", "type_name": "Interfaces.CompositeStepState", "prefixes": ["outer"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "stateGraphRoot", "type_name": "Interfaces.CompositeStepState", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["Interfaces"], "inheritance_chain": []}
{"fqn": "Modelica.Mechanics.MultiBody.Examples.Loops.Fourbar2", "kind": "model", "name": "Fourbar2", "package_path": ["Modelica", "Mechanics", "MultiBody", "Examples", "Loops"], "extends": ["Modelica.Icons.Example"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  j1_phi = j1.phi", "j2_s = j2.s", "j1_w = j1.w", "j2_v = j2.v", "connect(j2.frame_b, b2.frame_a) annotation (Line(\r\n      points={{0,-60},{50,-60},{50,-50}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(j1.frame_b, b1.frame_a) annotation (Line(\r\n      points={{-40,-30},{-30,-30},{-30,-20}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(j1.frame_a, world.frame_b) annotation (Line(\r\n      points={{-60,-30},{-70,-30},{-70,-60},{-80,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(b1.frame_b, universalSpherical.frame_b) annotation (Line(\r\n      points={{-30,0},{-30,40},{0,40}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(universalSpherical.frame_a, b2.frame_b)\r\n    annotation (Line(\r\n      points={{20,40},{50,40},{50,-30}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(b3.frame_a, world.frame_b)\r\n    annotation (Line(\r\n      points={{-60,-60},{-80,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(b3.frame_b, j2.frame_a)\r\n    annotation (Line(\r\n      points={{-40,-60},{-20,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(fixedFrame.frame_a, universalSpherical.frame_ia) annotation (Line(\r\n      points={{20,70},{14,70},{14,50}},\r\n      color={95,95,95},\r\n      thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 46, "end_line": 85, "start_col": 1, "end_col": 23}}, {"equations": ["j1_phi = j1.phi", "j2_s = j2.s", "j1_w = j1.w", "j2_v = j2.v", "connect(j2.frame_b, b2.frame_a) annotation (Line(\r\n      points={{0,-60},{50,-60},{50,-50}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(j1.frame_b, b1.frame_a) annotation (Line(\r\n      points={{-40,-30},{-30,-30},{-30,-20}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(j1.frame_a, world.frame_b) annotation (Line(\r\n      points={{-60,-30},{-70,-30},{-70,-60},{-80,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(b1.frame_b, universalSpherical.frame_b) annotation (Line(\r\n      points={{-30,0},{-30,40},{0,40}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(universalSpherical.frame_a, b2.frame_b)\r\n    annotation (Line(\r\n      points={{20,40},{50,40},{50,-30}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(b3.frame_a, world.frame_b)\r\n    annotation (Line(\r\n      points={{-60,-60},{-80,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(b3.frame_b, j2.frame_a)\r\n    annotation (Line(\r\n      points={{-40,-60},{-20,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5))", "connect(fixedFrame.frame_a, universalSpherical.frame_ia) annotation (Line(\r\n      points={{20,70},{14,70},{14,50}},\r\n      color={95,95,95},\r\n      thickness=0.5))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 47, "end_line": 85, "start_col": 3, "end_col": 23}}, {"equations": ["j2_v = j2.v"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 50, "end_line": 50, "start_col": 3, "end_col": 14}}, {"equations": ["j1_w = j1.w"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 49, "end_line": 49, "start_col": 3, "end_col": 14}}, {"equations": ["j2_s = j2.s"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 48, "end_line": 48, "start_col": 3, "end_col": 14}}, {"equations": ["j1_phi = j1.phi"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 47, "end_line": 47, "start_col": 3, "end_col": 18}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 46, "end_line": 46, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Icons.Example | components: SI.Angle×1, SI.Position×1, SI.AngularVelocity×1 | connections: 8 | units: rad/s, m/s | eq: equation j1_phi = j1.phi", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo", "start_line": 2, "end_line": 128, "start_col": 1, "end_col": 13}, "code_text": "model Fourbar2\r\n  \"One kinematic loop with four bars (with UniversalSpherical joint; 1 non-linear equation)\"\r\n  extends Modelica.Icons.Example;\r\n\r\n  output SI.Angle j1_phi \"Angle of revolute joint j1\";\r\n  output SI.Position j2_s \"Distance of prismatic joint j2\";\r\n  output SI.AngularVelocity j1_w \"Axis speed of revolute joint j1\";\r\n  output SI.Velocity j2_v \"Axis velocity of prismatic joint j2\";\r\n\r\n  inner Modelica.Mechanics.MultiBody.World world annotation (Placement(\r\n        transformation(extent={{-100,-70},{-80,-50}})));\r\n  Modelica.Mechanics.MultiBody.Joints.Revolute j1(\r\n    n={1,0,0},\r\n    stateSelect=StateSelect.always,\r\n    phi(fixed=true),\r\n    useAxisFlange=false,\r\n    w(displayUnit=\"deg/s\",\r\n      start=5.235987755983,\r\n      fixed=true))\r\n    annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));\r\n  Modelica.Mechanics.MultiBody.Joints.Prismatic j2(\r\n    n={1,0,0},\r\n    boxWidth=0.05,\r\n    s(fixed=true, start=-0.2))\r\n    annotation (Placement(transformation(extent={{-20,-70},{0,-50}})));\r\n  Modelica.Mechanics.MultiBody.Parts.BodyCylinder b1(r={0,0.5,0.1}, diameter=0.05)\r\n    annotation (Placement(transformation(\r\n        origin={-30,-10},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Modelica.Mechanics.MultiBody.Parts.BodyCylinder b2(r={0,0.2,0}, diameter=0.05)\r\n    annotation (Placement(transformation(\r\n        origin={50,-40},\r\n        extent={{-10,-10},{10,10}},\r\n        rotation=90)));\r\n  Modelica.Mechanics.MultiBody.Joints.UniversalSpherical universalSpherical(\r\n    n1_a={0,1,0},\r\n    computeRodLength=true,\r\n    rRod_ia={-1,0.3,0.1}) annotation (Placement(transformation(extent={{20,30},{0,50}})));\r\n  Modelica.Mechanics.MultiBody.Parts.FixedTranslation b3(r={1.2,0,0}, animation=false)\r\n    annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));\r\n  Modelica.Mechanics.MultiBody.Visualizers.FixedFrame fixedFrame(color_x={0,0,255})\r\n    annotation (Placement(transformation(\r\n        extent={{20,60},{40,80}})));\r\nequation\r\n  j1_phi = j1.phi;\r\n  j2_s = j2.s;\r\n  j1_w = j1.w;\r\n  j2_v = j2.v;\r\n  connect(j2.frame_b, b2.frame_a) annotation (Line(\r\n      points={{0,-60},{50,-60},{50,-50}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(j1.frame_b, b1.frame_a) annotation (Line(\r\n      points={{-40,-30},{-30,-30},{-30,-20}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(j1.frame_a, world.frame_b) annotation (Line(\r\n      points={{-60,-30},{-70,-30},{-70,-60},{-80,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(b1.frame_b, universalSpherical.frame_b) annotation (Line(\r\n      points={{-30,0},{-30,40},{0,40}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(universalSpherical.frame_a, b2.frame_b)\r\n    annotation (Line(\r\n      points={{20,40},{50,40},{50,-30}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(b3.frame_a, world.frame_b)\r\n    annotation (Line(\r\n      points={{-60,-60},{-80,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(b3.frame_b, j2.frame_a)\r\n    annotation (Line(\r\n      points={{-40,-60},{-20,-60}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  connect(fixedFrame.frame_a, universalSpherical.frame_ia) annotation (Line(\r\n      points={{20,70},{14,70},{14,50}},\r\n      color={95,95,95},\r\n      thickness=0.5));\r\n  annotation (\r\n    experiment(StopTime=5),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis is a second version of the \\\"four-bar\\\" mechanism, see figure:\r\n</p>\r\n\r\n<div><img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Examples/Loops/Fourbar2.png\\\" alt=\\\"model Examples.Loops.Fourbar2\\\"></div>\r\n\r\n<p>\r\nIn this case\r\nthe three revolute joints on the left top-side and the two revolute\r\njoints on the right top side have been replaced by the joint <strong>UniversalSpherical</strong>\r\nthat is a rod connecting a spherical and a universal joint. This joint is defined\r\nby <strong>1 constraint</strong> stating that the distance between the two spherical joints is\r\nconstant. Using this joint in a kinematic loop reduces the sizes of\r\nnon-linear algebraic equations. For this loop, only one non-linear\r\nalgebraic system of equations of order 1 remains.\r\n</p>\r\n<p>\r\nAt the UniversalSpherical joint an additional frame_ia fixed to the rod\r\nis present where components can be attached to the connecting rod. In this\r\nexample just a coordinate system is attached to visualize frame_ia (coordinate\r\nsystem on the right in blue color).\r\n</p>\r\n<p>\r\nAnother feature is that the length of the connecting rod can be\r\nautomatically calculated during <strong>initialization</strong>. In order to do this,\r\nanother initialization condition has to be given. In this example, the\r\ninitial value of the distance of the prismatic joint j2 has been fixed\r\n(via the \\\"Initialization\\\" menu) and the rod length of joint\r\n\\\"UniversalSpherical\\\" is computed during initialization since parameter\r\n<strong>computeLength</strong> = <strong>true</strong> is set in the joint parameter\r\nmenu. The main advantage is that during initialization no non-linear\r\nsystem of equation is solved and therefore initialization always works.\r\nTo be precise, the following trivial non-linear equation is actually solved\r\nfor rodLength:\r\n</p>\r\n<blockquote><pre>\r\nrodLength*rodLength = f(angle of revolute joint, distance of prismatic joint)\r\n</pre></blockquote>\r\n</html>\"));\r\nend Fourbar2", "checksum": "13564b1347ba467ec0e69043d64e3b47fbf6a2cb", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Examples\\Loops\\Fourbar2.mo:2-128", "component_count": 4, "connection_count": 8, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 7, "dependency_count": 17, "has_physical_interface": true, "interface_component_count": 4, "has_connections": true, "is_composite_model": true, "complexity_score": 39.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation j1_phi = j1.phi", "search_keywords": ["AngularVelocity", "SI.Angle", "SI.AngularVelocity", "SI.Position", "SI.Velocity", "Velocity", "m/s", "mechanical", "rad/s", "system"]}, "components": [{"name": "j1_phi", "type_name": "SI.Angle", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Angle of revolute joint j1"}, {"name": "j2_s", "type_name": "SI.Position", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Distance of prismatic joint j2"}, {"name": "j1_w", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Axis speed of revolute joint j1"}, {"name": "j2_v", "type_name": "SI.Velocity", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Axis velocity of prismatic joint j2"}], "connections": [{"from_connector": "j2.frame_b", "to_connector": "b2.frame_a", "condition": null}, {"from_connector": "j1.frame_b", "to_connector": "b1.frame_a", "condition": null}, {"from_connector": "j1.frame_a", "to_connector": "world.frame_b", "condition": null}, {"from_connector": "b1.frame_b", "to_connector": "universalSpherical.frame_b", "condition": null}, {"from_connector": "universalSpherical.frame_a", "to_connector": "b2.frame_b", "condition": null}, {"from_connector": "b3.frame_a", "to_connector": "world.frame_b", "condition": null}, {"from_connector": "b3.frame_b", "to_connector": "j2.frame_a", "condition": null}, {"from_connector": "fixedFrame.frame_a", "to_connector": "universalSpherical.frame_ia", "condition": null}], "variables": [{"name": "j1_phi", "type_name": "equation", "prefixes": ["output"], "attributes": {}, "binding_equation": "j1.phi", "comment": "\"Angle of revolute joint j1\""}, {"name": "j2_s", "type_name": "SI.Position", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Distance of prismatic joint j2\""}, {"name": "j1_w", "type_name": "SI.AngularVelocity", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Axis speed of revolute joint j1\""}, {"name": "j2_v", "type_name": "SI.Velocity", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Axis velocity of prismatic joint j2\""}], "physical_quantities": [{"name": "j1_w", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "j2_v", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": null}], "dependencies": ["Examples.Loops", "Fourbar2", "Modelica.Icons", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Joints", "Modelica.Mechanics.MultiBody.Parts", "Modelica.Mechanics.MultiBody.Visualizers", "SI", "StateSelect", "b1", "b2", "b3", "fixedFrame", "j1", "j2", "universalSpherical", "world"], "inheritance_chain": ["Modelica.Icons.Example"]}
{"fqn": "Modelica.Mechanics.MultiBody.Visualizers.FixedFrame", "kind": "model", "name": "FixedFrame", "package_path": ["Modelica", "Mechanics", "MultiBody", "Visualizers"], "extends": ["Modelica.Mechanics.MultiBody.Interfaces.PartialVisualizer"], "imports": ["Modelica.Mechanics.MultiBody.Types"], "parameters": [{"name": "animation", "type": "Boolean", "default": "true \"= true", "description": null}, {"name": "showLabels", "type": "Boolean", "default": "true \"= true, if labels shall be shown\" input SI.Distance length=0.5 \"Length of axes arrows\" input SI.Distance diameter=length/world.defaultFrameDiameterFraction \"Diameter of axes ", "description": null}, {"name": "showLabels2", "type": "Boolean", "default": "world.enableAnimation and animation and showLabels", "description": null}, {"name": "if animation shall be enabled\"", "type": "Boolean", "default": "", "description": null}, {"name": "animation2", "type": "Boolean", "default": "world.enableAnimation and animation", "description": null}], "equations": [{"equations": ["equation\r\n  frame_a.f = zeros(3)", "frame_a.t = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo", "start_line": 139, "end_line": 141, "start_col": 1, "end_col": 24}}, {"equations": ["frame_a.f = zeros(3)", "frame_a.t = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo", "start_line": 140, "end_line": 141, "start_col": 3, "end_col": 24}}, {"equations": ["frame_a.t = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo", "start_line": 141, "end_line": 141, "start_col": 3, "end_col": 23}}, {"equations": ["frame_a.f = zeros(3)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo", "start_line": 140, "end_line": 140, "start_col": 3, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo", "start_line": 139, "end_line": 139, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Mechanics.MultiBody.Interfaces.PartialVisualizer | components: SI.Length×6 | params: animation, showLabels, showLabels2 | units: m, m, m | eq: ", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo", "start_line": 2, "end_line": 208, "start_col": 1, "end_col": 15}, "code_text": "model FixedFrame\r\n  \"Visualizing a coordinate system including axes labels (visualization data may vary dynamically)\"\r\n\r\n  import Modelica.Mechanics.MultiBody.Types;\r\n  extends Modelica.Mechanics.MultiBody.Interfaces.PartialVisualizer;\r\n  parameter Boolean animation=true \"= true, if animation shall be enabled\";\r\n  parameter Boolean showLabels=true \"= true, if labels shall be shown\"\r\n    annotation (Dialog(group=\"if animation = true\", enable=animation));\r\n  input SI.Distance length=0.5 \"Length of axes arrows\"\r\n    annotation (Dialog(group=\"if animation = true\", enable=animation));\r\n  input SI.Distance diameter=length/world.defaultFrameDiameterFraction\r\n    \"Diameter of axes arrows\" annotation (Dialog(group=\"if animation = true\", enable=animation));\r\n  input Types.Color color_x=Modelica.Mechanics.MultiBody.Types.Defaults.\r\n      FrameColor \"Color of x-arrow\"\r\n    annotation (Dialog(colorSelector=true,group=\"if animation = true\", enable=animation));\r\n  input Types.Color color_y=color_x \"Color of y-arrow\"\r\n    annotation (Dialog(colorSelector=true,group=\"if animation = true\", enable=animation));\r\n  input Types.Color color_z=color_x \"Color of z-arrow\"\r\n    annotation (Dialog(colorSelector=true,group=\"if animation = true\", enable=animation));\r\n  input Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n    \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n    annotation (Dialog(group=\"if animation = true\", enable=animation));\r\nprotected\r\n  parameter Boolean animation2 = world.enableAnimation and animation;\r\n  parameter Boolean showLabels2= world.enableAnimation and animation and showLabels;\r\n\r\n  // Parameters to define axes\r\n  SI.Length headLength=min(length, diameter*Types.Defaults.FrameHeadLengthFraction);\r\n  SI.Length headWidth=diameter*Types.Defaults.FrameHeadWidthFraction;\r\n  SI.Length lineLength=max(0, length - headLength);\r\n  SI.Length lineWidth=diameter;\r\n\r\n  // Parameters to define axes labels\r\n  SI.Length scaledLabel=Modelica.Mechanics.MultiBody.Types.Defaults.FrameLabelHeightFraction*diameter;\r\n  SI.Length labelStart=1.05*length;\r\n\r\n  // x-axis\r\n  Visualizers.Advanced.Shape x_arrowLine(\r\n    shapeType=\"cylinder\",\r\n    length=lineLength,\r\n    width=lineWidth,\r\n    height=lineWidth,\r\n    lengthDirection={1,0,0},\r\n    widthDirection={0,1,0},\r\n    color=color_x,\r\n    specularCoefficient=specularCoefficient,\r\n    r=frame_a.r_0,\r\n    R=frame_a.R) if animation2;\r\n  Visualizers.Advanced.Shape x_arrowHead(\r\n    shapeType=\"cone\",\r\n    length=headLength,\r\n    width=headWidth,\r\n    height=headWidth,\r\n    lengthDirection={1,0,0},\r\n    widthDirection={0,1,0},\r\n    color=color_x,\r\n    specularCoefficient=specularCoefficient,\r\n    r=frame_a.r_0 + Frames.resolve1(frame_a.R, {lineLength,0,0}),\r\n    R=frame_a.R) if animation2;\r\n  Visualizers.Internal.Lines x_label(\r\n    lines=scaledLabel*{[0,0; 1,1],[0,1; 1,0]},\r\n    diameter=diameter,\r\n    color=color_x,\r\n    specularCoefficient=specularCoefficient,\r\n    r_lines={labelStart,0,0},\r\n    n_x={1,0,0},\r\n    n_y={0,1,0},\r\n    r=frame_a.r_0,\r\n    R=frame_a.R) if showLabels2;\r\n\r\n  // y-axis\r\n  Visualizers.Advanced.Shape y_arrowLine(\r\n    shapeType=\"cylinder\",\r\n    length=lineLength,\r\n    width=lineWidth,\r\n    height=lineWidth,\r\n    lengthDirection={0,1,0},\r\n    widthDirection={1,0,0},\r\n    color=color_y,\r\n    specularCoefficient=specularCoefficient,\r\n    r=frame_a.r_0,\r\n    R=frame_a.R) if animation2;\r\n  Visualizers.Advanced.Shape y_arrowHead(\r\n    shapeType=\"cone\",\r\n    length=headLength,\r\n    width=headWidth,\r\n    height=headWidth,\r\n    lengthDirection={0,1,0},\r\n    widthDirection={1,0,0},\r\n    color=color_y,\r\n    specularCoefficient=specularCoefficient,\r\n    r=frame_a.r_0 + Frames.resolve1(frame_a.R, {0,lineLength,0}),\r\n    R=frame_a.R) if animation2;\r\n  Visualizers.Internal.Lines y_label(\r\n    lines=scaledLabel*{[0,0; 1,1.5],[0,1.5; 0.5,0.75]},\r\n    diameter=diameter,\r\n    color=color_y,\r\n    specularCoefficient=specularCoefficient,\r\n    r_lines={0,labelStart,0},\r\n    n_x={0,1,0},\r\n    n_y={-1,0,0},\r\n    r=frame_a.r_0,\r\n    R=frame_a.R) if showLabels2;\r\n\r\n  // z-axis\r\n  Visualizers.Advanced.Shape z_arrowLine(\r\n    shapeType=\"cylinder\",\r\n    length=lineLength,\r\n    width=lineWidth,\r\n    height=lineWidth,\r\n    lengthDirection={0,0,1},\r\n    widthDirection={0,1,0},\r\n    color=color_z,\r\n    specularCoefficient=specularCoefficient,\r\n    r=frame_a.r_0,\r\n    R=frame_a.R) if animation2;\r\n  Visualizers.Advanced.Shape z_arrowHead(\r\n    shapeType=\"cone\",\r\n    length=headLength,\r\n    width=headWidth,\r\n    height=headWidth,\r\n    lengthDirection={0,0,1},\r\n    widthDirection={0,1,0},\r\n    color=color_z,\r\n    specularCoefficient=specularCoefficient,\r\n    r=frame_a.r_0 + Frames.resolve1(frame_a.R, {0,0,lineLength}),\r\n    R=frame_a.R) if animation2;\r\n  Visualizers.Internal.Lines z_label(\r\n    lines=scaledLabel*{[0,0; 1,0],[0,1; 1,1],[0,1; 1,0]},\r\n    diameter=diameter,\r\n    color=color_z,\r\n    specularCoefficient=specularCoefficient,\r\n    r_lines={0,0,labelStart},\r\n    n_x={0,0,1},\r\n    n_y={0,1,0},\r\n    r=frame_a.r_0,\r\n    R=frame_a.R) if showLabels2;\r\nequation\r\n  frame_a.f = zeros(3);\r\n  frame_a.t = zeros(3);\r\n  annotation (\r\n    Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}}), graphics={\r\n        Rectangle(\r\n          extent={{-100,100},{100,-100}},\r\n          lineColor={0,127,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Polygon(\r\n          points={{-2,92},{-14,52},{10,52},{-2,92},{-2,92}},\r\n          lineColor={0,191,0},\r\n          fillColor={0,191,0},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(\r\n          points={{-2,-18},{-2,52}},\r\n          color={0,191,0},\r\n          thickness=0.5),\r\n        Text(\r\n          extent={{16,93},{67,43}},\r\n          textColor={0,191,0},\r\n          textString=\"y\"),\r\n        Text(\r\n          extent={{43,11},{92,-38}},\r\n          textString=\"x\"),\r\n        Polygon(\r\n          points={{98,-70},{74,-44},{64,-60},{98,-70}},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(\r\n          points={{-2,-18},{72,-54}},\r\n          thickness=0.5),\r\n        Line(\r\n          points={{-72,-54},{-2,-18}},\r\n          thickness=0.5,\r\n          color={0,0,255}),\r\n        Text(\r\n          extent={{-87,13},{-38,-36}},\r\n          textString=\"z\",\r\n          textColor={0,0,255}),\r\n        Text(\r\n          extent={{-150,145},{150,105}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255}),\r\n        Polygon(points={{-98,-68},{-66,-60},{-78,-46},{-98,-68}}, lineColor={0,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nModel <strong>FixedFrame</strong> visualizes the three axes of\r\nits coordinate system <strong>frame_a</strong> together with appropriate axes\r\nlabels. A typical example is shown in the following figure:\r\n<br>&nbsp;\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Mechanics/MultiBody/Visualizers/FixedFrame.png\\\" alt=\\\"model Visualizers.FixedFrame\\\">\r\n</div>\r\n\r\n<p>\r\nThe sizes of the axes, the axes colors and the specular coefficient\r\n(= reflection factor for\r\nambient light) can vary dynamically by\r\nproviding appropriate expressions in the input fields of the\r\nparameter menu.\r\n</p>\r\n</html>\"));\r\nend FixedFrame", "checksum": "737047d3e1fadaf7d0409cdb8c0ee3f1dac56198", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Visualizers\\FixedFrame.mo:2-208", "component_count": 6, "connection_count": 0, "variable_count": 7, "physical_quantity_count": 7, "parameter_count": 5, "equation_count": 5, "dependency_count": 15, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 19.5, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "model", "equation_summary": "equation frame_a.f = zeros(3)", "search_keywords": ["0,1; 1,0", "Length", "SI.Length", "basic", "mechanical"]}, "components": [{"name": "headLength", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "headWidth", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "lineLength", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "lineWidth", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "scaledLabel", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "labelStart", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "length", "type_name": "SI.Distance", "prefixes": ["input"], "attributes": {}, "binding_equation": "0.5 \"Length of axes arrows\"\r\n    \r\n  input SI.Distance diameter=length/world.defaultFrameDiameterFraction\r\n    \"Diameter of axes arrows\" \r\n  input Types.Color color_x=Modelica.Mechanics.MultiBody.Types.Defaults.\r\n      FrameColor \"Color of x-arrow\"\r\n    \r\n  input Types.Color color_y=color_x \"Color of y-arrow\"\r\n    \r\n  input Types.Color color_z=color_x \"Color of z-arrow\"\r\n    \r\n  input Types.SpecularCoefficient specularCoefficient = world.defaultSpecularCoefficient\r\n    \"Reflection of ambient light (= 0: light is completely absorbed)\"\r\n    \r\nprotected\r\n  parameter Boolean animation2 = world.enableAnimation and animation", "comment": null}, {"name": "headLength", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": "min(length, diameter*Types.Defaults.FrameHeadLengthFraction)", "comment": null}, {"name": "headWidth", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": "diameter*Types.Defaults.FrameHeadWidthFraction", "comment": null}, {"name": "lineLength", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": "max(0, length - headLength)", "comment": null}, {"name": "lineWidth", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": "diameter", "comment": null}, {"name": "scaledLabel", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Mechanics.MultiBody.Types.Defaults.FrameLabelHeightFraction*diameter", "comment": null}, {"name": "labelStart", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": "1.05*length", "comment": null}], "physical_quantities": [{"name": "headLength", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "headWidth", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "lineLength", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "lineWidth", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "scaledLabel", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "labelStart", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "cone", "unit": "0,1; 1,0", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "FixedFrame", "Frames", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Interfaces", "Modelica.Mechanics.MultiBody.Types", "Modelica.Mechanics.MultiBody.Types.Defaults", "SI", "Types", "Types.Defaults", "Visualizers", "Visualizers.Advanced", "Visualizers.Internal", "frame_a", "world"], "inheritance_chain": ["Modelica.Mechanics.MultiBody.Interfaces.PartialVisualizer"]}
{"fqn": "Modelica.Mechanics.MultiBody.Frames.Orientation", "kind": "record", "name": "Orientation", "package_path": ["Modelica", "Mechanics", "MultiBody", "Frames"], "extends": ["Modelica.Icons.Record", "Modelica.Icons.Function"], "imports": ["Modelica", "Modelica.Mechanics.MultiBody.Frames"], "parameters": [], "equations": [{"equations": ["algorithm\r\n    residue := {\r\n       Modelica.Math.atan2(cross(R1.T[1, :], R1.T[2, :])*R2.T[2, :],R1.T[1,:]*R2.T[1,:]),\r\n       Modelica.Math.atan2(-cross(R1.T[1, :],R1.T[2, :])*R2.T[1, :],R1.T[2,:]*R2.T[2,:]),\r\n       Modelica.Math.atan2(R1.T[2, :]*R2.T[1, :],R1.T[3,:]*R2.T[3,:])}"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Orientation.mo", "start_line": 22, "end_line": 26, "start_col": 3, "end_col": 72}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Orientation.mo", "start_line": 22, "end_line": 22, "start_col": 3, "end_col": 12}}], "docstring": "extends Modelica.Icons.Record | components: Real×1 | units: rad/s, 3 | eq: algorithm residue := { Modelica.Math.atan2(cross(R1.T[1, :], R1.T[2, :])*R2.T[2, :],R", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Orientation.mo", "start_line": 2, "end_line": 100, "start_col": 1, "end_col": 16}, "code_text": "record Orientation\r\n  \"Orientation object defining rotation from a frame 1 into a frame 2\"\r\n\r\n  extends Modelica.Icons.Record;\r\n  Real T[3, 3] \"Transformation matrix from world frame to local frame\";\r\n  SI.AngularVelocity w[3]\r\n    \"Absolute angular velocity of local frame, resolved in local frame\";\r\n\r\n  encapsulated function equalityConstraint\r\n    \"Return the constraint residues to express that two frames have the same orientation\"\r\n\r\n    import Modelica;\r\n    import Modelica.Mechanics.MultiBody.Frames;\r\n    extends Modelica.Icons.Function;\r\n    input Frames.Orientation R1\r\n      \"Orientation object to rotate frame 0 into frame 1\";\r\n    input Frames.Orientation R2\r\n      \"Orientation object to rotate frame 0 into frame 2\";\r\n    output Real residue[3]\r\n      \"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\";\r\n  algorithm\r\n    residue := {\r\n       Modelica.Math.atan2(cross(R1.T[1, :], R1.T[2, :])*R2.T[2, :],R1.T[1,:]*R2.T[1,:]),\r\n       Modelica.Math.atan2(-cross(R1.T[1, :],R1.T[2, :])*R2.T[1, :],R1.T[2,:]*R2.T[2,:]),\r\n       Modelica.Math.atan2(R1.T[2, :]*R2.T[1, :],R1.T[3,:]*R2.T[3,:])};\r\n    annotation(Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nresidue = Orientation.<strong>equalityConstraint</strong>(R1, R2);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThe function call <code>Orientation.<strong>equalityConstrain</strong>(R1,R2)</code> returns the Real residue vector\r\nwith 3 elements. This vector has zero elements if orientation objects R1 and R2 are identical\r\n(= describe the same orientation). The residue vector is determined by computing the relative\r\norientation object between R1 and R2 and using the outer-diagonal elements of this matrix to\r\nformulate the residue in such a way that only identical orientation objects lead to a zero residue vector.\r\n</p>\r\n</html>\"));\r\n  end equalityConstraint;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis object describes the <strong>rotation</strong> from a <strong>frame&nbsp;1</strong> into a <strong>frame&nbsp;2</strong>.\r\nAn instance of this type should never be directly accessed but\r\nonly with the access functions provided\r\nin package Modelica.Mechanics.MultiBody.Frames. As a consequence, it is not necessary to know\r\nthe internal representation of this object as described in the next paragraphs.\r\n</p>\r\n<p>\r\n\\\"Orientation\\\" is defined to be a record consisting of two\r\nelements: \\\"Real T[3,3]\\\", the transformation matrix to rotate frame&nbsp;1\r\ninto frame&nbsp;2 and \\\"Real w[3]\\\", the angular velocity of frame&nbsp;2 with\r\nrespect to frame&nbsp;1, resolved in frame&nbsp;2. Element \\\"T\\\"\r\nhas the following interpretation:\r\n</p>\r\n\r\n<blockquote><pre>\r\nOrientation R;\r\n<strong>R.T</strong> = [<strong>e</strong><sub>x</sub>, <strong>e</strong><sub>y</sub>, <strong>e</strong><sub>z</sub>];\r\n    e.g., <strong>R.T</strong> = [1,0,0; 0,1,0; 0,0,1]\r\n</pre></blockquote>\r\n\r\n<p>\r\nwhere <strong>e</strong><sub>x</sub>,<strong>e</strong><sub>y</sub>,<strong>e</strong><sub>z</sub>\r\nare unit vectors in the direction of the x-axis, y-axis, and z-axis\r\nof frame&nbsp;1, resolved in frame&nbsp;2, respectively. Therefore, if <strong>v</strong><sub>1</sub>\r\nis vector <strong>v</strong> resolved in frame&nbsp;1 and <strong>v</strong><sub>2</sub> is\r\nvector <strong>v</strong> resolved in frame&nbsp;2, the following relationship holds:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>v</strong><sub>2</sub> = <strong>R.T</strong> * <strong>v</strong><sub>1</sub>\r\n</pre></blockquote>\r\n\r\n<p>\r\nThe <strong>inverse</strong> orientation\r\n<strong>R_inv.T</strong> = <strong>R.T</strong><sup>T</sup> describes the rotation\r\nfrom frame&nbsp;2 into frame&nbsp;1.\r\n</p>\r\n<p>\r\nSince the orientation is described by 9 variables, there are\r\n6 constraints between these variables. These constraints\r\nare defined in function <strong>Frames.orientationConstraint</strong>.\r\n</p>\r\n<p>\r\nR.w is the angular velocity of frame&nbsp;2 with respect to frame&nbsp;1, resolved\r\nin frame&nbsp;2. Formally, R.w is defined as:<br>\r\n<strong>skew</strong>(R.w) = R.T*<strong>der</strong>(transpose(R.T))\r\nwith\r\n</p>\r\n<blockquote><pre>\r\n          |   0   -w[3]  w[2] |\r\n<strong>skew</strong>(w) = |  w[3]   0   -w[1] |\r\n          | -w[2]  w[1]     0 |\r\n</pre></blockquote>\r\n</html>\"));\r\nend Orientation", "checksum": "123a8a74ad17911a06ee3edef29a9ecd725ac105", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Orientation.mo:2-100", "component_count": 1, "connection_count": 0, "variable_count": 7, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 2, "dependency_count": 12, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 4.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "record", "equation_summary": "algorithm residue := { Modelica.Math.atan2(cross(R1.T[1, :], R1.T[2, :])*R2.T[2, :],R1.T[1,:]*R2.T[1,:]), Modelica.Math.atan2(-cross(R1.T[1, :],R1.T[2, :])*R2.T", "search_keywords": ["AngularVelocity", "Real", "basic", "rad/s"]}, "components": [{"name": "T", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[3, 3]", "comment": "Transformation matrix from world frame to local frame"}], "connections": [], "variables": [{"name": "T", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Transformation matrix from world frame to local frame\""}, {"name": "w", "type_name": "SI.AngularVelocity", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Absolute angular velocity of local frame, resolved in local frame\""}, {"name": "Modelica", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "R1", "type_name": "Frames.Orientation", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Orientation object to rotate frame 0 into frame 1\""}, {"name": "R2", "type_name": "Frames.Orientation", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Orientation object to rotate frame 0 into frame 2\""}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\""}, {"name": "equalityConstraint", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "w", "unit": "rad/s", "display_unit": null, "quantity": "AngularVelocity", "nominal": null}, {"name": "frame", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Frames", "Modelica", "Modelica.Icons", "Modelica.Math", "Modelica.Mechanics.MultiBody", "Modelica.Mechanics.MultiBody.Frames", "R", "R1", "R2", "R_inv", "SI", "e"], "inheritance_chain": ["Modelica.Icons.Record", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Electrical.QuasiStatic.Types.Reference", "kind": "record", "name": "Reference", "package_path": ["Modelica", "Electrical", "QuasiStatic", "Types"], "extends": [], "imports": [], "parameters": [], "equations": [{"equations": ["algorithm\r\n    assert(abs(reference1.gamma - reference2.gamma) < 1E-6*2*Modelica.Constants.pi,\r\n      \"Reference angles should be equal!\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Types\\Reference.mo", "start_line": 8, "end_line": 10, "start_col": 3, "end_col": 44}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Types\\Reference.mo", "start_line": 8, "end_line": 8, "start_col": 3, "end_col": 12}}], "docstring": "components: Reference×2, SI.Angle×1, Real×1 | units: 0 | eq: algorithm assert(abs(reference1.gamma - reference2.gamma) < 1E-6*2*Modelica.Constants.pi, \"Referenc", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Types\\Reference.mo", "start_line": 2, "end_line": 18, "start_col": 1, "end_col": 14}, "code_text": "record Reference \"Reference angle\"\r\n  SI.Angle gamma;\r\n  function equalityConstraint \"Equality constraint for reference angle\"\r\n    input Reference reference1;\r\n    input Reference reference2;\r\n    output Real residue[0];\r\n  algorithm\r\n    assert(abs(reference1.gamma - reference2.gamma) < 1E-6*2*Modelica.Constants.pi,\r\n      \"Reference angles should be equal!\");\r\n    annotation (Documentation(info=\"<html>\r\nEquality constraint for the reference angle, according to the <a href=\\\"https://specification.modelica.org/maint/3.6/connectors-and-connections.html#equation-operators-for-overconstrained-connection-based-equation-systems1\\\">Section&nbsp;9.4 <em>Overconstrained Connections</em> of the Modelica&nbsp;3.6 specification</a>.\r\n</html>\"));\r\n  end equalityConstraint;\r\n  annotation (Documentation(info=\"<html>\r\nReference angle, used in the quasi-static AC connectors.\r\n</html>\"));\r\nend Reference", "checksum": "74df3b179e2cba9cc29a82cec41fcae187df1b8b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Types\\Reference.mo:2-18", "component_count": 4, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 2, "dependency_count": 6, "has_physical_interface": true, "interface_component_count": 3, "has_connections": false, "is_composite_model": false, "complexity_score": 10.0, "model_type": "component", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "record", "equation_summary": "algorithm assert(abs(reference1.gamma - reference2.gamma) < 1E-6*2*Modelica.Constants.pi, \"Reference angles should be equal!\")", "search_keywords": ["Real", "Reference", "SI.Angle", "component"]}, "components": [{"name": "gamma", "type_name": "SI.Angle", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "reference1", "type_name": "Reference", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "reference2", "type_name": "Reference", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": "[0]", "comment": null}], "connections": [], "variables": [{"name": "gamma", "type_name": "SI.Angle", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "reference1", "type_name": "Reference", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "reference2", "type_name": "Reference", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "equalityConstraint", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "angle", "unit": "0", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Constants", "SI", "connections", "reference1", "reference2", "specification.modelica"], "inheritance_chain": []}
{"fqn": "Modelica.Media.Common.ThermoFluidSpecial.ThermoProperties", "kind": "record", "name": "ThermoProperties", "package_path": ["Modelica", "Media", "Common", "ThermoFluidSpecial"], "extends": ["Modelica.Icons.Record"], "imports": [], "parameters": [{"name": "nspecies(min", "type": "Integer", "default": "1) \"Number of species\"", "description": null}], "equations": [], "docstring": "extends Modelica.Icons.Record | components: Real×2, SI.RatioOfSpecificHeatCapacities×1 | params: nspecies(min | units: m3.kg-1, K, kg/m3", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo", "start_line": 7076, "end_line": 7180, "start_col": 5, "end_col": 25}, "code_text": "record ThermoProperties\r\n      \"Thermodynamic base property data for all state models\"\r\n      extends Modelica.Icons.Record;\r\n      parameter Integer nspecies(min=1) \"Number of species\";\r\n      SI.Temperature T(\r\n        min=TMIN,\r\n        max=TMAX,\r\n        nominal=TNOM) \"Temperature\";\r\n      SI.Density d(\r\n        min=DMIN,\r\n        max=DMAX,\r\n        nominal=DNOM) \"Density\";\r\n      SI.Pressure p(\r\n        min=PMIN,\r\n        max=PMAX,\r\n        nominal=PNOM) \"Pressure\";\r\n      SI.Volume V(\r\n        min=VMIN,\r\n        max=VMAX,\r\n        nominal=VNOM) \"Volume\";\r\n      SI.SpecificEnthalpy h(\r\n        min=SHMIN,\r\n        max=SHMAX,\r\n        nominal=SHNOM) \"Specific enthalpy\";\r\n      SI.SpecificEnergy u(\r\n        min=SEMIN,\r\n        max=SEMAX,\r\n        nominal=SENOM) \"Specific inner energy\";\r\n      SI.SpecificEntropy s(\r\n        min=SSMIN,\r\n        max=SSMAX,\r\n        nominal=SSNOM) \"Specific entropy\";\r\n      SI.SpecificGibbsFreeEnergy g(\r\n        min=SHMIN,\r\n        max=SHMAX,\r\n        nominal=SHNOM) \"Specific Gibbs free energy\";\r\n      SI.SpecificHeatCapacity cp(\r\n        min=CPMIN,\r\n        max=CPMAX,\r\n        nominal=CPNOM) \"Heat capacity at constant pressure\";\r\n      SI.SpecificHeatCapacity cv(\r\n        min=CPMIN,\r\n        max=CPMAX,\r\n        nominal=CPNOM) \"Heat capacity at constant volume\";\r\n      SI.SpecificHeatCapacity R_s(\r\n        min=CPMIN,\r\n        max=CPMAX,\r\n        nominal=CPNOM) \"Gas constant\";\r\n      SI.MolarMass MM(\r\n        min=MMMIN,\r\n        max=MMMAX,\r\n        nominal=MMNOM) \"Molar mass of mixture\";\r\n      SI.MassFraction[nspecies] mass_x(\r\n        min=MASSXMIN,\r\n        max=MASSXMAX,\r\n        nominal=MASSXNOM) \"Mass fraction\";\r\n      SI.MoleFraction[nspecies] mole_y(\r\n        min=MOLEYMIN,\r\n        max=MOLEYMAX,\r\n        nominal=MOLEYNOM) \"Mole fraction\";\r\n      SI.RatioOfSpecificHeatCapacities kappa \"Ratio of cp/cv\";\r\n      SI.DerDensityByTemperature ddTp\r\n        \"Derivative of density by temperature at constant pressure\";\r\n      SI.DerDensityByPressure ddpT\r\n        \"Derivative of density by pressure at constant temperature\";\r\n      Real dupT(unit=\"m3.kg-1\")\r\n        \"Derivative of inner energy by pressure at constant T\";\r\n      Real dudT(unit=\"(J.m3)/(kg2)\")\r\n        \"Derivative of inner energy by density at constant T\";\r\n      SI.SpecificHeatCapacity duTp\r\n        \"Derivative of inner energy by temperature at constant p\";\r\n      SI.SpecificEnergy ddx[nspecies]\r\n        \"Derivative vector of density by change in mass composition\";\r\n      SI.SpecificEnergy[nspecies] compu(\r\n        min=SEMIN,\r\n        max=SEMAX,\r\n        nominal=SENOM) \"Inner energy of the components\";\r\n      SI.Pressure[nspecies] compp(\r\n        min=COMPPMIN,\r\n        max=COMPPMAX,\r\n        nominal=COMPPNOM) \"Partial pressures of the components\";\r\n      SI.Velocity a(\r\n        min=VELMIN,\r\n        max=VELMAX,\r\n        nominal=VELNOM) \"Speed of sound\";\r\n      SI.HeatCapacity dUTZ\r\n        \"Derivative of inner energy by temperature at constant moles\";\r\n      SI.MolarInternalEnergy[nspecies] dUZT\r\n        \"Derivative of inner energy by moles at constant temperature\";\r\n      SI.SpecificEnthalpy[nspecies] dHMxT(\r\n        min=SEMIN,\r\n        max=SEMAX,\r\n        nominal=SENOM)\r\n        \"Derivative of total enthalpy w.r.t. component mass at constant T\";\r\n      Real dpT \"Derivative of pressure w.r.t. temperature\";\r\n      Real dpZ[nspecies] \"Derivative of pressure w.r.t. moles\";\r\n      annotation (Documentation(info=\"<html>\r\n        <h4>Model description</h4>\r\n        <p>\r\n        A base class for medium property models which work with most of the\r\n        versions of dynamic states that are available in the ThermoFluid\r\n        library. Currently used by all ideal gas models.\r\n     </p>\r\n        </html>\"));\r\n    end ThermoProperties", "checksum": "4fc5c4d3c2fb4b811b289f6337dfa7d8f289387e", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Media\\package.mo:7076-7180", "component_count": 3, "connection_count": 0, "variable_count": 22, "physical_quantity_count": 11, "parameter_count": 1, "equation_count": 0, "dependency_count": 5, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 6.5, "model_type": "basic", "physical_domains": ["hydraulic", "thermal", "mechanical"], "is_multidomain": true, "aliases": [], "node_group": "record", "search_keywords": ["Density", "Pa", "Pressure", "Real", "SI.RatioOfSpecificHeatCapacities", "ThermodynamicTemperature", "Velocity", "basic", "hydraulic", "kg/m3", "m/s", "m3.kg-1", "mechanical", "nspecies", "thermal"]}, "components": [{"name": "kappa", "type_name": "SI.RatioOfSpecificHeatCapacities", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Ratio of cp/cv"}, {"name": "dpT", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Derivative of pressure w.r.t. temperature"}, {"name": "dpZ", "type_name": "Real", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[nspecies]", "comment": "Derivative of pressure w.r.t. moles"}], "connections": [], "variables": [{"name": "T", "type_name": "SI.Temperature", "prefixes": [], "attributes": {"min": "TMIN", "max": "TMAX", "nominal": "TNOM"}, "binding_equation": null, "comment": "\"Temperature\""}, {"name": "d", "type_name": "SI.Density", "prefixes": [], "attributes": {"min": "DMIN", "max": "DMAX", "nominal": "DNOM"}, "binding_equation": null, "comment": "\"Density\""}, {"name": "p", "type_name": "SI.Pressure", "prefixes": [], "attributes": {"min": "PMIN", "max": "PMAX", "nominal": "PNOM"}, "binding_equation": null, "comment": "\"Pressure\""}, {"name": "V", "type_name": "SI.Volume", "prefixes": [], "attributes": {"min": "VMIN", "max": "VMAX", "nominal": "VNOM"}, "binding_equation": null, "comment": "\"Volume\""}, {"name": "h", "type_name": "SI.SpecificEnthalpy", "prefixes": [], "attributes": {"min": "SHMIN", "max": "SHMAX", "nominal": "SHNOM"}, "binding_equation": null, "comment": "\"Specific enthalpy\""}, {"name": "u", "type_name": "SI.SpecificEnergy", "prefixes": [], "attributes": {"min": "SEMIN", "max": "SEMAX", "nominal": "SENOM"}, "binding_equation": null, "comment": "\"Specific inner energy\""}, {"name": "s", "type_name": "SI.SpecificEntropy", "prefixes": [], "attributes": {"min": "SSMIN", "max": "SSMAX", "nominal": "SSNOM"}, "binding_equation": null, "comment": "\"Specific entropy\""}, {"name": "g", "type_name": "SI.SpecificGibbsFreeEnergy", "prefixes": [], "attributes": {"min": "SHMIN", "max": "SHMAX", "nominal": "SHNOM"}, "binding_equation": null, "comment": "\"Specific Gibbs free energy\""}, {"name": "cp", "type_name": "SI.SpecificHeatCapacity", "prefixes": [], "attributes": {"min": "CPMIN", "max": "CPMAX", "nominal": "CPNOM"}, "binding_equation": null, "comment": "\"Heat capacity at constant pressure\""}, {"name": "cv", "type_name": "SI.SpecificHeatCapacity", "prefixes": [], "attributes": {"min": "CPMIN", "max": "CPMAX", "nominal": "CPNOM"}, "binding_equation": null, "comment": "\"Heat capacity at constant volume\""}, {"name": "R_s", "type_name": "SI.SpecificHeatCapacity", "prefixes": [], "attributes": {"min": "CPMIN", "max": "CPMAX", "nominal": "CPNOM"}, "binding_equation": null, "comment": "\"Gas constant\""}, {"name": "MM", "type_name": "SI.MolarMass", "prefixes": [], "attributes": {"min": "MMMIN", "max": "MMMAX", "nominal": "MMNOM"}, "binding_equation": null, "comment": "\"Molar mass of mixture\""}, {"name": "kappa", "type_name": "SI.RatioOfSpecificHeatCapacities", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Ratio of cp/cv\""}, {"name": "ddTp", "type_name": "SI.DerDensityByTemperature", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of density by temperature at constant pressure\""}, {"name": "ddpT", "type_name": "SI.DerDensityByPressure", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of density by pressure at constant temperature\""}, {"name": "dupT", "type_name": "Real", "prefixes": [], "attributes": {"unit": "m3.kg-1"}, "binding_equation": null, "comment": "\"Derivative of inner energy by pressure at constant T\""}, {"name": "duTp", "type_name": "SI.SpecificHeatCapacity", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of inner energy by temperature at constant p\""}, {"name": "ddx", "type_name": "SI.SpecificEnergy", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative vector of density by change in mass composition\""}, {"name": "a", "type_name": "SI.Velocity", "prefixes": [], "attributes": {"min": "VELMIN", "max": "VELMAX", "nominal": "VELNOM"}, "binding_equation": null, "comment": "\"Speed of sound\""}, {"name": "dUTZ", "type_name": "SI.HeatCapacity", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of inner energy by temperature at constant moles\""}, {"name": "dpT", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of pressure w.r.t. temperature\""}, {"name": "dpZ", "type_name": "Real", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Derivative of pressure w.r.t. moles\""}], "physical_quantities": [{"name": "dupT", "unit": "m3.kg-1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "T", "unit": "K", "display_unit": null, "quantity": "ThermodynamicTemperature", "nominal": "TNOM"}, {"name": "d", "unit": "kg/m3", "display_unit": null, "quantity": "Density", "nominal": "DNOM"}, {"name": "p", "unit": "Pa", "display_unit": null, "quantity": "Pressure", "nominal": "PNOM"}, {"name": "a", "unit": "m/s", "display_unit": null, "quantity": "Velocity", "nominal": "VELNOM"}, {"name": "mixture", "unit": "nspecies", "display_unit": null, "quantity": null, "nominal": null}, {"name": "fraction", "unit": "nspecies", "display_unit": null, "quantity": null, "nominal": null}, {"name": "composition", "unit": "nspecies", "display_unit": null, "quantity": null, "nominal": null}, {"name": "components", "unit": "nspecies", "display_unit": null, "quantity": null, "nominal": null}, {"name": "moles", "unit": "nspecies", "display_unit": null, "quantity": null, "nominal": null}, {"name": "temperature", "unit": "nspecies", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["J", "Modelica.Icons", "SI", "m3", "w.r"], "inheritance_chain": ["Modelica.Icons.Record"]}
{"fqn": "Modelica.Electrical.Spice3.Internal.Csemiconductor.CapacitorModelLineParams", "kind": "record", "name": "CapacitorModelLineParams", "package_path": ["Modelica", "Electrical", "Spice3", "Internal", "Csemiconductor"], "extends": ["Modelica.Icons.Record"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.Record | components: SI.Length×2, SI.CapacitancePerArea×1, SI.Permittivity×1 | units: m, m", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo", "start_line": 10423, "end_line": 10432, "start_col": 9, "end_col": 37}, "code_text": "record CapacitorModelLineParams\r\n        \"Record for Capacitor model line parameters\"\r\n          extends Modelica.Icons.Record;\r\n\r\n            SI.CapacitancePerArea m_dCj \"Junction bottom capacitance\";\r\n            SI.Permittivity m_dCjsw \"Junction sidewall capacitance\";\r\n            SI.Length  m_dDefW \"Default device width\";\r\n            SI.Length  m_dNarrow \"Narrowing due to side etching\";\r\n\r\n        end CapacitorModelLineParams", "checksum": "c708242f57258d198219f4d780dc9d899a05b81b", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Spice3.mo:10423-10432", "component_count": 4, "connection_count": 0, "variable_count": 4, "physical_quantity_count": 2, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 8.0, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "record", "search_keywords": ["Length", "SI.CapacitancePerArea", "SI.Length", "SI.Permittivity", "basic", "mechanical"]}, "components": [{"name": "m_dCj", "type_name": "SI.CapacitancePerArea", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Junction bottom capacitance"}, {"name": "m_dCjsw", "type_name": "SI.Permittivity", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Junction sidewall capacitance"}, {"name": "m_dDefW", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Default device width"}, {"name": "m_dNarrow", "type_name": "SI.Length", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Narrowing due to side etching"}], "connections": [], "variables": [{"name": "m_dCj", "type_name": "SI.CapacitancePerArea", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Junction bottom capacitance\""}, {"name": "m_dCjsw", "type_name": "SI.Permittivity", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Junction sidewall capacitance\""}, {"name": "m_dDefW", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Default device width\""}, {"name": "m_dNarrow", "type_name": "SI.Length", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Narrowing due to side etching\""}], "physical_quantities": [{"name": "m_dDefW", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}, {"name": "m_dNarrow", "unit": "m", "display_unit": null, "quantity": "Length", "nominal": null}], "dependencies": ["Modelica.Icons", "SI"], "inheritance_chain": ["Modelica.Icons.Record"]}
{"fqn": "Modelica.Electrical.Batteries.BaseClasses.BaseStackData", "kind": "record", "name": "BaseStackData", "package_path": ["Modelica", "Electrical", "Batteries", "BaseClasses"], "extends": ["Modelica.Electrical.Batteries.Icons.BaseStackRecord"], "imports": ["Modelica.Math.BooleanVectors.anyTrue"], "parameters": [{"name": "Ns(final min", "type": "Integer", "default": "1) \"Number of series connected cells\"", "description": null}, {"name": "Np(final min", "type": "Integer", "default": "1) \"Number of parallel connected cells\"", "description": null}, {"name": "kDegraded[:,2]", "type": "Integer", "default": "{{0,0}} \"Indices of degraded cells [series index, parallel index]\"", "description": null}], "equations": [], "docstring": "extends Modelica.Electrical.Batteries.Icons.BaseStackRecord | params: Ns(final min, Np(final min, kDegraded[:,2] | units: :,2, i,2", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackData.mo", "start_line": 2, "end_line": 21, "start_col": 1, "end_col": 18}, "code_text": "record BaseStackData \"Parameters for stacks including degradation\"\r\n  extends Modelica.Electrical.Batteries.Icons.BaseStackRecord;\r\n  import Modelica.Math.BooleanVectors.anyTrue;\r\n  parameter Integer Ns(final min=1) \"Number of series connected cells\";\r\n  parameter Integer Np(final min=1) \"Number of parallel connected cells\";\r\n  parameter Integer kDegraded[:,2]={{0,0}} \"Indices of degraded cells [series index, parallel index]\";\r\n  replaceable parameter Modelica.Electrical.Batteries.ParameterRecords.CellData cellDataOriginal\r\n    \"Original cell data\"\r\n    annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n  replaceable parameter Modelica.Electrical.Batteries.ParameterRecords.CellData cellDataDegraded \"Degraded cell data\"\r\n    annotation(Placement(transformation(extent={{20,-10},{40,10}})));\r\n  replaceable parameter Modelica.Electrical.Batteries.ParameterRecords.CellData cellData[Ns, Np]=\r\n    {{if anyTrue({ks==kDegraded[i,1] and kp==kDegraded[i,2] for i in 1:size(kDegraded,1)}) then\r\n      cellDataDegraded else cellDataOriginal for kp in 1:Np} for ks in 1:Ns}\r\n    \"Matrix of cell data\"\r\n    annotation(Dialog(group=\"Result\", enable=false), Placement(transformation(extent={{-10,-30},{10,-10}})));\r\n  annotation(defaultComponentPrefixes=\"parameter\", Documentation(info=\"<html>\r\n  <p>This record contains the base cell data definition of original and degraded cell data.</p>\r\n</html>\"));\r\nend BaseStackData", "checksum": "d2d88b802442a8514ec8ade3eb76792595bf2ec7", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\BaseClasses\\BaseStackData.mo:2-21", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 2, "parameter_count": 3, "equation_count": 0, "dependency_count": 4, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 1.5, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "record", "search_keywords": [":,2", "basic", "i,2"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [{"name": "cells", "unit": ":,2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "data", "unit": "i,2", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Electrical.Batteries.Icons", "Modelica.Electrical.Batteries.ParameterRecords", "Modelica.Math.BooleanVectors", "Modelica.Math.BooleanVectors.anyTrue"], "inheritance_chain": ["Modelica.Electrical.Batteries.Icons.BaseStackRecord"]}
{"fqn": "Modelica.Electrical.Machines.Utilities.ParameterRecords.DcElectricalExcitedData", "kind": "record", "name": "DcElectricalExcitedData", "package_path": ["Modelica", "Electrical", "Machines", "Utilities", "ParameterRecords"], "extends": ["DcPermanentMagnetData"], "imports": [], "parameters": [], "equations": [], "docstring": "extends DcPermanentMagnetData", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Utilities\\ParameterRecords\\DcElectricalExcitedData.mo", "start_line": 2, "end_line": 28, "start_col": 1, "end_col": 28}, "code_text": "record DcElectricalExcitedData \"Common parameters for DC machines\"\r\n  extends DcPermanentMagnetData;\r\n  parameter SI.Current IeNominal=1\r\n    \"Nominal excitation current\" annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Resistance Re=100\r\n    \"Field excitation resistance at TeRef\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Temperature TeRef=293.15\r\n    \"Reference temperature of excitation resistance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter Machines.Thermal.LinearTemperatureCoefficient20 alpha20e=0\r\n    \"Temperature coefficient of excitation resistance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter SI.Inductance Le=1\r\n    \"Total field excitation inductance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  parameter Real sigmae(\r\n    min=0,\r\n    max=0.99) = 0 \"Stray fraction of total excitation inductance\"\r\n    annotation (Dialog(tab=\"Excitation\"));\r\n  annotation (\r\n    defaultComponentName=\"dceeData\",\r\n    defaultComponentPrefixes=\"parameter\",\r\n    Documentation(info=\"<html>\r\n<p>Basic parameters of DC machines are predefined with default values.</p>\r\n</html>\"));\r\nend DcElectricalExcitedData", "checksum": "b9a47f7a266da480aa9f415d6902f5cc365d3630", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Machines\\Utilities\\ParameterRecords\\DcElectricalExcitedData.mo:2-28", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "record", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "DcPermanentMagnetData", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["Machines.Thermal", "SI"], "inheritance_chain": ["DcPermanentMagnetData"]}
{"fqn": "Modelica.Electrical.Batteries.Icons.TransientCellRecord", "kind": "record", "name": "TransientCellRecord", "package_path": ["Modelica", "Electrical", "Batteries", "Icons"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": "components: String×1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\Icons\\TransientCellRecord.mo", "start_line": 2, "end_line": 48, "start_col": 1, "end_col": 24}, "code_text": "partial record TransientCellRecord \"Indicates transient cell data\"\r\n  constant String CellType=\"Cell Data\" \"Indicates cell type\";\r\n  annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}), graphics={\r\n        Text(\r\n          textColor={0,0,255},\r\n          extent={{-150,60},{150,100}},\r\n          textString=\"%name\"),\r\n        Rectangle(\r\n          origin={0.0,-25.0},\r\n          lineColor={64,64,64},\r\n          fillColor={255,215,136},\r\n          fillPattern=FillPattern.Solid,\r\n          extent={{-100.0,-75.0},{100.0,75.0}},\r\n          radius=25.0),\r\n        Line(\r\n          points={{-100,0},{-6,0}},\r\n          color={64,64,64}),\r\n        Line(\r\n          origin={-6,-5},\r\n          points={{0,25},{0,-15}},\r\n          color={64,64,64}),\r\n        Line(\r\n          origin={6,-5},\r\n          points={{0,25},{0,-15}},\r\n          color={64,64,64}),\r\n        Line(\r\n          points={{6,0},{100,0}},\r\n          color={64,64,64}),\r\n        Line(\r\n          origin={100,-50},\r\n          points={{-60,0},{0,0}},\r\n          color={64,64,64}),\r\n        Line(\r\n          origin={-40,-50},\r\n          points={{-60,0},{0,0}},\r\n          color={64,64,64}),\r\n        Text(\r\n          extent={{-100,-70},{100,-90}},\r\n          textColor={0,0,0},\r\n          textString=\"%CellType\"),\r\n        Rectangle(extent={{-40,-38},{40,-62}}, lineColor={0,0,0})}),\r\n                               Documentation(info=\"<html>\r\n<p>\r\nThis icon is indicates a record.\r\n</p>\r\n</html>\"));\r\nend TransientCellRecord", "checksum": "c39271bda4d00cc54c20a7e355b08666b66379be", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Batteries\\Icons\\TransientCellRecord.mo:2-48", "component_count": 1, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "record", "search_keywords": ["String", "basic"]}, "components": [{"name": "CellType", "type_name": "String", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["FillPattern"], "inheritance_chain": []}
{"fqn": "Modelica.Fluid.Dissipation.HeatTransfer.HelicalPipe.kc_overall_IN_var", "kind": "record", "name": "kc_overall_IN_var", "package_path": ["Modelica", "Fluid", "Dissipation", "HeatTransfer", "HelicalPipe"], "extends": ["Modelica.Fluid.Dissipation.Utilities.Records.General.FluidProperties"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Fluid.Dissipation.Utilities.Records.General.FluidProperties", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Dissipation.mo", "start_line": 1786, "end_line": 1800, "start_col": 7, "end_col": 28}, "code_text": "record kc_overall_IN_var\r\n        \"Input record for function kc_overall and kc_overall_KC\"\r\n\r\n        //fluid property variables\r\n        extends\r\n          Modelica.Fluid.Dissipation.Utilities.Records.General.FluidProperties;\r\n\r\n        //input variable (mass flow rate)\r\n        SI.MassFlowRate m_flow annotation (Dialog(group=\"Input\"));\r\n\r\n      annotation (Documentation(info=\"<html>\r\nThis record is used as <strong>input record</strong> for the heat transfer function <a href=\\\"Modelica://Modelica.Fluid.Dissipation.HeatTransfer.HelicalPipe.kc_overall\\\"> kc_overall</a> and\r\n<a href=\\\"Modelica://Modelica.Fluid.Dissipation.HeatTransfer.HelicalPipe.kc_overall_KC\\\"> kc_overall_KC</a>.\r\n</html>\"));\r\n      end kc_overall_IN_var", "checksum": "9c3f95d28c88d101b2c36cba37b4d391df44d8b9", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Dissipation.mo:1786-1800", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 3, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "record", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Fluid.Dissipation.HeatTransfer.HelicalPipe", "Modelica.Fluid.Dissipation.Utilities.Records.General", "SI"], "inheritance_chain": ["Modelica.Fluid.Dissipation.Utilities.Records.General.FluidProperties"]}
{"fqn": "Modelica.Mechanics.MultiBody.Frames.Quaternions.Orientation", "kind": "type", "name": "Orientation", "package_path": ["Modelica", "Mechanics", "MultiBody", "Frames", "Quaternions"], "extends": ["Internal.QuaternionBase", "Modelica.Icons.Function"], "imports": ["Modelica", "Modelica.Mechanics.MultiBody.Frames.Quaternions"], "parameters": [], "equations": [{"equations": ["algorithm\r\n    residue := { Modelica.Math.atan2({ Q1[4],  Q1[3], -Q1[2], -Q1[1]}*Q2, Q1*Q2),\r\n                 Modelica.Math.atan2({-Q1[3],  Q1[4],  Q1[1], -Q1[2]}*Q2, Q1*Q2),\r\n                 Modelica.Math.atan2({ Q1[2], -Q1[1],  Q1[4], -Q1[3]}*Q2, Q1*Q2)}"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\Orientation.mo", "start_line": 19, "end_line": 22, "start_col": 3, "end_col": 83}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\Orientation.mo", "start_line": 19, "end_line": 19, "start_col": 3, "end_col": 12}}], "docstring": "extends Internal.QuaternionBase | units: 3 | eq: algorithm residue := { Modelica.Math.atan2({ Q1[4], Q1[3], -Q1[2], -Q1[1]}*Q2, Q1*Q2), Modelica.Math.atan2({-Q1", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\Orientation.mo", "start_line": 2, "end_line": 67, "start_col": 1, "end_col": 16}, "code_text": "type Orientation\r\n  \"Orientation type defining rotation from a frame 1 into a frame 2 with quaternions {p1,p2,p3,p0}\"\r\n\r\n  extends Internal.QuaternionBase;\r\n\r\n  encapsulated function equalityConstraint\r\n    \"Return the constraint residues to express that two frames have the same quaternion orientation\"\r\n\r\n    import Modelica;\r\n    import Modelica.Mechanics.MultiBody.Frames.Quaternions;\r\n    extends Modelica.Icons.Function;\r\n    input Quaternions.Orientation Q1\r\n      \"Quaternions orientation object to rotate frame 0 into frame 1\";\r\n    input Quaternions.Orientation Q2\r\n      \"Quaternions orientation object to rotate frame 0 into frame 2\";\r\n    output Real residue[3]\r\n      \"Zero vector if Q1 and Q2 are identical (the first three elements of the relative transformation (is {0,0,0} for the null rotation, guarded by atan2 to make the mirrored solution invalid\";\r\n  algorithm\r\n    residue := { Modelica.Math.atan2({ Q1[4],  Q1[3], -Q1[2], -Q1[1]}*Q2, Q1*Q2),\r\n                 Modelica.Math.atan2({-Q1[3],  Q1[4],  Q1[1], -Q1[2]}*Q2, Q1*Q2),\r\n                 Modelica.Math.atan2({ Q1[2], -Q1[1],  Q1[4], -Q1[3]}*Q2, Q1*Q2)};\r\n    annotation(Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nresidue = Orientation.<strong>equalityConstraint</strong>(Q1, Q2);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function returns the Real residue vector with&nbsp;3 elements.\r\nThis vector has zero elements if quaternions objects Q1 and Q2 are identical,\r\ni.e. they describe the same orientation.\r\nThe residue vector is determined by the relative quaternion object between\r\nQ1 and Q2 to formulate the residue in such a way that only identical\r\norientation objects lead to a zero residue vector.\r\n</p>\r\n</html>\"));\r\n  end equalityConstraint;\r\n\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis type describes the <strong>rotation</strong> to rotate a frame 1 into\r\na frame 2 using quaternions (also called <strong>Euler parameters</strong>)\r\naccording to the following definition:\r\n</p>\r\n<blockquote><pre>\r\nQuaternions.Orientation Q;\r\nReal  n[3];\r\nReal  phi(unit=\\\"rad\\\");\r\nQ = [ n*sin(phi/2)\r\n        cos(phi/2) ]\r\n</pre></blockquote>\r\n<p>\r\nwhere \\\"n\\\" is the <strong>axis of rotation</strong> to rotate frame 1 into\r\nframe 2 and \\\"phi\\\" is the <strong>rotation angle</strong> for this rotation.\r\nVector \\\"n\\\" is either resolved in frame 1 or in frame 2\r\n(the result is the same since the coordinates of \\\"n\\\" with respect to\r\nframe 1 are identical to its coordinates with respect to frame 2).\r\n</p>\r\n<p>\r\nThe term \\\"quaternions\\\" is preferred over the historically\r\nmore reasonable \\\"Euler parameters\\\" in order to not get\r\nconfused with Modelica \\\"parameters\\\".\r\n</p>\r\n</html>\"));\r\nend Orientation", "checksum": "0694730e3a955be55f88d20ef417616cc41c2cb2", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\Quaternions\\Orientation.mo:2-67", "component_count": 0, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 2, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "equation_summary": "algorithm residue := { Modelica.Math.atan2({ Q1[4], Q1[3], -Q1[2], -Q1[1]}*Q2, Q1*Q2), Modelica.Math.atan2({-Q1[3], Q1[4], Q1[1], -Q1[2]}*Q2, Q1*Q2), Modelica.M", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "Modelica", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "Q1", "type_name": "Quaternions.Orientation", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Quaternions orientation object to rotate frame 0 into frame 1\""}, {"name": "Q2", "type_name": "Quaternions.Orientation", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Quaternions orientation object to rotate frame 0 into frame 2\""}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"Zero vector if Q1 and Q2 are identical (the first three elements of the relative transformation (is {0,0,0} for the null rotation, guarded by atan2 to make the mirrored solution invalid\""}, {"name": "equalityConstraint", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "invalid", "unit": "3", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Internal", "Modelica", "Modelica.Icons", "Modelica.Math", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Frames.Quaternions", "Quaternions", "i"], "inheritance_chain": ["Internal.QuaternionBase", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.Orientation", "kind": "type", "name": "Orientation", "package_path": ["Modelica", "Mechanics", "MultiBody", "Frames", "TransformationMatrices"], "extends": ["Internal.TransformationMatrix", "Modelica.Icons.Function"], "imports": ["Modelica", "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices"], "parameters": [], "equations": [{"equations": ["algorithm\r\n    residue := {\r\n      cross(T1[1, :], T1[2, :]) * T2[2, :],\r\n      -cross(T1[1, :], T1[2, :]) * T2[1, :],\r\n      T1[2, :]*T2[1, :]}"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\TransformationMatrices\\Orientation.mo", "start_line": 19, "end_line": 23, "start_col": 3, "end_col": 26}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\TransformationMatrices\\Orientation.mo", "start_line": 19, "end_line": 19, "start_col": 3, "end_col": 12}}], "docstring": "extends Internal.TransformationMatrix | eq: algorithm residue := { cross(T1[1, :], T1[2, :]) * T2[2, :], -cross(T1[1, :], T1[2, :]) * T2[1, :], T1[2, :]*T2[1, :", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\TransformationMatrices\\Orientation.mo", "start_line": 2, "end_line": 76, "start_col": 1, "end_col": 16}, "code_text": "type Orientation\r\n  \"Orientation type defining rotation from a frame 1 into a frame 2 with a transformation matrix\"\r\n\r\n  extends Internal.TransformationMatrix;\r\n\r\n  encapsulated function equalityConstraint\r\n    \"Return the constraint residues to express that two frames have the same orientation\"\r\n\r\n    import Modelica;\r\n    import Modelica.Mechanics.MultiBody.Frames.TransformationMatrices;\r\n    extends Modelica.Icons.Function;\r\n    input TransformationMatrices.Orientation T1\r\n      \"Orientation object to rotate frame 0 into frame 1\";\r\n    input TransformationMatrices.Orientation T2\r\n      \"Orientation object to rotate frame 0 into frame 2\";\r\n    output Real residue[3]\r\n      \"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\";\r\n  algorithm\r\n    residue := {\r\n      cross(T1[1, :], T1[2, :]) * T2[2, :],\r\n      -cross(T1[1, :], T1[2, :]) * T2[1, :],\r\n      T1[2, :]*T2[1, :]};\r\n    annotation(Inline=true, Documentation(info=\"<html>\r\n<h4>Syntax</h4>\r\n<blockquote><pre>\r\nresidue = Orientation.<strong>equalityConstraint</strong>(T1, T2);\r\n</pre></blockquote>\r\n\r\n<h4>Description</h4>\r\n<p>\r\nThis function returns the Real residue vector with&nbsp;3 elements.\r\nThis vector has zero elements if transformation matrices T1 and T2 are identical,\r\ni.e. they describe the same orientation. The residue vector is determined by computing the relative\r\ntransformation matrix between T1 and T2 and using the outer-diagonal elements of this matrix to\r\nformulate the residue in such a way that only identical orientation objects lead to a zero residue vector.\r\n</p>\r\n</html>\"));\r\n  end equalityConstraint;\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis type describes the <strong>rotation</strong> from a <strong>frame 1</strong> into a <strong>frame 2</strong>.\r\nAn instance <strong>R</strong> of type <strong>Orientation</strong> has the following interpretation:\r\n</p>\r\n<blockquote><pre>\r\n<strong>T</strong> = [<strong>e</strong><sub>x</sub>, <strong>e</strong><sub>y</sub>, <strong>e</strong><sub>z</sub>];\r\n    e.g., <strong>T</strong> = [1,0,0; 0,1,0; 0,0,1]\r\n</pre></blockquote>\r\n<p>\r\nwhere <strong>e</strong><sub>x</sub>,<strong>e</strong><sub>y</sub>,<strong>e</strong><sub>z</sub>\r\nare unit vectors in the direction of the x-axis, y-axis, and z-axis\r\nof frame 1, resolved in frame 2, respectively. Therefore, if <strong>v</strong><sub>1</sub>\r\nis vector <strong>v</strong> resolved in frame 1 and <strong>v</strong><sub>2</sub> is\r\nvector <strong>v</strong> resolved in frame 2, the following relationship holds:\r\n</p>\r\n<blockquote><pre>\r\n<strong>v</strong><sub>2</sub> = <strong>T</strong> * <strong>v</strong><sub>1</sub>\r\n</pre></blockquote>\r\n<p>\r\nThe <strong>inverse</strong> orientation\r\n<strong>T_inv</strong> = <strong>T</strong><sup>T</sup> describes the rotation\r\nfrom frame 2 into frame 1.\r\n</p>\r\n<p>\r\nSince the orientation is described by 9 variables, there are\r\n6 constraints between these variables. These constraints\r\nare defined in function <strong>TransformationMatrices.orientationConstraint</strong>.\r\n</p>\r\n<p>\r\nNote, that in the MultiBody library the rotation object is\r\nnever directly accessed but only with the access functions provided\r\nin package TransformationMatrices. As a consequence, other implementations of\r\nRotation can be defined by adapting this package correspondingly.\r\n</p>\r\n</html>\"));\r\nend Orientation", "checksum": "b35a109fd4eb863dae22b975657c2930a1a281f3", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Mechanics\\MultiBody\\Frames\\TransformationMatrices\\Orientation.mo:2-76", "component_count": 0, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 2, "dependency_count": 8, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "equation_summary": "algorithm residue := { cross(T1[1, :], T1[2, :]) * T2[2, :], -cross(T1[1, :], T1[2, :]) * T2[1, :], T1[2, :]*T2[1, :]}", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "Modelica", "type_name": "import", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "T1", "type_name": "TransformationMatrices.Orientation", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Orientation object to rotate frame 0 into frame 1\""}, {"name": "T2", "type_name": "TransformationMatrices.Orientation", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Orientation object to rotate frame 0 into frame 2\""}, {"name": "residue", "type_name": "Real", "prefixes": ["output"], "attributes": {}, "binding_equation": null, "comment": "\"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\""}, {"name": "equalityConstraint", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["Internal", "Modelica", "Modelica.Icons", "Modelica.Mechanics.MultiBody.Frames", "Modelica.Mechanics.MultiBody.Frames.TransformationMatrices", "TransformationMatrices", "e", "i"], "inheritance_chain": ["Internal.TransformationMatrix", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Icons.TypeString", "kind": "type", "name": "TypeString", "package_path": ["Modelica", "Icons"], "extends": ["String"], "imports": [], "parameters": [], "equations": [], "docstring": "extends String", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo", "start_line": 610, "end_line": 627, "start_col": 3, "end_col": 17}, "code_text": "type TypeString \"Icon for String types\"\r\n      extends String;\r\n      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              lineColor={160,160,164},\r\n              fillColor={160,160,164},\r\n              fillPattern=FillPattern.Solid,\r\n              extent={{-100.0,-100.0},{100.0,100.0}},\r\n              radius=25.0),\r\n            Text(\r\n              textColor={255,255,255},\r\n              extent={{-90.0,-50.0},{90.0,50.0}},\r\n              textString=\"S\")}),Documentation(info=\"<html>\r\n<p>\r\nThis icon is designed for a <strong>String</strong> type.\r\n</p>\r\n</html>\"));\r\n  end TypeString", "checksum": "0131d655d882db51acac5363d3d21a85216f702d", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo:610-627", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "String", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern"], "inheritance_chain": ["String"]}
{"fqn": "Modelica.Icons.TypeBoolean", "kind": "type", "name": "TypeBoolean", "package_path": ["Modelica", "Icons"], "extends": ["Boolean"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Boolean", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo", "start_line": 591, "end_line": 608, "start_col": 3, "end_col": 18}, "code_text": "type TypeBoolean \"Icon for Boolean types\"\r\n      extends Boolean;\r\n      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              lineColor={160,160,164},\r\n              fillColor={160,160,164},\r\n              fillPattern=FillPattern.Solid,\r\n              extent={{-100.0,-100.0},{100.0,100.0}},\r\n              radius=25.0),\r\n            Text(\r\n              textColor={255,255,255},\r\n              extent={{-90.0,-50.0},{90.0,50.0}},\r\n              textString=\"B\")}),\r\n   Documentation(info=\"<html>\r\n<p>\r\nThis icon is designed for a <strong>Boolean</strong> type.\r\n</p></html>\"));\r\n  end TypeBoolean", "checksum": "e14ea15e6663c9993b033191eb246edc883b71ad", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo:591-608", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "Boolean", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern"], "inheritance_chain": ["Boolean"]}
{"fqn": "Modelica.Icons.TypeInteger", "kind": "type", "name": "TypeInteger", "package_path": ["Modelica", "Icons"], "extends": ["Integer"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Integer", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo", "start_line": 572, "end_line": 589, "start_col": 3, "end_col": 18}, "code_text": "type TypeInteger \"Icon for Integer types\"\r\n      extends Integer;\r\n      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              lineColor={160,160,164},\r\n              fillColor={160,160,164},\r\n              fillPattern=FillPattern.Solid,\r\n              extent={{-100.0,-100.0},{100.0,100.0}},\r\n              radius=25.0),\r\n            Text(\r\n              textColor={255,255,255},\r\n              extent={{-90.0,-50.0},{90.0,50.0}},\r\n              textString=\"I\")}),Documentation(info=\"<html>\r\n<p>\r\nThis icon is designed for an <strong>Integer</strong> type.\r\n</p>\r\n</html>\"));\r\n  end TypeInteger", "checksum": "f1d8ca1fafdf463d4b6fb0f338a5913591a1cf1c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo:572-589", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "Integer", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern"], "inheritance_chain": ["Integer"]}
{"fqn": "Modelica.Icons.TypeReal", "kind": "type", "name": "TypeReal", "package_path": ["Modelica", "Icons"], "extends": ["Real"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Real", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo", "start_line": 553, "end_line": 570, "start_col": 3, "end_col": 15}, "code_text": "type TypeReal \"Icon for Real types\"\r\n      extends Real;\r\n      annotation(Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={\r\n            Rectangle(\r\n              lineColor={160,160,164},\r\n              fillColor={160,160,164},\r\n              fillPattern=FillPattern.Solid,\r\n              extent={{-100.0,-100.0},{100.0,100.0}},\r\n              radius=25.0),\r\n            Text(\r\n              textColor={255,255,255},\r\n              extent={{-90.0,-50.0},{90.0,50.0}},\r\n              textString=\"R\")}),Documentation(info=\"<html>\r\n<p>\r\nThis icon is designed for a <strong>Real</strong> type.\r\n</p>\r\n</html>\"));\r\n  end TypeReal", "checksum": "19c43b96b7c2f17d25aa3b867a88a43f4452a159", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Icons.mo:553-570", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "Real", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern"], "inheritance_chain": ["Real"]}
{"fqn": "ObsoleteModelica4.Mechanics.MultiBody.Types.Init", "kind": "type", "name": "Init", "package_path": ["ObsoleteModelica4", "Mechanics", "MultiBody", "Types"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo", "start_line": 1010, "end_line": 1045, "start_col": 9, "end_col": 11}, "code_text": "type Init = enumeration(\r\n          Free \"Free (no initialization)\",\r\n          PositionVelocity \"Initialize generalized position and velocity variables\",\r\n          SteadyState \"Initialize in steady state (velocity and acceleration are zero)\",\r\n          Position \"Initialize only generalized position variable(s)\",\r\n          Velocity \"Initialize only generalized velocity variable(s)\",\r\n          VelocityAcceleration \"Initialize generalized velocity and acceleration variables\",\r\n          PositionVelocityAcceleration \"Initialize generalized position, velocity and acceleration variables\")\r\n        \"Enumeration defining initialization for MultiBody components\"\r\n        annotation (\r\n          obsolete = \"Obsolete type - use start/fixed attributes instead\",\r\n          Documentation(info=\"<html>\r\n<table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\">\r\n<tr><th><strong>Types.Init.</strong></th><th><strong>Meaning</strong></th></tr>\r\n<tr><td>Free</td>\r\n    <td>No initialization</td></tr>\r\n\r\n<tr><td>PositionVelocity</td>\r\n    <td>Initialize generalized position and velocity variables</td></tr>\r\n\r\n<tr><td>SteadyState</td>\r\n    <td>Initialize in steady state (velocity and acceleration are zero)</td></tr>\r\n\r\n<tr><td>Position </td>\r\n    <td>Initialize only generalized position variable(s)</td></tr>\r\n\r\n<tr><td>Velocity</td>\r\n    <td>Initialize only generalized velocity variable(s)</td></tr>\r\n\r\n<tr><td>VelocityAcceleration</td>\r\n    <td>Initialize generalized velocity and acceleration variables</td></tr>\r\n\r\n<tr><td>PositionVelocityAcceleration</td>\r\n    <td>Initialize generalized position, velocity and acceleration variables</td></tr>\r\n</table>\r\n</html>\"))", "checksum": "78684d5ef5656e343caaaa9bffb5da4a612e3ffc", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\ObsoleteModelica4.mo:1010-1045", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Types"], "inheritance_chain": []}
{"fqn": "Modelica.Units.NonSI.Area_cmPerVoltageSecond", "kind": "type", "name": "Area_cmPerVoltageSecond", "package_path": ["Modelica", "Units", "NonSI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 1256, "end_line": 1258, "start_col": 5, "end_col": 38}, "code_text": "type Area_cmPerVoltageSecond =\r\n                     Real (final quantity=\"AreaPerVoltageSecond\", final unit=\"cm2/(V.s)\")\r\n      \"Area in cm per voltage second\"", "checksum": "66d97c4d2116acddd8a41aa7c1beb83f8e20676c", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:1256-1258", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["V"], "inheritance_chain": []}
{"fqn": "Modelica.Fluid.Dissipation.HeatTransfer.HeatExchanger.kc_flatTube_KC.TYP", "kind": "type", "name": "TYP", "package_path": ["Modelica", "Fluid", "Dissipation", "HeatTransfer", "HeatExchanger", "kc_flatTube_KC"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Dissipation.mo", "start_line": 1088, "end_line": 1089, "start_col": 9, "end_col": 77}, "code_text": "type TYP =\r\n            Modelica.Fluid.Dissipation.Utilities.Types.HTXGeometry_flatTubes", "checksum": "bd316ec660db8af0c9f2e0a846bb52e3f34987c7", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Dissipation.mo:1088-1089", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Fluid.Dissipation.Utilities.Types"], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.CowlingNumber", "kind": "type", "name": "CowlingNumber", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 1011, "end_line": 1011, "start_col": 5, "end_col": 79}, "code_text": "type CowlingNumber = Real (final quantity=\"CowlingNumber\", final unit=\"1\")", "checksum": "9668623e16ad8f53bbc1fad796c1727024cd9c1a", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:1011-1011", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.GyromagneticCoefficient", "kind": "type", "name": "GyromagneticCoefficient", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 844, "end_line": 845, "start_col": 5, "end_col": 37}, "code_text": "type GyromagneticCoefficient = Real (final quantity=\"GyromagneticCoefficient\",\r\n            final unit=\"A.m2/(J.s)\")", "checksum": "6ee012ec12907262d4f57ebf896177ce2139c7ac", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:844-845", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["A", "J"], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.SurfaceDensityOfCharge", "kind": "type", "name": "SurfaceDensityOfCharge", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 488, "end_line": 491, "start_col": 5, "end_col": 15}, "code_text": "type SurfaceDensityOfCharge = Real (\r\n        final quantity=\"SurfaceDensityOfCharge\",\r\n        final unit=\"C/m2\",\r\n        min=0)", "checksum": "3c72de712f0d60f7bf3a2fac36b38bc0b6e328fd", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:488-491", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.BulkModulus", "kind": "type", "name": "BulkModulus", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 349, "end_line": 349, "start_col": 5, "end_col": 40}, "code_text": "type BulkModulus = AbsolutePressure", "checksum": "b372e953ec4ba9bf5cb21448378a3a68d993be0e", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:349-349", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.EffectiveMass", "kind": "type", "name": "EffectiveMass", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 1072, "end_line": 1072, "start_col": 5, "end_col": 30}, "code_text": "type EffectiveMass = Mass", "checksum": "bffcb3a578053909785e9ba316b6bd25cac663ed", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:1072-1072", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.LuminousFlux", "kind": "type", "name": "LuminousFlux", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 651, "end_line": 651, "start_col": 5, "end_col": 78}, "code_text": "type LuminousFlux = Real (final quantity=\"LuminousFlux\", final unit=\"lm\")", "checksum": "2ef93387ec273b80a83dcca732d48addde914e3d", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:651-651", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Fluid.Dissipation.PressureLoss.StraightPipe.dp_turbulent_MFLOW.TYP1", "kind": "type", "name": "TYP1", "package_path": ["Modelica", "Fluid", "Dissipation", "PressureLoss", "StraightPipe", "dp_turbulent_MFLOW"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Dissipation.mo", "start_line": 5574, "end_line": 5574, "start_col": 9, "end_col": 73}, "code_text": "type TYP1 = Modelica.Fluid.Dissipation.Utilities.Types.Roughness", "checksum": "7fb246019a47a723fe826e422cd999513a9ae548", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Fluid\\Dissipation.mo:5574-5574", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Fluid.Dissipation.Utilities.Types"], "inheritance_chain": []}
{"fqn": "Modelica.Units.SI.Affinity", "kind": "type", "name": "Affinity", "package_path": ["Modelica", "Units", "SI"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo", "start_line": 791, "end_line": 791, "start_col": 5, "end_col": 73}, "code_text": "type Affinity = Real (final quantity=\"Affinity\", final unit=\"J/mol\")", "checksum": "0fabd82150ea344dc80c570673ef3b7a1cbc89e3", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Units.mo:791-791", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 0, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "type", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": [], "inheritance_chain": []}
{"fqn": "Modelica.Blocks.Sources.IntegerTable", "kind": "block", "name": "IntegerTable", "package_path": ["Modelica", "Blocks", "Sources"], "extends": ["Interfaces.IntegerSO", "Modelica.Icons.Function"], "imports": [], "parameters": [{"name": "extrapolation", "type": "Modelica.Blocks.Types.Extrapolation", "default": "Modelica.Blocks.Types.Extrapolation.HoldLastPoint \"Extrapolation of data outside the definition range\" parameter SI.Time startTime=-Modelica.Constants.inf \"Output = 0 for time < st", "description": null}, {"name": "n", "type": "Integer", "default": "size(table, 1) \"Number of table points\"", "description": null}], "equations": [{"equations": ["equation\r\n      assert(n > 0, \"No table values defined.\")", "assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")", "connect(combiTimeTable.y[1], realToInteger.u) annotation(Line(points={{-9,0},{8,0}}, color={0,0,127}))", "connect(realToInteger.y, y) annotation(Line(points={{31,0},{110,0},{110,0}}, color={255,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2410, "end_line": 2414, "start_col": 3, "end_col": 104}}, {"equations": ["assert(n > 0, \"No table values defined.\")", "assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")", "connect(combiTimeTable.y[1], realToInteger.u) annotation(Line(points={{-9,0},{8,0}}, color={0,0,127}))", "connect(realToInteger.y, y) annotation(Line(points={{31,0},{110,0},{110,0}}, color={255,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2411, "end_line": 2414, "start_col": 7, "end_col": 104}}, {"equations": ["assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2412, "end_line": 2412, "start_col": 7, "end_col": 118}}, {"equations": ["assert(n > 0, \"No table values defined.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2411, "end_line": 2411, "start_col": 7, "end_col": 48}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2410, "end_line": 2410, "start_col": 3, "end_col": 11}}, {"equations": ["initial algorithm\r\n      isValidTable(table)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2408, "end_line": 2409, "start_col": 3, "end_col": 27}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2408, "end_line": 2408, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm\r\n        if n > 0 then\r\n          // Check whether time values are strict monotonically increasing\r\n          t_last := table[1, 1]", "for i in 2:n loop\r\n            assert(table[i, 1] > t_last,\r\n              \"Time values of table not strict monotonically increasing: table[\"\r\n               + String(i - 1) + \",1] = \" + String(table[i - 1, 1]) + \"table[\" +\r\n              String(i) + \",1] = \" + String(table[i, 1]))", "end for", "// Check that all values in the second column are Integer values\r\n          for i in 1:n loop\r\n            assert(rem(table[i, 2], 1) == 0.0,\r\n              \"Table value is not an Integer: table[\" + String(i) + \",2] = \" +\r\n              String(table[i, 2]))", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2387, "end_line": 2404, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2387, "end_line": 2387, "start_col": 7, "end_col": 16}}], "docstring": "extends Interfaces.IntegerSO | components: Real×1, Integer×1 | connections: 2 | params: extrapolation, n | units: s, time, yi, :, 2 | eq: equation assert(n > 0,", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2358, "end_line": 2492, "start_col": 3, "end_col": 19}, "code_text": "block IntegerTable\r\n    \"Generate an Integer output signal based on a table matrix with [time, yi] values\"\r\n\r\n    parameter Real table[:, 2]=fill(0,0,2) \"Table matrix (first column: time; second column: y)\" annotation(Dialog(group=\"Table data definition\"));\r\n    parameter Modelica.Blocks.Types.Extrapolation extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint\r\n      \"Extrapolation of data outside the definition range\" annotation(Dialog(group=\"Table data interpretation\"));\r\n    parameter SI.Time startTime=-Modelica.Constants.inf\r\n      \"Output = 0 for time < startTime\" annotation(Dialog(group=\"Table data interpretation\"));\r\n    parameter SI.Time shiftTime=0\r\n      \"Shift time of first table column\" annotation(Dialog(group=\"Table data interpretation\"));\r\n\r\n    extends Interfaces.IntegerSO;\r\n\r\n    CombiTimeTable combiTimeTable(\r\n      final table=table,\r\n      final smoothness=Modelica.Blocks.Types.Smoothness.ConstantSegments,\r\n      final columns={2},\r\n      final extrapolation=extrapolation,\r\n      final startTime=startTime,\r\n      final shiftTime=shiftTime) annotation(Placement(transformation(extent={{-30,-10},{-10,10}})));\r\n    Modelica.Blocks.Math.RealToInteger realToInteger annotation(Placement(transformation(extent={{10,-10},{30,10}})));\r\n\r\n  protected\r\n      function isValidTable \"Check if table is valid\"\r\n        extends Modelica.Icons.Function;\r\n        input Real table[:, 2] \"Table matrix\";\r\n    protected\r\n        SI.Time t_last;\r\n        Integer n=size(table, 1) \"Number of table points\";\r\n      algorithm\r\n        if n > 0 then\r\n          // Check whether time values are strict monotonically increasing\r\n          t_last := table[1, 1];\r\n          for i in 2:n loop\r\n            assert(table[i, 1] > t_last,\r\n              \"Time values of table not strict monotonically increasing: table[\"\r\n               + String(i - 1) + \",1] = \" + String(table[i - 1, 1]) + \"table[\" +\r\n              String(i) + \",1] = \" + String(table[i, 1]));\r\n          end for;\r\n\r\n          // Check that all values in the second column are Integer values\r\n          for i in 1:n loop\r\n            assert(rem(table[i, 2], 1) == 0.0,\r\n              \"Table value is not an Integer: table[\" + String(i) + \",2] = \" +\r\n              String(table[i, 2]));\r\n          end for;\r\n        end if;\r\n      end isValidTable;\r\n\r\n      parameter Integer n=size(table, 1) \"Number of table points\";\r\n  initial algorithm\r\n      isValidTable(table);\r\n  equation\r\n      assert(n > 0, \"No table values defined.\");\r\n      assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\");\r\n      connect(combiTimeTable.y[1], realToInteger.u) annotation(Line(points={{-9,0},{8,0}}, color={0,0,127}));\r\n      connect(realToInteger.y, y) annotation(Line(points={{31,0},{110,0},{110,0}}, color={255,127,0}));\r\n    annotation (\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,100}}),\r\n        graphics={\r\n          Line(points={{-80,64},{-80,-84}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{-80,86},{-88,64},{-72,64},{-80,86}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-90,-74},{82,-74}}, color={192,192,192}),\r\n          Polygon(\r\n            points={{90,-74},{68,-66},{68,-82},{90,-74}},\r\n            lineColor={192,192,192},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Rectangle(\r\n            extent={{-46,68},{4,-52}},\r\n            lineColor={255,255,255},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-46,-52},{-46,68},{54,68},{54,-52},{-46,-52},{-46,-22},\r\n                {54,-22},{54,8},{-46,8},{-46,38},{54,38},{54,68},{4,68},{4,-53}})}),\r\n      Documentation(info=\"<html>\r\n\r\n<p>\r\nThis block generates an Integer output signal by using a table.\r\nThe time points and y-values are stored in a matrix\r\n<strong>table[i,j]</strong>, where the first column table[:,1] contains the\r\nReal time points and the second column contains the Integer value of the\r\noutput y at this time point.\r\nThe table interpolation has the following properties:\r\n</p>\r\n\r\n<ul>\r\n<li>An assert is triggered, if no table values are provided, if the\r\n    time points are not strict monotonically increasing, or if\r\n    the second column of the table matrix does not contain Integer values.</li>\r\n<li>Values <strong>outside</strong> of the table range, are computed by\r\n    extrapolation according to the setting of parameter <strong>extrapolation</strong>:\r\n<blockquote><pre>\r\nextrapolation = 1: Hold the first or last value of the table,\r\n                   if outside of the table scope.\r\n              = 2: Extrapolate by using the derivative at the first/last table\r\n                   points if outside of the table scope.\r\n                   (This setting is not suitable and triggers an assert.)\r\n              = 3: Periodically repeat the table data (periodical function).\r\n              = 4: No extrapolation, i.e. extrapolation triggers an error\r\n</pre></blockquote></li>\r\n<li>If the table has only <strong>one row</strong>, no interpolation is performed and\r\n    the table values of this row are just returned.</li>\r\n<li>Via parameter <strong>shiftTime</strong> the curve defined by the table can be shifted\r\n    in time.\r\n    The time instants stored in the table are therefore <strong>relative</strong>\r\n    to <strong>shiftTime</strong>.</li>\r\n<li>If time &lt; startTime, no interpolation is performed and zero\r\n    is used as ordinate value for the output.</li>\r\n</ul>\r\n\r\n<p>\r\nExample:\r\n</p>\r\n<blockquote><pre>\r\ntable = [  0, 1;\r\n           1, 4;\r\n         1.5, 5;\r\n           2, 6];\r\n</pre></blockquote>\r\n<p>\r\nresults in the following output:\r\n</p>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Sources/IntegerTable.png\\\"\r\n     alt=\\\"IntegerTable.png\\\">\r\n</div>\r\n\r\n</html>\"));\r\n  end IntegerTable", "checksum": "999772d059c264096527e00539581bdf837ea5da", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo:2358-2492", "component_count": 2, "connection_count": 2, "variable_count": 7, "physical_quantity_count": 5, "parameter_count": 2, "equation_count": 9, "dependency_count": 13, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": true, "complexity_score": 20.0, "model_type": "system", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation assert(n > 0, \"No table values defined.\")", "search_keywords": [":, 2", "Integer", "Real", "Time", "i, 1", "mechanical", "system", "time, yi"]}, "components": [{"name": "table", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, 2]", "comment": "Table matrix"}, {"name": "n", "type_name": "Integer", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "combiTimeTable.y[1]", "to_connector": "realToInteger.u", "condition": null}, {"from_connector": "realToInteger.y", "to_connector": "y", "condition": null}], "variables": [{"name": "table", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "table,\r\n      final smoothness=Modelica.Blocks.Types.Smoothness.ConstantSegments,\r\n      final columns={2},\r\n      final extrapolation=extrapolation,\r\n      final startTime=startTime,\r\n      final shiftTime=shiftTime) \r\n    Modelica.Blocks.Math.RealToInteger realToInteger \r\n\r\n  protected\r\n      function isValidTable \"Check if table is valid\"\r\n        extends Modelica.Icons.Function", "comment": "\"Table matrix\""}, {"name": "t_last", "type_name": "SI.Time", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(table, 1) \"Number of table points\"", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "isValidTable", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "t_last", "unit": "s", "display_unit": null, "quantity": "Time", "nominal": null}, {"name": "IntegerTable", "unit": "time, yi", "display_unit": null, "quantity": null, "nominal": null}, {"name": "values", "unit": ":, 2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "valid", "unit": ":, 2", "display_unit": null, "quantity": null, "nominal": null}, {"name": "points", "unit": "i, 1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["FillPattern", "IntegerTable", "Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Types", "Modelica.Blocks.Types.Extrapolation", "Modelica.Blocks.Types.Smoothness", "Modelica.Constants", "Modelica.Icons", "SI", "combiTimeTable", "i", "realToInteger"], "inheritance_chain": ["Interfaces.IntegerSO", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Blocks.Sources.BooleanTable", "kind": "block", "name": "BooleanTable", "package_path": ["Modelica", "Blocks", "Sources"], "extends": ["Interfaces.partialBooleanSO", "Modelica.Icons.Function"], "imports": [], "parameters": [{"name": "startValue", "type": "Boolean", "default": "false \"Start value of y. At time = table[1], y changes to 'not startValue'\" parameter Modelica.Blocks.Types.Extrapolation extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLast", "description": null}, {"name": "n", "type": "Integer", "default": "size(table, 1) \"Number of table points\"", "description": null}], "equations": [{"equations": ["equation\r\n      assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")", "connect(combiTimeTable.y[1], realToBoolean.u) annotation(Line(points={{-9,0},{8,0}}, color={0,0,127}))", "connect(realToBoolean.y, y) annotation(Line(points={{31,0},{110,0},{110,0}}, color={255,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2136, "end_line": 2139, "start_col": 3, "end_col": 104}}, {"equations": ["assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")", "connect(combiTimeTable.y[1], realToBoolean.u) annotation(Line(points={{-9,0},{8,0}}, color={0,0,127}))", "connect(realToBoolean.y, y) annotation(Line(points={{31,0},{110,0},{110,0}}, color={255,127,0}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2137, "end_line": 2139, "start_col": 7, "end_col": 104}}, {"equations": ["assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2137, "end_line": 2137, "start_col": 7, "end_col": 118}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2136, "end_line": 2136, "start_col": 3, "end_col": 11}}, {"equations": ["initial algorithm\r\n      isValidTable(table)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2134, "end_line": 2135, "start_col": 3, "end_col": 27}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2134, "end_line": 2134, "start_col": 11, "end_col": 20}}, {"equations": ["algorithm\r\n        if n > 0 then\r\n          // Check whether time values are strict monotonically increasing\r\n          for i in 2:n loop\r\n            assert(table[i] > table[i-1],\r\n              \"Time values of table not strict monotonically increasing: table[\"\r\n               + String(i - 1) + \"] = \" + String(table[i - 1]) + \", table[\" +\r\n              String(i) + \"] = \" + String(table[i]))", "end for", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2121, "end_line": 2130, "start_col": 7, "end_col": 16}}, {"equations": ["algorithm"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2121, "end_line": 2121, "start_col": 7, "end_col": 16}}], "docstring": "extends Interfaces.partialBooleanSO | components: Real×1 | connections: 2 | params: startValue, n | units: :, 1, 0.0, 0.0 | eq: equation assert(extrapolation <>", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo", "start_line": 2089, "end_line": 2211, "start_col": 3, "end_col": 19}, "code_text": "block BooleanTable\r\n    \"Generate a Boolean output signal based on a vector of time instants\"\r\n\r\n    parameter SI.Time table[:]={0,1}\r\n      \"Vector of time points. At every time point, the output y gets its opposite value (e.g., table={0,1})\" annotation(Dialog(group=\"Table data definition\"));\r\n    parameter Boolean startValue=false\r\n      \"Start value of y. At time = table[1], y changes to 'not startValue'\" annotation(Dialog(group=\"Table data interpretation\",\r\n      groupImage=\"modelica://Modelica/Resources/Images/Blocks/Sources/BooleanTable.png\"));\r\n    parameter Modelica.Blocks.Types.Extrapolation extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint\r\n      \"Extrapolation of data outside the definition range\" annotation(Dialog(group=\"Table data interpretation\"));\r\n    parameter SI.Time startTime=-Modelica.Constants.inf\r\n      \"Output = false for time < startTime\" annotation(Dialog(group=\"Table data interpretation\"));\r\n    parameter SI.Time shiftTime=0\r\n      \"Shift time of table\" annotation(Dialog(group=\"Table data interpretation\"));\r\n\r\n    extends Interfaces.partialBooleanSO;\r\n\r\n    CombiTimeTable combiTimeTable(\r\n      final table=if n > 0 then if startValue then [table[1], 1.0; table, {mod(i + 1, 2.0) for i in 1:n}] else [table[1], 0.0; table, {mod(i, 2.0) for i in 1:n}] else if startValue then [0.0, 1.0] else [0.0, 0.0],\r\n      final smoothness=Modelica.Blocks.Types.Smoothness.ConstantSegments,\r\n      final columns={2},\r\n      final extrapolation=extrapolation,\r\n      final startTime=startTime,\r\n      final shiftTime=shiftTime) annotation(Placement(transformation(extent={{-30,-10},{-10,10}})));\r\n    Modelica.Blocks.Math.RealToBoolean realToBoolean annotation(Placement(transformation(extent={{10,-10},{30,10}})));\r\n\r\n  protected\r\n      function isValidTable \"Check if table is valid\"\r\n        extends Modelica.Icons.Function;\r\n        input Real table[:] \"Vector of time instants\";\r\n    protected\r\n        Integer n=size(table, 1) \"Number of table points\";\r\n      algorithm\r\n        if n > 0 then\r\n          // Check whether time values are strict monotonically increasing\r\n          for i in 2:n loop\r\n            assert(table[i] > table[i-1],\r\n              \"Time values of table not strict monotonically increasing: table[\"\r\n               + String(i - 1) + \"] = \" + String(table[i - 1]) + \", table[\" +\r\n              String(i) + \"] = \" + String(table[i]));\r\n          end for;\r\n        end if;\r\n      end isValidTable;\r\n\r\n      parameter Integer n=size(table, 1) \"Number of table points\";\r\n  initial algorithm\r\n      isValidTable(table);\r\n  equation\r\n      assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\");\r\n      connect(combiTimeTable.y[1], realToBoolean.u) annotation(Line(points={{-9,0},{8,0}}, color={0,0,127}));\r\n      connect(realToBoolean.y, y) annotation(Line(points={{31,0},{110,0},{110,0}}, color={255,127,0}));\r\n    annotation (\r\n      Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n              100}}), graphics={Polygon(\r\n            points={{-80,88},{-88,66},{-72,66},{-80,88}},\r\n            lineColor={255,0,255},\r\n            fillColor={255,0,255},\r\n            fillPattern=FillPattern.Solid),\r\n          Line(points={{-80,66},{-80,-82}}, color={255,0,255}),\r\n          Line(points={{-90,-70},{72,-70}}, color={255,0,255}),\r\n          Polygon(\r\n            points={{90,-70},{68,-62},{68,-78},{90,-70}},\r\n            lineColor={255,0,255},\r\n            fillColor={255,0,255},\r\n            fillPattern=FillPattern.Solid),\r\n          Rectangle(\r\n            extent={{-18,70},{32,-50}},\r\n            lineColor={255,255,255},\r\n            fillColor={192,192,192},\r\n            fillPattern=FillPattern.Solid), Line(points={{-18,-50},{-18,70},{32,\r\n                70},{32,-50},{-18,-50},{-18,-20},{32,-20},{32,10},{-18,10},{-18,\r\n                40},{32,40},{32,70},{32,70},{32,-51}})}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe Boolean output y is a signal defined by parameter vector <strong>table</strong>.\r\nIn the vector time points are stored.\r\nThe table interpolation has the following properties:\r\n</p>\r\n\r\n<ul>\r\n<li>At every time point, the output y\r\n    changes its value to the negated value of the previous one.</li>\r\n<li>Values <strong>outside</strong> of the table range, are computed by\r\n    extrapolation according to the setting of parameter <strong>extrapolation</strong>:\r\n<blockquote><pre>\r\nextrapolation = 1: Hold the <strong>startValue</strong> or last value of the table,\r\n                   if outside of the table scope.\r\n              = 2: Extrapolate by using the derivative at the first/last table\r\n                   points if outside of the table scope.\r\n                   (This setting is not suitable and triggers an assert.)\r\n              = 3: Periodically repeat the table data (periodical function).\r\n              = 4: No extrapolation, i.e. extrapolation triggers an error\r\n</pre></blockquote></li>\r\n<li>Via parameter <strong>shiftTime</strong> the curve defined by the table can be shifted\r\n    in time.\r\n    The time instants stored in the table are therefore <strong>relative</strong>\r\n    to <strong>shiftTime</strong>.</li>\r\n<li>If time &lt; startTime, no interpolation is performed and <strong>false</strong>\r\n    is used as ordinate value for the output.</li>\r\n</ul>\r\n\r\n<div>\r\n<img src=\\\"modelica://Modelica/Resources/Images/Blocks/Sources/BooleanTable.png\\\"\r\n     alt=\\\"BooleanTable.png\\\">\r\n</div>\r\n\r\n<p>\r\nThe precise semantics is:\r\n</p>\r\n\r\n<blockquote><pre>\r\n<strong>if</strong> size(table,1) == 0 <strong>then</strong>\r\n   y = startValue;\r\n<strong>else</strong>\r\n   //            time &lt; table[1]: y = startValue\r\n   // table[1] &le; time &lt; table[2]: y = not startValue\r\n   // table[2] &le; time &lt; table[3]: y = startValue\r\n   // table[3] &le; time &lt; table[4]: y = not startValue\r\n   // ...\r\n<strong>end if</strong>;\r\n</pre></blockquote>\r\n</html>\"));\r\n  end BooleanTable", "checksum": "14210c11ee58b5a465b5d924961d68a3821459b2", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Sources.mo:2089-2211", "component_count": 1, "connection_count": 2, "variable_count": 7, "physical_quantity_count": 5, "parameter_count": 2, "equation_count": 8, "dependency_count": 14, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": false, "complexity_score": 17.0, "model_type": "component", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation assert(extrapolation <> Modelica.Blocks.Types.Extrapolation.LastTwoPoints, \"Unsuitable extrapolation setting.\")", "search_keywords": ["0.0, 0.0", "Real", "component", "i-1"]}, "components": [{"name": "table", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:]", "comment": "Vector of time instants"}], "connections": [{"from_connector": "combiTimeTable.y[1]", "to_connector": "realToBoolean.u", "condition": null}, {"from_connector": "realToBoolean.y", "to_connector": "y", "condition": null}], "variables": [{"name": "table", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": "if n > 0 then if startValue then [table[1], 1.0", "comment": "\"Vector of time instants\""}, {"name": "smoothness", "type_name": "final", "prefixes": [], "attributes": {}, "binding_equation": "Modelica.Blocks.Types.Smoothness.ConstantSegments,\r\n      final columns={2},\r\n      final extrapolation=extrapolation,\r\n      final startTime=startTime,\r\n      final shiftTime=shiftTime) \r\n    Modelica.Blocks.Math.RealToBoolean realToBoolean \r\n\r\n  protected\r\n      function isValidTable \"Check if table is valid\"\r\n        extends Modelica.Icons.Function", "comment": null}, {"name": "n", "type_name": "Integer", "prefixes": [], "attributes": {}, "binding_equation": "size(table, 1) \"Number of table points\"", "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "isValidTable", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "assert", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "instants", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "false", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}, {"name": "interpretation", "unit": "0.0, 0.0", "display_unit": null, "quantity": null, "nominal": null}, {"name": "valid", "unit": ":", "display_unit": null, "quantity": null, "nominal": null}, {"name": "points", "unit": "i-1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["BooleanTable", "FillPattern", "Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Types", "Modelica.Blocks.Types.Extrapolation", "Modelica.Blocks.Types.Smoothness", "Modelica.Constants", "Modelica.Icons", "SI", "combiTimeTable", "e", "i", "realToBoolean"], "inheritance_chain": ["Interfaces.partialBooleanSO", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Electrical.PowerConverters.ACAC.Control.VoltageToAngle", "kind": "block", "name": "VoltageToAngle", "package_path": ["Modelica", "Electrical", "PowerConverters", "ACAC", "Control"], "extends": ["Modelica.Blocks.Icons.Block"], "imports": ["Modelica.Constants.pi"], "parameters": [{"name": "voltage2Angle", "type": "PowerConverters.Types.Voltage2AngleType", "default": "PowerConverters.Types.Voltage2AngleType.Lin \"Select type of calculation\"", "description": null}, {"name": "VNominal \"Nominal voltage\"", "type": "SI.Voltage", "default": "", "description": null}], "equations": [{"equations": ["equation\r\n  connect(limiter.y, combiTable1Ds.u)\r\n    annotation (Line(points={{-19,0},{-2,0}}, color={0,0,127}))", "connect(vRef, gain_v.u)\r\n    annotation (Line(points={{-120,0},{-82,0}}, color={0,0,127}))", "connect(gain_alpha.y, firingAngle)\r\n    annotation (Line(points={{61,0},{110,0}}, color={0,0,127}))", "connect(combiTable1Ds.y[1], gain_alpha.u)\r\n    annotation (Line(points={{21,0},{38,0}}, color={0,0,127}))", "connect(gain_v.y, limiter.u)\r\n    annotation (Line(points={{-59,0},{-42,0}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\PowerConverters\\ACAC\\Control\\VoltageToAngle.mo", "start_line": 56, "end_line": 66, "start_col": 1, "end_col": 66}}, {"equations": ["connect(limiter.y, combiTable1Ds.u)\r\n    annotation (Line(points={{-19,0},{-2,0}}, color={0,0,127}))", "connect(vRef, gain_v.u)\r\n    annotation (Line(points={{-120,0},{-82,0}}, color={0,0,127}))", "connect(gain_alpha.y, firingAngle)\r\n    annotation (Line(points={{61,0},{110,0}}, color={0,0,127}))", "connect(combiTable1Ds.y[1], gain_alpha.u)\r\n    annotation (Line(points={{21,0},{38,0}}, color={0,0,127}))", "connect(gain_v.y, limiter.u)\r\n    annotation (Line(points={{-59,0},{-42,0}}, color={0,0,127}))"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\PowerConverters\\ACAC\\Control\\VoltageToAngle.mo", "start_line": 57, "end_line": 66, "start_col": 3, "end_col": 66}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\PowerConverters\\ACAC\\Control\\VoltageToAngle.mo", "start_line": 56, "end_line": 56, "start_col": 1, "end_col": 9}}], "docstring": "extends Modelica.Blocks.Icons.Block | components: Real×2 | connections: 5 | params: voltage2Angle, VNominal \"Nominal voltage\" | units: 1 | eq: equation connect(", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\PowerConverters\\ACAC\\Control\\VoltageToAngle.mo", "start_line": 2, "end_line": 84, "start_col": 1, "end_col": 19}, "code_text": "block VoltageToAngle \"Reference voltage to firing angle converter\"\r\n  extends Modelica.Blocks.Icons.Block;\r\n  import Modelica.Constants.pi;\r\n  parameter SI.Voltage VNominal \"Nominal voltage\";\r\n  parameter PowerConverters.Types.Voltage2AngleType voltage2Angle=\r\n      PowerConverters.Types.Voltage2AngleType.Lin \"Select type of calculation\";\r\n  Modelica.Blocks.Interfaces.RealInput vRef \"Reference voltage\"\r\n    annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n  Modelica.Blocks.Interfaces.RealOutput firingAngle(\r\n    unit=\"rad\",\r\n    displayUnit=\"deg\",\r\n    min=0,\r\n    max=pi,\r\n    start=pi) \"Firing angle\"\r\n    annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n  Modelica.Blocks.Math.Gain gain_v(final k=1/VNominal)\r\n    annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));\r\n  Modelica.Blocks.Nonlinear.Limiter limiter(final uMax=1, final uMin=0)\r\n    annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));\r\n  Modelica.Blocks.Tables.CombiTable1Ds combiTable1Ds(final table=\r\n    if voltage2Angle ==PowerConverters.Types.Voltage2AngleType.Lin then Lin\r\n    elseif voltage2Angle ==PowerConverters.Types.Voltage2AngleType.H01 then H01\r\n    else RMS, final extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint)\r\n    annotation (Placement(transformation(extent={{0,-10},{20,10}})));\r\n  Modelica.Blocks.Math.Gain gain_alpha(final k=pi)\r\n    annotation (Placement(transformation(extent={{40,-10},{60,10}})));\r\nprotected\r\n  constant Real Lin[:,2]=[0,1; 1,0];\r\n  constant Real H01[:,2]=[0,1;\r\n    7.85377E-05,0.995; 0.000314125,0.99; 0.000706684,0.985; 0.001256086,0.98;\r\n    0.00196215,0.975; 0.007832473,0.95; 0.017562721,0.925; 0.031072921,0.9;\r\n    0.048252035,0.875; 0.068958879,0.85; 0.093023287,0.825; 0.120247535,0.8;\r\n    0.150407987,0.775; 0.183256979,0.75; 0.218524917,0.725; 0.255922582,0.7;\r\n    0.295143624,0.675; 0.33586724,0.65; 0.377761016,0.625; 0.420483922,0.6;\r\n    0.463689446,0.575; 0.507028849,0.55; 0.550154538,0.525; 0.592723531,0.5;\r\n    0.634401018,0.475; 0.674864,0.45; 0.713804992,0.425; 0.750935807,0.4;\r\n    0.785991389,0.375; 0.818733724,0.35; 0.848955796,0.325; 0.87648563,0.3;\r\n    0.901190381,0.275; 0.922980502,0.25; 0.941813955,0.225; 0.957700455,0.2;\r\n    0.97070568,0.175; 0.980955368,0.15; 0.988639134,0.125; 0.994013774,0.1;\r\n    0.997405692,0.075; 0.999211945,0.05; 0.999899238,0.025; 0.999948191,0.02;\r\n    0.999978053,0.015; 0.999993471,0.01; 0.999999181,0.005; 1,0];\r\n  constant Real RMS[:,2]=[0,1;\r\n    0.000906877,0.995; 0.002564847,0.99; 0.004711343,0.985; 0.007252334,0.98;\r\n    0.010133194,0.975; 0.028608003,0.95; 0.052394349,0.925; 0.080318563,0.9;\r\n    0.111626433,0.875; 0.14574274,0.85; 0.182186463,0.825; 0.22053266,0.8;\r\n    0.260393008,0.775; 0.301405137,0.75; 0.343226628,0.725; 0.385531651,0.7;\r\n    0.428009237,0.675; 0.470362569,0.65; 0.51230895,0.625; 0.553580231,0.6;\r\n    0.593923537,0.575; 0.633102218,0.55; 0.670896923,0.525; 0.707106781,0.5;\r\n    0.741550618,0.475; 0.774068203,0.45; 0.804521493,0.425; 0.83279585,0.4;\r\n    0.858801222,0.375; 0.882473259,0.35; 0.903774359,0.325; 0.922694611,0.3;\r\n    0.939252619,0.275; 0.953496168,0.25; 0.965502709,0.225; 0.975379591,0.2;\r\n    0.983263999,0.175; 0.989322523,0.15; 0.99375024,0.125; 0.996769245,0.1;\r\n    0.998626473,0.075; 0.999590707,0.05; 0.999948658,0.025; 0.999973701,0.02;\r\n    0.999988902,0.015; 0.999996711,0.01; 0.999999589,0.005; 1,0];\r\nequation\r\n  connect(limiter.y, combiTable1Ds.u)\r\n    annotation (Line(points={{-19,0},{-2,0}}, color={0,0,127}));\r\n  connect(vRef, gain_v.u)\r\n    annotation (Line(points={{-120,0},{-82,0}}, color={0,0,127}));\r\n  connect(gain_alpha.y, firingAngle)\r\n    annotation (Line(points={{61,0},{110,0}}, color={0,0,127}));\r\n  connect(combiTable1Ds.y[1], gain_alpha.u)\r\n    annotation (Line(points={{21,0},{38,0}}, color={0,0,127}));\r\n  connect(gain_v.y, limiter.u)\r\n    annotation (Line(points={{-59,0},{-42,0}}, color={0,0,127}));\r\n  annotation (Documentation(info=\"<html>\r\n<p>\r\nThis block calculates firing angle from desired voltage,\r\nchoosing either a linear (<code>Lin</code>) relationship or prescribing the first harmonic (<code>H01</code>)  or the root mean square (<code>RMS</code>) .\r\nSince calculating the firing angle from both the H01 and the RMS involves a nonlinear equation,\r\nboth relationships have been precalculated and are interpolated from a table.\r\n</p>\r\n</html>\"), Icon(coordinateSystem(grid={2,2}),\r\n                graphics={\r\n        Line(points={{-55.1,66.4},{-49.4,74.6},{-43.8,79.1},{-38.2,79.8},{-32.6,\r\n              76.6},{-26.9,69.7},{-21.3,59.4},{-14.9,44.1},{-6.83,21.2},{0,0}},\r\n                                                            smooth = Smooth.Bezier),\r\n        Line(points={{-80,0},{80,0}}, color={28,108,200}),\r\n        Line(points={{-55,66},{-55,0},{-80,0}}, color={0,0,0}),\r\n        Line(points={{26,-68},{35,-78.4},{40.6,-80},{46.2,-77.6},{51.9,-71.5},{57.5,\r\n              -61.9},{63.9,-47.2},{72,-24.8},{80,0}},       smooth = Smooth.Bezier),\r\n        Line(points={{0,0},{26,0},{26,-68}}, color={0,0,0})}));\r\nend VoltageToAngle", "checksum": "2c1e1219c0bc6c105f17a371498e2b09ea4de3a0", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\PowerConverters\\ACAC\\Control\\VoltageToAngle.mo:2-84", "component_count": 2, "connection_count": 5, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 2, "equation_count": 3, "dependency_count": 16, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": true, "complexity_score": 23.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation connect(limiter.y, combiTable1Ds.u) annotation (Line(points={{-19,0},{-2,0}}, color={0,0,127}))", "search_keywords": ["Real", "system"]}, "components": [{"name": "H01", "type_name": "Real", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": "[:,2]", "comment": null}, {"name": "RMS", "type_name": "Real", "prefixes": ["constant"], "modifications": {}, "condition": null, "array_dims": "[:,2]", "comment": null}], "connections": [{"from_connector": "limiter.y", "to_connector": "combiTable1Ds.u", "condition": null}, {"from_connector": "vRef", "to_connector": "gain_v.u", "condition": null}, {"from_connector": "gain_alpha.y", "to_connector": "firingAngle", "condition": null}, {"from_connector": "combiTable1Ds.y[1]", "to_connector": "gain_alpha.u", "condition": null}, {"from_connector": "gain_v.y", "to_connector": "limiter.u", "condition": null}], "variables": [{"name": "voltage2Angle", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "PowerConverters.Types.Voltage2AngleType.Lin then Lin\r\n    elseif voltage2Angle ==PowerConverters.Types.Voltage2AngleType.H01 then H01\r\n    else RMS, final extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint)\r\n    \r\n  Modelica.Blocks.Math.Gain gain_alpha(final k=pi)\r\n    \r\nprotected\r\n  constant Real Lin[:,2]=[0,1", "comment": null}], "physical_quantities": [{"name": "angle", "unit": "1", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Blocks.Icons", "Modelica.Blocks.Interfaces", "Modelica.Blocks.Math", "Modelica.Blocks.Nonlinear", "Modelica.Blocks.Tables", "Modelica.Blocks.Types.Extrapolation", "Modelica.Constants", "Modelica.Constants.pi", "PowerConverters.Types", "PowerConverters.Types.Voltage2AngleType", "SI", "Smooth", "combiTable1Ds", "gain_alpha", "gain_v", "limiter"], "inheritance_chain": ["Modelica.Blocks.Icons.Block"]}
{"fqn": "Modelica.StateGraph.Interfaces.PartialStep", "kind": "block", "name": "PartialStep", "package_path": ["Modelica", "StateGraph", "Interfaces"], "extends": [], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "// set active state\r\n    localActive = pre(newActive)", "newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend", "// Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when", "// Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for", "for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for", "// Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for", "for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1911, "end_line": 1965, "start_col": 3, "end_col": 13}}, {"equations": ["connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "// Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for", "// set active state\r\n    localActive = pre(newActive)", "newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend", "// Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when", "// Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for", "for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for", "// Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for", "for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1912, "end_line": 1965, "start_col": 5, "end_col": 13}}, {"equations": ["for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1961, "end_line": 1965, "start_col": 5, "end_col": 12}}, {"equations": ["if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1962, "end_line": 1964, "start_col": 7, "end_col": 14}}, {"equations": ["outPort[i].reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1963, "end_line": 1963, "start_col": 9, "end_col": 34}}, {"equations": ["for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1955, "end_line": 1959, "start_col": 5, "end_col": 12}}, {"equations": ["if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1956, "end_line": 1958, "start_col": 7, "end_col": 14}}, {"equations": ["inPort[i].set = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1957, "end_line": 1957, "start_col": 9, "end_col": 31}}, {"equations": ["for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1948, "end_line": 1952, "start_col": 5, "end_col": 12}}, {"equations": ["outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1949, "end_line": 1951, "start_col": 8, "end_col": 65}}, {"equations": ["for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1942, "end_line": 1946, "start_col": 5, "end_col": 12}}, {"equations": ["inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1943, "end_line": 1945, "start_col": 7, "end_col": 59}}, {"equations": ["when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1937, "end_line": 1939, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1939, "end_line": 1939, "start_col": 9, "end_col": 13}}, {"equations": ["oldActive = localActive"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1938, "end_line": 1938, "start_col": 7, "end_col": 31}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1937, "end_line": 1937, "start_col": 5, "end_col": 9}}, {"equations": ["newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1929, "end_line": 1934, "start_col": 5, "end_col": 70}}, {"equations": ["localActive = pre(newActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1928, "end_line": 1928, "start_col": 5, "end_col": 33}}, {"equations": ["for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1921, "end_line": 1925, "start_col": 5, "end_col": 12}}, {"equations": ["assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1923, "end_line": 1924, "start_col": 5, "end_col": 88}}, {"equations": ["for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")", "end for"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1915, "end_line": 1919, "start_col": 5, "end_col": 12}}, {"equations": ["assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\")"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1917, "end_line": 1918, "start_col": 5, "end_col": 88}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1911, "end_line": 1911, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(newActive) = pre(localActive)", "pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1908, "end_line": 1910, "start_col": 3, "end_col": 39}}, {"equations": ["pre(newActive) = pre(localActive)", "pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1909, "end_line": 1910, "start_col": 5, "end_col": 39}}, {"equations": ["pre(oldActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1910, "end_line": 1910, "start_col": 5, "end_col": 38}}, {"equations": ["pre(newActive) = pre(localActive)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1909, "end_line": 1909, "start_col": 5, "end_col": 38}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1908, "end_line": 1908, "start_col": 11, "end_col": 19}}, {"equations": ["equation\r\n      subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1900, "end_line": 1901, "start_col": 5, "end_col": 72}}, {"equations": ["subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1901, "end_line": 1901, "start_col": 7, "end_col": 72}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1900, "end_line": 1900, "start_col": 5, "end_col": 13}}], "docstring": "components: Boolean×2, CompositeStepStatePort_in×1, OuterStatePort×1 | connections: 1 | units: nIn, nOut, i | eq: equation connect(outerStatePort.subgraphStateP", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo", "start_line": 1878, "end_line": 1966, "start_col": 3, "end_col": 18}, "code_text": "partial block PartialStep\r\n      \"Partial step with one input and one output transition port\"\r\n\r\n    parameter Integer nIn(min=0) = 0 \"Number of input connections\" annotation(Dialog(connectorSizing=true), HideResult=true);\r\n    parameter Integer nOut(min=0) = 0 \"Number of output connections\" annotation(Dialog(connectorSizing=true), HideResult=true);\r\n\r\n    /* localActive is introduced since component 'Step' has Boolean variable 'active'\r\n     and component 'StepWithSignal' has connector instance 'active' defined\r\n     and both components inherit from PartialStep\r\n  */\r\n    output Boolean localActive\r\n        \"= true, if step is active, otherwise the step is not active\"\r\n      annotation (HideResult=true);\r\n    Interfaces.Step_in inPort[nIn] \"Vector of step input connectors\"\r\n      annotation (Placement(transformation(extent={{-120,10},{-100,-10}})));\r\n    Interfaces.Step_out outPort[nOut] \"Vector of step output connectors\"\r\n      annotation (Placement(transformation(extent={{100,5},{110,-5}})));\r\n    protected\r\n    outer Interfaces.CompositeStepState stateGraphRoot;\r\n    model OuterStatePort\r\n      CompositeStepStatePort_in subgraphStatePort;\r\n      input Boolean localActive;\r\n    equation\r\n      subgraphStatePort.activeSteps = if localActive then 1.0 else 0.0;\r\n    end OuterStatePort;\r\n    OuterStatePort outerStatePort(localActive=localActive);\r\n\r\n    Boolean newActive \"Value of active in the next iteration\"\r\n      annotation (HideResult=true);\r\n    Boolean oldActive \"Value of active when CompositeStep was aborted\";\r\n  initial equation\r\n    pre(newActive) = pre(localActive);\r\n    pre(oldActive) = pre(localActive);\r\n  equation\r\n    connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort);\r\n\r\n    // Check that connections to the connector are correct\r\n    for i in 1:nIn loop\r\n\r\n    assert(cardinality(inPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\");\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n\r\n    assert(cardinality(outPort[i]) <= 1,\r\n           \"Connector is connected to more than one transition (this is not allowed)\");\r\n    end for;\r\n\r\n    // set active state\r\n    localActive = pre(newActive);\r\n    newActive = if outerStatePort.subgraphStatePort.resume then\r\n                     oldActive else\r\n                     ( Modelica.Math.BooleanVectors.anyTrue(inPort.set) or\r\n                          localActive\r\n                       and not Modelica.Math.BooleanVectors.anyTrue(outPort.reset))\r\n                     and not outerStatePort.subgraphStatePort.suspend;\r\n\r\n    // Remember state for suspend action\r\n    when outerStatePort.subgraphStatePort.suspend then\r\n      oldActive = localActive;\r\n    end when;\r\n\r\n    // Report state to input and output transitions\r\n    for i in 1:nIn loop\r\n      inPort[i].occupied = if i == 1 then localActive else\r\n                                          inPort[i-1].occupied or\r\n                                          inPort[i-1].set;\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n       outPort[i].available = if i == 1 then localActive else\r\n                                             outPort[i-1].available and not\r\n                                             outPort[i-1].reset;\r\n    end for;\r\n\r\n    // Default setting, if an inPort or an outPort is not connected\r\n    for i in 1:nIn loop\r\n      if cardinality(inPort[i]) == 0 then\r\n        inPort[i].set = false;\r\n      end if;\r\n    end for;\r\n\r\n    for i in 1:nOut loop\r\n      if cardinality(outPort[i]) == 0 then\r\n        outPort[i].reset = false;\r\n      end if;\r\n    end for;\r\n  end PartialStep", "checksum": "1617a85cb09bedc4534b412935eb4d6826c4eb88", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\StateGraph.mo:1878-1966", "component_count": 4, "connection_count": 1, "variable_count": 11, "physical_quantity_count": 3, "parameter_count": 0, "equation_count": 31, "dependency_count": 8, "has_physical_interface": true, "interface_component_count": 1, "has_connections": true, "is_composite_model": true, "complexity_score": 42.0, "model_type": "system", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation connect(outerStatePort.subgraphStatePort, stateGraphRoot.subgraphStatePort)", "search_keywords": ["Boolean", "CompositeStepStatePort_in", "OuterStatePort", "nIn", "nOut", "system"]}, "components": [{"name": "subgraphStatePort", "type_name": "CompositeStepStatePort_in", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "localActive", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "outerStatePort", "type_name": "OuterStatePort", "prefixes": [], "modifications": {"localActive": "localActive"}, "condition": null, "array_dims": null, "comment": null}, {"name": "oldActive", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": "Value of active when CompositeStep was aborted"}], "connections": [{"from_connector": "outerStatePort.subgraphStatePort", "to_connector": "stateGraphRoot.subgraphStatePort", "condition": null}], "variables": [{"name": "stateGraphRoot", "type_name": "Interfaces.CompositeStepState", "prefixes": ["outer"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "subgraphStatePort", "type_name": "CompositeStepStatePort_in", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "localActive", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "OuterStatePort", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "outerStatePort", "type_name": "OuterStatePort", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "oldActive", "type_name": "Boolean", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Value of active when CompositeStep was aborted\""}, {"name": "connect", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "for", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "cardinality", "type_name": "if", "prefixes": [], "attributes": {}, "binding_equation": "0 then\r\n        outPort[i].reset = false", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "active", "unit": "nIn", "display_unit": null, "quantity": null, "nominal": null}, {"name": "connectors", "unit": "nOut", "display_unit": null, "quantity": null, "nominal": null}, {"name": "aborted", "unit": "i", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Interfaces", "Modelica.Math.BooleanVectors", "inPort", "outPort", "outerStatePort", "outerStatePort.subgraphStatePort", "stateGraphRoot", "subgraphStatePort"], "inheritance_chain": []}
{"fqn": "Modelica.Blocks.MathInteger.TriggeredAdd", "kind": "block", "name": "TriggeredAdd", "package_path": ["Modelica", "Blocks", "MathInteger"], "extends": ["Modelica.Blocks.Interfaces.PartialIntegerSISO"], "imports": [], "parameters": [{"name": "use_reset", "type": "Boolean", "default": "false \"= true, if reset port enabled\" parameter Boolean use_set = false \"= true, if set port enabled and used as default value when reset\" parameter Integer y_start = 0 \"Initial an", "description": null}], "equations": [{"equations": ["equation\r\n    if use_reset then\r\n       connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if", "else\r\n       local_reset = false", "local_set = 0", "end if", "when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 211, "end_line": 226, "start_col": 3, "end_col": 14}}, {"equations": ["if use_reset then\r\n       connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if", "else\r\n       local_reset = false", "local_set = 0", "end if", "when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 212, "end_line": 226, "start_col": 5, "end_col": 14}}, {"equations": ["when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 224, "end_line": 226, "start_col": 5, "end_col": 13}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 226, "end_line": 226, "start_col": 9, "end_col": 13}}, {"equations": ["y = if local_reset then local_set else pre(y) + u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 225, "end_line": 225, "start_col": 8, "end_col": 58}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 224, "end_line": 224, "start_col": 5, "end_col": 9}}, {"equations": ["if use_reset then\r\n       connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if", "else\r\n       local_reset = false", "local_set = 0", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 212, "end_line": 222, "start_col": 5, "end_col": 11}}, {"equations": ["local_reset = false", "local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 220, "end_line": 221, "start_col": 8, "end_col": 22}}, {"equations": ["local_set = 0"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 221, "end_line": 221, "start_col": 8, "end_col": 21}}, {"equations": ["local_reset = false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 220, "end_line": 220, "start_col": 8, "end_col": 27}}, {"equations": ["connect(reset, local_reset)", "if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 213, "end_line": 218, "start_col": 8, "end_col": 17}}, {"equations": ["if use_set then\r\n           connect(set, local_set)", "else\r\n           local_set = y_start", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 214, "end_line": 218, "start_col": 10, "end_col": 16}}, {"equations": ["local_set = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 217, "end_line": 217, "start_col": 12, "end_col": 32}}, {"equations": ["connect(set, local_set)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 215, "end_line": 215, "start_col": 12, "end_col": 36}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 211, "end_line": 211, "start_col": 3, "end_col": 11}}, {"equations": ["initial equation\r\n    pre(y) = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 209, "end_line": 210, "start_col": 3, "end_col": 22}}, {"equations": ["pre(y) = y_start"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 210, "end_line": 210, "start_col": 5, "end_col": 22}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 209, "end_line": 209, "start_col": 11, "end_col": 19}}], "docstring": "extends Modelica.Blocks.Interfaces.PartialIntegerSISO | components: Modelica.Blocks.Interfaces.IntegerOutput×1 | connections: 2 | params: use_reset | eq: equati", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo", "start_line": 177, "end_line": 279, "start_col": 3, "end_col": 19}, "code_text": "block TriggeredAdd\r\n    \"Add input to previous value of output, if rising edge of trigger port\"\r\n    extends Modelica.Blocks.Interfaces.PartialIntegerSISO;\r\n\r\n    parameter Boolean use_reset = false \"= true, if reset port enabled\"\r\n          annotation(Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Boolean use_set = false\r\n      \"= true, if set port enabled and used as default value when reset\"\r\n          annotation(Dialog(enable=use_reset), Evaluate=true, HideResult=true, choices(checkBox=true));\r\n    parameter Integer y_start = 0\r\n      \"Initial and reset value of y if set port is not used\";\r\n\r\n    Modelica.Blocks.Interfaces.BooleanInput trigger annotation (Placement(\r\n          transformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=90,\r\n          origin={-60,-120})));\r\n    Modelica.Blocks.Interfaces.BooleanInput reset if use_reset annotation (Placement(\r\n          transformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=90,\r\n          origin={60,-120})));\r\n    Modelica.Blocks.Interfaces.IntegerInput set if use_set annotation (Placement(transformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=270,\r\n          origin={60,120}), iconTransformation(\r\n          extent={{-20,-20},{20,20}},\r\n          rotation=270,\r\n          origin={28,98})));\r\n  protected\r\n    Modelica.Blocks.Interfaces.BooleanOutput local_reset annotation(HideResult=true);\r\n    Modelica.Blocks.Interfaces.IntegerOutput local_set;\r\n  initial equation\r\n    pre(y) = y_start;\r\n  equation\r\n    if use_reset then\r\n       connect(reset, local_reset);\r\n         if use_set then\r\n           connect(set, local_set);\r\n         else\r\n           local_set = y_start;\r\n         end if;\r\n    else\r\n       local_reset = false;\r\n       local_set = 0;\r\n    end if;\r\n\r\n    when {trigger, local_reset} then\r\n       y = if local_reset then local_set else pre(y) + u;\r\n    end when;\r\n    annotation (Icon(coordinateSystem(\r\n            preserveAspectRatio=false, extent={{-100,-100},{100,100}},\r\n          initialScale=0.06), graphics={\r\n            Line(\r\n              points={{-100,0},{32,76}},\r\n              color={255,128,0},\r\n              pattern=LinePattern.Dot),\r\n            Line(\r\n              points={{-100,0},{32,-20}},\r\n              color={255,128,0},\r\n              pattern=LinePattern.Dot),\r\n            Line(\r\n              points={{-54,-56},{-26,-56},{-26,-20},{32,-20},{32,76}}),\r\n            Line(\r\n              points={{-60,-100},{32,-20}},\r\n              color={255,0,255},\r\n              pattern=LinePattern.Dot),\r\n            Text(\r\n              visible=use_reset,\r\n              extent={{-28,-62},{94,-86}},\r\n              textString=\"reset\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nAdd input to previous value of output, if rising edge of trigger port\r\n</p>\r\n\r\n<p>\r\nThis block has one Integer input \\\"u\\\", one Boolean input \\\"trigger\\\",\r\nan optional Boolean input \\\"reset\\\", an optional Integer input \\\"set\\\", and\r\nan Integer output \\\"y\\\".\r\nThe optional inputs can be activated with the \\\"use_reset\\\" and\r\n\\\"use_set\\\" flags, respectively.\r\n</p>\r\n\r\n<p>\r\nThe input \\\"u\\\" is added to the previous value of the\r\noutput \\\"y\\\" if the \\\"trigger\\\" port has a rising edge. At the start of the\r\nsimulation \\\"y = y_start\\\".\r\n</p>\r\n\r\n<p>\r\nIf the \\\"reset\\\" port is enabled, then the output \\\"y\\\" is reset to \\\"set\\\"\r\nor to \\\"y_start\\\" (if the \\\"set\\\" port is not enabled), whenever the \\\"reset\\\"\r\nport has a rising edge.\r\n</p>\r\n\r\n<p>\r\nThe usage is demonstrated, e.g., in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.IntegerNetwork1\\\">Modelica.Blocks.Examples.IntegerNetwork1</a>.\r\n</p>\r\n\r\n</html>\"));\r\n  end TriggeredAdd", "checksum": "6abe56ed432eeb1e5e80f607ce8d7cc94afc3558", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathInteger.mo:177-279", "component_count": 1, "connection_count": 2, "variable_count": 4, "physical_quantity_count": 0, "parameter_count": 1, "equation_count": 18, "dependency_count": 4, "has_physical_interface": false, "interface_component_count": 0, "has_connections": true, "is_composite_model": false, "complexity_score": 26.5, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation if(条件なら) use_reset then connect(reset, local_reset)", "search_keywords": ["Modelica.Blocks.Interfaces.IntegerOutput", "basic"]}, "components": [{"name": "local_set", "type_name": "Modelica.Blocks.Interfaces.IntegerOutput", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [{"from_connector": "reset", "to_connector": "local_reset", "condition": null}, {"from_connector": "set", "to_connector": "local_set", "condition": null}], "variables": [{"name": "local_set", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "y_start", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "local_reset", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "false", "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["LinePattern", "Modelica.Blocks.Examples", "Modelica.Blocks.Interfaces", "e"], "inheritance_chain": ["Modelica.Blocks.Interfaces.PartialIntegerSISO"]}
{"fqn": "Modelica.Blocks.Routing.Replicator", "kind": "block", "name": "Replicator", "package_path": ["Modelica", "Blocks", "Routing"], "extends": ["Modelica.Blocks.Interfaces.SIMO"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    y = fill(u, nout)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Routing.mo", "start_line": 7, "end_line": 8, "start_col": 3, "end_col": 23}}, {"equations": ["y = fill(u, nout)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Routing.mo", "start_line": 8, "end_line": 8, "start_col": 5, "end_col": 23}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Routing.mo", "start_line": 7, "end_line": 7, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Blocks.Interfaces.SIMO | eq: equation y = fill(u, nout)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Routing.mo", "start_line": 5, "end_line": 26, "start_col": 3, "end_col": 17}, "code_text": "block Replicator \"Signal replicator\"\r\n    extends Modelica.Blocks.Interfaces.SIMO;\r\n  equation\r\n    y = fill(u, nout);\r\n    annotation (\r\n      Icon(coordinateSystem(\r\n          preserveAspectRatio=false,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-100,0},{-6,0}}, color={0,0,127}),\r\n          Line(points={{100,0},{10,0}}, color={0,0,127}),\r\n          Line(points={{0,0},{100,10}}, color={0,0,127}),\r\n          Line(points={{0,0},{100,-10}}, color={0,0,127}),\r\n          Ellipse(\r\n            extent={{-15,15},{15,-15}},\r\n            fillColor={0,0,127},\r\n            fillPattern=FillPattern.Solid)}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis block replicates the input signal to an array of <code>nout</code> identical output signals.\r\n</p>\r\n</html>\"));\r\n  end Replicator", "checksum": "ff9f6a0eec79f8821e2e06187b53a916cbc35582", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Routing.mo:5-26", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 2, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 3.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation y = fill(u, nout)", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "fill(u, nout)", "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern", "Modelica.Blocks.Interfaces"], "inheritance_chain": ["Modelica.Blocks.Interfaces.SIMO"]}
{"fqn": "Modelica.Clocked.BooleanSignals.Sampler.AssignClockVectorized", "kind": "block", "name": "AssignClockVectorized", "package_path": ["Modelica", "Clocked", "BooleanSignals", "Sampler"], "extends": [], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  when clock then\r\n    y = u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 17, "end_line": 20, "start_col": 1, "end_col": 12}}, {"equations": ["when clock then\r\n    y = u", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 18, "end_line": 20, "start_col": 3, "end_col": 12}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 20, "end_line": 20, "start_col": 7, "end_col": 11}}, {"equations": ["y = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 19, "end_line": 19, "start_col": 5, "end_col": 11}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 18, "end_line": 18, "start_col": 3, "end_col": 7}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 17, "end_line": 17, "start_col": 1, "end_col": 9}}], "docstring": "units: n | eq: equation when(条件成立時)(条件成立時) clock then y = u", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo", "start_line": 2, "end_line": 82, "start_col": 1, "end_col": 26}, "code_text": "block AssignClockVectorized\r\n  \"Assign a clock to a clocked Boolean signal vector\"\r\n  parameter Integer n(min=1)=1\r\n    \"Size of input signal vector u (= size of output signal vector y)\";\r\n  Modelica.Blocks.Interfaces.BooleanInput u[n]\r\n    \"Connector of clocked, Boolean input signal\"\r\n    annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n  Modelica.Blocks.Interfaces.BooleanOutput y[n]\r\n    \"Connector of clocked, Boolean output signal\"\r\n    annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\n  Clocked.ClockSignals.Interfaces.ClockInput clock annotation (Placement(\r\n        transformation(\r\n        extent={{-20,-20},{20,20}},\r\n        rotation=90,\r\n        origin={0,-120})));\r\nequation\r\n  when clock then\r\n    y = u;\r\n  end when;\r\n\r\n  annotation (\r\n   defaultComponentName=\"assignClock1\",\r\n   Icon(coordinateSystem(\r\n        preserveAspectRatio=false,\r\n        extent={{-100,-100},{100,100}},\r\n        initialScale=0.06),\r\n                     graphics={\r\n        Text(\r\n          extent={{-150,150},{150,110}},\r\n          textString=\"%name\",\r\n          textColor={0,0,255}),\r\n        Text(\r\n          extent={{0,-32},{180,-82}},\r\n          textColor={0,0,0},\r\n          textString=\"n=%n\"),\r\n        Line(points={{-80,-60},{-40,-60},{-40,0},{\r\n              0,0},{0,0},{0,0},{0,80},{40,80},{40,40},{80,40},{80,0},{80,\r\n              0},{80,0},{100,0}},color={255,0,255},\r\n          pattern=LinePattern.Dot),                Line(\r\n          points={{-80,-60},{-80,0},{-106,0}},\r\n          color={255,0,255},\r\n          pattern=LinePattern.Dot),\r\n        Ellipse(\r\n          extent={{-90,-50},{-70,-70}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{-50,10},{-30,-10}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{-10,90},{10,70}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{30,50},{50,30}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{70,10},{90,-10}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Line(\r\n          points={{0,-100},{0,70}},\r\n          color={175,175,175},\r\n          pattern=LinePattern.Dot,\r\n          thickness=0.5)}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis block for Boolean signals works similarly as the corresponding block for Real signals (see <a href=\\\"modelica://Modelica.Clocked.RealSignals.Sampler.AssignClockVectorized\\\">RealSignals.Sampler.AssignClockVectorized</a>).\r\n</p>\r\n<p>\r\nAnalog to the corresponding Real signal block example there exists an elementary <a href=\\\"modelica://Modelica.Clocked.Examples.Elementary.BooleanSignals.AssignClockVectorized\\\">example</a> for this Boolean block.\r\n</p>\r\n</html>\"));\r\nend AssignClockVectorized", "checksum": "2cdb0ae4c338ba9dd8e3a35fa3b013a96ee95fdc", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\AssignClockVectorized.mo:2-82", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 6, "dependency_count": 7, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 6.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation when(条件成立時) clock then y = u", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "signal", "unit": "n", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Clocked.ClockSignals.Interfaces", "FillPattern", "LinePattern", "Modelica.Blocks.Interfaces", "Modelica.Clocked.Examples.Elementary.BooleanSignals", "Modelica.Clocked.RealSignals.Sampler", "RealSignals.Sampler"], "inheritance_chain": []}
{"fqn": "Modelica.Clocked.ClockSignals.Clocks.PeriodicRealClock", "kind": "block", "name": "PeriodicRealClock", "package_path": ["Modelica", "Clocked", "ClockSignals", "Clocks"], "extends": ["Clocked.ClockSignals.Interfaces.PartialPeriodicClock"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n  if useSolver then\r\n     y = Clock(Clock(period), solverMethod=solverMethod)", "else\r\n     y = Clock(period)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo", "start_line": 7, "end_line": 12, "start_col": 1, "end_col": 10}}, {"equations": ["if useSolver then\r\n     y = Clock(Clock(period), solverMethod=solverMethod)", "else\r\n     y = Clock(period)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo", "start_line": 8, "end_line": 12, "start_col": 3, "end_col": 10}}, {"equations": ["y = Clock(period)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo", "start_line": 11, "end_line": 11, "start_col": 6, "end_col": 24}}, {"equations": ["y = Clock(Clock(period), solverMethod=solverMethod)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo", "start_line": 9, "end_line": 9, "start_col": 6, "end_col": 58}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo", "start_line": 7, "end_line": 7, "start_col": 1, "end_col": 9}}], "docstring": "extends Clocked.ClockSignals.Interfaces.PartialPeriodicClock | eq: equation if(条件なら)(条件なら) useSolver then y = Clock(Clock(period), solverMethod=solverMethod)", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo", "start_line": 2, "end_line": 68, "start_col": 1, "end_col": 22}, "code_text": "block PeriodicRealClock\r\n  \"Generate a periodic clock signal with a period defined by a Real number\"\r\n  parameter SI.Time period\r\n    \"Period of clock (defined as Real number)\" annotation(Evaluate=true);\r\n  extends Clocked.ClockSignals.Interfaces.PartialPeriodicClock;\r\nequation\r\n  if useSolver then\r\n     y = Clock(Clock(period), solverMethod=solverMethod);\r\n  else\r\n     y = Clock(period);\r\n  end if;\r\n\r\n  annotation (\r\n     defaultComponentName=\"periodicClock1\",\r\n    Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,-100},{100,100}}, initialScale=0.06),\r\n                    graphics={\r\n        Rectangle(\r\n          extent={{20,58},{40,46}},\r\n          fillPattern=FillPattern.Solid,\r\n          rotation=45,\r\n          origin={-50,-120},\r\n          lineColor={95,95,95},\r\n          fillColor={95,95,95}),\r\n        Rectangle(\r\n          extent={{20,58},{40,46}},\r\n          fillPattern=FillPattern.Solid,\r\n          rotation=90,\r\n          origin={52,60},\r\n          pattern=LinePattern.None,\r\n          fillColor={95,95,95}),\r\n        Text(\r\n          extent={{-150,-110},{150,-150}},\r\n          textColor={0,0,0},\r\n          textString=\"%period\"),\r\n        Text(\r\n          visible=useSolver,\r\n          extent={{-150,-160},{150,-200}},\r\n          textColor={0,0,0},\r\n          textString=\"%solverMethod\")}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis component generates a periodic clock that starts ticking when\r\nthe simulation starts. The <strong>period</strong> is defined in seconds\r\nby a <strong>Real</strong> number. If clocks are synchronized relatively to each other\r\nthen only one of the clocks can be defined with PeriodicRealClock.\r\n</p>\r\n\r\n<p>\r\nFor an introduction to clocks see\r\n<a href=\\\"modelica://Modelica.Clocked.UsersGuide.Clocks\\\">UsersGuide.Clocks</a>.\r\nIf exact, integer based, time synchronization with absolute period definitions is\r\ndesired, use block\r\n<a href=\\\"modelica://Modelica.Clocked.ClockSignals.Clocks.PeriodicExactClock\\\">PeriodicExactClock</a>\r\nto generate a periodic clock signal.\r\n</p>\r\n\r\n<p>\r\nIf a clock is associated to a clocked continuous-time partition, then an <strong>integrator</strong>\r\nhas to be defined that is used to integrate the partition from the previous\r\nto the current clock tick. This is performed by setting parameter <strong>useSolver</strong>\r\n= <strong>true</strong> and defining the integration method as String with\r\nparameter <strong>solver</strong>. Both parameters are in tab <strong>Advanced</strong>.\r\nFor an example, see\r\n<a href=\\\"modelica://Modelica.Clocked.Examples.Systems.ControlledMixingUnit\\\">Examples.Systems.ControlledMixingUnit</a>.\r\n</p>\r\n</html>\"));\r\nend PeriodicRealClock", "checksum": "8ede3cf25a2a96cf46ecd19e1490a4f930973ce5", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\ClockSignals\\Clocks\\PeriodicRealClock.mo:2-68", "component_count": 0, "connection_count": 0, "variable_count": 2, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 5, "dependency_count": 9, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 5.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation if(条件なら) useSolver then y = Clock(Clock(period), solverMethod=solverMethod)", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "y", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "Clock(period)", "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["Clocked.ClockSignals.Interfaces", "Examples.Systems", "FillPattern", "LinePattern", "Modelica.Clocked.ClockSignals.Clocks", "Modelica.Clocked.Examples.Systems", "Modelica.Clocked.UsersGuide", "SI", "UsersGuide"], "inheritance_chain": ["Clocked.ClockSignals.Interfaces.PartialPeriodicClock"]}
{"fqn": "Modelica.Blocks.MathBoolean.Not", "kind": "block", "name": "Not", "package_path": ["Modelica", "Blocks", "MathBoolean"], "extends": ["Modelica.Blocks.Interfaces.PartialBooleanSISO_small"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    y = not u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathBoolean.mo", "start_line": 276, "end_line": 277, "start_col": 3, "end_col": 15}}, {"equations": ["y = not u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathBoolean.mo", "start_line": 277, "end_line": 277, "start_col": 5, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathBoolean.mo", "start_line": 276, "end_line": 276, "start_col": 3, "end_col": 11}}], "docstring": "extends Modelica.Blocks.Interfaces.PartialBooleanSISO_small | eq: equation y = not u", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathBoolean.mo", "start_line": 273, "end_line": 300, "start_col": 3, "end_col": 10}, "code_text": "block Not \"Logical 'not': y = not u\"\r\n    extends Modelica.Blocks.Interfaces.PartialBooleanSISO_small;\r\n\r\n  equation\r\n    y = not u;\r\n    annotation (defaultComponentName=\"not1\", Icon(graphics={Text(\r\n              extent={{-98,40},{42,-40}},\r\n              textString=\"not\")}),\r\n      Documentation(info=\"<html>\r\n<p>\r\nThe output is <strong>false</strong> if at least one input is <strong>true</strong>, otherwise\r\nthe output is <strong>true</strong>.\r\n</p>\r\n\r\n<p>\r\nThe input connector is a vector of Boolean input signals.\r\nWhen a connection line is drawn, the dimension of the input\r\nvector is enlarged by one and the connection is automatically\r\nconnected to this new free index (thanks to the\r\nconnectorSizing annotation).\r\n</p>\r\n\r\n<p>\r\nThe usage is demonstrated, e.g., in example\r\n<a href=\\\"modelica://Modelica.Blocks.Examples.BooleanNetwork1\\\">Modelica.Blocks.Examples.BooleanNetwork1</a>.\r\n</p>\r\n</html>\"));\r\n  end Not", "checksum": "c55bb29847bbaf60a5437010c3905d908fa36ed1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\MathBoolean.mo:273-300", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 3, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 3.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation y = not u", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "not u", "comment": null}], "physical_quantities": [], "dependencies": ["Modelica.Blocks.Examples", "Modelica.Blocks.Interfaces", "e"], "inheritance_chain": ["Modelica.Blocks.Interfaces.PartialBooleanSISO_small"]}
{"fqn": "Modelica.Blocks.Math.Product", "kind": "block", "name": "Product", "package_path": ["Modelica", "Blocks", "Math"], "extends": ["Interfaces.SI2SO"], "imports": [], "parameters": [], "equations": [{"equations": ["equation\r\n    y = u1*u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Math.mo", "start_line": 975, "end_line": 976, "start_col": 3, "end_col": 15}}, {"equations": ["y = u1*u2"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Math.mo", "start_line": 976, "end_line": 976, "start_col": 5, "end_col": 15}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Math.mo", "start_line": 975, "end_line": 975, "start_col": 3, "end_col": 11}}], "docstring": "extends Interfaces.SI2SO | eq: equation y = u1*u2", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Math.mo", "start_line": 972, "end_line": 998, "start_col": 3, "end_col": 14}, "code_text": "block Product \"Output product of the two inputs\"\r\n    extends Interfaces.SI2SO;\r\n\r\n  equation\r\n    y = u1*u2;\r\n    annotation (\r\n      Documentation(info=\"<html>\r\n<p>\r\nThis blocks computes the output <strong>y</strong>\r\nas <em>product</em> of the two inputs <strong>u1</strong> and <strong>u2</strong>:\r\n</p>\r\n<blockquote><pre>\r\ny = u1 * u2;\r\n</pre></blockquote>\r\n\r\n</html>\"),\r\n      Icon(coordinateSystem(\r\n          preserveAspectRatio=true,\r\n          extent={{-100,-100},{100,100}}), graphics={\r\n          Line(points={{-100,60},{-40,60},{-30,40}}, color={0,0,127}),\r\n          Line(points={{-100,-60},{-40,-60},{-30,-40}}, color={0,0,127}),\r\n          Line(points={{50,0},{100,0}}, color={0,0,127}),\r\n          Line(points={{-30,0},{30,0}}),\r\n          Line(points={{-15,25.99},{15,-25.99}}),\r\n          Line(points={{-15,-25.99},{15,25.99}}),\r\n          Ellipse(lineColor={0,0,127}, extent={{-50,-50},{50,50}})}));\r\n  end Product", "checksum": "f67b56b811fbfdb1f116c31c9e2df801b4099b8a", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Math.mo:972-998", "component_count": 0, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 3, "dependency_count": 1, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 3.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation y = u1*u2", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [{"name": "y", "type_name": "equation", "prefixes": [], "attributes": {}, "binding_equation": "u1*u2", "comment": null}], "physical_quantities": [], "dependencies": ["Interfaces"], "inheritance_chain": ["Interfaces.SI2SO"]}
{"fqn": "Modelica.Clocked.BooleanSignals.Sampler.Utilities.UpSample", "kind": "block", "name": "UpSample", "package_path": ["Modelica", "Clocked", "BooleanSignals", "Sampler", "Utilities"], "extends": [], "imports": [], "parameters": [{"name": "inferFactor", "type": "Boolean", "default": "true \"= true, if upsampling factor is inferred\" parameter Integer factor(min=1)=1 \"Upsampling factor >= 1 (if inferFactor=false)\" Modelica.Blocks.Interfaces.BooleanInput u \"Connect", "description": null}], "equations": [{"equations": ["equation\r\n  when Clock() then // clock of u\r\n     dummy = u", "b = not previous(b)", "end when", "when Clock() then // clock of y\r\n     b_super = superSample(b)", "if inferFactor then\r\n        u_super = superSample(u)", "else\r\n        u_super = superSample(u,factor)", "end if", "y = if b_super <> previous(b_super) then u_super else false", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 21, "end_line": 35, "start_col": 1, "end_col": 12}}, {"equations": ["when Clock() then // clock of u\r\n     dummy = u", "b = not previous(b)", "end when", "when Clock() then // clock of y\r\n     b_super = superSample(b)", "if inferFactor then\r\n        u_super = superSample(u)", "else\r\n        u_super = superSample(u,factor)", "end if", "y = if b_super <> previous(b_super) then u_super else false", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 22, "end_line": 35, "start_col": 3, "end_col": 12}}, {"equations": ["when Clock() then // clock of y\r\n     b_super = superSample(b)", "if inferFactor then\r\n        u_super = superSample(u)", "else\r\n        u_super = superSample(u,factor)", "end if", "y = if b_super <> previous(b_super) then u_super else false", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 27, "end_line": 35, "start_col": 3, "end_col": 11}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 35, "end_line": 35, "start_col": 7, "end_col": 11}}, {"equations": ["b_super = superSample(b)", "if inferFactor then\r\n        u_super = superSample(u)", "else\r\n        u_super = superSample(u,factor)", "end if", "y = if b_super <> previous(b_super) then u_super else false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 28, "end_line": 34, "start_col": 6, "end_col": 66}}, {"equations": ["y = if b_super <> previous(b_super) then u_super else false"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 34, "end_line": 34, "start_col": 6, "end_col": 65}}, {"equations": ["if inferFactor then\r\n        u_super = superSample(u)", "else\r\n        u_super = superSample(u,factor)", "end if"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 29, "end_line": 33, "start_col": 6, "end_col": 12}}, {"equations": ["u_super = superSample(u,factor)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 32, "end_line": 32, "start_col": 9, "end_col": 41}}, {"equations": ["u_super = superSample(u)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 30, "end_line": 30, "start_col": 9, "end_col": 34}}, {"equations": ["b_super = superSample(b)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 28, "end_line": 28, "start_col": 6, "end_col": 30}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 27, "end_line": 27, "start_col": 3, "end_col": 7}}, {"equations": ["when Clock() then // clock of u\r\n     dummy = u", "b = not previous(b)", "end when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 22, "end_line": 25, "start_col": 3, "end_col": 11}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 25, "end_line": 25, "start_col": 7, "end_col": 11}}, {"equations": ["dummy = u", "b = not previous(b)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 23, "end_line": 24, "start_col": 6, "end_col": 26}}, {"equations": ["b = not previous(b)"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 24, "end_line": 24, "start_col": 6, "end_col": 25}}, {"equations": ["dummy = u"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 23, "end_line": 23, "start_col": 6, "end_col": 15}}, {"equations": ["when"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 22, "end_line": 22, "start_col": 3, "end_col": 7}}, {"equations": ["equation"], "span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 21, "end_line": 21, "start_col": 1, "end_col": 9}}], "docstring": "components: Boolean×3 | params: inferFactor | eq: equation when(条件成立時)(条件成立時) Clock() then // clock of u dummy = u", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo", "start_line": 2, "end_line": 117, "start_col": 1, "end_col": 13}, "code_text": "block UpSample\r\n  \"Upsample the clocked Boolean input signal and provide it as clocked output signal\"\r\n  parameter Boolean inferFactor=true\r\n    \"= true, if upsampling factor is inferred\"  annotation(Evaluate=true, choices(checkBox=true));\r\n  parameter Integer factor(min=1)=1\r\n    \"Upsampling factor >= 1 (if inferFactor=false)\" annotation(Evaluate=true, Dialog(enable=not inferFactor));\r\n  Modelica.Blocks.Interfaces.BooleanInput\r\n                                       u\r\n    \"Connector of clocked, Boolean input signal\"\r\n    annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));\r\n  Modelica.Blocks.Interfaces.BooleanOutput\r\n                                        y\r\n    \"Connector of clocked, Boolean output signal (clock of y is faster as clock of u)\"\r\n    annotation (Placement(transformation(extent={{100,-10},{120,10}})));\r\nprotected\r\n  Boolean dummy annotation(HideResult=true);\r\n  Boolean b(start=false);\r\n  Boolean b_super(start=false);\r\n  Boolean u_super;\r\nequation\r\n  when Clock() then // clock of u\r\n     dummy = u;\r\n     b = not previous(b);\r\n  end when;\r\n\r\n  when Clock() then // clock of y\r\n     b_super = superSample(b);\r\n     if inferFactor then\r\n        u_super = superSample(u);\r\n     else\r\n        u_super = superSample(u,factor);\r\n     end if;\r\n     y = if b_super <> previous(b_super) then u_super else false;\r\n  end when;\r\n\r\n  annotation (\r\n   defaultComponentName=\"upSample1\",\r\n   Icon(coordinateSystem(\r\n        preserveAspectRatio=true,\r\n        extent={{-100,-100},{100,100}},\r\n        initialScale=0.06),\r\n                     graphics={\r\n        Line(\r\n          points={{-78,-60},{40,-60},{40,0},{40,0}},\r\n          color={215,215,215},\r\n          pattern=LinePattern.Dot), Line(points={{-80,-60},{-40,-60},{-40,-60},{-40,0},\r\n              {-40,0},{0,0},{40,0},{40,80},{40,80},{40,80},{80,80},{80,0},{80,0},\r\n              {100,0}},          color={255,0,255},\r\n          pattern=LinePattern.Dot),                Line(\r\n          points={{-80,-60},{-80,0},{-100,0}},\r\n          color={255,0,255},\r\n          pattern=LinePattern.Dot),\r\n        Text(\r\n          extent={{-200,175},{200,110}},\r\n          textColor={0,0,255},\r\n          textString=\"%name\"),\r\n        Ellipse(\r\n          extent={{-95,-45},{-65,-75}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{-83,-57},{-77,-63}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,0,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{25,96},{55,66}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{37,83},{43,77}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,0,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{-55,16},{-25,-14}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{-6,16},{24,-14}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Ellipse(\r\n          extent={{64,16},{94,-14}},\r\n          lineColor={255,0,255},\r\n          fillColor={255,255,255},\r\n          fillPattern=FillPattern.Solid),\r\n        Text(visible=not inferFactor,\r\n          extent={{-200,-80},{200,-145}},\r\n          textString=\"%factor\"),\r\n        Line(\r\n          points={{80,80},{120,80}},\r\n          color={215,215,215},\r\n          pattern=LinePattern.Dot),\r\n        Polygon(\r\n          points={{25,0},{5,20},{5,10},{-25,10},{-25,-10},{5,-10},{5,-20},\r\n              {25,0}},\r\n          fillColor={95,95,95},\r\n          fillPattern=FillPattern.Solid,\r\n          lineColor={95,95,95},\r\n          origin={-71,52},\r\n          rotation=90)}),\r\n    Documentation(info=\"<html>\r\n<p>\r\nThis block for Boolean signals works similarly as the corresponding block for Real signals (see\r\n<a href=\\\"modelica://Modelica.Clocked.RealSignals.Sampler.Utilities.UpSample\\\">RealSignals.Sampler.Utilities.UpSample</a>).\r\n</p>\r\n<p>\r\nAnalog to the corresponding Real signal block example there exists an elementary <a href=\\\"modelica://Modelica.Clocked.Examples.Elementary.BooleanSignals.UpSample\\\">example</a> for this Boolean block.\r\n</p>\r\n</html>\"));\r\nend UpSample", "checksum": "bcc3bac7871ad1c6b22fd74755afb92f9884c676", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Clocked\\BooleanSignals\\Sampler\\Utilities\\UpSample.mo:2-117", "component_count": 3, "connection_count": 0, "variable_count": 5, "physical_quantity_count": 0, "parameter_count": 1, "equation_count": 18, "dependency_count": 6, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 24.5, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "block", "equation_summary": "equation when(条件成立時) Clock() then // clock of u dummy = u", "search_keywords": ["Boolean", "basic"]}, "components": [{"name": "b", "type_name": "Boolean", "prefixes": [], "modifications": {"start": "false"}, "condition": null, "array_dims": null, "comment": null}, {"name": "b_super", "type_name": "Boolean", "prefixes": [], "modifications": {"start": "false"}, "condition": null, "array_dims": null, "comment": null}, {"name": "u_super", "type_name": "Boolean", "prefixes": [], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "b", "type_name": "Boolean", "prefixes": [], "attributes": {"start": "false"}, "binding_equation": null, "comment": null}, {"name": "b_super", "type_name": "Boolean", "prefixes": [], "attributes": {"start": "false"}, "binding_equation": null, "comment": null}, {"name": "u_super", "type_name": "else", "prefixes": [], "attributes": {}, "binding_equation": "superSample(u,factor)", "comment": null}, {"name": "when", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "if", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [], "dependencies": ["FillPattern", "LinePattern", "Modelica.Blocks.Interfaces", "Modelica.Clocked.Examples.Elementary.BooleanSignals", "Modelica.Clocked.RealSignals.Sampler.Utilities", "RealSignals.Sampler.Utilities"], "inheritance_chain": []}
{"fqn": "Modelica.Blocks.Types.ExternalCombiTable2D", "kind": "class", "name": "ExternalCombiTable2D", "package_path": ["Modelica", "Blocks", "Types"], "extends": ["ExternalObject", "Modelica.Icons.Function"], "imports": [], "parameters": [], "equations": [], "docstring": "extends ExternalObject | components: String×3, Real×1, Modelica.Blocks.Types.Smoothness×1 | units: :, :", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Types.mo", "start_line": 187, "end_line": 222, "start_col": 3, "end_col": 27}, "code_text": "class ExternalCombiTable2D\r\n    \"External object of 2-dim. table defined by matrix\"\r\n    extends ExternalObject;\r\n\r\n    function constructor \"Initialize 2-dim. table defined by matrix\"\r\n      extends Modelica.Icons.Function;\r\n      input String tableName \"Table name\";\r\n      input String fileName \"File name\";\r\n      input Real table[:, :];\r\n      input Modelica.Blocks.Types.Smoothness smoothness;\r\n      input Modelica.Blocks.Types.Extrapolation extrapolation=Modelica.Blocks.Types.Extrapolation.LastTwoPoints;\r\n      input Boolean verboseRead=true \"= true: Print info message; = false: No info message\";\r\n      input String delimiter=\",\" \"Column delimiter character for CSV file\";\r\n      input Integer nHeaderLines=0 \"Number of header lines to ignore for CSV file\";\r\n      output ExternalCombiTable2D externalCombiTable2D;\r\n    external \"C\" externalCombiTable2D = ModelicaStandardTables_CombiTable2D_init3(\r\n            fileName,\r\n            tableName,\r\n            table,\r\n            size(table, 1),\r\n            size(table, 2),\r\n            smoothness,\r\n            extrapolation,\r\n            verboseRead,\r\n            delimiter,\r\n            nHeaderLines) annotation (IncludeDirectory=\"modelica://Modelica/Resources/C-Sources\", Include=\"#include \\\"ModelicaStandardTables.h\\\"\", Library={\"ModelicaStandardTables\", \"ModelicaIO\", \"ModelicaMatIO\", \"zlib\"});\r\n    end constructor;\r\n\r\n    function destructor \"Terminate 2-dim. table defined by matrix\"\r\n      extends Modelica.Icons.Function;\r\n      input ExternalCombiTable2D externalCombiTable2D;\r\n    external \"C\" ModelicaStandardTables_CombiTable2D_close(externalCombiTable2D)\r\n        annotation (IncludeDirectory=\"modelica://Modelica/Resources/C-Sources\", Include=\"#include \\\"ModelicaStandardTables.h\\\"\", Library={\"ModelicaStandardTables\", \"ModelicaIO\", \"ModelicaMatIO\", \"zlib\"});\r\n    end destructor;\r\n\r\n  end ExternalCombiTable2D", "checksum": "15adba0711248b3101bf49f486e6b3c953b29afb", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Blocks\\Types.mo:187-222", "component_count": 9, "connection_count": 0, "variable_count": 12, "physical_quantity_count": 1, "parameter_count": 0, "equation_count": 0, "dependency_count": 4, "has_physical_interface": true, "interface_component_count": 9, "has_connections": false, "is_composite_model": false, "complexity_score": 18.0, "model_type": "component", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "class", "search_keywords": [":, :", "Boolean", "ExternalCombiTable2D", "Integer", "Modelica.Blocks.Types.Extrapolation", "Modelica.Blocks.Types.Smoothness", "Real", "String", "component"]}, "components": [{"name": "tableName", "type_name": "String", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "Table name"}, {"name": "fileName", "type_name": "String", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": "File name"}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": "[:, :]", "comment": null}, {"name": "smoothness", "type_name": "Modelica.Blocks.Types.Smoothness", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "extrapolation", "type_name": "Modelica.Blocks.Types.Extrapolation", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "verboseRead", "type_name": "Boolean", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "delimiter", "type_name": "String", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "nHeaderLines", "type_name": "Integer", "prefixes": ["input"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}, {"name": "externalCombiTable2D", "type_name": "ExternalCombiTable2D", "prefixes": ["output"], "modifications": {}, "condition": null, "array_dims": null, "comment": null}], "connections": [], "variables": [{"name": "ExternalObject", "type_name": "extends", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "tableName", "type_name": "String", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"Table name\""}, {"name": "fileName", "type_name": "String", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": "\"File name\""}, {"name": "table", "type_name": "Real", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "smoothness", "type_name": "Modelica.Blocks.Types.Smoothness", "prefixes": ["input"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "extrapolation", "type_name": "Modelica.Blocks.Types.Extrapolation", "prefixes": ["input"], "attributes": {}, "binding_equation": "Modelica.Blocks.Types.Extrapolation.LastTwoPoints", "comment": null}, {"name": "verboseRead", "type_name": "Boolean", "prefixes": ["input"], "attributes": {}, "binding_equation": "true \"= true: Print info message", "comment": null}, {"name": "delimiter", "type_name": "String", "prefixes": ["input"], "attributes": {}, "binding_equation": "\",\" \"Column delimiter character for CSV file\"", "comment": null}, {"name": "nHeaderLines", "type_name": "Integer", "prefixes": ["input"], "attributes": {}, "binding_equation": "0 \"Number of header lines to ignore for CSV file\"", "comment": null}, {"name": "externalCombiTable2D", "type_name": "ExternalCombiTable2D", "prefixes": ["input", "output"], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "constructor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}, {"name": "destructor", "type_name": "end", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": null}], "physical_quantities": [{"name": "name", "unit": ":, :", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Blocks.Types", "Modelica.Blocks.Types.Extrapolation", "Modelica.Icons", "ModelicaStandardTables"], "inheritance_chain": ["ExternalObject", "Modelica.Icons.Function"]}
{"fqn": "Modelica.Magnetic.QuasiStatic.FundamentalWave.UsersGuide.Contact", "kind": "class", "name": "Contact", "package_path": ["Modelica", "Magnetic", "QuasiStatic", "FundamentalWave", "UsersGuide"], "extends": ["Modelica.Icons.Contact"], "imports": [], "parameters": [], "equations": [], "docstring": "extends Modelica.Icons.Contact", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\UsersGuide\\Contact.mo", "start_line": 2, "end_line": 21, "start_col": 1, "end_col": 12}, "code_text": "class Contact \"Contact\"\r\n  extends Modelica.Icons.Contact;\r\n  annotation (Documentation(info=\"<html>\r\n<h4>Library officers</h4>\r\n\r\n<p>\r\n<strong>Dr. Christian Kral</strong><br>\r\n<a href=\\\"https://christiankral.net/\\\">Electric Machines, Drives and Systems</a><br>\r\nA-1060 Vienna, Austria<br>\r\nemail: <a href=\\\"mailto:dr.christian.kral@gmail.com\\\">dr.christian.kral@gmail.com</a>\r\n</p>\r\n\r\n<p>\r\n<strong>Anton Haumer</strong><br>\r\n<a href=\\\"https://www.haumer.at\\\">Technical Consulting &amp; Electrical Engineering</a><br>\r\nD-93049 Regensburg, Germany<br>\r\nemail: <a href=\\\"mailto:a.haumer@haumer.at\\\">a.haumer@haumer.at</a><br>\r\n</p>\r\n</html>\"));\r\nend Contact", "checksum": "ed9a447f3f6af80f1cd69d950bb0bf7befa443c3", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Magnetic\\QuasiStatic\\FundamentalWave\\UsersGuide\\Contact.mo:2-21", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 7, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "class", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["Modelica.Icons", "a", "christiankral", "dr.christian", "gmail", "haumer", "www.haumer"], "inheritance_chain": ["Modelica.Icons.Contact"]}
{"fqn": "Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.Plug", "kind": "connector", "name": "Plug", "package_path": ["Modelica", "Electrical", "QuasiStatic", "Polyphase", "Interfaces"], "extends": [], "imports": [], "parameters": [{"name": "m", "type": "Integer", "default": "3 \"Number of phases\" QuasiStatic.SinglePhase.Interfaces.Pin pin[m] \"Pins of plug\"", "description": null}], "equations": [], "docstring": "components: QuasiStatic.SinglePhase.Interfaces.Pin×1 | params: m | units: m", "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Interfaces\\Plug.mo", "start_line": 2, "end_line": 24, "start_col": 1, "end_col": 9}, "code_text": "connector Plug \"Quasi-static polyphase plug\"\r\n  parameter Integer m=3 \"Number of phases\" annotation(Evaluate=true);\r\n  QuasiStatic.SinglePhase.Interfaces.Pin pin[m] \"Pins of plug\";\r\n  annotation (Documentation(info=\"<html>\r\n\r\n<p>\r\nThis polyphase plug contains a vector of <em>m</em> <a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.Pin\\\">single-phase pins</a>.\r\nThe <a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.PositivePlug\\\">positive</a> and\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.NegativePlug\\\">negative plug</a> are\r\nderived from this base connector.\r\n</p>\r\n\r\n<h4>See also</h4>\r\n\r\n<p>\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.Pin\\\">Pin</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.PositivePin\\\">PositivePin</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces.NegativePin\\\">NegativePin</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.PositivePlug\\\">PositivePlug</a>,\r\n<a href=\\\"modelica://Modelica.Electrical.QuasiStatic.Polyphase.Interfaces.NegativePlug\\\">NegativePlug</a>\r\n</p>\r\n</html>\"));\r\nend Plug", "checksum": "6749bdecc45ed2ef8543ce48385a214fd55731c4", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\QuasiStatic\\Polyphase\\Interfaces\\Plug.mo:2-24", "component_count": 1, "connection_count": 0, "variable_count": 1, "physical_quantity_count": 1, "parameter_count": 1, "equation_count": 0, "dependency_count": 3, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 2.5, "model_type": "basic", "physical_domains": ["mechanical"], "is_multidomain": false, "aliases": [], "node_group": "connector", "search_keywords": ["QuasiStatic.SinglePhase.Interfaces.Pin", "basic", "mechanical"]}, "components": [{"name": "pin", "type_name": "QuasiStatic.SinglePhase.Interfaces.Pin", "prefixes": [], "modifications": {}, "condition": null, "array_dims": "[m]", "comment": "Pins of plug"}], "connections": [], "variables": [{"name": "pin", "type_name": "QuasiStatic.SinglePhase.Interfaces.Pin", "prefixes": [], "attributes": {}, "binding_equation": null, "comment": "\"Pins of plug\""}], "physical_quantities": [{"name": "phases", "unit": "m", "display_unit": null, "quantity": null, "nominal": null}], "dependencies": ["Modelica.Electrical.QuasiStatic.Polyphase.Interfaces", "Modelica.Electrical.QuasiStatic.SinglePhase.Interfaces", "QuasiStatic.SinglePhase.Interfaces"], "inheritance_chain": []}
{"fqn": "Modelica.Electrical.Analog.Interfaces.PositivePin", "kind": "connector", "name": "PositivePin", "package_path": ["Modelica", "Electrical", "Analog", "Interfaces"], "extends": [], "imports": [], "parameters": [], "equations": [], "docstring": null, "code_span": {"file_path": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Interfaces\\PositivePin.mo", "start_line": 2, "end_line": 40, "start_col": 1, "end_col": 16}, "code_text": "connector PositivePin \"Positive pin of an electrical component\"\r\n  SI.ElectricPotential v \"Potential at the pin\" annotation (\r\n      unassignedMessage=\"An electrical potential cannot be uniquely calculated.\r\nThe reason could be that\r\n- a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)\r\n  to define the zero potential of the electrical circuit, or\r\n- a connector of an electrical component is not connected.\");\r\n  flow SI.Current i \"Current flowing into the pin\" annotation (\r\n      unassignedMessage=\"An electrical current cannot be uniquely calculated.\r\nThe reason could be that\r\n- a ground object is missing (Modelica.Electrical.Analog.Basic.Ground)\r\n  to define the zero potential of the electrical circuit, or\r\n- a connector of an electrical component is not connected.\");\r\n  annotation (defaultComponentName=\"pin_p\",\r\n    Documentation(info=\"<html>\r\n<p>Connectors PositivePin and NegativePin are nearly identical. The only difference is that the icons are different in order to identify more easily the pins of a component. Usually, connector PositivePin is used for the positive and connector NegativePin for the negative pin of an electrical component.</p>\r\n</html>\",             revisions=\"<html>\r\n<ul>\r\n<li><em> 1998   </em>\r\n       by Christoph Clauss<br> initially implemented<br>\r\n       </li>\r\n</ul>\r\n</html>\"),\r\n    Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{100,\r\n            100}}), graphics={Rectangle(\r\n          extent={{-100,100},{100,-100}},\r\n          lineColor={0,0,255},\r\n          fillColor={0,0,255},\r\n          fillPattern=FillPattern.Solid)}),\r\n    Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{\r\n            100,100}}), graphics={Rectangle(\r\n          extent={{-40,40},{40,-40}},\r\n          lineColor={0,0,255},\r\n          fillColor={0,0,255},\r\n          fillPattern=FillPattern.Solid), Text(\r\n          extent={{-160,110},{40,50}},\r\n          textColor={0,0,255},\r\n          textString=\"%name\")}));\r\nend PositivePin", "checksum": "7d78106779c12c1e23f0575814c71282864814f1", "meta": {"node_type": "class_definition", "uid": "C:\\python\\250831_RagModelica\\ModelicaStandardLibrary\\Modelica\\Electrical\\Analog\\Interfaces\\PositivePin.mo:2-40", "component_count": 0, "connection_count": 0, "variable_count": 0, "physical_quantity_count": 0, "parameter_count": 0, "equation_count": 0, "dependency_count": 3, "has_physical_interface": false, "interface_component_count": 0, "has_connections": false, "is_composite_model": false, "complexity_score": 0.0, "model_type": "basic", "physical_domains": [], "is_multidomain": false, "aliases": [], "node_group": "connector", "search_keywords": ["basic"]}, "components": [], "connections": [], "variables": [], "physical_quantities": [], "dependencies": ["FillPattern", "Modelica.Electrical.Analog.Basic", "SI"], "inheritance_chain": []}
